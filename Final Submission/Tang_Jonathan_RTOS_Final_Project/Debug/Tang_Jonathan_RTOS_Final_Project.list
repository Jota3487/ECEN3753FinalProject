
Tang_Jonathan_RTOS_Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef98  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001828  0800f148  0800f148  0001f148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010970  08010970  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  08010970  08010970  00020970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010978  08010978  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010978  08010978  00020978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801097c  0801097c  0002097c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08010980  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030084  2**0
                  CONTENTS
 10 .bss          0002cfc0  20000088  20000088  00030088  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2002d048  2002d048  00030088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00023a87  00000000  00000000  000300f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004ca0  00000000  00000000  00053b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001cf0  00000000  00000000  00058820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001617  00000000  00000000  0005a510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002afb9  00000000  00000000  0005bb27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020e2b  00000000  00000000  00086ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f4ace  00000000  00000000  000a790b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008914  00000000  00000000  0019c3dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000eb  00000000  00000000  001a4cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f130 	.word	0x0800f130

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	0800f130 	.word	0x0800f130

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	2002c480 	.word	0x2002c480
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_drsub>:
 8000330:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000334:	e002      	b.n	800033c <__adddf3>
 8000336:	bf00      	nop

08000338 <__aeabi_dsub>:
 8000338:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800033c <__adddf3>:
 800033c:	b530      	push	{r4, r5, lr}
 800033e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000342:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000346:	ea94 0f05 	teq	r4, r5
 800034a:	bf08      	it	eq
 800034c:	ea90 0f02 	teqeq	r0, r2
 8000350:	bf1f      	itttt	ne
 8000352:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000356:	ea55 0c02 	orrsne.w	ip, r5, r2
 800035a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800035e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000362:	f000 80e2 	beq.w	800052a <__adddf3+0x1ee>
 8000366:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800036a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800036e:	bfb8      	it	lt
 8000370:	426d      	neglt	r5, r5
 8000372:	dd0c      	ble.n	800038e <__adddf3+0x52>
 8000374:	442c      	add	r4, r5
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	ea82 0000 	eor.w	r0, r2, r0
 8000382:	ea83 0101 	eor.w	r1, r3, r1
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	2d36      	cmp	r5, #54	; 0x36
 8000390:	bf88      	it	hi
 8000392:	bd30      	pophi	{r4, r5, pc}
 8000394:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000398:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800039c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003a4:	d002      	beq.n	80003ac <__adddf3+0x70>
 80003a6:	4240      	negs	r0, r0
 80003a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003b8:	d002      	beq.n	80003c0 <__adddf3+0x84>
 80003ba:	4252      	negs	r2, r2
 80003bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c0:	ea94 0f05 	teq	r4, r5
 80003c4:	f000 80a7 	beq.w	8000516 <__adddf3+0x1da>
 80003c8:	f1a4 0401 	sub.w	r4, r4, #1
 80003cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d0:	db0d      	blt.n	80003ee <__adddf3+0xb2>
 80003d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003d6:	fa22 f205 	lsr.w	r2, r2, r5
 80003da:	1880      	adds	r0, r0, r2
 80003dc:	f141 0100 	adc.w	r1, r1, #0
 80003e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003e4:	1880      	adds	r0, r0, r2
 80003e6:	fa43 f305 	asr.w	r3, r3, r5
 80003ea:	4159      	adcs	r1, r3
 80003ec:	e00e      	b.n	800040c <__adddf3+0xd0>
 80003ee:	f1a5 0520 	sub.w	r5, r5, #32
 80003f2:	f10e 0e20 	add.w	lr, lr, #32
 80003f6:	2a01      	cmp	r2, #1
 80003f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003fc:	bf28      	it	cs
 80003fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000402:	fa43 f305 	asr.w	r3, r3, r5
 8000406:	18c0      	adds	r0, r0, r3
 8000408:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000410:	d507      	bpl.n	8000422 <__adddf3+0xe6>
 8000412:	f04f 0e00 	mov.w	lr, #0
 8000416:	f1dc 0c00 	rsbs	ip, ip, #0
 800041a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800041e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000422:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000426:	d31b      	bcc.n	8000460 <__adddf3+0x124>
 8000428:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800042c:	d30c      	bcc.n	8000448 <__adddf3+0x10c>
 800042e:	0849      	lsrs	r1, r1, #1
 8000430:	ea5f 0030 	movs.w	r0, r0, rrx
 8000434:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000438:	f104 0401 	add.w	r4, r4, #1
 800043c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000440:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000444:	f080 809a 	bcs.w	800057c <__adddf3+0x240>
 8000448:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800044c:	bf08      	it	eq
 800044e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000452:	f150 0000 	adcs.w	r0, r0, #0
 8000456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800045a:	ea41 0105 	orr.w	r1, r1, r5
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000464:	4140      	adcs	r0, r0
 8000466:	eb41 0101 	adc.w	r1, r1, r1
 800046a:	3c01      	subs	r4, #1
 800046c:	bf28      	it	cs
 800046e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000472:	d2e9      	bcs.n	8000448 <__adddf3+0x10c>
 8000474:	f091 0f00 	teq	r1, #0
 8000478:	bf04      	itt	eq
 800047a:	4601      	moveq	r1, r0
 800047c:	2000      	moveq	r0, #0
 800047e:	fab1 f381 	clz	r3, r1
 8000482:	bf08      	it	eq
 8000484:	3320      	addeq	r3, #32
 8000486:	f1a3 030b 	sub.w	r3, r3, #11
 800048a:	f1b3 0220 	subs.w	r2, r3, #32
 800048e:	da0c      	bge.n	80004aa <__adddf3+0x16e>
 8000490:	320c      	adds	r2, #12
 8000492:	dd08      	ble.n	80004a6 <__adddf3+0x16a>
 8000494:	f102 0c14 	add.w	ip, r2, #20
 8000498:	f1c2 020c 	rsb	r2, r2, #12
 800049c:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a0:	fa21 f102 	lsr.w	r1, r1, r2
 80004a4:	e00c      	b.n	80004c0 <__adddf3+0x184>
 80004a6:	f102 0214 	add.w	r2, r2, #20
 80004aa:	bfd8      	it	le
 80004ac:	f1c2 0c20 	rsble	ip, r2, #32
 80004b0:	fa01 f102 	lsl.w	r1, r1, r2
 80004b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004b8:	bfdc      	itt	le
 80004ba:	ea41 010c 	orrle.w	r1, r1, ip
 80004be:	4090      	lslle	r0, r2
 80004c0:	1ae4      	subs	r4, r4, r3
 80004c2:	bfa2      	ittt	ge
 80004c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004c8:	4329      	orrge	r1, r5
 80004ca:	bd30      	popge	{r4, r5, pc}
 80004cc:	ea6f 0404 	mvn.w	r4, r4
 80004d0:	3c1f      	subs	r4, #31
 80004d2:	da1c      	bge.n	800050e <__adddf3+0x1d2>
 80004d4:	340c      	adds	r4, #12
 80004d6:	dc0e      	bgt.n	80004f6 <__adddf3+0x1ba>
 80004d8:	f104 0414 	add.w	r4, r4, #20
 80004dc:	f1c4 0220 	rsb	r2, r4, #32
 80004e0:	fa20 f004 	lsr.w	r0, r0, r4
 80004e4:	fa01 f302 	lsl.w	r3, r1, r2
 80004e8:	ea40 0003 	orr.w	r0, r0, r3
 80004ec:	fa21 f304 	lsr.w	r3, r1, r4
 80004f0:	ea45 0103 	orr.w	r1, r5, r3
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f1c4 040c 	rsb	r4, r4, #12
 80004fa:	f1c4 0220 	rsb	r2, r4, #32
 80004fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000502:	fa01 f304 	lsl.w	r3, r1, r4
 8000506:	ea40 0003 	orr.w	r0, r0, r3
 800050a:	4629      	mov	r1, r5
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	fa21 f004 	lsr.w	r0, r1, r4
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f094 0f00 	teq	r4, #0
 800051a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800051e:	bf06      	itte	eq
 8000520:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000524:	3401      	addeq	r4, #1
 8000526:	3d01      	subne	r5, #1
 8000528:	e74e      	b.n	80003c8 <__adddf3+0x8c>
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf18      	it	ne
 8000530:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000534:	d029      	beq.n	800058a <__adddf3+0x24e>
 8000536:	ea94 0f05 	teq	r4, r5
 800053a:	bf08      	it	eq
 800053c:	ea90 0f02 	teqeq	r0, r2
 8000540:	d005      	beq.n	800054e <__adddf3+0x212>
 8000542:	ea54 0c00 	orrs.w	ip, r4, r0
 8000546:	bf04      	itt	eq
 8000548:	4619      	moveq	r1, r3
 800054a:	4610      	moveq	r0, r2
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea91 0f03 	teq	r1, r3
 8000552:	bf1e      	ittt	ne
 8000554:	2100      	movne	r1, #0
 8000556:	2000      	movne	r0, #0
 8000558:	bd30      	popne	{r4, r5, pc}
 800055a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800055e:	d105      	bne.n	800056c <__adddf3+0x230>
 8000560:	0040      	lsls	r0, r0, #1
 8000562:	4149      	adcs	r1, r1
 8000564:	bf28      	it	cs
 8000566:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000570:	bf3c      	itt	cc
 8000572:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000576:	bd30      	popcc	{r4, r5, pc}
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000580:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000584:	f04f 0000 	mov.w	r0, #0
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf1a      	itte	ne
 8000590:	4619      	movne	r1, r3
 8000592:	4610      	movne	r0, r2
 8000594:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000598:	bf1c      	itt	ne
 800059a:	460b      	movne	r3, r1
 800059c:	4602      	movne	r2, r0
 800059e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a2:	bf06      	itte	eq
 80005a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005a8:	ea91 0f03 	teqeq	r1, r3
 80005ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_ui2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f04f 0500 	mov.w	r5, #0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e750      	b.n	8000474 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_i2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ec:	bf48      	it	mi
 80005ee:	4240      	negmi	r0, r0
 80005f0:	f04f 0100 	mov.w	r1, #0
 80005f4:	e73e      	b.n	8000474 <__adddf3+0x138>
 80005f6:	bf00      	nop

080005f8 <__aeabi_f2d>:
 80005f8:	0042      	lsls	r2, r0, #1
 80005fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000602:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000606:	bf1f      	itttt	ne
 8000608:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800060c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000610:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000614:	4770      	bxne	lr
 8000616:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800061a:	bf08      	it	eq
 800061c:	4770      	bxeq	lr
 800061e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000622:	bf04      	itt	eq
 8000624:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000628:	4770      	bxeq	lr
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	e71c      	b.n	8000474 <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_ul2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	e00a      	b.n	8000662 <__aeabi_l2d+0x16>

0800064c <__aeabi_l2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800065a:	d502      	bpl.n	8000662 <__aeabi_l2d+0x16>
 800065c:	4240      	negs	r0, r0
 800065e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000662:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000666:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800066e:	f43f aed8 	beq.w	8000422 <__adddf3+0xe6>
 8000672:	f04f 0203 	mov.w	r2, #3
 8000676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067a:	bf18      	it	ne
 800067c:	3203      	addne	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 fe03 	lsl.w	lr, r1, r3
 800069a:	ea40 000e 	orr.w	r0, r0, lr
 800069e:	fa21 f102 	lsr.w	r1, r1, r2
 80006a2:	4414      	add	r4, r2
 80006a4:	e6bd      	b.n	8000422 <__adddf3+0xe6>
 80006a6:	bf00      	nop

080006a8 <__aeabi_dmul>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006b6:	bf1d      	ittte	ne
 80006b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006bc:	ea94 0f0c 	teqne	r4, ip
 80006c0:	ea95 0f0c 	teqne	r5, ip
 80006c4:	f000 f8de 	bleq	8000884 <__aeabi_dmul+0x1dc>
 80006c8:	442c      	add	r4, r5
 80006ca:	ea81 0603 	eor.w	r6, r1, r3
 80006ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006da:	bf18      	it	ne
 80006dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006e8:	d038      	beq.n	800075c <__aeabi_dmul+0xb4>
 80006ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ee:	f04f 0500 	mov.w	r5, #0
 80006f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006fe:	f04f 0600 	mov.w	r6, #0
 8000702:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000706:	f09c 0f00 	teq	ip, #0
 800070a:	bf18      	it	ne
 800070c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000710:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000714:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000718:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800071c:	d204      	bcs.n	8000728 <__aeabi_dmul+0x80>
 800071e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000722:	416d      	adcs	r5, r5
 8000724:	eb46 0606 	adc.w	r6, r6, r6
 8000728:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800072c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000730:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000734:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000738:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800073c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000740:	bf88      	it	hi
 8000742:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000746:	d81e      	bhi.n	8000786 <__aeabi_dmul+0xde>
 8000748:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800074c:	bf08      	it	eq
 800074e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000752:	f150 0000 	adcs.w	r0, r0, #0
 8000756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000760:	ea46 0101 	orr.w	r1, r6, r1
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000770:	bfc2      	ittt	gt
 8000772:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000776:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800077a:	bd70      	popgt	{r4, r5, r6, pc}
 800077c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000780:	f04f 0e00 	mov.w	lr, #0
 8000784:	3c01      	subs	r4, #1
 8000786:	f300 80ab 	bgt.w	80008e0 <__aeabi_dmul+0x238>
 800078a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800078e:	bfde      	ittt	le
 8000790:	2000      	movle	r0, #0
 8000792:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000796:	bd70      	pople	{r4, r5, r6, pc}
 8000798:	f1c4 0400 	rsb	r4, r4, #0
 800079c:	3c20      	subs	r4, #32
 800079e:	da35      	bge.n	800080c <__aeabi_dmul+0x164>
 80007a0:	340c      	adds	r4, #12
 80007a2:	dc1b      	bgt.n	80007dc <__aeabi_dmul+0x134>
 80007a4:	f104 0414 	add.w	r4, r4, #20
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f305 	lsl.w	r3, r0, r5
 80007b0:	fa20 f004 	lsr.w	r0, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c8:	fa21 f604 	lsr.w	r6, r1, r4
 80007cc:	eb42 0106 	adc.w	r1, r2, r6
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 040c 	rsb	r4, r4, #12
 80007e0:	f1c4 0520 	rsb	r5, r4, #32
 80007e4:	fa00 f304 	lsl.w	r3, r0, r4
 80007e8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ec:	fa01 f204 	lsl.w	r2, r1, r4
 80007f0:	ea40 0002 	orr.w	r0, r0, r2
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007fc:	f141 0100 	adc.w	r1, r1, #0
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 0520 	rsb	r5, r4, #32
 8000810:	fa00 f205 	lsl.w	r2, r0, r5
 8000814:	ea4e 0e02 	orr.w	lr, lr, r2
 8000818:	fa20 f304 	lsr.w	r3, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea43 0302 	orr.w	r3, r3, r2
 8000824:	fa21 f004 	lsr.w	r0, r1, r4
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	fa21 f204 	lsr.w	r2, r1, r4
 8000830:	ea20 0002 	bic.w	r0, r0, r2
 8000834:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f094 0f00 	teq	r4, #0
 8000848:	d10f      	bne.n	800086a <__aeabi_dmul+0x1c2>
 800084a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800084e:	0040      	lsls	r0, r0, #1
 8000850:	eb41 0101 	adc.w	r1, r1, r1
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf08      	it	eq
 800085a:	3c01      	subeq	r4, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1a6>
 800085e:	ea41 0106 	orr.w	r1, r1, r6
 8000862:	f095 0f00 	teq	r5, #0
 8000866:	bf18      	it	ne
 8000868:	4770      	bxne	lr
 800086a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	eb43 0303 	adc.w	r3, r3, r3
 8000874:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000878:	bf08      	it	eq
 800087a:	3d01      	subeq	r5, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1c6>
 800087e:	ea43 0306 	orr.w	r3, r3, r6
 8000882:	4770      	bx	lr
 8000884:	ea94 0f0c 	teq	r4, ip
 8000888:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088c:	bf18      	it	ne
 800088e:	ea95 0f0c 	teqne	r5, ip
 8000892:	d00c      	beq.n	80008ae <__aeabi_dmul+0x206>
 8000894:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000898:	bf18      	it	ne
 800089a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089e:	d1d1      	bne.n	8000844 <__aeabi_dmul+0x19c>
 80008a0:	ea81 0103 	eor.w	r1, r1, r3
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a8:	f04f 0000 	mov.w	r0, #0
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b2:	bf06      	itte	eq
 80008b4:	4610      	moveq	r0, r2
 80008b6:	4619      	moveq	r1, r3
 80008b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008bc:	d019      	beq.n	80008f2 <__aeabi_dmul+0x24a>
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	d102      	bne.n	80008ca <__aeabi_dmul+0x222>
 80008c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008c8:	d113      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	d105      	bne.n	80008dc <__aeabi_dmul+0x234>
 80008d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008d4:	bf1c      	itt	ne
 80008d6:	4610      	movne	r0, r2
 80008d8:	4619      	movne	r1, r3
 80008da:	d10a      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008dc:	ea81 0103 	eor.w	r1, r1, r3
 80008e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008fa:	bd70      	pop	{r4, r5, r6, pc}

080008fc <__aeabi_ddiv>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000902:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800090a:	bf1d      	ittte	ne
 800090c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000910:	ea94 0f0c 	teqne	r4, ip
 8000914:	ea95 0f0c 	teqne	r5, ip
 8000918:	f000 f8a7 	bleq	8000a6a <__aeabi_ddiv+0x16e>
 800091c:	eba4 0405 	sub.w	r4, r4, r5
 8000920:	ea81 0e03 	eor.w	lr, r1, r3
 8000924:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800092c:	f000 8088 	beq.w	8000a40 <__aeabi_ddiv+0x144>
 8000930:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000934:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000938:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800093c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000940:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000944:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000948:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800094c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000950:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000954:	429d      	cmp	r5, r3
 8000956:	bf08      	it	eq
 8000958:	4296      	cmpeq	r6, r2
 800095a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800095e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000962:	d202      	bcs.n	800096a <__aeabi_ddiv+0x6e>
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	1ab6      	subs	r6, r6, r2
 800096c:	eb65 0503 	sbc.w	r5, r5, r3
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800097a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009dc:	d018      	beq.n	8000a10 <__aeabi_ddiv+0x114>
 80009de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009fa:	d1c0      	bne.n	800097e <__aeabi_ddiv+0x82>
 80009fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a00:	d10b      	bne.n	8000a1a <__aeabi_ddiv+0x11e>
 8000a02:	ea41 0100 	orr.w	r1, r1, r0
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a0e:	e7b6      	b.n	800097e <__aeabi_ddiv+0x82>
 8000a10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a14:	bf04      	itt	eq
 8000a16:	4301      	orreq	r1, r0
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a1e:	bf88      	it	hi
 8000a20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a24:	f63f aeaf 	bhi.w	8000786 <__aeabi_dmul+0xde>
 8000a28:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a2c:	bf04      	itt	eq
 8000a2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a36:	f150 0000 	adcs.w	r0, r0, #0
 8000a3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a4c:	bfc2      	ittt	gt
 8000a4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a56:	bd70      	popgt	{r4, r5, r6, pc}
 8000a58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a5c:	f04f 0e00 	mov.w	lr, #0
 8000a60:	3c01      	subs	r4, #1
 8000a62:	e690      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a64:	ea45 0e06 	orr.w	lr, r5, r6
 8000a68:	e68d      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a6e:	ea94 0f0c 	teq	r4, ip
 8000a72:	bf08      	it	eq
 8000a74:	ea95 0f0c 	teqeq	r5, ip
 8000a78:	f43f af3b 	beq.w	80008f2 <__aeabi_dmul+0x24a>
 8000a7c:	ea94 0f0c 	teq	r4, ip
 8000a80:	d10a      	bne.n	8000a98 <__aeabi_ddiv+0x19c>
 8000a82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a86:	f47f af34 	bne.w	80008f2 <__aeabi_dmul+0x24a>
 8000a8a:	ea95 0f0c 	teq	r5, ip
 8000a8e:	f47f af25 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000a92:	4610      	mov	r0, r2
 8000a94:	4619      	mov	r1, r3
 8000a96:	e72c      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000a98:	ea95 0f0c 	teq	r5, ip
 8000a9c:	d106      	bne.n	8000aac <__aeabi_ddiv+0x1b0>
 8000a9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa2:	f43f aefd 	beq.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	e722      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000aac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ab6:	f47f aec5 	bne.w	8000844 <__aeabi_dmul+0x19c>
 8000aba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000abe:	f47f af0d 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000ac2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ac6:	f47f aeeb 	bne.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aca:	e712      	b.n	80008f2 <__aeabi_dmul+0x24a>

08000acc <__gedf2>:
 8000acc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ad0:	e006      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ad2:	bf00      	nop

08000ad4 <__ledf2>:
 8000ad4:	f04f 0c01 	mov.w	ip, #1
 8000ad8:	e002      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ada:	bf00      	nop

08000adc <__cmpdf2>:
 8000adc:	f04f 0c01 	mov.w	ip, #1
 8000ae0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000af6:	d01b      	beq.n	8000b30 <__cmpdf2+0x54>
 8000af8:	b001      	add	sp, #4
 8000afa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000afe:	bf0c      	ite	eq
 8000b00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b04:	ea91 0f03 	teqne	r1, r3
 8000b08:	bf02      	ittt	eq
 8000b0a:	ea90 0f02 	teqeq	r0, r2
 8000b0e:	2000      	moveq	r0, #0
 8000b10:	4770      	bxeq	lr
 8000b12:	f110 0f00 	cmn.w	r0, #0
 8000b16:	ea91 0f03 	teq	r1, r3
 8000b1a:	bf58      	it	pl
 8000b1c:	4299      	cmppl	r1, r3
 8000b1e:	bf08      	it	eq
 8000b20:	4290      	cmpeq	r0, r2
 8000b22:	bf2c      	ite	cs
 8000b24:	17d8      	asrcs	r0, r3, #31
 8000b26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b2a:	f040 0001 	orr.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__cmpdf2+0x64>
 8000b3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3e:	d107      	bne.n	8000b50 <__cmpdf2+0x74>
 8000b40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d1d6      	bne.n	8000af8 <__cmpdf2+0x1c>
 8000b4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4e:	d0d3      	beq.n	8000af8 <__cmpdf2+0x1c>
 8000b50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_cdrcmple>:
 8000b58:	4684      	mov	ip, r0
 8000b5a:	4610      	mov	r0, r2
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	468c      	mov	ip, r1
 8000b60:	4619      	mov	r1, r3
 8000b62:	4663      	mov	r3, ip
 8000b64:	e000      	b.n	8000b68 <__aeabi_cdcmpeq>
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdcmpeq>:
 8000b68:	b501      	push	{r0, lr}
 8000b6a:	f7ff ffb7 	bl	8000adc <__cmpdf2>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	bf48      	it	mi
 8000b72:	f110 0f00 	cmnmi.w	r0, #0
 8000b76:	bd01      	pop	{r0, pc}

08000b78 <__aeabi_dcmpeq>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff fff4 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b80:	bf0c      	ite	eq
 8000b82:	2001      	moveq	r0, #1
 8000b84:	2000      	movne	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmplt>:
 8000b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b90:	f7ff ffea 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b94:	bf34      	ite	cc
 8000b96:	2001      	movcc	r0, #1
 8000b98:	2000      	movcs	r0, #0
 8000b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_dcmple>:
 8000ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba4:	f7ff ffe0 	bl	8000b68 <__aeabi_cdcmpeq>
 8000ba8:	bf94      	ite	ls
 8000baa:	2001      	movls	r0, #1
 8000bac:	2000      	movhi	r0, #0
 8000bae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_dcmpge>:
 8000bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb8:	f7ff ffce 	bl	8000b58 <__aeabi_cdrcmple>
 8000bbc:	bf94      	ite	ls
 8000bbe:	2001      	movls	r0, #1
 8000bc0:	2000      	movhi	r0, #0
 8000bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_dcmpgt>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff ffc4 	bl	8000b58 <__aeabi_cdrcmple>
 8000bd0:	bf34      	ite	cc
 8000bd2:	2001      	movcc	r0, #1
 8000bd4:	2000      	movcs	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2iz>:
 8000bdc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be4:	d215      	bcs.n	8000c12 <__aeabi_d2iz+0x36>
 8000be6:	d511      	bpl.n	8000c0c <__aeabi_d2iz+0x30>
 8000be8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bf0:	d912      	bls.n	8000c18 <__aeabi_d2iz+0x3c>
 8000bf2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c02:	fa23 f002 	lsr.w	r0, r3, r2
 8000c06:	bf18      	it	ne
 8000c08:	4240      	negne	r0, r0
 8000c0a:	4770      	bx	lr
 8000c0c:	f04f 0000 	mov.w	r0, #0
 8000c10:	4770      	bx	lr
 8000c12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c16:	d105      	bne.n	8000c24 <__aeabi_d2iz+0x48>
 8000c18:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	bf08      	it	eq
 8000c1e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c22:	4770      	bx	lr
 8000c24:	f04f 0000 	mov.w	r0, #0
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_d2uiz>:
 8000c2c:	004a      	lsls	r2, r1, #1
 8000c2e:	d211      	bcs.n	8000c54 <__aeabi_d2uiz+0x28>
 8000c30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c34:	d211      	bcs.n	8000c5a <__aeabi_d2uiz+0x2e>
 8000c36:	d50d      	bpl.n	8000c54 <__aeabi_d2uiz+0x28>
 8000c38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c40:	d40e      	bmi.n	8000c60 <__aeabi_d2uiz+0x34>
 8000c42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c52:	4770      	bx	lr
 8000c54:	f04f 0000 	mov.w	r0, #0
 8000c58:	4770      	bx	lr
 8000c5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c5e:	d102      	bne.n	8000c66 <__aeabi_d2uiz+0x3a>
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295
 8000c64:	4770      	bx	lr
 8000c66:	f04f 0000 	mov.w	r0, #0
 8000c6a:	4770      	bx	lr

08000c6c <__aeabi_d2f>:
 8000c6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c74:	bf24      	itt	cs
 8000c76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c7e:	d90d      	bls.n	8000c9c <__aeabi_d2f+0x30>
 8000c80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c94:	bf08      	it	eq
 8000c96:	f020 0001 	biceq.w	r0, r0, #1
 8000c9a:	4770      	bx	lr
 8000c9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ca0:	d121      	bne.n	8000ce6 <__aeabi_d2f+0x7a>
 8000ca2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ca6:	bfbc      	itt	lt
 8000ca8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	4770      	bxlt	lr
 8000cae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cb6:	f1c2 0218 	rsb	r2, r2, #24
 8000cba:	f1c2 0c20 	rsb	ip, r2, #32
 8000cbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000cc6:	bf18      	it	ne
 8000cc8:	f040 0001 	orrne.w	r0, r0, #1
 8000ccc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cd8:	ea40 000c 	orr.w	r0, r0, ip
 8000cdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ce0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ce4:	e7cc      	b.n	8000c80 <__aeabi_d2f+0x14>
 8000ce6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cea:	d107      	bne.n	8000cfc <__aeabi_d2f+0x90>
 8000cec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cf0:	bf1e      	ittt	ne
 8000cf2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cf6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cfa:	4770      	bxne	lr
 8000cfc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <__aeabi_uldivmod>:
 8000d0c:	b953      	cbnz	r3, 8000d24 <__aeabi_uldivmod+0x18>
 8000d0e:	b94a      	cbnz	r2, 8000d24 <__aeabi_uldivmod+0x18>
 8000d10:	2900      	cmp	r1, #0
 8000d12:	bf08      	it	eq
 8000d14:	2800      	cmpeq	r0, #0
 8000d16:	bf1c      	itt	ne
 8000d18:	f04f 31ff 	movne.w	r1, #4294967295
 8000d1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d20:	f000 b970 	b.w	8001004 <__aeabi_idiv0>
 8000d24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d2c:	f000 f806 	bl	8000d3c <__udivmoddi4>
 8000d30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d38:	b004      	add	sp, #16
 8000d3a:	4770      	bx	lr

08000d3c <__udivmoddi4>:
 8000d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d40:	9e08      	ldr	r6, [sp, #32]
 8000d42:	460d      	mov	r5, r1
 8000d44:	4604      	mov	r4, r0
 8000d46:	460f      	mov	r7, r1
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d14a      	bne.n	8000de2 <__udivmoddi4+0xa6>
 8000d4c:	428a      	cmp	r2, r1
 8000d4e:	4694      	mov	ip, r2
 8000d50:	d965      	bls.n	8000e1e <__udivmoddi4+0xe2>
 8000d52:	fab2 f382 	clz	r3, r2
 8000d56:	b143      	cbz	r3, 8000d6a <__udivmoddi4+0x2e>
 8000d58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d5c:	f1c3 0220 	rsb	r2, r3, #32
 8000d60:	409f      	lsls	r7, r3
 8000d62:	fa20 f202 	lsr.w	r2, r0, r2
 8000d66:	4317      	orrs	r7, r2
 8000d68:	409c      	lsls	r4, r3
 8000d6a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d6e:	fa1f f58c 	uxth.w	r5, ip
 8000d72:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d76:	0c22      	lsrs	r2, r4, #16
 8000d78:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d7c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d80:	fb01 f005 	mul.w	r0, r1, r5
 8000d84:	4290      	cmp	r0, r2
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x62>
 8000d88:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d90:	f080 811c 	bcs.w	8000fcc <__udivmoddi4+0x290>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f240 8119 	bls.w	8000fcc <__udivmoddi4+0x290>
 8000d9a:	3902      	subs	r1, #2
 8000d9c:	4462      	add	r2, ip
 8000d9e:	1a12      	subs	r2, r2, r0
 8000da0:	b2a4      	uxth	r4, r4
 8000da2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000da6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000daa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dae:	fb00 f505 	mul.w	r5, r0, r5
 8000db2:	42a5      	cmp	r5, r4
 8000db4:	d90a      	bls.n	8000dcc <__udivmoddi4+0x90>
 8000db6:	eb1c 0404 	adds.w	r4, ip, r4
 8000dba:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbe:	f080 8107 	bcs.w	8000fd0 <__udivmoddi4+0x294>
 8000dc2:	42a5      	cmp	r5, r4
 8000dc4:	f240 8104 	bls.w	8000fd0 <__udivmoddi4+0x294>
 8000dc8:	4464      	add	r4, ip
 8000dca:	3802      	subs	r0, #2
 8000dcc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd0:	1b64      	subs	r4, r4, r5
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	b11e      	cbz	r6, 8000dde <__udivmoddi4+0xa2>
 8000dd6:	40dc      	lsrs	r4, r3
 8000dd8:	2300      	movs	r3, #0
 8000dda:	e9c6 4300 	strd	r4, r3, [r6]
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0xbc>
 8000de6:	2e00      	cmp	r6, #0
 8000de8:	f000 80ed 	beq.w	8000fc6 <__udivmoddi4+0x28a>
 8000dec:	2100      	movs	r1, #0
 8000dee:	e9c6 0500 	strd	r0, r5, [r6]
 8000df2:	4608      	mov	r0, r1
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	fab3 f183 	clz	r1, r3
 8000dfc:	2900      	cmp	r1, #0
 8000dfe:	d149      	bne.n	8000e94 <__udivmoddi4+0x158>
 8000e00:	42ab      	cmp	r3, r5
 8000e02:	d302      	bcc.n	8000e0a <__udivmoddi4+0xce>
 8000e04:	4282      	cmp	r2, r0
 8000e06:	f200 80f8 	bhi.w	8000ffa <__udivmoddi4+0x2be>
 8000e0a:	1a84      	subs	r4, r0, r2
 8000e0c:	eb65 0203 	sbc.w	r2, r5, r3
 8000e10:	2001      	movs	r0, #1
 8000e12:	4617      	mov	r7, r2
 8000e14:	2e00      	cmp	r6, #0
 8000e16:	d0e2      	beq.n	8000dde <__udivmoddi4+0xa2>
 8000e18:	e9c6 4700 	strd	r4, r7, [r6]
 8000e1c:	e7df      	b.n	8000dde <__udivmoddi4+0xa2>
 8000e1e:	b902      	cbnz	r2, 8000e22 <__udivmoddi4+0xe6>
 8000e20:	deff      	udf	#255	; 0xff
 8000e22:	fab2 f382 	clz	r3, r2
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f040 8090 	bne.w	8000f4c <__udivmoddi4+0x210>
 8000e2c:	1a8a      	subs	r2, r1, r2
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2101      	movs	r1, #1
 8000e38:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e3c:	fb07 2015 	mls	r0, r7, r5, r2
 8000e40:	0c22      	lsrs	r2, r4, #16
 8000e42:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e46:	fb0e f005 	mul.w	r0, lr, r5
 8000e4a:	4290      	cmp	r0, r2
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x124>
 8000e4e:	eb1c 0202 	adds.w	r2, ip, r2
 8000e52:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x122>
 8000e58:	4290      	cmp	r0, r2
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2b8>
 8000e5e:	4645      	mov	r5, r8
 8000e60:	1a12      	subs	r2, r2, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e68:	fb07 2210 	mls	r2, r7, r0, r2
 8000e6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x14e>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x14c>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2c2>
 8000e88:	4610      	mov	r0, r2
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e92:	e79f      	b.n	8000dd4 <__udivmoddi4+0x98>
 8000e94:	f1c1 0720 	rsb	r7, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ea6:	fa20 f307 	lsr.w	r3, r0, r7
 8000eaa:	40fd      	lsrs	r5, r7
 8000eac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb0:	4323      	orrs	r3, r4
 8000eb2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eb6:	fa1f fe8c 	uxth.w	lr, ip
 8000eba:	fb09 5518 	mls	r5, r9, r8, r5
 8000ebe:	0c1c      	lsrs	r4, r3, #16
 8000ec0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ec4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	fa00 f001 	lsl.w	r0, r0, r1
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b0>
 8000ed4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2b4>
 8000ee0:	42a5      	cmp	r5, r4
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2b4>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4464      	add	r4, ip
 8000eec:	1b64      	subs	r4, r4, r5
 8000eee:	b29d      	uxth	r5, r3
 8000ef0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000efc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f00:	45a6      	cmp	lr, r4
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1da>
 8000f04:	eb1c 0404 	adds.w	r4, ip, r4
 8000f08:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2ac>
 8000f0e:	45a6      	cmp	lr, r4
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2ac>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	4464      	add	r4, ip
 8000f16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f1a:	fba3 9502 	umull	r9, r5, r3, r2
 8000f1e:	eba4 040e 	sub.w	r4, r4, lr
 8000f22:	42ac      	cmp	r4, r5
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46ae      	mov	lr, r5
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x29c>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x298>
 8000f2c:	b156      	cbz	r6, 8000f44 <__udivmoddi4+0x208>
 8000f2e:	ebb0 0208 	subs.w	r2, r0, r8
 8000f32:	eb64 040e 	sbc.w	r4, r4, lr
 8000f36:	fa04 f707 	lsl.w	r7, r4, r7
 8000f3a:	40ca      	lsrs	r2, r1
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	4317      	orrs	r7, r2
 8000f40:	e9c6 7400 	strd	r7, r4, [r6]
 8000f44:	4618      	mov	r0, r3
 8000f46:	2100      	movs	r1, #0
 8000f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4c:	f1c3 0120 	rsb	r1, r3, #32
 8000f50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f54:	fa20 f201 	lsr.w	r2, r0, r1
 8000f58:	fa25 f101 	lsr.w	r1, r5, r1
 8000f5c:	409d      	lsls	r5, r3
 8000f5e:	432a      	orrs	r2, r5
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f6c:	fb07 1510 	mls	r5, r7, r0, r1
 8000f70:	0c11      	lsrs	r1, r2, #16
 8000f72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f76:	fb00 f50e 	mul.w	r5, r0, lr
 8000f7a:	428d      	cmp	r5, r1
 8000f7c:	fa04 f403 	lsl.w	r4, r4, r3
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x258>
 8000f82:	eb1c 0101 	adds.w	r1, ip, r1
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b0>
 8000f8c:	428d      	cmp	r5, r1
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b0>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4461      	add	r1, ip
 8000f94:	1b49      	subs	r1, r1, r5
 8000f96:	b292      	uxth	r2, r2
 8000f98:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f9c:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fa4:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa8:	4291      	cmp	r1, r2
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x282>
 8000fac:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2a8>
 8000fb6:	4291      	cmp	r1, r2
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2a8>
 8000fba:	3d02      	subs	r5, #2
 8000fbc:	4462      	add	r2, ip
 8000fbe:	1a52      	subs	r2, r2, r1
 8000fc0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0xfc>
 8000fc6:	4631      	mov	r1, r6
 8000fc8:	4630      	mov	r0, r6
 8000fca:	e708      	b.n	8000dde <__udivmoddi4+0xa2>
 8000fcc:	4639      	mov	r1, r7
 8000fce:	e6e6      	b.n	8000d9e <__udivmoddi4+0x62>
 8000fd0:	4610      	mov	r0, r2
 8000fd2:	e6fb      	b.n	8000dcc <__udivmoddi4+0x90>
 8000fd4:	4548      	cmp	r0, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f0>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f0>
 8000fe4:	4645      	mov	r5, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x282>
 8000fe8:	462b      	mov	r3, r5
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1da>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x258>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b0>
 8000ff4:	3d02      	subs	r5, #2
 8000ff6:	4462      	add	r2, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x124>
 8000ffa:	4608      	mov	r0, r1
 8000ffc:	e70a      	b.n	8000e14 <__udivmoddi4+0xd8>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x14e>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <ApplicationInit>:
 * It initializes the LTCD, LCD layer, Gyroscope, GPIO pins for buttons, and the RTOS.
 *
 * @note This function should be called before starting the application.
 */
void ApplicationInit(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	LTCD__Init();
 800100c:	f001 fea4 	bl	8002d58 <LTCD__Init>
    LTCD_Layer_Init(0);
 8001010:	2000      	movs	r0, #0
 8001012:	f001 feff 	bl	8002e14 <LTCD_Layer_Init>
    Gyro_Init();
 8001016:	f001 fc21 	bl	800285c <Gyro_Init>

	HAL_GPIO_WritePin(RED_BUTTON_PORT, RED_BUTTON_PIN, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001020:	4806      	ldr	r0, [pc, #24]	; (800103c <ApplicationInit+0x34>)
 8001022:	f004 f91d 	bl	8005260 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_BUTTON_PORT, GREEN_BUTTON_PIN, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800102c:	4803      	ldr	r0, [pc, #12]	; (800103c <ApplicationInit+0x34>)
 800102e:	f004 f917 	bl	8005260 <HAL_GPIO_WritePin>

	Project_RTOS_Init();
 8001032:	f000 f805 	bl	8001040 <Project_RTOS_Init>
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40021800 	.word	0x40021800

08001040 <Project_RTOS_Init>:
 * including speed and direction data initialization, event flags, semaphores,
 * timers, mutexes, and task creation.
 *
 * @note This function should be called before starting the Lab 7 application.
 */
void Project_RTOS_Init(void) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0

    // Create an instance of the Physics struct
	physics.Gravity = 9.8 * 5,
 8001046:	4b9f      	ldr	r3, [pc, #636]	; (80012c4 <Project_RTOS_Init+0x284>)
 8001048:	4a9f      	ldr	r2, [pc, #636]	; (80012c8 <Project_RTOS_Init+0x288>)
 800104a:	601a      	str	r2, [r3, #0]
	physics.UpdateFrequency = 50,
 800104c:	4b9d      	ldr	r3, [pc, #628]	; (80012c4 <Project_RTOS_Init+0x284>)
 800104e:	4a9f      	ldr	r2, [pc, #636]	; (80012cc <Project_RTOS_Init+0x28c>)
 8001050:	605a      	str	r2, [r3, #4]
	physics.PinAtCenter = DRONE,
 8001052:	4b9c      	ldr	r3, [pc, #624]	; (80012c4 <Project_RTOS_Init+0x284>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
	physics.AngleGain = 500;
 8001058:	4b9a      	ldr	r3, [pc, #616]	; (80012c4 <Project_RTOS_Init+0x284>)
 800105a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800105e:	60da      	str	r2, [r3, #12]

    // Create an instance of the Drone struct
	drone.Disruptor.isActive = 0;
 8001060:	4b9b      	ldr	r3, [pc, #620]	; (80012d0 <Project_RTOS_Init+0x290>)
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
	drone.Disruptor.ActiveTime = 0;
 8001066:	4b9a      	ldr	r3, [pc, #616]	; (80012d0 <Project_RTOS_Init+0x290>)
 8001068:	2200      	movs	r2, #0
 800106a:	605a      	str	r2, [r3, #4]
	drone.Disruptor.MaxTime = 1000;
 800106c:	4b98      	ldr	r3, [pc, #608]	; (80012d0 <Project_RTOS_Init+0x290>)
 800106e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001072:	609a      	str	r2, [r3, #8]
	drone.Disruptor.Power = 10000;
 8001074:	4b96      	ldr	r3, [pc, #600]	; (80012d0 <Project_RTOS_Init+0x290>)
 8001076:	f242 7210 	movw	r2, #10000	; 0x2710
 800107a:	60da      	str	r2, [r3, #12]
	drone.Disruptor.MinActivationEnergy = 6000;
 800107c:	4b94      	ldr	r3, [pc, #592]	; (80012d0 <Project_RTOS_Init+0x290>)
 800107e:	f241 7270 	movw	r2, #6000	; 0x1770
 8001082:	611a      	str	r2, [r3, #16]
	drone.EnergyStore.MaxEnergy = 15000;
 8001084:	4b92      	ldr	r3, [pc, #584]	; (80012d0 <Project_RTOS_Init+0x290>)
 8001086:	f643 2298 	movw	r2, #15000	; 0x3a98
 800108a:	615a      	str	r2, [r3, #20]
	drone.EnergyStore.EnergyLeft = 1000;
 800108c:	4b90      	ldr	r3, [pc, #576]	; (80012d0 <Project_RTOS_Init+0x290>)
 800108e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001092:	619a      	str	r2, [r3, #24]
	drone.EnergyStore.RechargeRate = 1000;
 8001094:	4b8e      	ldr	r3, [pc, #568]	; (80012d0 <Project_RTOS_Init+0x290>)
 8001096:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800109a:	625a      	str	r2, [r3, #36]	; 0x24
	drone.Diameter = 10;
 800109c:	4b8c      	ldr	r3, [pc, #560]	; (80012d0 <Project_RTOS_Init+0x290>)
 800109e:	220a      	movs	r2, #10
 80010a0:	629a      	str	r2, [r3, #40]	; 0x28
    drone.X_Pos = 20;
 80010a2:	498b      	ldr	r1, [pc, #556]	; (80012d0 <Project_RTOS_Init+0x290>)
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	4b8a      	ldr	r3, [pc, #552]	; (80012d4 <Project_RTOS_Init+0x294>)
 80010aa:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    drone.Y_Pos = 20;
 80010ae:	4988      	ldr	r1, [pc, #544]	; (80012d0 <Project_RTOS_Init+0x290>)
 80010b0:	f04f 0200 	mov.w	r2, #0
 80010b4:	4b87      	ldr	r3, [pc, #540]	; (80012d4 <Project_RTOS_Init+0x294>)
 80010b6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38


    // Create an instance of the Maze struct
	maze.TimeToComplete = 30000;
 80010ba:	4b87      	ldr	r3, [pc, #540]	; (80012d8 <Project_RTOS_Init+0x298>)
 80010bc:	f247 5230 	movw	r2, #30000	; 0x7530
 80010c0:	601a      	str	r2, [r3, #0]
	maze.CellSize = 12;
 80010c2:	4b85      	ldr	r3, [pc, #532]	; (80012d8 <Project_RTOS_Init+0x298>)
 80010c4:	220c      	movs	r2, #12
 80010c6:	605a      	str	r2, [r3, #4]
	maze.reset = 0;
 80010c8:	4b83      	ldr	r3, [pc, #524]	; (80012d8 <Project_RTOS_Init+0x298>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
	maze.Size.Width = 15;
 80010ce:	4b82      	ldr	r3, [pc, #520]	; (80012d8 <Project_RTOS_Init+0x298>)
 80010d0:	220f      	movs	r2, #15
 80010d2:	60da      	str	r2, [r3, #12]
	maze.Size.Height = 15;
 80010d4:	4b80      	ldr	r3, [pc, #512]	; (80012d8 <Project_RTOS_Init+0x298>)
 80010d6:	220f      	movs	r2, #15
 80010d8:	611a      	str	r2, [r3, #16]
	maze.ObstacleProbability.Wall = 100,
 80010da:	4b7f      	ldr	r3, [pc, #508]	; (80012d8 <Project_RTOS_Init+0x298>)
 80010dc:	2264      	movs	r2, #100	; 0x64
 80010de:	615a      	str	r2, [r3, #20]
	maze.ObstacleProbability.Hole = 200;
 80010e0:	4b7d      	ldr	r3, [pc, #500]	; (80012d8 <Project_RTOS_Init+0x298>)
 80010e2:	22c8      	movs	r2, #200	; 0xc8
 80010e4:	619a      	str	r2, [r3, #24]
	maze.HoleDiameter = 11;
 80010e6:	4b7c      	ldr	r3, [pc, #496]	; (80012d8 <Project_RTOS_Init+0x298>)
 80010e8:	220b      	movs	r2, #11
 80010ea:	61da      	str	r2, [r3, #28]
	maze.HardEdged = 1;  // TRUE
 80010ec:	4b7a      	ldr	r3, [pc, #488]	; (80012d8 <Project_RTOS_Init+0x298>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	621a      	str	r2, [r3, #32]
	maze.Waypoints.Number = 4;
 80010f2:	4b79      	ldr	r3, [pc, #484]	; (80012d8 <Project_RTOS_Init+0x298>)
 80010f4:	2204      	movs	r2, #4
 80010f6:	625a      	str	r2, [r3, #36]	; 0x24
	maze.Waypoints.Diameter = 90;
 80010f8:	4b77      	ldr	r3, [pc, #476]	; (80012d8 <Project_RTOS_Init+0x298>)
 80010fa:	225a      	movs	r2, #90	; 0x5a
 80010fc:	629a      	str	r2, [r3, #40]	; 0x28
	maze.Waypoints.Reuse = 0;  // FALSE
 80010fe:	4b76      	ldr	r3, [pc, #472]	; (80012d8 <Project_RTOS_Init+0x298>)
 8001100:	2200      	movs	r2, #0
 8001102:	62da      	str	r2, [r3, #44]	; 0x2c
	maze.Waypoints.Location[0].x = 50;   // (#0: starting point for game)
 8001104:	4b74      	ldr	r3, [pc, #464]	; (80012d8 <Project_RTOS_Init+0x298>)
 8001106:	2232      	movs	r2, #50	; 0x32
 8001108:	631a      	str	r2, [r3, #48]	; 0x30
	maze.Waypoints.Location[0].y = 50;
 800110a:	4b73      	ldr	r3, [pc, #460]	; (80012d8 <Project_RTOS_Init+0x298>)
 800110c:	2232      	movs	r2, #50	; 0x32
 800110e:	635a      	str	r2, [r3, #52]	; 0x34
	maze.Waypoints.Location[1].x = 130;
 8001110:	4b71      	ldr	r3, [pc, #452]	; (80012d8 <Project_RTOS_Init+0x298>)
 8001112:	2282      	movs	r2, #130	; 0x82
 8001114:	63da      	str	r2, [r3, #60]	; 0x3c
	maze.Waypoints.Location[1].y = 50;
 8001116:	4b70      	ldr	r3, [pc, #448]	; (80012d8 <Project_RTOS_Init+0x298>)
 8001118:	2232      	movs	r2, #50	; 0x32
 800111a:	641a      	str	r2, [r3, #64]	; 0x40
	maze.Waypoints.Location[2].x = 50;
 800111c:	4b6e      	ldr	r3, [pc, #440]	; (80012d8 <Project_RTOS_Init+0x298>)
 800111e:	2232      	movs	r2, #50	; 0x32
 8001120:	649a      	str	r2, [r3, #72]	; 0x48
	maze.Waypoints.Location[2].y = 130;
 8001122:	4b6d      	ldr	r3, [pc, #436]	; (80012d8 <Project_RTOS_Init+0x298>)
 8001124:	2282      	movs	r2, #130	; 0x82
 8001126:	64da      	str	r2, [r3, #76]	; 0x4c
	maze.Waypoints.Location[3].x = 130;
 8001128:	4b6b      	ldr	r3, [pc, #428]	; (80012d8 <Project_RTOS_Init+0x298>)
 800112a:	2282      	movs	r2, #130	; 0x82
 800112c:	655a      	str	r2, [r3, #84]	; 0x54
	maze.Waypoints.Location[3].y = 130;
 800112e:	4b6a      	ldr	r3, [pc, #424]	; (80012d8 <Project_RTOS_Init+0x298>)
 8001130:	2282      	movs	r2, #130	; 0x82
 8001132:	659a      	str	r2, [r3, #88]	; 0x58
// ------------------------------------------------------------------------------------


	Lab7_EventFlagID = osEventFlagsNew(NULL);
 8001134:	2000      	movs	r0, #0
 8001136:	f006 faa8 	bl	800768a <osEventFlagsNew>
 800113a:	4603      	mov	r3, r0
 800113c:	4a67      	ldr	r2, [pc, #412]	; (80012dc <Project_RTOS_Init+0x29c>)
 800113e:	6013      	str	r3, [r2, #0]

	Btn_SemaphoreID = osSemaphoreNew(1, 0, NULL);
 8001140:	2200      	movs	r2, #0
 8001142:	2100      	movs	r1, #0
 8001144:	2001      	movs	r0, #1
 8001146:	f006 fb65 	bl	8007814 <osSemaphoreNew>
 800114a:	4603      	mov	r3, r0
 800114c:	4a64      	ldr	r2, [pc, #400]	; (80012e0 <Project_RTOS_Init+0x2a0>)
 800114e:	6013      	str	r3, [r2, #0]
	Gyro_SemaphoreID = osSemaphoreNew(1, 0, NULL);
 8001150:	2200      	movs	r2, #0
 8001152:	2100      	movs	r1, #0
 8001154:	2001      	movs	r0, #1
 8001156:	f006 fb5d 	bl	8007814 <osSemaphoreNew>
 800115a:	4603      	mov	r3, r0
 800115c:	4a61      	ldr	r2, [pc, #388]	; (80012e4 <Project_RTOS_Init+0x2a4>)
 800115e:	6013      	str	r3, [r2, #0]
	LCD_SemaphoreID = osSemaphoreNew(1, 0, NULL);
 8001160:	2200      	movs	r2, #0
 8001162:	2100      	movs	r1, #0
 8001164:	2001      	movs	r0, #1
 8001166:	f006 fb55 	bl	8007814 <osSemaphoreNew>
 800116a:	4603      	mov	r3, r0
 800116c:	4a5e      	ldr	r2, [pc, #376]	; (80012e8 <Project_RTOS_Init+0x2a8>)
 800116e:	6013      	str	r3, [r2, #0]

	Lab7_Btn_Timer_ID = osTimerNew(Change_Acceleration, osTimerOnce, NULL, &Btn_Timer_Attributes);
 8001170:	4b5e      	ldr	r3, [pc, #376]	; (80012ec <Project_RTOS_Init+0x2ac>)
 8001172:	2200      	movs	r2, #0
 8001174:	2100      	movs	r1, #0
 8001176:	485e      	ldr	r0, [pc, #376]	; (80012f0 <Project_RTOS_Init+0x2b0>)
 8001178:	f006 f9a6 	bl	80074c8 <osTimerNew>
 800117c:	4603      	mov	r3, r0
 800117e:	4a5d      	ldr	r2, [pc, #372]	; (80012f4 <Project_RTOS_Init+0x2b4>)
 8001180:	6013      	str	r3, [r2, #0]
	Gyro_Timer_ID = osTimerNew(Gyro_Position_Post, osTimerPeriodic, NULL, &Gyro_Timer_Attributes);
 8001182:	4b5d      	ldr	r3, [pc, #372]	; (80012f8 <Project_RTOS_Init+0x2b8>)
 8001184:	2200      	movs	r2, #0
 8001186:	2101      	movs	r1, #1
 8001188:	485c      	ldr	r0, [pc, #368]	; (80012fc <Project_RTOS_Init+0x2bc>)
 800118a:	f006 f99d 	bl	80074c8 <osTimerNew>
 800118e:	4603      	mov	r3, r0
 8001190:	4a5b      	ldr	r2, [pc, #364]	; (8001300 <Project_RTOS_Init+0x2c0>)
 8001192:	6013      	str	r3, [r2, #0]
	if (Gyro_Timer_ID != NULL)  {
 8001194:	4b5a      	ldr	r3, [pc, #360]	; (8001300 <Project_RTOS_Init+0x2c0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00a      	beq.n	80011b2 <Project_RTOS_Init+0x172>
	osStatus_t status = osTimerStart(Gyro_Timer_ID, 20u);       // start timer
 800119c:	4b58      	ldr	r3, [pc, #352]	; (8001300 <Project_RTOS_Init+0x2c0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2114      	movs	r1, #20
 80011a2:	4618      	mov	r0, r3
 80011a4:	f006 fa0c 	bl	80075c0 <osTimerStart>
 80011a8:	60f8      	str	r0, [r7, #12]
		if (status != osOK) {
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d000      	beq.n	80011b2 <Project_RTOS_Init+0x172>
			// Timer could not be started
			while(1){};
 80011b0:	e7fe      	b.n	80011b0 <Project_RTOS_Init+0x170>
		}
	}

	LCD_Timer_ID = osTimerNew(LCD_Post, osTimerPeriodic, NULL, &LCD_Timer_Attributes);
 80011b2:	4b54      	ldr	r3, [pc, #336]	; (8001304 <Project_RTOS_Init+0x2c4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	2101      	movs	r1, #1
 80011b8:	4853      	ldr	r0, [pc, #332]	; (8001308 <Project_RTOS_Init+0x2c8>)
 80011ba:	f006 f985 	bl	80074c8 <osTimerNew>
 80011be:	4603      	mov	r3, r0
 80011c0:	4a52      	ldr	r2, [pc, #328]	; (800130c <Project_RTOS_Init+0x2cc>)
 80011c2:	6013      	str	r3, [r2, #0]
	if (LCD_Timer_ID != NULL)  {
 80011c4:	4b51      	ldr	r3, [pc, #324]	; (800130c <Project_RTOS_Init+0x2cc>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d00a      	beq.n	80011e2 <Project_RTOS_Init+0x1a2>
	osStatus_t status = osTimerStart(LCD_Timer_ID, 100u);       // start timer
 80011cc:	4b4f      	ldr	r3, [pc, #316]	; (800130c <Project_RTOS_Init+0x2cc>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2164      	movs	r1, #100	; 0x64
 80011d2:	4618      	mov	r0, r3
 80011d4:	f006 f9f4 	bl	80075c0 <osTimerStart>
 80011d8:	60b8      	str	r0, [r7, #8]
		if (status != osOK) {
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d000      	beq.n	80011e2 <Project_RTOS_Init+0x1a2>
			// Timer could not be started
			while(1){};
 80011e0:	e7fe      	b.n	80011e0 <Project_RTOS_Init+0x1a0>
		}
	}

	Life_Timer_ID = osTimerNew(Game_Countdown, osTimerPeriodic, NULL, &Life_Timer_Attributes);
 80011e2:	4b4b      	ldr	r3, [pc, #300]	; (8001310 <Project_RTOS_Init+0x2d0>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	2101      	movs	r1, #1
 80011e8:	484a      	ldr	r0, [pc, #296]	; (8001314 <Project_RTOS_Init+0x2d4>)
 80011ea:	f006 f96d 	bl	80074c8 <osTimerNew>
 80011ee:	4603      	mov	r3, r0
 80011f0:	4a49      	ldr	r2, [pc, #292]	; (8001318 <Project_RTOS_Init+0x2d8>)
 80011f2:	6013      	str	r3, [r2, #0]
	if (Life_Timer_ID != NULL)  {
 80011f4:	4b48      	ldr	r3, [pc, #288]	; (8001318 <Project_RTOS_Init+0x2d8>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00b      	beq.n	8001214 <Project_RTOS_Init+0x1d4>
	osStatus_t status = osTimerStart(Life_Timer_ID, 1000u);       // start timer
 80011fc:	4b46      	ldr	r3, [pc, #280]	; (8001318 <Project_RTOS_Init+0x2d8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001204:	4618      	mov	r0, r3
 8001206:	f006 f9db 	bl	80075c0 <osTimerStart>
 800120a:	6078      	str	r0, [r7, #4]
		if (status != osOK) {
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d000      	beq.n	8001214 <Project_RTOS_Init+0x1d4>
			// Timer could not be started
			while(1){};
 8001212:	e7fe      	b.n	8001212 <Project_RTOS_Init+0x1d2>
		}
	}
	Recharge_Timer_ID = osTimerNew(Energy_Recharge, osTimerPeriodic, NULL, &Recharge_Timer_Attributes);
 8001214:	4b41      	ldr	r3, [pc, #260]	; (800131c <Project_RTOS_Init+0x2dc>)
 8001216:	2200      	movs	r2, #0
 8001218:	2101      	movs	r1, #1
 800121a:	4841      	ldr	r0, [pc, #260]	; (8001320 <Project_RTOS_Init+0x2e0>)
 800121c:	f006 f954 	bl	80074c8 <osTimerNew>
 8001220:	4603      	mov	r3, r0
 8001222:	4a40      	ldr	r2, [pc, #256]	; (8001324 <Project_RTOS_Init+0x2e4>)
 8001224:	6013      	str	r3, [r2, #0]
	Discharge_Timer_ID = osTimerNew(Energy_Discharge, osTimerPeriodic, NULL, &Discharge_Timer_Attributes);
 8001226:	4b40      	ldr	r3, [pc, #256]	; (8001328 <Project_RTOS_Init+0x2e8>)
 8001228:	2200      	movs	r2, #0
 800122a:	2101      	movs	r1, #1
 800122c:	483f      	ldr	r0, [pc, #252]	; (800132c <Project_RTOS_Init+0x2ec>)
 800122e:	f006 f94b 	bl	80074c8 <osTimerNew>
 8001232:	4603      	mov	r3, r0
 8001234:	4a3e      	ldr	r2, [pc, #248]	; (8001330 <Project_RTOS_Init+0x2f0>)
 8001236:	6013      	str	r3, [r2, #0]


	Lab7_Speed_Setpoint_Mutex_ID = osMutexNew(NULL);
 8001238:	2000      	movs	r0, #0
 800123a:	f006 fa65 	bl	8007708 <osMutexNew>
 800123e:	4603      	mov	r3, r0
 8001240:	4a3c      	ldr	r2, [pc, #240]	; (8001334 <Project_RTOS_Init+0x2f4>)
 8001242:	6013      	str	r3, [r2, #0]
	Lab7_Vehicle_Direction_Mutex_ID = osMutexNew(NULL);
 8001244:	2000      	movs	r0, #0
 8001246:	f006 fa5f 	bl	8007708 <osMutexNew>
 800124a:	4603      	mov	r3, r0
 800124c:	4a3a      	ldr	r2, [pc, #232]	; (8001338 <Project_RTOS_Init+0x2f8>)
 800124e:	6013      	str	r3, [r2, #0]
//	Lab7_SPEED_SETPOINT_TASK_ID = osThreadNew(Speed_Setpoint_Task, NULL, &Speed_Setpoint_Attributes);
//	if (Lab7_SPEED_SETPOINT_TASK_ID == NULL)  {
//		while(1){};
//	}

	Gyro_Task_ID = osThreadNew(Gyro_Drone_Task, NULL, &Gyro_Attributes);
 8001250:	4a3a      	ldr	r2, [pc, #232]	; (800133c <Project_RTOS_Init+0x2fc>)
 8001252:	2100      	movs	r1, #0
 8001254:	483a      	ldr	r0, [pc, #232]	; (8001340 <Project_RTOS_Init+0x300>)
 8001256:	f006 f875 	bl	8007344 <osThreadNew>
 800125a:	4603      	mov	r3, r0
 800125c:	4a39      	ldr	r2, [pc, #228]	; (8001344 <Project_RTOS_Init+0x304>)
 800125e:	6013      	str	r3, [r2, #0]
	if (Gyro_Task_ID == NULL)  {
 8001260:	4b38      	ldr	r3, [pc, #224]	; (8001344 <Project_RTOS_Init+0x304>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d100      	bne.n	800126a <Project_RTOS_Init+0x22a>
		while(1){};
 8001268:	e7fe      	b.n	8001268 <Project_RTOS_Init+0x228>
//
//	Lab7_VEHICLE_MONITOR_TASK_ID = osThreadNew(Vehicle_Monitor_Task, NULL, &Vehicle_Monitor_Attributes);
//	if (Lab7_VEHICLE_MONITOR_TASK_ID == NULL)  {
//		while(1){};
//	}
	LED_GREEN_TASK_ID = osThreadNew(LED_Green_Task, NULL, &LED_Green_Attributes);
 800126a:	4a37      	ldr	r2, [pc, #220]	; (8001348 <Project_RTOS_Init+0x308>)
 800126c:	2100      	movs	r1, #0
 800126e:	4837      	ldr	r0, [pc, #220]	; (800134c <Project_RTOS_Init+0x30c>)
 8001270:	f006 f868 	bl	8007344 <osThreadNew>
 8001274:	4603      	mov	r3, r0
 8001276:	4a36      	ldr	r2, [pc, #216]	; (8001350 <Project_RTOS_Init+0x310>)
 8001278:	6013      	str	r3, [r2, #0]
	if (LED_GREEN_TASK_ID == NULL)  {
 800127a:	4b35      	ldr	r3, [pc, #212]	; (8001350 <Project_RTOS_Init+0x310>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d100      	bne.n	8001284 <Project_RTOS_Init+0x244>
		while(1){};
 8001282:	e7fe      	b.n	8001282 <Project_RTOS_Init+0x242>
	}

	LED_RED_TASK_ID = osThreadNew(LED_Red_Task, NULL, &LED_Red_Attributes);
 8001284:	4a33      	ldr	r2, [pc, #204]	; (8001354 <Project_RTOS_Init+0x314>)
 8001286:	2100      	movs	r1, #0
 8001288:	4833      	ldr	r0, [pc, #204]	; (8001358 <Project_RTOS_Init+0x318>)
 800128a:	f006 f85b 	bl	8007344 <osThreadNew>
 800128e:	4603      	mov	r3, r0
 8001290:	4a32      	ldr	r2, [pc, #200]	; (800135c <Project_RTOS_Init+0x31c>)
 8001292:	6013      	str	r3, [r2, #0]
	if (LED_RED_TASK_ID == NULL)  {
 8001294:	4b31      	ldr	r3, [pc, #196]	; (800135c <Project_RTOS_Init+0x31c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d100      	bne.n	800129e <Project_RTOS_Init+0x25e>
		while(1){};
 800129c:	e7fe      	b.n	800129c <Project_RTOS_Init+0x25c>
	}

	LCD_DISPLAY_TASK_ID = osThreadNew(LCD_Display_Task, NULL, &LCD_Display_Attributes);
 800129e:	4a30      	ldr	r2, [pc, #192]	; (8001360 <Project_RTOS_Init+0x320>)
 80012a0:	2100      	movs	r1, #0
 80012a2:	4830      	ldr	r0, [pc, #192]	; (8001364 <Project_RTOS_Init+0x324>)
 80012a4:	f006 f84e 	bl	8007344 <osThreadNew>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4a2f      	ldr	r2, [pc, #188]	; (8001368 <Project_RTOS_Init+0x328>)
 80012ac:	6013      	str	r3, [r2, #0]
	if (LCD_DISPLAY_TASK_ID == NULL)  {
 80012ae:	4b2e      	ldr	r3, [pc, #184]	; (8001368 <Project_RTOS_Init+0x328>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d100      	bne.n	80012b8 <Project_RTOS_Init+0x278>
		while(1){};
 80012b6:	e7fe      	b.n	80012b6 <Project_RTOS_Init+0x276>
	}

	maze_init();
 80012b8:	f000 f890 	bl	80013dc <maze_init>
}
 80012bc:	bf00      	nop
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20001344 	.word	0x20001344
 80012c8:	42440000 	.word	0x42440000
 80012cc:	42480000 	.word	0x42480000
 80012d0:	20001358 	.word	0x20001358
 80012d4:	40340000 	.word	0x40340000
 80012d8:	20001398 	.word	0x20001398
 80012dc:	20001eb8 	.word	0x20001eb8
 80012e0:	20001ebc 	.word	0x20001ebc
 80012e4:	20001ec0 	.word	0x20001ec0
 80012e8:	20001ec4 	.word	0x20001ec4
 80012ec:	0800f43c 	.word	0x0800f43c
 80012f0:	08001581 	.word	0x08001581
 80012f4:	20001ec8 	.word	0x20001ec8
 80012f8:	0800f44c 	.word	0x0800f44c
 80012fc:	08001595 	.word	0x08001595
 8001300:	20001ecc 	.word	0x20001ecc
 8001304:	0800f45c 	.word	0x0800f45c
 8001308:	080015b5 	.word	0x080015b5
 800130c:	20001ed0 	.word	0x20001ed0
 8001310:	0800f46c 	.word	0x0800f46c
 8001314:	08001561 	.word	0x08001561
 8001318:	20001ed4 	.word	0x20001ed4
 800131c:	0800f47c 	.word	0x0800f47c
 8001320:	0800165d 	.word	0x0800165d
 8001324:	20001ed8 	.word	0x20001ed8
 8001328:	0800f48c 	.word	0x0800f48c
 800132c:	08001691 	.word	0x08001691
 8001330:	20001edc 	.word	0x20001edc
 8001334:	20001fe8 	.word	0x20001fe8
 8001338:	20001fec 	.word	0x20001fec
 800133c:	0800f3ac 	.word	0x0800f3ac
 8001340:	080016d9 	.word	0x080016d9
 8001344:	20001ea8 	.word	0x20001ea8
 8001348:	0800f3d0 	.word	0x0800f3d0
 800134c:	08001dd5 	.word	0x08001dd5
 8001350:	20001eac 	.word	0x20001eac
 8001354:	0800f3f4 	.word	0x0800f3f4
 8001358:	08001e79 	.word	0x08001e79
 800135c:	20001eb0 	.word	0x20001eb0
 8001360:	0800f418 	.word	0x0800f418
 8001364:	08002411 	.word	0x08002411
 8001368:	20001eb4 	.word	0x20001eb4

0800136c <mazeToLCD>:

float mazeToLCD(float cell_pixel, float cell_min, float cell_max, float LCD_min, float LCD_max) {
 800136c:	b480      	push	{r7}
 800136e:	b089      	sub	sp, #36	; 0x24
 8001370:	af00      	add	r7, sp, #0
 8001372:	ed87 0a05 	vstr	s0, [r7, #20]
 8001376:	edc7 0a04 	vstr	s1, [r7, #16]
 800137a:	ed87 1a03 	vstr	s2, [r7, #12]
 800137e:	edc7 1a02 	vstr	s3, [r7, #8]
 8001382:	ed87 2a01 	vstr	s4, [r7, #4]
    float transformed_pixel = (cell_pixel - cell_min) / (cell_max - cell_min);
 8001386:	ed97 7a05 	vldr	s14, [r7, #20]
 800138a:	edd7 7a04 	vldr	s15, [r7, #16]
 800138e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001392:	ed97 7a03 	vldr	s14, [r7, #12]
 8001396:	edd7 7a04 	vldr	s15, [r7, #16]
 800139a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800139e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013a2:	edc7 7a07 	vstr	s15, [r7, #28]
    float LCD_pixel = LCD_min + (LCD_max - LCD_min) * transformed_pixel;
 80013a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80013aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80013ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80013b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ba:	ed97 7a02 	vldr	s14, [r7, #8]
 80013be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c2:	edc7 7a06 	vstr	s15, [r7, #24]
    return LCD_pixel;
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	ee07 3a90 	vmov	s15, r3
}
 80013cc:	eeb0 0a67 	vmov.f32	s0, s15
 80013d0:	3724      	adds	r7, #36	; 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <maze_init>:

void maze_init(void){
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
	srand(time(NULL));
 80013e2:	2000      	movs	r0, #0
 80013e4:	f00b fd86 	bl	800cef4 <time>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4613      	mov	r3, r2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f00b fbd6 	bl	800cba0 <srand>
	int rand_wall;
	int rand_hole;
	for(int i = 0; i < maze.Size.Width; i++){
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	e09f      	b.n	800153a <maze_init+0x15e>
		for(int j = 0; j < maze.Size.Width; j++) {
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	e093      	b.n	8001528 <maze_init+0x14c>
			rand_wall = rand() % 10;
 8001400:	f00b fbfc 	bl	800cbfc <rand>
 8001404:	4602      	mov	r2, r0
 8001406:	4b52      	ldr	r3, [pc, #328]	; (8001550 <maze_init+0x174>)
 8001408:	fb83 1302 	smull	r1, r3, r3, r2
 800140c:	1099      	asrs	r1, r3, #2
 800140e:	17d3      	asrs	r3, r2, #31
 8001410:	1ac9      	subs	r1, r1, r3
 8001412:	460b      	mov	r3, r1
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	440b      	add	r3, r1
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	607b      	str	r3, [r7, #4]
			if(rand_wall < 1){
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	dc0a      	bgt.n	800143a <maze_init+0x5e>
				matrix_wall[i][j][0] = 1;
 8001424:	494b      	ldr	r1, [pc, #300]	; (8001554 <maze_init+0x178>)
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	4613      	mov	r3, r2
 800142a:	011b      	lsls	r3, r3, #4
 800142c:	1a9b      	subs	r3, r3, r2
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	4413      	add	r3, r2
 8001432:	2201      	movs	r2, #1
 8001434:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8001438:	e009      	b.n	800144e <maze_init+0x72>
			} else {
				matrix_wall[i][j][0] = 0;
 800143a:	4946      	ldr	r1, [pc, #280]	; (8001554 <maze_init+0x178>)
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	4613      	mov	r3, r2
 8001440:	011b      	lsls	r3, r3, #4
 8001442:	1a9b      	subs	r3, r3, r2
 8001444:	68ba      	ldr	r2, [r7, #8]
 8001446:	4413      	add	r3, r2
 8001448:	2200      	movs	r2, #0
 800144a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			}
			rand_wall = rand() % 10;
 800144e:	f00b fbd5 	bl	800cbfc <rand>
 8001452:	4602      	mov	r2, r0
 8001454:	4b3e      	ldr	r3, [pc, #248]	; (8001550 <maze_init+0x174>)
 8001456:	fb83 1302 	smull	r1, r3, r3, r2
 800145a:	1099      	asrs	r1, r3, #2
 800145c:	17d3      	asrs	r3, r2, #31
 800145e:	1ac9      	subs	r1, r1, r3
 8001460:	460b      	mov	r3, r1
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	607b      	str	r3, [r7, #4]
			if(rand_wall < 1){
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	dc0b      	bgt.n	800148a <maze_init+0xae>
				matrix_wall[i][j][1] = 1;
 8001472:	4938      	ldr	r1, [pc, #224]	; (8001554 <maze_init+0x178>)
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	4613      	mov	r3, r2
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	1a9b      	subs	r3, r3, r2
 800147c:	68ba      	ldr	r2, [r7, #8]
 800147e:	4413      	add	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	440b      	add	r3, r1
 8001484:	2201      	movs	r2, #1
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	e00a      	b.n	80014a0 <maze_init+0xc4>
			} else {
				matrix_wall[i][j][1] = 0;
 800148a:	4932      	ldr	r1, [pc, #200]	; (8001554 <maze_init+0x178>)
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	4613      	mov	r3, r2
 8001490:	011b      	lsls	r3, r3, #4
 8001492:	1a9b      	subs	r3, r3, r2
 8001494:	68ba      	ldr	r2, [r7, #8]
 8001496:	4413      	add	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	440b      	add	r3, r1
 800149c:	2200      	movs	r2, #0
 800149e:	605a      	str	r2, [r3, #4]
			}
			if(i == 14) {
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2b0e      	cmp	r3, #14
 80014a4:	d109      	bne.n	80014ba <maze_init+0xde>
				matrix_wall[i][j][0] = 1;
 80014a6:	492b      	ldr	r1, [pc, #172]	; (8001554 <maze_init+0x178>)
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	4613      	mov	r3, r2
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	1a9b      	subs	r3, r3, r2
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	4413      	add	r3, r2
 80014b4:	2201      	movs	r2, #1
 80014b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			}
			if(j == 14) {
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	2b0e      	cmp	r3, #14
 80014be:	d10a      	bne.n	80014d6 <maze_init+0xfa>
				matrix_wall[i][j][1] = 1;
 80014c0:	4924      	ldr	r1, [pc, #144]	; (8001554 <maze_init+0x178>)
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	4613      	mov	r3, r2
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	1a9b      	subs	r3, r3, r2
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	4413      	add	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	440b      	add	r3, r1
 80014d2:	2201      	movs	r2, #1
 80014d4:	605a      	str	r2, [r3, #4]
			}
			rand_hole = rand() % 5;
 80014d6:	f00b fb91 	bl	800cbfc <rand>
 80014da:	4602      	mov	r2, r0
 80014dc:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <maze_init+0x174>)
 80014de:	fb83 1302 	smull	r1, r3, r3, r2
 80014e2:	1059      	asrs	r1, r3, #1
 80014e4:	17d3      	asrs	r3, r2, #31
 80014e6:	1ac9      	subs	r1, r1, r3
 80014e8:	460b      	mov	r3, r1
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	603b      	str	r3, [r7, #0]
			if(rand_hole < 1){
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	dc0a      	bgt.n	800150e <maze_init+0x132>
				matrix_hole[i][j] = 1;
 80014f8:	4917      	ldr	r1, [pc, #92]	; (8001558 <maze_init+0x17c>)
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	4613      	mov	r3, r2
 80014fe:	011b      	lsls	r3, r3, #4
 8001500:	1a9b      	subs	r3, r3, r2
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	4413      	add	r3, r2
 8001506:	2201      	movs	r2, #1
 8001508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800150c:	e009      	b.n	8001522 <maze_init+0x146>
			} else {
				matrix_hole[i][j] = 0;
 800150e:	4912      	ldr	r1, [pc, #72]	; (8001558 <maze_init+0x17c>)
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	4613      	mov	r3, r2
 8001514:	011b      	lsls	r3, r3, #4
 8001516:	1a9b      	subs	r3, r3, r2
 8001518:	68ba      	ldr	r2, [r7, #8]
 800151a:	4413      	add	r3, r2
 800151c:	2200      	movs	r2, #0
 800151e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int j = 0; j < maze.Size.Width; j++) {
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	3301      	adds	r3, #1
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <maze_init+0x180>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	68ba      	ldr	r2, [r7, #8]
 800152e:	429a      	cmp	r2, r3
 8001530:	f6ff af66 	blt.w	8001400 <maze_init+0x24>
	for(int i = 0; i < maze.Size.Width; i++){
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3301      	adds	r3, #1
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <maze_init+0x180>)
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	429a      	cmp	r2, r3
 8001542:	f6ff af5a 	blt.w	80013fa <maze_init+0x1e>
			}
		}
	}
}
 8001546:	bf00      	nop
 8001548:	bf00      	nop
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	66666667 	.word	0x66666667
 8001554:	20001418 	.word	0x20001418
 8001558:	20001b20 	.word	0x20001b20
 800155c:	20001398 	.word	0x20001398

08001560 <Game_Countdown>:

void Game_Countdown(void *arg) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	(void)&arg;
	if(maze.TimeToComplete <= 0){
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <Game_Countdown+0x1c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	dc01      	bgt.n	8001574 <Game_Countdown+0x14>
		Reset_Game();
 8001570:	f000 fcd6 	bl	8001f20 <Reset_Game>
	} else {
		if(!DEVELOPER_MODE) {
			maze.TimeToComplete -= 1000;
		}
	}
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20001398 	.word	0x20001398

08001580 <Change_Acceleration>:
 * This function is called by a timer and sets a flag indicating a task action
 * should be taken. It is typically called in response to a button press event.
 *
 * @param arg Pointer to additional argument (unused in this function).
 */
void Change_Acceleration(void *arg) {
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	(void)&arg;
//	btn_speedup = 1;
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <Gyro_Position_Post>:
 * allowing other tasks to proceed, particularly tasks related to gyroscope
 * data processing and LCD display updating.
 *
 * @param arg Pointer to additional argument (unused in this function).
 */
void Gyro_Position_Post(void *arg){
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	(void)&arg;
	osSemaphoreRelease(Gyro_SemaphoreID);
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <Gyro_Position_Post+0x1c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f006 fa13 	bl	80079cc <osSemaphoreRelease>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20001ec0 	.word	0x20001ec0

080015b4 <LCD_Post>:

void LCD_Post(void *arg){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	(void)&arg;
	if(maze.reset == 0) {
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <LCD_Post+0x24>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d104      	bne.n	80015ce <LCD_Post+0x1a>
		osSemaphoreRelease(LCD_SemaphoreID);
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <LCD_Post+0x28>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f006 f9ff 	bl	80079cc <osSemaphoreRelease>
	}
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20001398 	.word	0x20001398
 80015dc:	20001ec4 	.word	0x20001ec4

080015e0 <read_user_button_state>:
 * This function reads the state of the user button (typically a push button)
 * connected to a specific GPIO pin and returns the state as an integer.
 *
 * @return 1 if the user button is pressed, 0 otherwise.
 */
int read_user_button_state(void){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(USER_BUTTON_PORT, USER_BUTTON_PIN)){
 80015e4:	2101      	movs	r1, #1
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <read_user_button_state+0x1c>)
 80015e8:	f003 fe22 	bl	8005230 <HAL_GPIO_ReadPin>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <read_user_button_state+0x16>
		return 1;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <read_user_button_state+0x18>
	}
	return 0;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40020000 	.word	0x40020000

08001600 <HAL_GPIO_EXTI_Callback>:
 * allowing the corresponding task to proceed.
 *
 * @param GPIO_Pin The GPIO pin number that triggered the interrupt.
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	80fb      	strh	r3, [r7, #6]
	osSemaphoreRelease(Btn_SemaphoreID);
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_GPIO_EXTI_Callback+0x54>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f006 f9dc 	bl	80079cc <osSemaphoreRelease>
	if(read_user_button_state()){
 8001614:	f7ff ffe4 	bl	80015e0 <read_user_button_state>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00c      	beq.n	8001638 <HAL_GPIO_EXTI_Callback+0x38>
		if(drone.EnergyStore.EnergyLeft >= drone.Disruptor.MinActivationEnergy) {
 800161e:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <HAL_GPIO_EXTI_Callback+0x58>)
 8001620:	699a      	ldr	r2, [r3, #24]
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <HAL_GPIO_EXTI_Callback+0x58>)
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	429a      	cmp	r2, r3
 8001628:	db0f      	blt.n	800164a <HAL_GPIO_EXTI_Callback+0x4a>
			drone.Disruptor.isActive = 1;
 800162a:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <HAL_GPIO_EXTI_Callback+0x58>)
 800162c:	2201      	movs	r2, #1
 800162e:	601a      	str	r2, [r3, #0]
			drone.EnergyStore.isRecharging = 0;
 8001630:	4b09      	ldr	r3, [pc, #36]	; (8001658 <HAL_GPIO_EXTI_Callback+0x58>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
	else {
		drone.Disruptor.isActive = 0;
		drone.Disruptor.ActiveTime = 0;
		drone.EnergyStore.isDischarging = 0;
	}
}
 8001636:	e008      	b.n	800164a <HAL_GPIO_EXTI_Callback+0x4a>
		drone.Disruptor.isActive = 0;
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <HAL_GPIO_EXTI_Callback+0x58>)
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
		drone.Disruptor.ActiveTime = 0;
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_GPIO_EXTI_Callback+0x58>)
 8001640:	2200      	movs	r2, #0
 8001642:	605a      	str	r2, [r3, #4]
		drone.EnergyStore.isDischarging = 0;
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <HAL_GPIO_EXTI_Callback+0x58>)
 8001646:	2200      	movs	r2, #0
 8001648:	621a      	str	r2, [r3, #32]
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20001ebc 	.word	0x20001ebc
 8001658:	20001358 	.word	0x20001358

0800165c <Energy_Recharge>:

void Energy_Recharge(void *arg)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	(void)&arg;
	if(drone.EnergyStore.EnergyLeft < drone.EnergyStore.MaxEnergy) {
 8001664:	4b09      	ldr	r3, [pc, #36]	; (800168c <Energy_Recharge+0x30>)
 8001666:	699a      	ldr	r2, [r3, #24]
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <Energy_Recharge+0x30>)
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	429a      	cmp	r2, r3
 800166e:	da06      	bge.n	800167e <Energy_Recharge+0x22>
		drone.EnergyStore.EnergyLeft += drone.EnergyStore.RechargeRate;
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <Energy_Recharge+0x30>)
 8001672:	699a      	ldr	r2, [r3, #24]
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <Energy_Recharge+0x30>)
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	4413      	add	r3, r2
 800167a:	4a04      	ldr	r2, [pc, #16]	; (800168c <Energy_Recharge+0x30>)
 800167c:	6193      	str	r3, [r2, #24]
	}
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	20001358 	.word	0x20001358

08001690 <Energy_Discharge>:
void Energy_Discharge(void *arg)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	(void)&arg;
	if(drone.Disruptor.ActiveTime < 10 && drone.EnergyStore.EnergyLeft >= drone.Disruptor.Power/10) {
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <Energy_Discharge+0x3c>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b09      	cmp	r3, #9
 800169e:	dc0a      	bgt.n	80016b6 <Energy_Discharge+0x26>
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <Energy_Discharge+0x3c>)
 80016a2:	699a      	ldr	r2, [r3, #24]
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <Energy_Discharge+0x3c>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	4909      	ldr	r1, [pc, #36]	; (80016d0 <Energy_Discharge+0x40>)
 80016aa:	fb81 0103 	smull	r0, r1, r1, r3
 80016ae:	1089      	asrs	r1, r1, #2
 80016b0:	17db      	asrs	r3, r3, #31
 80016b2:	1acb      	subs	r3, r1, r3
 80016b4:	429a      	cmp	r2, r3
	} else {
		if(DEVELOPER_MODE == 0) {
			drone.Disruptor.isActive = 0;
		}
	}
	drone.Disruptor.ActiveTime ++;
 80016b6:	4b05      	ldr	r3, [pc, #20]	; (80016cc <Energy_Discharge+0x3c>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	3301      	adds	r3, #1
 80016bc:	4a03      	ldr	r2, [pc, #12]	; (80016cc <Energy_Discharge+0x3c>)
 80016be:	6053      	str	r3, [r2, #4]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	20001358 	.word	0x20001358
 80016d0:	66666667 	.word	0x66666667
 80016d4:	00000000 	.word	0x00000000

080016d8 <Gyro_Drone_Task>:
float previous_xPos = 20;
float previous_yPos = 20;
int test_x = 0;
int test_y = 0;

void Gyro_Drone_Task(void *arg){
 80016d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016dc:	b08d      	sub	sp, #52	; 0x34
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
	while(1){
		(void)&arg;
		double tau = 1/physics.UpdateFrequency;
 80016e2:	4bbb      	ldr	r3, [pc, #748]	; (80019d0 <Gyro_Drone_Task+0x2f8>)
 80016e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80016e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016f0:	ee16 0a90 	vmov	r0, s13
 80016f4:	f7fe ff80 	bl	80005f8 <__aeabi_f2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		osStatus_t semaphoreStatus;
		semaphoreStatus = osSemaphoreAcquire(Gyro_SemaphoreID, osWaitForever);
 8001700:	4bb4      	ldr	r3, [pc, #720]	; (80019d4 <Gyro_Drone_Task+0x2fc>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	4618      	mov	r0, r3
 800170a:	f006 f90d 	bl	8007928 <osSemaphoreAcquire>
 800170e:	6278      	str	r0, [r7, #36]	; 0x24
		if (semaphoreStatus == osOK) {
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1e5      	bne.n	80016e2 <Gyro_Drone_Task+0xa>
//			y_angle += (float)17.5/(float)1000.0 * Gyro_Get_Y_Velocity() * tau;

//			x_gyro_value = Gyro_Get_X_Velocity();
//			y_gyro_value = Gyro_Get_Y_Velocity();

			test_x = 0;
 8001716:	4bb0      	ldr	r3, [pc, #704]	; (80019d8 <Gyro_Drone_Task+0x300>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
			test_y = 0;
 800171c:	4baf      	ldr	r3, [pc, #700]	; (80019dc <Gyro_Drone_Task+0x304>)
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
			x_angle += ((double)17.5/(double)1000.0 * (double)Gyro_Get_X_Velocity() * (double)tau); //make sure not 0
 8001722:	f001 f95b 	bl	80029dc <Gyro_Get_X_Velocity>
 8001726:	4603      	mov	r3, r0
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe ff53 	bl	80005d4 <__aeabi_i2d>
 800172e:	a3a4      	add	r3, pc, #656	; (adr r3, 80019c0 <Gyro_Drone_Task+0x2e8>)
 8001730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001734:	f7fe ffb8 	bl	80006a8 <__aeabi_dmul>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4610      	mov	r0, r2
 800173e:	4619      	mov	r1, r3
 8001740:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001744:	f7fe ffb0 	bl	80006a8 <__aeabi_dmul>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	4ba3      	ldr	r3, [pc, #652]	; (80019e0 <Gyro_Drone_Task+0x308>)
 8001752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001756:	f7fe fdf1 	bl	800033c <__adddf3>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	49a0      	ldr	r1, [pc, #640]	; (80019e0 <Gyro_Drone_Task+0x308>)
 8001760:	e9c1 2300 	strd	r2, r3, [r1]
			y_angle += ((double)17.5/(double)1000.0 * (double)Gyro_Get_Y_Velocity() * (double)tau);
 8001764:	f001 f908 	bl	8002978 <Gyro_Get_Y_Velocity>
 8001768:	4603      	mov	r3, r0
 800176a:	4618      	mov	r0, r3
 800176c:	f7fe ff32 	bl	80005d4 <__aeabi_i2d>
 8001770:	a393      	add	r3, pc, #588	; (adr r3, 80019c0 <Gyro_Drone_Task+0x2e8>)
 8001772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001776:	f7fe ff97 	bl	80006a8 <__aeabi_dmul>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001786:	f7fe ff8f 	bl	80006a8 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	4b94      	ldr	r3, [pc, #592]	; (80019e4 <Gyro_Drone_Task+0x30c>)
 8001794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001798:	f7fe fdd0 	bl	800033c <__adddf3>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4990      	ldr	r1, [pc, #576]	; (80019e4 <Gyro_Drone_Task+0x30c>)
 80017a2:	e9c1 2300 	strd	r2, r3, [r1]

			if(fabs(x_angle) >= 90 ||  fabs(y_angle) >= 90) {
 80017a6:	4b8e      	ldr	r3, [pc, #568]	; (80019e0 <Gyro_Drone_Task+0x308>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	4614      	mov	r4, r2
 80017ae:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	4b8c      	ldr	r3, [pc, #560]	; (80019e8 <Gyro_Drone_Task+0x310>)
 80017b8:	4620      	mov	r0, r4
 80017ba:	4629      	mov	r1, r5
 80017bc:	f7ff f9fa 	bl	8000bb4 <__aeabi_dcmpge>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10f      	bne.n	80017e6 <Gyro_Drone_Task+0x10e>
 80017c6:	4b87      	ldr	r3, [pc, #540]	; (80019e4 <Gyro_Drone_Task+0x30c>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	4690      	mov	r8, r2
 80017ce:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	4b84      	ldr	r3, [pc, #528]	; (80019e8 <Gyro_Drone_Task+0x310>)
 80017d8:	4640      	mov	r0, r8
 80017da:	4649      	mov	r1, r9
 80017dc:	f7ff f9ea 	bl	8000bb4 <__aeabi_dcmpge>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <Gyro_Drone_Task+0x112>
				Reset_Game();
 80017e6:	f000 fb9b 	bl	8001f20 <Reset_Game>
			}


			  double x_acceleration = physics.Gravity * sin((double)x_angle*M_PI/(double)180);
 80017ea:	4b79      	ldr	r3, [pc, #484]	; (80019d0 <Gyro_Drone_Task+0x2f8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe ff02 	bl	80005f8 <__aeabi_f2d>
 80017f4:	4682      	mov	sl, r0
 80017f6:	468b      	mov	fp, r1
 80017f8:	4b79      	ldr	r3, [pc, #484]	; (80019e0 <Gyro_Drone_Task+0x308>)
 80017fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017fe:	a372      	add	r3, pc, #456	; (adr r3, 80019c8 <Gyro_Drone_Task+0x2f0>)
 8001800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001804:	f7fe ff50 	bl	80006a8 <__aeabi_dmul>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	4b75      	ldr	r3, [pc, #468]	; (80019ec <Gyro_Drone_Task+0x314>)
 8001816:	f7ff f871 	bl	80008fc <__aeabi_ddiv>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	ec43 2b17 	vmov	d7, r2, r3
 8001822:	eeb0 0a47 	vmov.f32	s0, s14
 8001826:	eef0 0a67 	vmov.f32	s1, s15
 800182a:	f00c fc39 	bl	800e0a0 <sin>
 800182e:	ec53 2b10 	vmov	r2, r3, d0
 8001832:	4650      	mov	r0, sl
 8001834:	4659      	mov	r1, fp
 8001836:	f7fe ff37 	bl	80006a8 <__aeabi_dmul>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	e9c7 2306 	strd	r2, r3, [r7, #24]
			  double y_acceleration = physics.Gravity * sin((double)y_angle*M_PI/(double)180);
 8001842:	4b63      	ldr	r3, [pc, #396]	; (80019d0 <Gyro_Drone_Task+0x2f8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fed6 	bl	80005f8 <__aeabi_f2d>
 800184c:	4682      	mov	sl, r0
 800184e:	468b      	mov	fp, r1
 8001850:	4b64      	ldr	r3, [pc, #400]	; (80019e4 <Gyro_Drone_Task+0x30c>)
 8001852:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001856:	a35c      	add	r3, pc, #368	; (adr r3, 80019c8 <Gyro_Drone_Task+0x2f0>)
 8001858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185c:	f7fe ff24 	bl	80006a8 <__aeabi_dmul>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	4b5f      	ldr	r3, [pc, #380]	; (80019ec <Gyro_Drone_Task+0x314>)
 800186e:	f7ff f845 	bl	80008fc <__aeabi_ddiv>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	ec43 2b17 	vmov	d7, r2, r3
 800187a:	eeb0 0a47 	vmov.f32	s0, s14
 800187e:	eef0 0a67 	vmov.f32	s1, s15
 8001882:	f00c fc0d 	bl	800e0a0 <sin>
 8001886:	ec53 2b10 	vmov	r2, r3, d0
 800188a:	4650      	mov	r0, sl
 800188c:	4659      	mov	r1, fp
 800188e:	f7fe ff0b 	bl	80006a8 <__aeabi_dmul>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	e9c7 2304 	strd	r2, r3, [r7, #16]

			  velX += (x_acceleration * tau);               // cm/s
 800189a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800189e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80018a2:	f7fe ff01 	bl	80006a8 <__aeabi_dmul>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4610      	mov	r0, r2
 80018ac:	4619      	mov	r1, r3
 80018ae:	4b50      	ldr	r3, [pc, #320]	; (80019f0 <Gyro_Drone_Task+0x318>)
 80018b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b4:	f7fe fd42 	bl	800033c <__adddf3>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	494c      	ldr	r1, [pc, #304]	; (80019f0 <Gyro_Drone_Task+0x318>)
 80018be:	e9c1 2300 	strd	r2, r3, [r1]
			  velY += (y_acceleration * tau);               		// cm/s
 80018c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018ca:	f7fe feed 	bl	80006a8 <__aeabi_dmul>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	4b47      	ldr	r3, [pc, #284]	; (80019f4 <Gyro_Drone_Task+0x31c>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7fe fd2e 	bl	800033c <__adddf3>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4943      	ldr	r1, [pc, #268]	; (80019f4 <Gyro_Drone_Task+0x31c>)
 80018e6:	e9c1 2300 	strd	r2, r3, [r1]
			  drone.X_Pos += (velY * tau);               // cm
 80018ea:	4b43      	ldr	r3, [pc, #268]	; (80019f8 <Gyro_Drone_Task+0x320>)
 80018ec:	e9d3 ab0c 	ldrd	sl, fp, [r3, #48]	; 0x30
 80018f0:	4b40      	ldr	r3, [pc, #256]	; (80019f4 <Gyro_Drone_Task+0x31c>)
 80018f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018fa:	f7fe fed5 	bl	80006a8 <__aeabi_dmul>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4650      	mov	r0, sl
 8001904:	4659      	mov	r1, fp
 8001906:	f7fe fd19 	bl	800033c <__adddf3>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	493a      	ldr	r1, [pc, #232]	; (80019f8 <Gyro_Drone_Task+0x320>)
 8001910:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			  drone.Y_Pos += (velX * tau);                		    // cm
 8001914:	4b38      	ldr	r3, [pc, #224]	; (80019f8 <Gyro_Drone_Task+0x320>)
 8001916:	e9d3 ab0e 	ldrd	sl, fp, [r3, #56]	; 0x38
 800191a:	4b35      	ldr	r3, [pc, #212]	; (80019f0 <Gyro_Drone_Task+0x318>)
 800191c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001920:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001924:	f7fe fec0 	bl	80006a8 <__aeabi_dmul>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4650      	mov	r0, sl
 800192e:	4659      	mov	r1, fp
 8001930:	f7fe fd04 	bl	800033c <__adddf3>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	492f      	ldr	r1, [pc, #188]	; (80019f8 <Gyro_Drone_Task+0x320>)
 800193a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

		  if (!drone.Disruptor.isActive) {
 800193e:	4b2e      	ldr	r3, [pc, #184]	; (80019f8 <Gyro_Drone_Task+0x320>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	f040 80de 	bne.w	8001b04 <Gyro_Drone_Task+0x42c>
			  if(Check_Hole_Collision(drone.X_Pos, drone.Y_Pos, 4)){
 8001948:	4b2b      	ldr	r3, [pc, #172]	; (80019f8 <Gyro_Drone_Task+0x320>)
 800194a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	f7ff f96b 	bl	8000c2c <__aeabi_d2uiz>
 8001956:	4603      	mov	r3, r0
 8001958:	b29e      	uxth	r6, r3
 800195a:	4b27      	ldr	r3, [pc, #156]	; (80019f8 <Gyro_Drone_Task+0x320>)
 800195c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
 8001964:	f7ff f962 	bl	8000c2c <__aeabi_d2uiz>
 8001968:	4603      	mov	r3, r0
 800196a:	b29b      	uxth	r3, r3
 800196c:	2204      	movs	r2, #4
 800196e:	4619      	mov	r1, r3
 8001970:	4630      	mov	r0, r6
 8001972:	f001 fd23 	bl	80033bc <Check_Hole_Collision>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d004      	beq.n	8001986 <Gyro_Drone_Task+0x2ae>
//				  velX = 0;
//				  velY = 0;
				  hole_hit++; // Adjust
 800197c:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <Gyro_Drone_Task+0x324>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	3301      	adds	r3, #1
 8001982:	4a1e      	ldr	r2, [pc, #120]	; (80019fc <Gyro_Drone_Task+0x324>)
 8001984:	6013      	str	r3, [r2, #0]
					  Reset_Game();
				  }
			  }


			if(Check_Circle_Collision(drone.X_Pos, drone.Y_Pos, 5)) {
 8001986:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <Gyro_Drone_Task+0x320>)
 8001988:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800198c:	4610      	mov	r0, r2
 800198e:	4619      	mov	r1, r3
 8001990:	f7ff f94c 	bl	8000c2c <__aeabi_d2uiz>
 8001994:	4603      	mov	r3, r0
 8001996:	b29e      	uxth	r6, r3
 8001998:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <Gyro_Drone_Task+0x320>)
 800199a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800199e:	4610      	mov	r0, r2
 80019a0:	4619      	mov	r1, r3
 80019a2:	f7ff f943 	bl	8000c2c <__aeabi_d2uiz>
 80019a6:	4603      	mov	r3, r0
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	2205      	movs	r2, #5
 80019ac:	4619      	mov	r1, r3
 80019ae:	4630      	mov	r0, r6
 80019b0:	f001 fc4e 	bl	8003250 <Check_Circle_Collision>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 80a4 	beq.w	8001b04 <Gyro_Drone_Task+0x42c>
 80019bc:	e020      	b.n	8001a00 <Gyro_Drone_Task+0x328>
 80019be:	bf00      	nop
 80019c0:	1eb851ec 	.word	0x1eb851ec
 80019c4:	3f91eb85 	.word	0x3f91eb85
 80019c8:	54442d18 	.word	0x54442d18
 80019cc:	400921fb 	.word	0x400921fb
 80019d0:	20001344 	.word	0x20001344
 80019d4:	20001ec0 	.word	0x20001ec0
 80019d8:	20001ff0 	.word	0x20001ff0
 80019dc:	20001ff4 	.word	0x20001ff4
 80019e0:	200013f8 	.word	0x200013f8
 80019e4:	20001400 	.word	0x20001400
 80019e8:	40568000 	.word	0x40568000
 80019ec:	40668000 	.word	0x40668000
 80019f0:	20001408 	.word	0x20001408
 80019f4:	20001410 	.word	0x20001410
 80019f8:	20001358 	.word	0x20001358
 80019fc:	20001ea4 	.word	0x20001ea4
			int c_x = Check_Circle_Collision_X(drone.X_Pos, drone.Y_Pos, 5);
 8001a00:	4ba9      	ldr	r3, [pc, #676]	; (8001ca8 <Gyro_Drone_Task+0x5d0>)
 8001a02:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f7ff f90f 	bl	8000c2c <__aeabi_d2uiz>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	b29e      	uxth	r6, r3
 8001a12:	4ba5      	ldr	r3, [pc, #660]	; (8001ca8 <Gyro_Drone_Task+0x5d0>)
 8001a14:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f7ff f906 	bl	8000c2c <__aeabi_d2uiz>
 8001a20:	4603      	mov	r3, r0
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	2205      	movs	r2, #5
 8001a26:	4619      	mov	r1, r3
 8001a28:	4630      	mov	r0, r6
 8001a2a:	f001 fd23 	bl	8003474 <Check_Circle_Collision_X>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	60fb      	str	r3, [r7, #12]
			int c_y = Check_Circle_Collision_Y(drone.X_Pos, drone.Y_Pos, 5);
 8001a32:	4b9d      	ldr	r3, [pc, #628]	; (8001ca8 <Gyro_Drone_Task+0x5d0>)
 8001a34:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f7ff f8f6 	bl	8000c2c <__aeabi_d2uiz>
 8001a40:	4603      	mov	r3, r0
 8001a42:	b29e      	uxth	r6, r3
 8001a44:	4b98      	ldr	r3, [pc, #608]	; (8001ca8 <Gyro_Drone_Task+0x5d0>)
 8001a46:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f7ff f8ed 	bl	8000c2c <__aeabi_d2uiz>
 8001a52:	4603      	mov	r3, r0
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	2205      	movs	r2, #5
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4630      	mov	r0, r6
 8001a5c:	f001 fd68 	bl	8003530 <Check_Circle_Collision_Y>
 8001a60:	4603      	mov	r3, r0
 8001a62:	60bb      	str	r3, [r7, #8]
			if(abs(c_x - drone.X_Pos) >= 1.91) {
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f7fe fdb5 	bl	80005d4 <__aeabi_i2d>
 8001a6a:	4b8f      	ldr	r3, [pc, #572]	; (8001ca8 <Gyro_Drone_Task+0x5d0>)
 8001a6c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001a70:	f7fe fc62 	bl	8000338 <__aeabi_dsub>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	f7ff f8ae 	bl	8000bdc <__aeabi_d2iz>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	bfb8      	it	lt
 8001a86:	425b      	neglt	r3, r3
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	dd13      	ble.n	8001ab4 <Gyro_Drone_Task+0x3dc>
				velX = 0;
 8001a8c:	4987      	ldr	r1, [pc, #540]	; (8001cac <Gyro_Drone_Task+0x5d4>)
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	e9c1 2300 	strd	r2, r3, [r1]
				drone.X_Pos = previous_xPos;
 8001a9a:	4b85      	ldr	r3, [pc, #532]	; (8001cb0 <Gyro_Drone_Task+0x5d8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fdaa 	bl	80005f8 <__aeabi_f2d>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	497f      	ldr	r1, [pc, #508]	; (8001ca8 <Gyro_Drone_Task+0x5d0>)
 8001aaa:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
				test_x = 1;
 8001aae:	4b81      	ldr	r3, [pc, #516]	; (8001cb4 <Gyro_Drone_Task+0x5dc>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]
			}
			if(abs(c_y - drone.Y_Pos) >= 1.91) {
 8001ab4:	68b8      	ldr	r0, [r7, #8]
 8001ab6:	f7fe fd8d 	bl	80005d4 <__aeabi_i2d>
 8001aba:	4b7b      	ldr	r3, [pc, #492]	; (8001ca8 <Gyro_Drone_Task+0x5d0>)
 8001abc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001ac0:	f7fe fc3a 	bl	8000338 <__aeabi_dsub>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4610      	mov	r0, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	f7ff f886 	bl	8000bdc <__aeabi_d2iz>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	bfb8      	it	lt
 8001ad6:	425b      	neglt	r3, r3
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	dd13      	ble.n	8001b04 <Gyro_Drone_Task+0x42c>
				velY = 0;
 8001adc:	4976      	ldr	r1, [pc, #472]	; (8001cb8 <Gyro_Drone_Task+0x5e0>)
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	e9c1 2300 	strd	r2, r3, [r1]
				drone.Y_Pos = previous_yPos;
 8001aea:	4b74      	ldr	r3, [pc, #464]	; (8001cbc <Gyro_Drone_Task+0x5e4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fd82 	bl	80005f8 <__aeabi_f2d>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	496b      	ldr	r1, [pc, #428]	; (8001ca8 <Gyro_Drone_Task+0x5d0>)
 8001afa:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				test_y = 1;
 8001afe:	4b70      	ldr	r3, [pc, #448]	; (8001cc0 <Gyro_Drone_Task+0x5e8>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	601a      	str	r2, [r3, #0]
			}
			}
		  }

		  if (!drone.Disruptor.isActive && !drone.EnergyStore.isRecharging){
 8001b04:	4b68      	ldr	r3, [pc, #416]	; (8001ca8 <Gyro_Drone_Task+0x5d0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10e      	bne.n	8001b2a <Gyro_Drone_Task+0x452>
 8001b0c:	4b66      	ldr	r3, [pc, #408]	; (8001ca8 <Gyro_Drone_Task+0x5d0>)
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10a      	bne.n	8001b2a <Gyro_Drone_Task+0x452>
			  osTimerStart(Recharge_Timer_ID, 1000u);
 8001b14:	4b6b      	ldr	r3, [pc, #428]	; (8001cc4 <Gyro_Drone_Task+0x5ec>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f005 fd4f 	bl	80075c0 <osTimerStart>
			  drone.EnergyStore.isRecharging = 1;
 8001b22:	4b61      	ldr	r3, [pc, #388]	; (8001ca8 <Gyro_Drone_Task+0x5d0>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	61da      	str	r2, [r3, #28]
 8001b28:	e008      	b.n	8001b3c <Gyro_Drone_Task+0x464>
		  } else if (drone.Disruptor.isActive){
 8001b2a:	4b5f      	ldr	r3, [pc, #380]	; (8001ca8 <Gyro_Drone_Task+0x5d0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d004      	beq.n	8001b3c <Gyro_Drone_Task+0x464>
			  osTimerStop(Recharge_Timer_ID);
 8001b32:	4b64      	ldr	r3, [pc, #400]	; (8001cc4 <Gyro_Drone_Task+0x5ec>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f005 fd70 	bl	800761c <osTimerStop>
		  }


		  if(drone.Disruptor.isActive && !drone.EnergyStore.isDischarging){
 8001b3c:	4b5a      	ldr	r3, [pc, #360]	; (8001ca8 <Gyro_Drone_Task+0x5d0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00d      	beq.n	8001b60 <Gyro_Drone_Task+0x488>
 8001b44:	4b58      	ldr	r3, [pc, #352]	; (8001ca8 <Gyro_Drone_Task+0x5d0>)
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d109      	bne.n	8001b60 <Gyro_Drone_Task+0x488>
			  osTimerStart(Discharge_Timer_ID, 100u);
 8001b4c:	4b5e      	ldr	r3, [pc, #376]	; (8001cc8 <Gyro_Drone_Task+0x5f0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2164      	movs	r1, #100	; 0x64
 8001b52:	4618      	mov	r0, r3
 8001b54:	f005 fd34 	bl	80075c0 <osTimerStart>
			  drone.EnergyStore.isDischarging = 1;
 8001b58:	4b53      	ldr	r3, [pc, #332]	; (8001ca8 <Gyro_Drone_Task+0x5d0>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	621a      	str	r2, [r3, #32]
 8001b5e:	e008      	b.n	8001b72 <Gyro_Drone_Task+0x49a>
		  }else if(!drone.Disruptor.isActive){
 8001b60:	4b51      	ldr	r3, [pc, #324]	; (8001ca8 <Gyro_Drone_Task+0x5d0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d104      	bne.n	8001b72 <Gyro_Drone_Task+0x49a>
			  osTimerStop(Discharge_Timer_ID);
 8001b68:	4b57      	ldr	r3, [pc, #348]	; (8001cc8 <Gyro_Drone_Task+0x5f0>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f005 fd55 	bl	800761c <osTimerStop>
		  }

		  if(drone.X_Pos >= 225) {
 8001b72:	4b4d      	ldr	r3, [pc, #308]	; (8001ca8 <Gyro_Drone_Task+0x5d0>)
 8001b74:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001b78:	a349      	add	r3, pc, #292	; (adr r3, 8001ca0 <Gyro_Drone_Task+0x5c8>)
 8001b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7e:	f7ff f819 	bl	8000bb4 <__aeabi_dcmpge>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00c      	beq.n	8001ba2 <Gyro_Drone_Task+0x4ca>
			  drone.X_Pos = 225;
 8001b88:	4947      	ldr	r1, [pc, #284]	; (8001ca8 <Gyro_Drone_Task+0x5d0>)
 8001b8a:	a345      	add	r3, pc, #276	; (adr r3, 8001ca0 <Gyro_Drone_Task+0x5c8>)
 8001b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b90:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			  velX = 0;
 8001b94:	4945      	ldr	r1, [pc, #276]	; (8001cac <Gyro_Drone_Task+0x5d4>)
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	e9c1 2300 	strd	r2, r3, [r1]
		  }
		  if(drone.X_Pos <= 15) {
 8001ba2:	4b41      	ldr	r3, [pc, #260]	; (8001ca8 <Gyro_Drone_Task+0x5d0>)
 8001ba4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	4b47      	ldr	r3, [pc, #284]	; (8001ccc <Gyro_Drone_Task+0x5f4>)
 8001bae:	f7fe fff7 	bl	8000ba0 <__aeabi_dcmple>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00c      	beq.n	8001bd2 <Gyro_Drone_Task+0x4fa>
		  			  drone.X_Pos = 15;
 8001bb8:	493b      	ldr	r1, [pc, #236]	; (8001ca8 <Gyro_Drone_Task+0x5d0>)
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	4b43      	ldr	r3, [pc, #268]	; (8001ccc <Gyro_Drone_Task+0x5f4>)
 8001bc0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		  			  velX = 0;
 8001bc4:	4939      	ldr	r1, [pc, #228]	; (8001cac <Gyro_Drone_Task+0x5d4>)
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	e9c1 2300 	strd	r2, r3, [r1]
		  		  }
		  if(drone.Y_Pos >= 225) {
 8001bd2:	4b35      	ldr	r3, [pc, #212]	; (8001ca8 <Gyro_Drone_Task+0x5d0>)
 8001bd4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001bd8:	a331      	add	r3, pc, #196	; (adr r3, 8001ca0 <Gyro_Drone_Task+0x5c8>)
 8001bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bde:	f7fe ffe9 	bl	8000bb4 <__aeabi_dcmpge>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00c      	beq.n	8001c02 <Gyro_Drone_Task+0x52a>
		  			  drone.Y_Pos = 225;
 8001be8:	492f      	ldr	r1, [pc, #188]	; (8001ca8 <Gyro_Drone_Task+0x5d0>)
 8001bea:	a32d      	add	r3, pc, #180	; (adr r3, 8001ca0 <Gyro_Drone_Task+0x5c8>)
 8001bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		  			  velY = 0;
 8001bf4:	4930      	ldr	r1, [pc, #192]	; (8001cb8 <Gyro_Drone_Task+0x5e0>)
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	e9c1 2300 	strd	r2, r3, [r1]
		  		  }
		  if(drone.Y_Pos <= 15) {
 8001c02:	4b29      	ldr	r3, [pc, #164]	; (8001ca8 <Gyro_Drone_Task+0x5d0>)
 8001c04:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	4b2f      	ldr	r3, [pc, #188]	; (8001ccc <Gyro_Drone_Task+0x5f4>)
 8001c0e:	f7fe ffc7 	bl	8000ba0 <__aeabi_dcmple>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00c      	beq.n	8001c32 <Gyro_Drone_Task+0x55a>
		  			  drone.Y_Pos = 15;
 8001c18:	4923      	ldr	r1, [pc, #140]	; (8001ca8 <Gyro_Drone_Task+0x5d0>)
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <Gyro_Drone_Task+0x5f4>)
 8001c20:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		  			  velY = 0;
 8001c24:	4924      	ldr	r1, [pc, #144]	; (8001cb8 <Gyro_Drone_Task+0x5e0>)
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	e9c1 2300 	strd	r2, r3, [r1]
			  //LCD_DisplayNumber(100, 130, y_acceleration);
			//LCD_Draw_Circle_Fill(drone.X_Pos, drone.Y_Pos, 3, LCD_COLOR_BLACK);
			//osMutexRelease(Gyro_SemaphoreID);
			//osEventFlagsSet(Lab7_EventFlagID, DIRECTION_UPDATE_FLAG);

		  if(Check_Waypoint_Collision(drone.X_Pos, drone.Y_Pos, 5)) {
 8001c32:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <Gyro_Drone_Task+0x5d0>)
 8001c34:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f7fe fff6 	bl	8000c2c <__aeabi_d2uiz>
 8001c40:	4603      	mov	r3, r0
 8001c42:	b29e      	uxth	r6, r3
 8001c44:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <Gyro_Drone_Task+0x5d0>)
 8001c46:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f7fe ffed 	bl	8000c2c <__aeabi_d2uiz>
 8001c52:	4603      	mov	r3, r0
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	2205      	movs	r2, #5
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4630      	mov	r0, r6
 8001c5c:	f001 fb52 	bl	8003304 <Check_Waypoint_Collision>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 8085 	beq.w	8001d72 <Gyro_Drone_Task+0x69a>
			  if(drone.X_Pos < 110 && drone.Y_Pos < 110){
 8001c68:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <Gyro_Drone_Task+0x5d0>)
 8001c6a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	4b17      	ldr	r3, [pc, #92]	; (8001cd0 <Gyro_Drone_Task+0x5f8>)
 8001c74:	f7fe ff8a 	bl	8000b8c <__aeabi_dcmplt>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d02c      	beq.n	8001cd8 <Gyro_Drone_Task+0x600>
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <Gyro_Drone_Task+0x5d0>)
 8001c80:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <Gyro_Drone_Task+0x5f8>)
 8001c8a:	f7fe ff7f 	bl	8000b8c <__aeabi_dcmplt>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d021      	beq.n	8001cd8 <Gyro_Drone_Task+0x600>
				  maze.Waypoints.Location[0].hit = 1;
 8001c94:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <Gyro_Drone_Task+0x5fc>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	639a      	str	r2, [r3, #56]	; 0x38
 8001c9a:	e06a      	b.n	8001d72 <Gyro_Drone_Task+0x69a>
 8001c9c:	f3af 8000 	nop.w
 8001ca0:	00000000 	.word	0x00000000
 8001ca4:	406c2000 	.word	0x406c2000
 8001ca8:	20001358 	.word	0x20001358
 8001cac:	20001408 	.word	0x20001408
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	20001ff0 	.word	0x20001ff0
 8001cb8:	20001410 	.word	0x20001410
 8001cbc:	20000004 	.word	0x20000004
 8001cc0:	20001ff4 	.word	0x20001ff4
 8001cc4:	20001ed8 	.word	0x20001ed8
 8001cc8:	20001edc 	.word	0x20001edc
 8001ccc:	402e0000 	.word	0x402e0000
 8001cd0:	405b8000 	.word	0x405b8000
 8001cd4:	20001398 	.word	0x20001398
			  } else if (drone.X_Pos > 110 && drone.Y_Pos < 110){
 8001cd8:	4b39      	ldr	r3, [pc, #228]	; (8001dc0 <Gyro_Drone_Task+0x6e8>)
 8001cda:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	4b38      	ldr	r3, [pc, #224]	; (8001dc4 <Gyro_Drone_Task+0x6ec>)
 8001ce4:	f7fe ff70 	bl	8000bc8 <__aeabi_dcmpgt>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00e      	beq.n	8001d0c <Gyro_Drone_Task+0x634>
 8001cee:	4b34      	ldr	r3, [pc, #208]	; (8001dc0 <Gyro_Drone_Task+0x6e8>)
 8001cf0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	4b32      	ldr	r3, [pc, #200]	; (8001dc4 <Gyro_Drone_Task+0x6ec>)
 8001cfa:	f7fe ff47 	bl	8000b8c <__aeabi_dcmplt>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <Gyro_Drone_Task+0x634>
				  maze.Waypoints.Location[1].hit = 1;
 8001d04:	4b30      	ldr	r3, [pc, #192]	; (8001dc8 <Gyro_Drone_Task+0x6f0>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	645a      	str	r2, [r3, #68]	; 0x44
 8001d0a:	e032      	b.n	8001d72 <Gyro_Drone_Task+0x69a>
			  }else if (drone.X_Pos < 110 && drone.Y_Pos > 110){
 8001d0c:	4b2c      	ldr	r3, [pc, #176]	; (8001dc0 <Gyro_Drone_Task+0x6e8>)
 8001d0e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <Gyro_Drone_Task+0x6ec>)
 8001d18:	f7fe ff38 	bl	8000b8c <__aeabi_dcmplt>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00e      	beq.n	8001d40 <Gyro_Drone_Task+0x668>
 8001d22:	4b27      	ldr	r3, [pc, #156]	; (8001dc0 <Gyro_Drone_Task+0x6e8>)
 8001d24:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	4b25      	ldr	r3, [pc, #148]	; (8001dc4 <Gyro_Drone_Task+0x6ec>)
 8001d2e:	f7fe ff4b 	bl	8000bc8 <__aeabi_dcmpgt>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <Gyro_Drone_Task+0x668>
				  maze.Waypoints.Location[2].hit = 1;
 8001d38:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <Gyro_Drone_Task+0x6f0>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	651a      	str	r2, [r3, #80]	; 0x50
 8001d3e:	e018      	b.n	8001d72 <Gyro_Drone_Task+0x69a>
			  }else if (drone.X_Pos > 110 && drone.Y_Pos > 110){
 8001d40:	4b1f      	ldr	r3, [pc, #124]	; (8001dc0 <Gyro_Drone_Task+0x6e8>)
 8001d42:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	4b1e      	ldr	r3, [pc, #120]	; (8001dc4 <Gyro_Drone_Task+0x6ec>)
 8001d4c:	f7fe ff3c 	bl	8000bc8 <__aeabi_dcmpgt>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00d      	beq.n	8001d72 <Gyro_Drone_Task+0x69a>
 8001d56:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <Gyro_Drone_Task+0x6e8>)
 8001d58:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <Gyro_Drone_Task+0x6ec>)
 8001d62:	f7fe ff31 	bl	8000bc8 <__aeabi_dcmpgt>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <Gyro_Drone_Task+0x69a>
				  maze.Waypoints.Location[3].hit = 1;
 8001d6c:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <Gyro_Drone_Task+0x6f0>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	65da      	str	r2, [r3, #92]	; 0x5c
			  }
		  }

		  if(maze.Waypoints.Location[0].hit && maze.Waypoints.Location[1].hit && maze.Waypoints.Location[2].hit && maze.Waypoints.Location[3].hit){
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <Gyro_Drone_Task+0x6f0>)
 8001d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00d      	beq.n	8001d96 <Gyro_Drone_Task+0x6be>
 8001d7a:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <Gyro_Drone_Task+0x6f0>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d009      	beq.n	8001d96 <Gyro_Drone_Task+0x6be>
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <Gyro_Drone_Task+0x6f0>)
 8001d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <Gyro_Drone_Task+0x6be>
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <Gyro_Drone_Task+0x6f0>)
 8001d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <Gyro_Drone_Task+0x6be>
			  Win_Game();
 8001d92:	f000 f913 	bl	8001fbc <Win_Game>
		  }

		    previous_xPos = drone.X_Pos;
 8001d96:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <Gyro_Drone_Task+0x6e8>)
 8001d98:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f7fe ff64 	bl	8000c6c <__aeabi_d2f>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4a09      	ldr	r2, [pc, #36]	; (8001dcc <Gyro_Drone_Task+0x6f4>)
 8001da8:	6013      	str	r3, [r2, #0]
		    previous_yPos = drone.Y_Pos;
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <Gyro_Drone_Task+0x6e8>)
 8001dac:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	f7fe ff5a 	bl	8000c6c <__aeabi_d2f>
 8001db8:	4603      	mov	r3, r0
 8001dba:	4a05      	ldr	r2, [pc, #20]	; (8001dd0 <Gyro_Drone_Task+0x6f8>)
 8001dbc:	6013      	str	r3, [r2, #0]
	while(1){
 8001dbe:	e490      	b.n	80016e2 <Gyro_Drone_Task+0xa>
 8001dc0:	20001358 	.word	0x20001358
 8001dc4:	405b8000 	.word	0x405b8000
 8001dc8:	20001398 	.word	0x20001398
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	20000004 	.word	0x20000004

08001dd4 <LED_Green_Task>:
 * Upon receiving these event flags, it adjusts the states of the green and red LEDs
 * based on the flags received.
 *
 * @param arg Pointer to additional argument (unused in this function).
 */
void LED_Green_Task(void *arg){
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	while(1){
		(void)&arg;
		if(drone.EnergyStore.EnergyLeft == 0) {
 8001ddc:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <LED_Green_Task+0x98>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d109      	bne.n	8001df8 <LED_Green_Task+0x24>
			HAL_GPIO_WritePin(GREEN_BUTTON_PORT, GREEN_BUTTON_PIN, GPIO_PIN_RESET);
 8001de4:	2200      	movs	r2, #0
 8001de6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dea:	4821      	ldr	r0, [pc, #132]	; (8001e70 <LED_Green_Task+0x9c>)
 8001dec:	f003 fa38 	bl	8005260 <HAL_GPIO_WritePin>
			osDelay(50);
 8001df0:	2032      	movs	r0, #50	; 0x32
 8001df2:	f005 fb39 	bl	8007468 <osDelay>
 8001df6:	e7f1      	b.n	8001ddc <LED_Green_Task+0x8>
		} else if(drone.EnergyStore.EnergyLeft > 0 && drone.EnergyStore.EnergyLeft < 10000){
 8001df8:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <LED_Green_Task+0x98>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	dd29      	ble.n	8001e54 <LED_Green_Task+0x80>
 8001e00:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <LED_Green_Task+0x98>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	dc23      	bgt.n	8001e54 <LED_Green_Task+0x80>
			HAL_GPIO_WritePin(GREEN_BUTTON_PORT, GREEN_BUTTON_PIN, GPIO_PIN_SET);
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e12:	4817      	ldr	r0, [pc, #92]	; (8001e70 <LED_Green_Task+0x9c>)
 8001e14:	f003 fa24 	bl	8005260 <HAL_GPIO_WritePin>
			osDelay(drone.EnergyStore.EnergyLeft/1000);
 8001e18:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <LED_Green_Task+0x98>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	4a15      	ldr	r2, [pc, #84]	; (8001e74 <LED_Green_Task+0xa0>)
 8001e1e:	fb82 1203 	smull	r1, r2, r2, r3
 8001e22:	1192      	asrs	r2, r2, #6
 8001e24:	17db      	asrs	r3, r3, #31
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f005 fb1d 	bl	8007468 <osDelay>
			HAL_GPIO_WritePin(GREEN_BUTTON_PORT, GREEN_BUTTON_PIN, GPIO_PIN_RESET);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e34:	480e      	ldr	r0, [pc, #56]	; (8001e70 <LED_Green_Task+0x9c>)
 8001e36:	f003 fa13 	bl	8005260 <HAL_GPIO_WritePin>
			osDelay(10 - (drone.EnergyStore.EnergyLeft/1000));
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <LED_Green_Task+0x98>)
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	4a0d      	ldr	r2, [pc, #52]	; (8001e74 <LED_Green_Task+0xa0>)
 8001e40:	fb82 1203 	smull	r1, r2, r2, r3
 8001e44:	1192      	asrs	r2, r2, #6
 8001e46:	17db      	asrs	r3, r3, #31
 8001e48:	1a9b      	subs	r3, r3, r2
 8001e4a:	330a      	adds	r3, #10
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f005 fb0b 	bl	8007468 <osDelay>
 8001e52:	e009      	b.n	8001e68 <LED_Green_Task+0x94>
		}else {
			HAL_GPIO_WritePin(GREEN_BUTTON_PORT, GREEN_BUTTON_PIN, GPIO_PIN_SET);
 8001e54:	2201      	movs	r2, #1
 8001e56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e5a:	4805      	ldr	r0, [pc, #20]	; (8001e70 <LED_Green_Task+0x9c>)
 8001e5c:	f003 fa00 	bl	8005260 <HAL_GPIO_WritePin>
			osDelay(1000);
 8001e60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e64:	f005 fb00 	bl	8007468 <osDelay>
		(void)&arg;
 8001e68:	e7b8      	b.n	8001ddc <LED_Green_Task+0x8>
 8001e6a:	bf00      	nop
 8001e6c:	20001358 	.word	0x20001358
 8001e70:	40021800 	.word	0x40021800
 8001e74:	10624dd3 	.word	0x10624dd3

08001e78 <LED_Red_Task>:
		}
	}
}

void LED_Red_Task(void *arg){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	while(1){
		(void)&arg;
		if(drone.EnergyStore.EnergyLeft < drone.Disruptor.MinActivationEnergy) {
 8001e80:	4b23      	ldr	r3, [pc, #140]	; (8001f10 <LED_Red_Task+0x98>)
 8001e82:	699a      	ldr	r2, [r3, #24]
 8001e84:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <LED_Red_Task+0x98>)
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	da35      	bge.n	8001ef8 <LED_Red_Task+0x80>
			float period =(drone.Disruptor.MinActivationEnergy - drone.EnergyStore.EnergyLeft)/1000;
 8001e8c:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <LED_Red_Task+0x98>)
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	4b1f      	ldr	r3, [pc, #124]	; (8001f10 <LED_Red_Task+0x98>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	4a1f      	ldr	r2, [pc, #124]	; (8001f14 <LED_Red_Task+0x9c>)
 8001e98:	fb82 1203 	smull	r1, r2, r2, r3
 8001e9c:	1192      	asrs	r2, r2, #6
 8001e9e:	17db      	asrs	r3, r3, #31
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	ee07 3a90 	vmov	s15, r3
 8001ea6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eaa:	edc7 7a03 	vstr	s15, [r7, #12]
			HAL_GPIO_WritePin(RED_BUTTON_PORT, RED_BUTTON_PIN, GPIO_PIN_SET);
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001eb4:	4818      	ldr	r0, [pc, #96]	; (8001f18 <LED_Red_Task+0xa0>)
 8001eb6:	f003 f9d3 	bl	8005260 <HAL_GPIO_WritePin>
			osDelay(500 / period);
 8001eba:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001f1c <LED_Red_Task+0xa4>
 8001ebe:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eca:	ee17 0a90 	vmov	r0, s15
 8001ece:	f005 facb 	bl	8007468 <osDelay>
			HAL_GPIO_WritePin(RED_BUTTON_PORT, RED_BUTTON_PIN, GPIO_PIN_RESET);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ed8:	480f      	ldr	r0, [pc, #60]	; (8001f18 <LED_Red_Task+0xa0>)
 8001eda:	f003 f9c1 	bl	8005260 <HAL_GPIO_WritePin>
			osDelay(500 / period);
 8001ede:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001f1c <LED_Red_Task+0xa4>
 8001ee2:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eee:	ee17 0a90 	vmov	r0, s15
 8001ef2:	f005 fab9 	bl	8007468 <osDelay>
 8001ef6:	e7c3      	b.n	8001e80 <LED_Red_Task+0x8>
		} else {
			HAL_GPIO_WritePin(RED_BUTTON_PORT, RED_BUTTON_PIN, GPIO_PIN_RESET);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001efe:	4806      	ldr	r0, [pc, #24]	; (8001f18 <LED_Red_Task+0xa0>)
 8001f00:	f003 f9ae 	bl	8005260 <HAL_GPIO_WritePin>
			osDelay(1000);
 8001f04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f08:	f005 faae 	bl	8007468 <osDelay>
		(void)&arg;
 8001f0c:	e7b8      	b.n	8001e80 <LED_Red_Task+0x8>
 8001f0e:	bf00      	nop
 8001f10:	20001358 	.word	0x20001358
 8001f14:	10624dd3 	.word	0x10624dd3
 8001f18:	40021800 	.word	0x40021800
 8001f1c:	43fa0000 	.word	0x43fa0000

08001f20 <Reset_Game>:
		}
	}
}

void Reset_Game(void) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0

	maze.reset = 1;
 8001f24:	4b20      	ldr	r3, [pc, #128]	; (8001fa8 <Reset_Game+0x88>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	609a      	str	r2, [r3, #8]
	LCD_Clear(0, LCD_COLOR_MAZE);
 8001f2a:	f24d 41e9 	movw	r1, #54505	; 0xd4e9
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f001 fbaa 	bl	8003688 <LCD_Clear>
	LCD_DisplayString(50, 100, "You Lost");
 8001f34:	4a1d      	ldr	r2, [pc, #116]	; (8001fac <Reset_Game+0x8c>)
 8001f36:	2164      	movs	r1, #100	; 0x64
 8001f38:	2032      	movs	r0, #50	; 0x32
 8001f3a:	f001 f859 	bl	8002ff0 <LCD_DisplayString>
	LCD_DisplayString(50, 130, "Try Again");
 8001f3e:	4a1c      	ldr	r2, [pc, #112]	; (8001fb0 <Reset_Game+0x90>)
 8001f40:	2182      	movs	r1, #130	; 0x82
 8001f42:	2032      	movs	r0, #50	; 0x32
 8001f44:	f001 f854 	bl	8002ff0 <LCD_DisplayString>
	osDelay(3000);
 8001f48:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001f4c:	f005 fa8c 	bl	8007468 <osDelay>

	drone.Disruptor.isActive = 0;
 8001f50:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <Reset_Game+0x94>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
	drone.Disruptor.ActiveTime = 0;
 8001f56:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <Reset_Game+0x94>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	605a      	str	r2, [r3, #4]
	drone.EnergyStore.EnergyLeft = 1000;
 8001f5c:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <Reset_Game+0x94>)
 8001f5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f62:	619a      	str	r2, [r3, #24]
	drone.X_Pos = 20;
 8001f64:	4913      	ldr	r1, [pc, #76]	; (8001fb4 <Reset_Game+0x94>)
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <Reset_Game+0x98>)
 8001f6c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	drone.Y_Pos = 20;
 8001f70:	4910      	ldr	r1, [pc, #64]	; (8001fb4 <Reset_Game+0x94>)
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <Reset_Game+0x98>)
 8001f78:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	maze.TimeToComplete = 30000;
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <Reset_Game+0x88>)
 8001f7e:	f247 5230 	movw	r2, #30000	; 0x7530
 8001f82:	601a      	str	r2, [r3, #0]
	maze.Waypoints.Location[0].hit = 0;
 8001f84:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <Reset_Game+0x88>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	639a      	str	r2, [r3, #56]	; 0x38
	maze.Waypoints.Location[1].hit = 0;
 8001f8a:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <Reset_Game+0x88>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	645a      	str	r2, [r3, #68]	; 0x44
	maze.Waypoints.Location[2].hit = 0;
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <Reset_Game+0x88>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	651a      	str	r2, [r3, #80]	; 0x50
	maze.Waypoints.Location[3].hit = 0;
 8001f96:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <Reset_Game+0x88>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	65da      	str	r2, [r3, #92]	; 0x5c

	maze.reset = 0;
 8001f9c:	4b02      	ldr	r3, [pc, #8]	; (8001fa8 <Reset_Game+0x88>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]

}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20001398 	.word	0x20001398
 8001fac:	0800f214 	.word	0x0800f214
 8001fb0:	0800f220 	.word	0x0800f220
 8001fb4:	20001358 	.word	0x20001358
 8001fb8:	40340000 	.word	0x40340000

08001fbc <Win_Game>:

void Win_Game(void) {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0

	maze.reset = 1;
 8001fc0:	4b20      	ldr	r3, [pc, #128]	; (8002044 <Win_Game+0x88>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	609a      	str	r2, [r3, #8]
	LCD_Clear(0, LCD_COLOR_CYAN);
 8001fc6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f001 fb5c 	bl	8003688 <LCD_Clear>
	LCD_DisplayString(50, 100, "You Win !!");
 8001fd0:	4a1d      	ldr	r2, [pc, #116]	; (8002048 <Win_Game+0x8c>)
 8001fd2:	2164      	movs	r1, #100	; 0x64
 8001fd4:	2032      	movs	r0, #50	; 0x32
 8001fd6:	f001 f80b 	bl	8002ff0 <LCD_DisplayString>
	LCD_DisplayString(15, 130, "Bing Chilling!!");
 8001fda:	4a1c      	ldr	r2, [pc, #112]	; (800204c <Win_Game+0x90>)
 8001fdc:	2182      	movs	r1, #130	; 0x82
 8001fde:	200f      	movs	r0, #15
 8001fe0:	f001 f806 	bl	8002ff0 <LCD_DisplayString>
	osDelay(3000);
 8001fe4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001fe8:	f005 fa3e 	bl	8007468 <osDelay>

	drone.Disruptor.isActive = 0;
 8001fec:	4b18      	ldr	r3, [pc, #96]	; (8002050 <Win_Game+0x94>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
	drone.Disruptor.ActiveTime = 0;
 8001ff2:	4b17      	ldr	r3, [pc, #92]	; (8002050 <Win_Game+0x94>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	605a      	str	r2, [r3, #4]
	drone.EnergyStore.EnergyLeft = 1000;
 8001ff8:	4b15      	ldr	r3, [pc, #84]	; (8002050 <Win_Game+0x94>)
 8001ffa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ffe:	619a      	str	r2, [r3, #24]
	drone.X_Pos = 20;
 8002000:	4913      	ldr	r1, [pc, #76]	; (8002050 <Win_Game+0x94>)
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	4b13      	ldr	r3, [pc, #76]	; (8002054 <Win_Game+0x98>)
 8002008:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	drone.Y_Pos = 20;
 800200c:	4910      	ldr	r1, [pc, #64]	; (8002050 <Win_Game+0x94>)
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <Win_Game+0x98>)
 8002014:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	maze.TimeToComplete = 30000;
 8002018:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <Win_Game+0x88>)
 800201a:	f247 5230 	movw	r2, #30000	; 0x7530
 800201e:	601a      	str	r2, [r3, #0]
	maze.Waypoints.Location[0].hit = 0;
 8002020:	4b08      	ldr	r3, [pc, #32]	; (8002044 <Win_Game+0x88>)
 8002022:	2200      	movs	r2, #0
 8002024:	639a      	str	r2, [r3, #56]	; 0x38
	maze.Waypoints.Location[1].hit = 0;
 8002026:	4b07      	ldr	r3, [pc, #28]	; (8002044 <Win_Game+0x88>)
 8002028:	2200      	movs	r2, #0
 800202a:	645a      	str	r2, [r3, #68]	; 0x44
	maze.Waypoints.Location[2].hit = 0;
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <Win_Game+0x88>)
 800202e:	2200      	movs	r2, #0
 8002030:	651a      	str	r2, [r3, #80]	; 0x50
	maze.Waypoints.Location[3].hit = 0;
 8002032:	4b04      	ldr	r3, [pc, #16]	; (8002044 <Win_Game+0x88>)
 8002034:	2200      	movs	r2, #0
 8002036:	65da      	str	r2, [r3, #92]	; 0x5c

	maze.reset = 0;
 8002038:	4b02      	ldr	r3, [pc, #8]	; (8002044 <Win_Game+0x88>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]

}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20001398 	.word	0x20001398
 8002048:	0800f22c 	.word	0x0800f22c
 800204c:	0800f238 	.word	0x0800f238
 8002050:	20001358 	.word	0x20001358
 8002054:	40340000 	.word	0x40340000

08002058 <maze_top_left>:


void maze_top_left (void) {
 8002058:	b590      	push	{r4, r7, lr}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
    for (int i = 0; i < 15; i++) {
 800205e:	2300      	movs	r3, #0
 8002060:	607b      	str	r3, [r7, #4]
 8002062:	e092      	b.n	800218a <maze_top_left+0x132>
    	LCD_Draw_Vertical_Line(mazeToLCD (0, 0, maze.CellSize * maze.Size.Width, 10, 229), mazeToLCD(i*12, 0, maze.CellSize * maze.Size.Width, 10, 229), LCD_CELL_LINE, LCD_COLOR_BLACK);
 8002064:	4b4d      	ldr	r3, [pc, #308]	; (800219c <maze_top_left+0x144>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	4a4c      	ldr	r2, [pc, #304]	; (800219c <maze_top_left+0x144>)
 800206a:	68d2      	ldr	r2, [r2, #12]
 800206c:	fb02 f303 	mul.w	r3, r2, r3
 8002070:	ee07 3a90 	vmov	s15, r3
 8002074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002078:	ed9f 2a49 	vldr	s4, [pc, #292]	; 80021a0 <maze_top_left+0x148>
 800207c:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8002080:	eeb0 1a67 	vmov.f32	s2, s15
 8002084:	eddf 0a47 	vldr	s1, [pc, #284]	; 80021a4 <maze_top_left+0x14c>
 8002088:	ed9f 0a46 	vldr	s0, [pc, #280]	; 80021a4 <maze_top_left+0x14c>
 800208c:	f7ff f96e 	bl	800136c <mazeToLCD>
 8002090:	eef0 7a40 	vmov.f32	s15, s0
 8002094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002098:	ee17 3a90 	vmov	r3, s15
 800209c:	b29c      	uxth	r4, r3
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	4413      	add	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	ee07 3a90 	vmov	s15, r3
 80020ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020b0:	4b3a      	ldr	r3, [pc, #232]	; (800219c <maze_top_left+0x144>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	4a39      	ldr	r2, [pc, #228]	; (800219c <maze_top_left+0x144>)
 80020b6:	68d2      	ldr	r2, [r2, #12]
 80020b8:	fb02 f303 	mul.w	r3, r2, r3
 80020bc:	ee07 3a10 	vmov	s14, r3
 80020c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80020c4:	ed9f 2a36 	vldr	s4, [pc, #216]	; 80021a0 <maze_top_left+0x148>
 80020c8:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 80020cc:	eeb0 1a47 	vmov.f32	s2, s14
 80020d0:	eddf 0a34 	vldr	s1, [pc, #208]	; 80021a4 <maze_top_left+0x14c>
 80020d4:	eeb0 0a67 	vmov.f32	s0, s15
 80020d8:	f7ff f948 	bl	800136c <mazeToLCD>
 80020dc:	eef0 7a40 	vmov.f32	s15, s0
 80020e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020e4:	ee17 3a90 	vmov	r3, s15
 80020e8:	b299      	uxth	r1, r3
 80020ea:	2300      	movs	r3, #0
 80020ec:	220e      	movs	r2, #14
 80020ee:	4620      	mov	r0, r4
 80020f0:	f001 fa7c 	bl	80035ec <LCD_Draw_Vertical_Line>
    	LCD_Draw_Horizontal_Line(mazeToLCD (i*12, 0, maze.CellSize * maze.Size.Width, 10, 229), mazeToLCD(0, 0, maze.CellSize * maze.Size.Width, 10, 229), LCD_CELL_LINE, LCD_COLOR_BLACK);
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	ee07 3a90 	vmov	s15, r3
 8002102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002106:	4b25      	ldr	r3, [pc, #148]	; (800219c <maze_top_left+0x144>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4a24      	ldr	r2, [pc, #144]	; (800219c <maze_top_left+0x144>)
 800210c:	68d2      	ldr	r2, [r2, #12]
 800210e:	fb02 f303 	mul.w	r3, r2, r3
 8002112:	ee07 3a10 	vmov	s14, r3
 8002116:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800211a:	ed9f 2a21 	vldr	s4, [pc, #132]	; 80021a0 <maze_top_left+0x148>
 800211e:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8002122:	eeb0 1a47 	vmov.f32	s2, s14
 8002126:	eddf 0a1f 	vldr	s1, [pc, #124]	; 80021a4 <maze_top_left+0x14c>
 800212a:	eeb0 0a67 	vmov.f32	s0, s15
 800212e:	f7ff f91d 	bl	800136c <mazeToLCD>
 8002132:	eef0 7a40 	vmov.f32	s15, s0
 8002136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800213a:	ee17 3a90 	vmov	r3, s15
 800213e:	b29c      	uxth	r4, r3
 8002140:	4b16      	ldr	r3, [pc, #88]	; (800219c <maze_top_left+0x144>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4a15      	ldr	r2, [pc, #84]	; (800219c <maze_top_left+0x144>)
 8002146:	68d2      	ldr	r2, [r2, #12]
 8002148:	fb02 f303 	mul.w	r3, r2, r3
 800214c:	ee07 3a90 	vmov	s15, r3
 8002150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002154:	ed9f 2a12 	vldr	s4, [pc, #72]	; 80021a0 <maze_top_left+0x148>
 8002158:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 800215c:	eeb0 1a67 	vmov.f32	s2, s15
 8002160:	eddf 0a10 	vldr	s1, [pc, #64]	; 80021a4 <maze_top_left+0x14c>
 8002164:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80021a4 <maze_top_left+0x14c>
 8002168:	f7ff f900 	bl	800136c <mazeToLCD>
 800216c:	eef0 7a40 	vmov.f32	s15, s0
 8002170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002174:	ee17 3a90 	vmov	r3, s15
 8002178:	b299      	uxth	r1, r3
 800217a:	2300      	movs	r3, #0
 800217c:	220e      	movs	r2, #14
 800217e:	4620      	mov	r0, r4
 8002180:	f001 fa5b 	bl	800363a <LCD_Draw_Horizontal_Line>
    for (int i = 0; i < 15; i++) {
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3301      	adds	r3, #1
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b0e      	cmp	r3, #14
 800218e:	f77f af69 	ble.w	8002064 <maze_top_left+0xc>
//    	LCD_DisplayNumber(100, 20*i, mazeToLCD(i*12, 0, maze.CellSize * maze.Size.Width, 10, 229));
    }
}
 8002192:	bf00      	nop
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	bd90      	pop	{r4, r7, pc}
 800219c:	20001398 	.word	0x20001398
 80021a0:	43650000 	.word	0x43650000
 80021a4:	00000000 	.word	0x00000000

080021a8 <draw_right_wall>:

void draw_right_wall(float x, float y){
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80021b2:	edc7 0a00 	vstr	s1, [r7]
	float LCD_X = mazeToLCD ((x+1)*maze.CellSize, 0, 180, 10, 229);
 80021b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80021ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80021be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80021c2:	4b22      	ldr	r3, [pc, #136]	; (800224c <draw_right_wall+0xa4>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	ee07 3a90 	vmov	s15, r3
 80021ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021d2:	ed9f 2a1f 	vldr	s4, [pc, #124]	; 8002250 <draw_right_wall+0xa8>
 80021d6:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 80021da:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8002254 <draw_right_wall+0xac>
 80021de:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8002258 <draw_right_wall+0xb0>
 80021e2:	eeb0 0a67 	vmov.f32	s0, s15
 80021e6:	f7ff f8c1 	bl	800136c <mazeToLCD>
 80021ea:	ed87 0a03 	vstr	s0, [r7, #12]
	float LCD_Y = mazeToLCD (y*maze.CellSize, 0, 180, 10, 229);
 80021ee:	4b17      	ldr	r3, [pc, #92]	; (800224c <draw_right_wall+0xa4>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	ee07 3a90 	vmov	s15, r3
 80021f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021fa:	edd7 7a00 	vldr	s15, [r7]
 80021fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002202:	ed9f 2a13 	vldr	s4, [pc, #76]	; 8002250 <draw_right_wall+0xa8>
 8002206:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 800220a:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8002254 <draw_right_wall+0xac>
 800220e:	eddf 0a12 	vldr	s1, [pc, #72]	; 8002258 <draw_right_wall+0xb0>
 8002212:	eeb0 0a67 	vmov.f32	s0, s15
 8002216:	f7ff f8a9 	bl	800136c <mazeToLCD>
 800221a:	ed87 0a02 	vstr	s0, [r7, #8]
	LCD_Draw_Vertical_Line(LCD_X, LCD_Y, LCD_CELL_LINE, LCD_COLOR_BLACK);
 800221e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002226:	ee17 3a90 	vmov	r3, s15
 800222a:	b298      	uxth	r0, r3
 800222c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002234:	ee17 3a90 	vmov	r3, s15
 8002238:	b299      	uxth	r1, r3
 800223a:	2300      	movs	r3, #0
 800223c:	220e      	movs	r2, #14
 800223e:	f001 f9d5 	bl	80035ec <LCD_Draw_Vertical_Line>
}
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20001398 	.word	0x20001398
 8002250:	43650000 	.word	0x43650000
 8002254:	43340000 	.word	0x43340000
 8002258:	00000000 	.word	0x00000000

0800225c <draw_bottom_wall>:
void draw_bottom_wall(float x, float y){
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	ed87 0a01 	vstr	s0, [r7, #4]
 8002266:	edc7 0a00 	vstr	s1, [r7]
	float LCD_X = mazeToLCD (x*maze.CellSize, 0, 180, 10, 229);
 800226a:	4b25      	ldr	r3, [pc, #148]	; (8002300 <draw_bottom_wall+0xa4>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	ee07 3a90 	vmov	s15, r3
 8002272:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002276:	edd7 7a01 	vldr	s15, [r7, #4]
 800227a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800227e:	ed9f 2a21 	vldr	s4, [pc, #132]	; 8002304 <draw_bottom_wall+0xa8>
 8002282:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8002286:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8002308 <draw_bottom_wall+0xac>
 800228a:	eddf 0a20 	vldr	s1, [pc, #128]	; 800230c <draw_bottom_wall+0xb0>
 800228e:	eeb0 0a67 	vmov.f32	s0, s15
 8002292:	f7ff f86b 	bl	800136c <mazeToLCD>
 8002296:	ed87 0a03 	vstr	s0, [r7, #12]
	float LCD_Y = mazeToLCD ((y+1)*maze.CellSize, 0, 180, 10, 229);
 800229a:	edd7 7a00 	vldr	s15, [r7]
 800229e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80022a6:	4b16      	ldr	r3, [pc, #88]	; (8002300 <draw_bottom_wall+0xa4>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	ee07 3a90 	vmov	s15, r3
 80022ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b6:	ed9f 2a13 	vldr	s4, [pc, #76]	; 8002304 <draw_bottom_wall+0xa8>
 80022ba:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 80022be:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8002308 <draw_bottom_wall+0xac>
 80022c2:	eddf 0a12 	vldr	s1, [pc, #72]	; 800230c <draw_bottom_wall+0xb0>
 80022c6:	eeb0 0a67 	vmov.f32	s0, s15
 80022ca:	f7ff f84f 	bl	800136c <mazeToLCD>
 80022ce:	ed87 0a02 	vstr	s0, [r7, #8]
	LCD_Draw_Horizontal_Line(LCD_X, LCD_Y, LCD_CELL_LINE, LCD_COLOR_BLACK);
 80022d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80022d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022da:	ee17 3a90 	vmov	r3, s15
 80022de:	b298      	uxth	r0, r3
 80022e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80022e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022e8:	ee17 3a90 	vmov	r3, s15
 80022ec:	b299      	uxth	r1, r3
 80022ee:	2300      	movs	r3, #0
 80022f0:	220e      	movs	r2, #14
 80022f2:	f001 f9a2 	bl	800363a <LCD_Draw_Horizontal_Line>
}
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20001398 	.word	0x20001398
 8002304:	43650000 	.word	0x43650000
 8002308:	43340000 	.word	0x43340000
 800230c:	00000000 	.word	0x00000000

08002310 <draw_hole>:
void draw_hole(float x, float y){
 8002310:	b5b0      	push	{r4, r5, r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	ed87 0a01 	vstr	s0, [r7, #4]
 800231a:	edc7 0a00 	vstr	s1, [r7]
	float LCD_X = mazeToLCD ((x+0.5)*maze.CellSize, 0, 180, 10, 229);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7fe f96a 	bl	80005f8 <__aeabi_f2d>
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	4b34      	ldr	r3, [pc, #208]	; (80023fc <draw_hole+0xec>)
 800232a:	f7fe f807 	bl	800033c <__adddf3>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4614      	mov	r4, r2
 8002334:	461d      	mov	r5, r3
 8002336:	4b32      	ldr	r3, [pc, #200]	; (8002400 <draw_hole+0xf0>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe f94a 	bl	80005d4 <__aeabi_i2d>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4620      	mov	r0, r4
 8002346:	4629      	mov	r1, r5
 8002348:	f7fe f9ae 	bl	80006a8 <__aeabi_dmul>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4610      	mov	r0, r2
 8002352:	4619      	mov	r1, r3
 8002354:	f7fe fc8a 	bl	8000c6c <__aeabi_d2f>
 8002358:	4603      	mov	r3, r0
 800235a:	ed9f 2a2a 	vldr	s4, [pc, #168]	; 8002404 <draw_hole+0xf4>
 800235e:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8002362:	ed9f 1a29 	vldr	s2, [pc, #164]	; 8002408 <draw_hole+0xf8>
 8002366:	eddf 0a29 	vldr	s1, [pc, #164]	; 800240c <draw_hole+0xfc>
 800236a:	ee00 3a10 	vmov	s0, r3
 800236e:	f7fe fffd 	bl	800136c <mazeToLCD>
 8002372:	ed87 0a03 	vstr	s0, [r7, #12]
	float LCD_Y = mazeToLCD ((y+0.5)*maze.CellSize, 0, 180, 10, 229);
 8002376:	6838      	ldr	r0, [r7, #0]
 8002378:	f7fe f93e 	bl	80005f8 <__aeabi_f2d>
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	4b1e      	ldr	r3, [pc, #120]	; (80023fc <draw_hole+0xec>)
 8002382:	f7fd ffdb 	bl	800033c <__adddf3>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4614      	mov	r4, r2
 800238c:	461d      	mov	r5, r3
 800238e:	4b1c      	ldr	r3, [pc, #112]	; (8002400 <draw_hole+0xf0>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe f91e 	bl	80005d4 <__aeabi_i2d>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4620      	mov	r0, r4
 800239e:	4629      	mov	r1, r5
 80023a0:	f7fe f982 	bl	80006a8 <__aeabi_dmul>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4610      	mov	r0, r2
 80023aa:	4619      	mov	r1, r3
 80023ac:	f7fe fc5e 	bl	8000c6c <__aeabi_d2f>
 80023b0:	4603      	mov	r3, r0
 80023b2:	ed9f 2a14 	vldr	s4, [pc, #80]	; 8002404 <draw_hole+0xf4>
 80023b6:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 80023ba:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8002408 <draw_hole+0xf8>
 80023be:	eddf 0a13 	vldr	s1, [pc, #76]	; 800240c <draw_hole+0xfc>
 80023c2:	ee00 3a10 	vmov	s0, r3
 80023c6:	f7fe ffd1 	bl	800136c <mazeToLCD>
 80023ca:	ed87 0a02 	vstr	s0, [r7, #8]
	LCD_Draw_Circle_Fill(LCD_X, LCD_Y, 5.5, LCD_COLOR_RED);
 80023ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80023d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023d6:	ee17 3a90 	vmov	r3, s15
 80023da:	b298      	uxth	r0, r3
 80023dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80023e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023e4:	ee17 3a90 	vmov	r3, s15
 80023e8:	b299      	uxth	r1, r3
 80023ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023ee:	2205      	movs	r2, #5
 80023f0:	f000 feda 	bl	80031a8 <LCD_Draw_Circle_Fill>
}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bdb0      	pop	{r4, r5, r7, pc}
 80023fc:	3fe00000 	.word	0x3fe00000
 8002400:	20001398 	.word	0x20001398
 8002404:	43650000 	.word	0x43650000
 8002408:	43340000 	.word	0x43340000
 800240c:	00000000 	.word	0x00000000

08002410 <LCD_Display_Task>:
 * Upon acquiring the semaphore, it retrieves the latest speed and direction data.
 * It then updates the LCD display with the current speed and direction information.
 *
 * @param arg Pointer to additional argument (unused in this function).
 */
void LCD_Display_Task(void *arg){
 8002410:	b590      	push	{r4, r7, lr}
 8002412:	b091      	sub	sp, #68	; 0x44
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	while(1){
		osStatus_t semaphoreStatus;
		semaphoreStatus = osSemaphoreAcquire(LCD_SemaphoreID, osWaitForever);
 8002418:	4b85      	ldr	r3, [pc, #532]	; (8002630 <LCD_Display_Task+0x220>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f04f 31ff 	mov.w	r1, #4294967295
 8002420:	4618      	mov	r0, r3
 8002422:	f005 fa81 	bl	8007928 <osSemaphoreAcquire>
 8002426:	6378      	str	r0, [r7, #52]	; 0x34

			LCD_Clear(0, LCD_COLOR_MAZE);
 8002428:	f24d 41e9 	movw	r1, #54505	; 0xd4e9
 800242c:	2000      	movs	r0, #0
 800242e:	f001 f92b 	bl	8003688 <LCD_Clear>

			LCD_SetTextColor(LCD_COLOR_BLACK);
 8002432:	2000      	movs	r0, #0
 8002434:	f000 fe98 	bl	8003168 <LCD_SetTextColor>
			LCD_SetFont(&Font16x24);
 8002438:	487e      	ldr	r0, [pc, #504]	; (8002634 <LCD_Display_Task+0x224>)
 800243a:	f000 fea5 	bl	8003188 <LCD_SetFont>

			if(maze.Waypoints.Location[0].hit == 0) {
 800243e:	4b7e      	ldr	r3, [pc, #504]	; (8002638 <LCD_Display_Task+0x228>)
 8002440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002442:	2b00      	cmp	r3, #0
 8002444:	d137      	bne.n	80024b6 <LCD_Display_Task+0xa6>
				LCD_Draw_Circle_Fill(mazeToLCD(maze.Waypoints.Location[0].x, 0, 180, 10, 229), mazeToLCD (maze.Waypoints.Location[0].y, 0, 180, 10, 229), 45*LCD_CELL_LINE/12, LCD_COLOR_YELLOW);
 8002446:	4b7c      	ldr	r3, [pc, #496]	; (8002638 <LCD_Display_Task+0x228>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	ee07 3a90 	vmov	s15, r3
 800244e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002452:	ed9f 2a7a 	vldr	s4, [pc, #488]	; 800263c <LCD_Display_Task+0x22c>
 8002456:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 800245a:	ed9f 1a79 	vldr	s2, [pc, #484]	; 8002640 <LCD_Display_Task+0x230>
 800245e:	eddf 0a79 	vldr	s1, [pc, #484]	; 8002644 <LCD_Display_Task+0x234>
 8002462:	eeb0 0a67 	vmov.f32	s0, s15
 8002466:	f7fe ff81 	bl	800136c <mazeToLCD>
 800246a:	eef0 7a40 	vmov.f32	s15, s0
 800246e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002472:	ee17 3a90 	vmov	r3, s15
 8002476:	b29c      	uxth	r4, r3
 8002478:	4b6f      	ldr	r3, [pc, #444]	; (8002638 <LCD_Display_Task+0x228>)
 800247a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800247c:	ee07 3a90 	vmov	s15, r3
 8002480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002484:	ed9f 2a6d 	vldr	s4, [pc, #436]	; 800263c <LCD_Display_Task+0x22c>
 8002488:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 800248c:	ed9f 1a6c 	vldr	s2, [pc, #432]	; 8002640 <LCD_Display_Task+0x230>
 8002490:	eddf 0a6c 	vldr	s1, [pc, #432]	; 8002644 <LCD_Display_Task+0x234>
 8002494:	eeb0 0a67 	vmov.f32	s0, s15
 8002498:	f7fe ff68 	bl	800136c <mazeToLCD>
 800249c:	eef0 7a40 	vmov.f32	s15, s0
 80024a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024a4:	ee17 3a90 	vmov	r3, s15
 80024a8:	b299      	uxth	r1, r3
 80024aa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80024ae:	2236      	movs	r2, #54	; 0x36
 80024b0:	4620      	mov	r0, r4
 80024b2:	f000 fe79 	bl	80031a8 <LCD_Draw_Circle_Fill>
			}
			if(maze.Waypoints.Location[1].hit == 0) {
 80024b6:	4b60      	ldr	r3, [pc, #384]	; (8002638 <LCD_Display_Task+0x228>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d137      	bne.n	800252e <LCD_Display_Task+0x11e>
				LCD_Draw_Circle_Fill(mazeToLCD(maze.Waypoints.Location[1].x, 0, 180, 10, 229), mazeToLCD (maze.Waypoints.Location[1].y, 0, 180, 10, 229), 45*LCD_CELL_LINE/12, LCD_COLOR_YELLOW);
 80024be:	4b5e      	ldr	r3, [pc, #376]	; (8002638 <LCD_Display_Task+0x228>)
 80024c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c2:	ee07 3a90 	vmov	s15, r3
 80024c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ca:	ed9f 2a5c 	vldr	s4, [pc, #368]	; 800263c <LCD_Display_Task+0x22c>
 80024ce:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 80024d2:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 8002640 <LCD_Display_Task+0x230>
 80024d6:	eddf 0a5b 	vldr	s1, [pc, #364]	; 8002644 <LCD_Display_Task+0x234>
 80024da:	eeb0 0a67 	vmov.f32	s0, s15
 80024de:	f7fe ff45 	bl	800136c <mazeToLCD>
 80024e2:	eef0 7a40 	vmov.f32	s15, s0
 80024e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024ea:	ee17 3a90 	vmov	r3, s15
 80024ee:	b29c      	uxth	r4, r3
 80024f0:	4b51      	ldr	r3, [pc, #324]	; (8002638 <LCD_Display_Task+0x228>)
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	ee07 3a90 	vmov	s15, r3
 80024f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024fc:	ed9f 2a4f 	vldr	s4, [pc, #316]	; 800263c <LCD_Display_Task+0x22c>
 8002500:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8002504:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 8002640 <LCD_Display_Task+0x230>
 8002508:	eddf 0a4e 	vldr	s1, [pc, #312]	; 8002644 <LCD_Display_Task+0x234>
 800250c:	eeb0 0a67 	vmov.f32	s0, s15
 8002510:	f7fe ff2c 	bl	800136c <mazeToLCD>
 8002514:	eef0 7a40 	vmov.f32	s15, s0
 8002518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800251c:	ee17 3a90 	vmov	r3, s15
 8002520:	b299      	uxth	r1, r3
 8002522:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002526:	2236      	movs	r2, #54	; 0x36
 8002528:	4620      	mov	r0, r4
 800252a:	f000 fe3d 	bl	80031a8 <LCD_Draw_Circle_Fill>
			}
			if(maze.Waypoints.Location[2].hit == 0) {
 800252e:	4b42      	ldr	r3, [pc, #264]	; (8002638 <LCD_Display_Task+0x228>)
 8002530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002532:	2b00      	cmp	r3, #0
 8002534:	d137      	bne.n	80025a6 <LCD_Display_Task+0x196>
				LCD_Draw_Circle_Fill(mazeToLCD(maze.Waypoints.Location[2].x, 0, 180, 10, 229), mazeToLCD (maze.Waypoints.Location[2].y, 0, 180, 10, 229), 45*LCD_CELL_LINE/12, LCD_COLOR_YELLOW);
 8002536:	4b40      	ldr	r3, [pc, #256]	; (8002638 <LCD_Display_Task+0x228>)
 8002538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800253a:	ee07 3a90 	vmov	s15, r3
 800253e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002542:	ed9f 2a3e 	vldr	s4, [pc, #248]	; 800263c <LCD_Display_Task+0x22c>
 8002546:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 800254a:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 8002640 <LCD_Display_Task+0x230>
 800254e:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8002644 <LCD_Display_Task+0x234>
 8002552:	eeb0 0a67 	vmov.f32	s0, s15
 8002556:	f7fe ff09 	bl	800136c <mazeToLCD>
 800255a:	eef0 7a40 	vmov.f32	s15, s0
 800255e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002562:	ee17 3a90 	vmov	r3, s15
 8002566:	b29c      	uxth	r4, r3
 8002568:	4b33      	ldr	r3, [pc, #204]	; (8002638 <LCD_Display_Task+0x228>)
 800256a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256c:	ee07 3a90 	vmov	s15, r3
 8002570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002574:	ed9f 2a31 	vldr	s4, [pc, #196]	; 800263c <LCD_Display_Task+0x22c>
 8002578:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 800257c:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8002640 <LCD_Display_Task+0x230>
 8002580:	eddf 0a30 	vldr	s1, [pc, #192]	; 8002644 <LCD_Display_Task+0x234>
 8002584:	eeb0 0a67 	vmov.f32	s0, s15
 8002588:	f7fe fef0 	bl	800136c <mazeToLCD>
 800258c:	eef0 7a40 	vmov.f32	s15, s0
 8002590:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002594:	ee17 3a90 	vmov	r3, s15
 8002598:	b299      	uxth	r1, r3
 800259a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800259e:	2236      	movs	r2, #54	; 0x36
 80025a0:	4620      	mov	r0, r4
 80025a2:	f000 fe01 	bl	80031a8 <LCD_Draw_Circle_Fill>
			}
			if(maze.Waypoints.Location[3].hit == 0) {
 80025a6:	4b24      	ldr	r3, [pc, #144]	; (8002638 <LCD_Display_Task+0x228>)
 80025a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d137      	bne.n	800261e <LCD_Display_Task+0x20e>
				LCD_Draw_Circle_Fill(mazeToLCD(maze.Waypoints.Location[3].x, 0, 180, 10, 229), mazeToLCD (maze.Waypoints.Location[3].y, 0, 180, 10, 229), 45*LCD_CELL_LINE/12, LCD_COLOR_YELLOW);
 80025ae:	4b22      	ldr	r3, [pc, #136]	; (8002638 <LCD_Display_Task+0x228>)
 80025b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b2:	ee07 3a90 	vmov	s15, r3
 80025b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ba:	ed9f 2a20 	vldr	s4, [pc, #128]	; 800263c <LCD_Display_Task+0x22c>
 80025be:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 80025c2:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8002640 <LCD_Display_Task+0x230>
 80025c6:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8002644 <LCD_Display_Task+0x234>
 80025ca:	eeb0 0a67 	vmov.f32	s0, s15
 80025ce:	f7fe fecd 	bl	800136c <mazeToLCD>
 80025d2:	eef0 7a40 	vmov.f32	s15, s0
 80025d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025da:	ee17 3a90 	vmov	r3, s15
 80025de:	b29c      	uxth	r4, r3
 80025e0:	4b15      	ldr	r3, [pc, #84]	; (8002638 <LCD_Display_Task+0x228>)
 80025e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e4:	ee07 3a90 	vmov	s15, r3
 80025e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ec:	ed9f 2a13 	vldr	s4, [pc, #76]	; 800263c <LCD_Display_Task+0x22c>
 80025f0:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 80025f4:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8002640 <LCD_Display_Task+0x230>
 80025f8:	eddf 0a12 	vldr	s1, [pc, #72]	; 8002644 <LCD_Display_Task+0x234>
 80025fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002600:	f7fe feb4 	bl	800136c <mazeToLCD>
 8002604:	eef0 7a40 	vmov.f32	s15, s0
 8002608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800260c:	ee17 3a90 	vmov	r3, s15
 8002610:	b299      	uxth	r1, r3
 8002612:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002616:	2236      	movs	r2, #54	; 0x36
 8002618:	4620      	mov	r0, r4
 800261a:	f000 fdc5 	bl	80031a8 <LCD_Draw_Circle_Fill>
			}

        maze_top_left();
 800261e:	f7ff fd1b 	bl	8002058 <maze_top_left>
    	for(int i = 0; i < maze.Size.Width; i++){
 8002622:	2300      	movs	r3, #0
 8002624:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002626:	e06c      	b.n	8002702 <LCD_Display_Task+0x2f2>
    		for(int j = 0; j < maze.Size.Width; j++) {
 8002628:	2300      	movs	r3, #0
 800262a:	63bb      	str	r3, [r7, #56]	; 0x38
 800262c:	e061      	b.n	80026f2 <LCD_Display_Task+0x2e2>
 800262e:	bf00      	nop
 8002630:	20001ec4 	.word	0x20001ec4
 8002634:	20000010 	.word	0x20000010
 8002638:	20001398 	.word	0x20001398
 800263c:	43650000 	.word	0x43650000
 8002640:	43340000 	.word	0x43340000
 8002644:	00000000 	.word	0x00000000
    			if(matrix_wall[i][j][0]) {
 8002648:	4975      	ldr	r1, [pc, #468]	; (8002820 <LCD_Display_Task+0x410>)
 800264a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800264c:	4613      	mov	r3, r2
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	1a9b      	subs	r3, r3, r2
 8002652:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002654:	4413      	add	r3, r2
 8002656:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00f      	beq.n	800267e <LCD_Display_Task+0x26e>
    				draw_right_wall(i,j);
 800265e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002660:	ee07 3a90 	vmov	s15, r3
 8002664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266a:	ee07 3a10 	vmov	s14, r3
 800266e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002672:	eef0 0a47 	vmov.f32	s1, s14
 8002676:	eeb0 0a67 	vmov.f32	s0, s15
 800267a:	f7ff fd95 	bl	80021a8 <draw_right_wall>
    			}
    			if(matrix_wall[i][j][1]) {
 800267e:	4968      	ldr	r1, [pc, #416]	; (8002820 <LCD_Display_Task+0x410>)
 8002680:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002682:	4613      	mov	r3, r2
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	1a9b      	subs	r3, r3, r2
 8002688:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800268a:	4413      	add	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	440b      	add	r3, r1
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00f      	beq.n	80026b6 <LCD_Display_Task+0x2a6>
    				draw_bottom_wall(i,j);
 8002696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002698:	ee07 3a90 	vmov	s15, r3
 800269c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a2:	ee07 3a10 	vmov	s14, r3
 80026a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80026aa:	eef0 0a47 	vmov.f32	s1, s14
 80026ae:	eeb0 0a67 	vmov.f32	s0, s15
 80026b2:	f7ff fdd3 	bl	800225c <draw_bottom_wall>
    			}
    			if(matrix_hole[i][j]) {
 80026b6:	495b      	ldr	r1, [pc, #364]	; (8002824 <LCD_Display_Task+0x414>)
 80026b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026ba:	4613      	mov	r3, r2
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	1a9b      	subs	r3, r3, r2
 80026c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026c2:	4413      	add	r3, r2
 80026c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00f      	beq.n	80026ec <LCD_Display_Task+0x2dc>
    				draw_hole(i,j);
 80026cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ce:	ee07 3a90 	vmov	s15, r3
 80026d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d8:	ee07 3a10 	vmov	s14, r3
 80026dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80026e0:	eef0 0a47 	vmov.f32	s1, s14
 80026e4:	eeb0 0a67 	vmov.f32	s0, s15
 80026e8:	f7ff fe12 	bl	8002310 <draw_hole>
    		for(int j = 0; j < maze.Size.Width; j++) {
 80026ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ee:	3301      	adds	r3, #1
 80026f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80026f2:	4b4d      	ldr	r3, [pc, #308]	; (8002828 <LCD_Display_Task+0x418>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026f8:	429a      	cmp	r2, r3
 80026fa:	dba5      	blt.n	8002648 <LCD_Display_Task+0x238>
    	for(int i = 0; i < maze.Size.Width; i++){
 80026fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026fe:	3301      	adds	r3, #1
 8002700:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002702:	4b49      	ldr	r3, [pc, #292]	; (8002828 <LCD_Display_Task+0x418>)
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002708:	429a      	cmp	r2, r3
 800270a:	db8d      	blt.n	8002628 <LCD_Display_Task+0x218>
        char angle_x_str[20];
        char angle_y_str[20];


        //Display angle values on the LCD
        LCD_DisplayString(10, 250, angle_x_str);
 800270c:	f107 0320 	add.w	r3, r7, #32
 8002710:	461a      	mov	r2, r3
 8002712:	21fa      	movs	r1, #250	; 0xfa
 8002714:	200a      	movs	r0, #10
 8002716:	f000 fc6b 	bl	8002ff0 <LCD_DisplayString>
        LCD_DisplayString(120, 250, angle_y_str);
 800271a:	f107 030c 	add.w	r3, r7, #12
 800271e:	461a      	mov	r2, r3
 8002720:	21fa      	movs	r1, #250	; 0xfa
 8002722:	2078      	movs	r0, #120	; 0x78
 8002724:	f000 fc64 	bl	8002ff0 <LCD_DisplayString>

        sprintf(angle_x_str, "aX:%d", (int)x_angle);
 8002728:	4b40      	ldr	r3, [pc, #256]	; (800282c <LCD_Display_Task+0x41c>)
 800272a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272e:	4610      	mov	r0, r2
 8002730:	4619      	mov	r1, r3
 8002732:	f7fe fa53 	bl	8000bdc <__aeabi_d2iz>
 8002736:	4602      	mov	r2, r0
 8002738:	f107 0320 	add.w	r3, r7, #32
 800273c:	493c      	ldr	r1, [pc, #240]	; (8002830 <LCD_Display_Task+0x420>)
 800273e:	4618      	mov	r0, r3
 8002740:	f00a fb5c 	bl	800cdfc <siprintf>
        sprintf(angle_y_str, "aY:%d", (int)y_angle);
 8002744:	4b3b      	ldr	r3, [pc, #236]	; (8002834 <LCD_Display_Task+0x424>)
 8002746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274a:	4610      	mov	r0, r2
 800274c:	4619      	mov	r1, r3
 800274e:	f7fe fa45 	bl	8000bdc <__aeabi_d2iz>
 8002752:	4602      	mov	r2, r0
 8002754:	f107 030c 	add.w	r3, r7, #12
 8002758:	4937      	ldr	r1, [pc, #220]	; (8002838 <LCD_Display_Task+0x428>)
 800275a:	4618      	mov	r0, r3
 800275c:	f00a fb4e 	bl	800cdfc <siprintf>
//        sprintf(period_str, "%d", 500*period);

//        LCD_DisplayString(150, 290, period_str);


        LCD_DisplayNumber(10, 280, maze.TimeToComplete/1000);
 8002760:	4b31      	ldr	r3, [pc, #196]	; (8002828 <LCD_Display_Task+0x418>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a35      	ldr	r2, [pc, #212]	; (800283c <LCD_Display_Task+0x42c>)
 8002766:	fb82 1203 	smull	r1, r2, r2, r3
 800276a:	1192      	asrs	r2, r2, #6
 800276c:	17db      	asrs	r3, r3, #31
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	b29b      	uxth	r3, r3
 8002772:	461a      	mov	r2, r3
 8002774:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002778:	200a      	movs	r0, #10
 800277a:	f000 fc61 	bl	8003040 <LCD_DisplayNumber>
        LCD_DisplayNumber(210, 290, hole_hit);
 800277e:	4b30      	ldr	r3, [pc, #192]	; (8002840 <LCD_Display_Task+0x430>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	b29b      	uxth	r3, r3
 8002784:	461a      	mov	r2, r3
 8002786:	f44f 7191 	mov.w	r1, #290	; 0x122
 800278a:	20d2      	movs	r0, #210	; 0xd2
 800278c:	f000 fc58 	bl	8003040 <LCD_DisplayNumber>
        LCD_DisplayNumber(210, 270, drone.Disruptor.isActive);
 8002790:	4b2c      	ldr	r3, [pc, #176]	; (8002844 <LCD_Display_Task+0x434>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	b29b      	uxth	r3, r3
 8002796:	461a      	mov	r2, r3
 8002798:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800279c:	20d2      	movs	r0, #210	; 0xd2
 800279e:	f000 fc4f 	bl	8003040 <LCD_DisplayNumber>
        LCD_DisplayNumber(120, 270, drone.EnergyStore.EnergyLeft);
 80027a2:	4b28      	ldr	r3, [pc, #160]	; (8002844 <LCD_Display_Task+0x434>)
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	461a      	mov	r2, r3
 80027aa:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80027ae:	2078      	movs	r0, #120	; 0x78
 80027b0:	f000 fc46 	bl	8003040 <LCD_DisplayNumber>


        if(test_x == 1){LCD_DisplayString(20,232,"x");}else{LCD_DisplayString(20,232,"_");}
 80027b4:	4b24      	ldr	r3, [pc, #144]	; (8002848 <LCD_Display_Task+0x438>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d105      	bne.n	80027c8 <LCD_Display_Task+0x3b8>
 80027bc:	4a23      	ldr	r2, [pc, #140]	; (800284c <LCD_Display_Task+0x43c>)
 80027be:	21e8      	movs	r1, #232	; 0xe8
 80027c0:	2014      	movs	r0, #20
 80027c2:	f000 fc15 	bl	8002ff0 <LCD_DisplayString>
 80027c6:	e004      	b.n	80027d2 <LCD_Display_Task+0x3c2>
 80027c8:	4a21      	ldr	r2, [pc, #132]	; (8002850 <LCD_Display_Task+0x440>)
 80027ca:	21e8      	movs	r1, #232	; 0xe8
 80027cc:	2014      	movs	r0, #20
 80027ce:	f000 fc0f 	bl	8002ff0 <LCD_DisplayString>
        if(test_y == 1){LCD_DisplayString(100,232,"y");}else{LCD_DisplayString(100,232,"_");}
 80027d2:	4b20      	ldr	r3, [pc, #128]	; (8002854 <LCD_Display_Task+0x444>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d105      	bne.n	80027e6 <LCD_Display_Task+0x3d6>
 80027da:	4a1f      	ldr	r2, [pc, #124]	; (8002858 <LCD_Display_Task+0x448>)
 80027dc:	21e8      	movs	r1, #232	; 0xe8
 80027de:	2064      	movs	r0, #100	; 0x64
 80027e0:	f000 fc06 	bl	8002ff0 <LCD_DisplayString>
 80027e4:	e004      	b.n	80027f0 <LCD_Display_Task+0x3e0>
 80027e6:	4a1a      	ldr	r2, [pc, #104]	; (8002850 <LCD_Display_Task+0x440>)
 80027e8:	21e8      	movs	r1, #232	; 0xe8
 80027ea:	2064      	movs	r0, #100	; 0x64
 80027ec:	f000 fc00 	bl	8002ff0 <LCD_DisplayString>
        LCD_Draw_Circle_Fill(drone.X_Pos, drone.Y_Pos, 5, LCD_COLOR_BLUE); // Adjust
 80027f0:	4b14      	ldr	r3, [pc, #80]	; (8002844 <LCD_Display_Task+0x434>)
 80027f2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80027f6:	4610      	mov	r0, r2
 80027f8:	4619      	mov	r1, r3
 80027fa:	f7fe fa17 	bl	8000c2c <__aeabi_d2uiz>
 80027fe:	4603      	mov	r3, r0
 8002800:	b29c      	uxth	r4, r3
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <LCD_Display_Task+0x434>)
 8002804:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002808:	4610      	mov	r0, r2
 800280a:	4619      	mov	r1, r3
 800280c:	f7fe fa0e 	bl	8000c2c <__aeabi_d2uiz>
 8002810:	4603      	mov	r3, r0
 8002812:	b299      	uxth	r1, r3
 8002814:	231f      	movs	r3, #31
 8002816:	2205      	movs	r2, #5
 8002818:	4620      	mov	r0, r4
 800281a:	f000 fcc5 	bl	80031a8 <LCD_Draw_Circle_Fill>
	while(1){
 800281e:	e5fb      	b.n	8002418 <LCD_Display_Task+0x8>
 8002820:	20001418 	.word	0x20001418
 8002824:	20001b20 	.word	0x20001b20
 8002828:	20001398 	.word	0x20001398
 800282c:	200013f8 	.word	0x200013f8
 8002830:	0800f248 	.word	0x0800f248
 8002834:	20001400 	.word	0x20001400
 8002838:	0800f250 	.word	0x0800f250
 800283c:	10624dd3 	.word	0x10624dd3
 8002840:	20001ea4 	.word	0x20001ea4
 8002844:	20001358 	.word	0x20001358
 8002848:	20001ff0 	.word	0x20001ff0
 800284c:	0800f258 	.word	0x0800f258
 8002850:	0800f25c 	.word	0x0800f25c
 8002854:	20001ff4 	.word	0x20001ff4
 8002858:	0800f260 	.word	0x0800f260

0800285c <Gyro_Init>:

/**
  * @brief Initialise the gyro for Lab2
  * @retval None
  */
void Gyro_Init(){
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
	Gyro_Power_On();
 8002860:	f000 f80a 	bl	8002878 <Gyro_Power_On>
	osDelay(100);
 8002864:	2064      	movs	r0, #100	; 0x64
 8002866:	f004 fdff 	bl	8007468 <osDelay>
	Gyro_Config_Regs();
 800286a:	f000 f8e9 	bl	8002a40 <Gyro_Config_Regs>
	Gyro_Reboot();
 800286e:	f000 f847 	bl	8002900 <Gyro_Reboot>


}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <Gyro_Power_On>:
/**
  * @brief Power on the Gyro
  * @retval None
  */

void Gyro_Power_On(){
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
	//get data from register
	uint8_t cmd = (GYRO_READ | CTRL_REG1);
 800287e:	23a0      	movs	r3, #160	; 0xa0
 8002880:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buff = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 8002886:	f000 f953 	bl	8002b30 <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 800288a:	bf00      	nop
 800288c:	2102      	movs	r1, #2
 800288e:	481a      	ldr	r0, [pc, #104]	; (80028f8 <Gyro_Power_On+0x80>)
 8002890:	f002 fcce 	bl	8005230 <HAL_GPIO_ReadPin>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f8      	bne.n	800288c <Gyro_Power_On+0x14>
	Gyro_Transmit_Data(&cmd);
 800289a:	1dfb      	adds	r3, r7, #7
 800289c:	4618      	mov	r0, r3
 800289e:	f000 f979 	bl	8002b94 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rx_buff);
 80028a2:	1dbb      	adds	r3, r7, #6
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 f95b 	bl	8002b60 <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 80028aa:	f000 f94d 	bl	8002b48 <Gyro_Slave_Disable>
	cmd = (GYRO_WRITE | CTRL_REG1);
 80028ae:	2320      	movs	r3, #32
 80028b0:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buff = (rx_buff | (1 << 3));
 80028b2:	79bb      	ldrb	r3, [r7, #6]
 80028b4:	f043 0308 	orr.w	r3, r3, #8
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	717b      	strb	r3, [r7, #5]
	Gyro_Slave_Enable();
 80028bc:	f000 f938 	bl	8002b30 <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 80028c0:	bf00      	nop
 80028c2:	2102      	movs	r1, #2
 80028c4:	480c      	ldr	r0, [pc, #48]	; (80028f8 <Gyro_Power_On+0x80>)
 80028c6:	f002 fcb3 	bl	8005230 <HAL_GPIO_ReadPin>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f8      	bne.n	80028c2 <Gyro_Power_On+0x4a>
	Gyro_Transmit_Data(&cmd);
 80028d0:	1dfb      	adds	r3, r7, #7
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 f95e 	bl	8002b94 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&tx_buff);
 80028d8:	1d7b      	adds	r3, r7, #5
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 f95a 	bl	8002b94 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 80028e0:	f000 f932 	bl	8002b48 <Gyro_Slave_Disable>


	if(HAL_Status != HAL_OK)
 80028e4:	4b05      	ldr	r3, [pc, #20]	; (80028fc <Gyro_Power_On+0x84>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d000      	beq.n	80028ee <Gyro_Power_On+0x76>
	{
		while(1);
 80028ec:	e7fe      	b.n	80028ec <Gyro_Power_On+0x74>
	}
	}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40020800 	.word	0x40020800
 80028fc:	20001ff8 	.word	0x20001ff8

08002900 <Gyro_Reboot>:
/**
  * @brief Perform a Reboot on the Gyro
  * @retval None
  */

void Gyro_Reboot(){
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
	uint8_t cmd = (GYRO_READ | CTRL_REG5);
 8002906:	23a4      	movs	r3, #164	; 0xa4
 8002908:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buff = 0;
 800290a:	2300      	movs	r3, #0
 800290c:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 800290e:	f000 f90f 	bl	8002b30 <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8002912:	bf00      	nop
 8002914:	2102      	movs	r1, #2
 8002916:	4817      	ldr	r0, [pc, #92]	; (8002974 <Gyro_Reboot+0x74>)
 8002918:	f002 fc8a 	bl	8005230 <HAL_GPIO_ReadPin>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f8      	bne.n	8002914 <Gyro_Reboot+0x14>
	Gyro_Transmit_Data(&cmd);
 8002922:	1dfb      	adds	r3, r7, #7
 8002924:	4618      	mov	r0, r3
 8002926:	f000 f935 	bl	8002b94 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rx_buff);
 800292a:	1dbb      	adds	r3, r7, #6
 800292c:	4618      	mov	r0, r3
 800292e:	f000 f917 	bl	8002b60 <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 8002932:	f000 f909 	bl	8002b48 <Gyro_Slave_Disable>
	cmd = (GYRO_WRITE | CTRL_REG5);
 8002936:	2324      	movs	r3, #36	; 0x24
 8002938:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buff = (rx_buff | (1 << 7));
 800293a:	79bb      	ldrb	r3, [r7, #6]
 800293c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002940:	b2db      	uxtb	r3, r3
 8002942:	717b      	strb	r3, [r7, #5]
	Gyro_Slave_Enable();
 8002944:	f000 f8f4 	bl	8002b30 <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8002948:	bf00      	nop
 800294a:	2102      	movs	r1, #2
 800294c:	4809      	ldr	r0, [pc, #36]	; (8002974 <Gyro_Reboot+0x74>)
 800294e:	f002 fc6f 	bl	8005230 <HAL_GPIO_ReadPin>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1f8      	bne.n	800294a <Gyro_Reboot+0x4a>
	Gyro_Transmit_Data(&cmd);
 8002958:	1dfb      	adds	r3, r7, #7
 800295a:	4618      	mov	r0, r3
 800295c:	f000 f91a 	bl	8002b94 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&tx_buff);
 8002960:	1d7b      	adds	r3, r7, #5
 8002962:	4618      	mov	r0, r3
 8002964:	f000 f916 	bl	8002b94 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 8002968:	f000 f8ee 	bl	8002b48 <Gyro_Slave_Disable>

}
 800296c:	bf00      	nop
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40020800 	.word	0x40020800

08002978 <Gyro_Get_Y_Velocity>:
/**
  * @brief Sample the Velocity Rate of the Gyro and return
  * @retval 16 bit integer representing the velocity of the gyro
  */

int16_t Gyro_Get_Y_Velocity(){
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
	int16_t yval = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	80fb      	strh	r3, [r7, #6]

	uint8_t cmd = (GYRO_READ| MS_BIT | OUT_Y_L);
 8002982:	23ea      	movs	r3, #234	; 0xea
 8002984:	717b      	strb	r3, [r7, #5]
	uint8_t rxbuff_yl = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	713b      	strb	r3, [r7, #4]
	uint8_t rxbuff_yh = 0;
 800298a:	2300      	movs	r3, #0
 800298c:	70fb      	strb	r3, [r7, #3]

	Gyro_Slave_Enable();
 800298e:	f000 f8cf 	bl	8002b30 <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8002992:	bf00      	nop
 8002994:	2102      	movs	r1, #2
 8002996:	4810      	ldr	r0, [pc, #64]	; (80029d8 <Gyro_Get_Y_Velocity+0x60>)
 8002998:	f002 fc4a 	bl	8005230 <HAL_GPIO_ReadPin>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f8      	bne.n	8002994 <Gyro_Get_Y_Velocity+0x1c>
	Gyro_Transmit_Data(&cmd);
 80029a2:	1d7b      	adds	r3, r7, #5
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 f8f5 	bl	8002b94 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rxbuff_yl);
 80029aa:	1d3b      	adds	r3, r7, #4
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 f8d7 	bl	8002b60 <Gyro_Receive_Data>
	Gyro_Receive_Data(&rxbuff_yh);
 80029b2:	1cfb      	adds	r3, r7, #3
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 f8d3 	bl	8002b60 <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 80029ba:	f000 f8c5 	bl	8002b48 <Gyro_Slave_Disable>


	yval = (int16_t) ((rxbuff_yh << 8) | rxbuff_yl);
 80029be:	78fb      	ldrb	r3, [r7, #3]
 80029c0:	021b      	lsls	r3, r3, #8
 80029c2:	b21a      	sxth	r2, r3
 80029c4:	793b      	ldrb	r3, [r7, #4]
 80029c6:	b21b      	sxth	r3, r3
 80029c8:	4313      	orrs	r3, r2
 80029ca:	80fb      	strh	r3, [r7, #6]

	return yval;
 80029cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]



}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40020800 	.word	0x40020800

080029dc <Gyro_Get_X_Velocity>:

int16_t Gyro_Get_X_Velocity(){
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
	int16_t xval = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	80fb      	strh	r3, [r7, #6]

	uint8_t cmd = (GYRO_READ| MS_BIT | OUT_X_L);
 80029e6:	23e8      	movs	r3, #232	; 0xe8
 80029e8:	717b      	strb	r3, [r7, #5]
	uint8_t rxbuff_xl = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	713b      	strb	r3, [r7, #4]
	uint8_t rxbuff_xh = 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	70fb      	strb	r3, [r7, #3]

	Gyro_Slave_Enable();
 80029f2:	f000 f89d 	bl	8002b30 <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 80029f6:	bf00      	nop
 80029f8:	2102      	movs	r1, #2
 80029fa:	4810      	ldr	r0, [pc, #64]	; (8002a3c <Gyro_Get_X_Velocity+0x60>)
 80029fc:	f002 fc18 	bl	8005230 <HAL_GPIO_ReadPin>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f8      	bne.n	80029f8 <Gyro_Get_X_Velocity+0x1c>
	Gyro_Transmit_Data(&cmd);
 8002a06:	1d7b      	adds	r3, r7, #5
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 f8c3 	bl	8002b94 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rxbuff_xl);
 8002a0e:	1d3b      	adds	r3, r7, #4
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 f8a5 	bl	8002b60 <Gyro_Receive_Data>
	Gyro_Receive_Data(&rxbuff_xh);
 8002a16:	1cfb      	adds	r3, r7, #3
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 f8a1 	bl	8002b60 <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 8002a1e:	f000 f893 	bl	8002b48 <Gyro_Slave_Disable>


	xval = (int16_t) ((rxbuff_xh << 8) | rxbuff_xl);
 8002a22:	78fb      	ldrb	r3, [r7, #3]
 8002a24:	021b      	lsls	r3, r3, #8
 8002a26:	b21a      	sxth	r2, r3
 8002a28:	793b      	ldrb	r3, [r7, #4]
 8002a2a:	b21b      	sxth	r3, r3
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	80fb      	strh	r3, [r7, #6]

	return xval;
 8002a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]

}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40020800 	.word	0x40020800

08002a40 <Gyro_Config_Regs>:

/**
  * @brief Configure the registers for the gyro
  * @retval None
  */
void Gyro_Config_Regs(){
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0

	//CR1
	uint8_t addr_cmd = (GYRO_WRITE | CTRL_REG1);
 8002a46:	2320      	movs	r3, #32
 8002a48:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_cmd = 0x1A; // 0001 1010 - Gyro Data rate is 100hz, gyro enabled on y-axis only
 8002a4a:	231a      	movs	r3, #26
 8002a4c:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 8002a4e:	f000 f86f 	bl	8002b30 <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8002a52:	bf00      	nop
 8002a54:	2102      	movs	r1, #2
 8002a56:	482e      	ldr	r0, [pc, #184]	; (8002b10 <Gyro_Config_Regs+0xd0>)
 8002a58:	f002 fbea 	bl	8005230 <HAL_GPIO_ReadPin>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f8      	bne.n	8002a54 <Gyro_Config_Regs+0x14>
	Gyro_Transmit_Data(&addr_cmd);
 8002a62:	1dfb      	adds	r3, r7, #7
 8002a64:	4618      	mov	r0, r3
 8002a66:	f000 f895 	bl	8002b94 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8002a6a:	1dbb      	adds	r3, r7, #6
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 f891 	bl	8002b94 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 8002a72:	f000 f869 	bl	8002b48 <Gyro_Slave_Disable>




	//CR4
	addr_cmd = (GYRO_WRITE | CTRL_REG4);
 8002a76:	2323      	movs	r3, #35	; 0x23
 8002a78:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0x10; //0001 0000 - Full scale rate of 500dps
 8002a7a:	2310      	movs	r3, #16
 8002a7c:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 8002a7e:	f000 f857 	bl	8002b30 <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8002a82:	bf00      	nop
 8002a84:	2102      	movs	r1, #2
 8002a86:	4822      	ldr	r0, [pc, #136]	; (8002b10 <Gyro_Config_Regs+0xd0>)
 8002a88:	f002 fbd2 	bl	8005230 <HAL_GPIO_ReadPin>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f8      	bne.n	8002a84 <Gyro_Config_Regs+0x44>
	Gyro_Transmit_Data(&addr_cmd);
 8002a92:	1dfb      	adds	r3, r7, #7
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 f87d 	bl	8002b94 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8002a9a:	1dbb      	adds	r3, r7, #6
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 f879 	bl	8002b94 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 8002aa2:	f000 f851 	bl	8002b48 <Gyro_Slave_Disable>


	//CR5
	addr_cmd = (GYRO_WRITE | CTRL_REG5);
 8002aa6:	2324      	movs	r3, #36	; 0x24
 8002aa8:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0xC0; //1100 0000 - Reboot initially and enable FIFO
 8002aaa:	23c0      	movs	r3, #192	; 0xc0
 8002aac:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 8002aae:	f000 f83f 	bl	8002b30 <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8002ab2:	bf00      	nop
 8002ab4:	2102      	movs	r1, #2
 8002ab6:	4816      	ldr	r0, [pc, #88]	; (8002b10 <Gyro_Config_Regs+0xd0>)
 8002ab8:	f002 fbba 	bl	8005230 <HAL_GPIO_ReadPin>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f8      	bne.n	8002ab4 <Gyro_Config_Regs+0x74>
	Gyro_Transmit_Data(&addr_cmd);
 8002ac2:	1dfb      	adds	r3, r7, #7
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 f865 	bl	8002b94 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8002aca:	1dbb      	adds	r3, r7, #6
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 f861 	bl	8002b94 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 8002ad2:	f000 f839 	bl	8002b48 <Gyro_Slave_Disable>


	//FIFO_CTRL
	addr_cmd = (GYRO_WRITE | FIFO_CTRL_REG);
 8002ad6:	232e      	movs	r3, #46	; 0x2e
 8002ad8:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0x00; //0100 0000 FIFO in stream mode
 8002ada:	2300      	movs	r3, #0
 8002adc:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 8002ade:	f000 f827 	bl	8002b30 <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8002ae2:	bf00      	nop
 8002ae4:	2102      	movs	r1, #2
 8002ae6:	480a      	ldr	r0, [pc, #40]	; (8002b10 <Gyro_Config_Regs+0xd0>)
 8002ae8:	f002 fba2 	bl	8005230 <HAL_GPIO_ReadPin>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f8      	bne.n	8002ae4 <Gyro_Config_Regs+0xa4>
	Gyro_Transmit_Data(&addr_cmd);
 8002af2:	1dfb      	adds	r3, r7, #7
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 f84d 	bl	8002b94 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8002afa:	1dbb      	adds	r3, r7, #6
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 f849 	bl	8002b94 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 8002b02:	f000 f821 	bl	8002b48 <Gyro_Slave_Disable>




}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40020800 	.word	0x40020800

08002b14 <Gyro_HAL_Check>:

/**
  * @brief Check the status of the HAL
  * @retval None
  */
void Gyro_HAL_Check(){
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
	if(HAL_Status != HAL_OK){
 8002b18:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <Gyro_HAL_Check+0x18>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d000      	beq.n	8002b22 <Gyro_HAL_Check+0xe>
		while(1);
 8002b20:	e7fe      	b.n	8002b20 <Gyro_HAL_Check+0xc>
	}
}
 8002b22:	bf00      	nop
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	20001ff8 	.word	0x20001ff8

08002b30 <Gyro_Slave_Enable>:

/**
  * @brief Enable the Chip Select pin
  * @retval None
  */
void Gyro_Slave_Enable(){
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT,CS_PIN,GPIO_PIN_RESET);
 8002b34:	2200      	movs	r2, #0
 8002b36:	2102      	movs	r1, #2
 8002b38:	4802      	ldr	r0, [pc, #8]	; (8002b44 <Gyro_Slave_Enable+0x14>)
 8002b3a:	f002 fb91 	bl	8005260 <HAL_GPIO_WritePin>
}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40020800 	.word	0x40020800

08002b48 <Gyro_Slave_Disable>:

/**
  * @brief Disable the Chip Select pin
  * @retval None
  */
void Gyro_Slave_Disable(){
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT,CS_PIN,GPIO_PIN_SET);
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	2102      	movs	r1, #2
 8002b50:	4802      	ldr	r0, [pc, #8]	; (8002b5c <Gyro_Slave_Disable+0x14>)
 8002b52:	f002 fb85 	bl	8005260 <HAL_GPIO_WritePin>
}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40020800 	.word	0x40020800

08002b60 <Gyro_Receive_Data>:
/**
  * @brief Recieve one bit of data from the Gyro
  * @param rx_buff- pointer to a data buffer, recieved data will appear here
  * @retval None
  */
void Gyro_Receive_Data(uint8_t *rx_buff){
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]

	HAL_Status = HAL_SPI_Receive(&hspi5, rx_buff, 1, TIMEOUT);
 8002b68:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4806      	ldr	r0, [pc, #24]	; (8002b8c <Gyro_Receive_Data+0x2c>)
 8002b72:	f003 fe88 	bl	8006886 <HAL_SPI_Receive>
 8002b76:	4603      	mov	r3, r0
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <Gyro_Receive_Data+0x30>)
 8002b7c:	701a      	strb	r2, [r3, #0]
	Gyro_HAL_Check();
 8002b7e:	f7ff ffc9 	bl	8002b14 <Gyro_HAL_Check>

}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	200279ec 	.word	0x200279ec
 8002b90:	20001ff8 	.word	0x20001ff8

08002b94 <Gyro_Transmit_Data>:
/**
  * @brief Send one bit of data to the Gyro
  * @param tx_buff- pointer to a data buffer.
  * @retval None
  */
void Gyro_Transmit_Data(uint8_t *tx_buff){
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]

	HAL_Status = HAL_SPI_Transmit(&hspi5,tx_buff, 1, TIMEOUT);
 8002b9c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4806      	ldr	r0, [pc, #24]	; (8002bc0 <Gyro_Transmit_Data+0x2c>)
 8002ba6:	f003 fd32 	bl	800660e <HAL_SPI_Transmit>
 8002baa:	4603      	mov	r3, r0
 8002bac:	461a      	mov	r2, r3
 8002bae:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <Gyro_Transmit_Data+0x30>)
 8002bb0:	701a      	strb	r2, [r3, #0]
	Gyro_HAL_Check();
 8002bb2:	f7ff ffaf 	bl	8002b14 <Gyro_HAL_Check>
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	200279ec 	.word	0x200279ec
 8002bc4:	20001ff8 	.word	0x20001ff8

08002bc8 <LCD_GPIO_Init>:
static void SPI_Error(void);

/* Provided Functions and API  - MOTIFY ONLY WITH EXTREME CAUTION!!! */

void LCD_GPIO_Init(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08c      	sub	sp, #48	; 0x30
 8002bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
 8002bd2:	4b5a      	ldr	r3, [pc, #360]	; (8002d3c <LCD_GPIO_Init+0x174>)
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd6:	4a59      	ldr	r2, [pc, #356]	; (8002d3c <LCD_GPIO_Init+0x174>)
 8002bd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8002bde:	4b57      	ldr	r3, [pc, #348]	; (8002d3c <LCD_GPIO_Init+0x174>)
 8002be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002be6:	61bb      	str	r3, [r7, #24]
 8002be8:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	4b53      	ldr	r3, [pc, #332]	; (8002d3c <LCD_GPIO_Init+0x174>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	4a52      	ldr	r2, [pc, #328]	; (8002d3c <LCD_GPIO_Init+0x174>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfa:	4b50      	ldr	r3, [pc, #320]	; (8002d3c <LCD_GPIO_Init+0x174>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	4b4c      	ldr	r3, [pc, #304]	; (8002d3c <LCD_GPIO_Init+0x174>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	4a4b      	ldr	r2, [pc, #300]	; (8002d3c <LCD_GPIO_Init+0x174>)
 8002c10:	f043 0302 	orr.w	r3, r3, #2
 8002c14:	6313      	str	r3, [r2, #48]	; 0x30
 8002c16:	4b49      	ldr	r3, [pc, #292]	; (8002d3c <LCD_GPIO_Init+0x174>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	613b      	str	r3, [r7, #16]
 8002c20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	4b45      	ldr	r3, [pc, #276]	; (8002d3c <LCD_GPIO_Init+0x174>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	4a44      	ldr	r2, [pc, #272]	; (8002d3c <LCD_GPIO_Init+0x174>)
 8002c2c:	f043 0304 	orr.w	r3, r3, #4
 8002c30:	6313      	str	r3, [r2, #48]	; 0x30
 8002c32:	4b42      	ldr	r3, [pc, #264]	; (8002d3c <LCD_GPIO_Init+0x174>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	4b3e      	ldr	r3, [pc, #248]	; (8002d3c <LCD_GPIO_Init+0x174>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	4a3d      	ldr	r2, [pc, #244]	; (8002d3c <LCD_GPIO_Init+0x174>)
 8002c48:	f043 0308 	orr.w	r3, r3, #8
 8002c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4e:	4b3b      	ldr	r3, [pc, #236]	; (8002d3c <LCD_GPIO_Init+0x174>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	607b      	str	r3, [r7, #4]
 8002c5e:	4b37      	ldr	r3, [pc, #220]	; (8002d3c <LCD_GPIO_Init+0x174>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	4a36      	ldr	r2, [pc, #216]	; (8002d3c <LCD_GPIO_Init+0x174>)
 8002c64:	f043 0320 	orr.w	r3, r3, #32
 8002c68:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6a:	4b34      	ldr	r3, [pc, #208]	; (8002d3c <LCD_GPIO_Init+0x174>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	f003 0320 	and.w	r3, r3, #32
 8002c72:	607b      	str	r3, [r7, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	603b      	str	r3, [r7, #0]
 8002c7a:	4b30      	ldr	r3, [pc, #192]	; (8002d3c <LCD_GPIO_Init+0x174>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	4a2f      	ldr	r2, [pc, #188]	; (8002d3c <LCD_GPIO_Init+0x174>)
 8002c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c84:	6313      	str	r3, [r2, #48]	; 0x30
 8002c86:	4b2d      	ldr	r3, [pc, #180]	; (8002d3c <LCD_GPIO_Init+0x174>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002c92:	f641 0358 	movw	r3, #6232	; 0x1858
 8002c96:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002ca4:	230e      	movs	r3, #14
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002ca8:	f107 031c 	add.w	r3, r7, #28
 8002cac:	4619      	mov	r1, r3
 8002cae:	4824      	ldr	r0, [pc, #144]	; (8002d40 <LCD_GPIO_Init+0x178>)
 8002cb0:	f002 f806 	bl	8004cc0 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002cb4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002cb8:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002cba:	f107 031c 	add.w	r3, r7, #28
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4820      	ldr	r0, [pc, #128]	; (8002d44 <LCD_GPIO_Init+0x17c>)
 8002cc2:	f001 fffd 	bl	8004cc0 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002cc6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002cca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002ccc:	f107 031c 	add.w	r3, r7, #28
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	481d      	ldr	r0, [pc, #116]	; (8002d48 <LCD_GPIO_Init+0x180>)
 8002cd4:	f001 fff4 	bl	8004cc0 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002cd8:	2348      	movs	r3, #72	; 0x48
 8002cda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002cdc:	f107 031c 	add.w	r3, r7, #28
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	481a      	ldr	r0, [pc, #104]	; (8002d4c <LCD_GPIO_Init+0x184>)
 8002ce4:	f001 ffec 	bl	8004cc0 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002ce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002cee:	f107 031c 	add.w	r3, r7, #28
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4816      	ldr	r0, [pc, #88]	; (8002d50 <LCD_GPIO_Init+0x188>)
 8002cf6:	f001 ffe3 	bl	8004cc0 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002cfa:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002cfe:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002d00:	f107 031c 	add.w	r3, r7, #28
 8002d04:	4619      	mov	r1, r3
 8002d06:	4813      	ldr	r0, [pc, #76]	; (8002d54 <LCD_GPIO_Init+0x18c>)
 8002d08:	f001 ffda 	bl	8004cc0 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002d10:	2309      	movs	r3, #9
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002d14:	f107 031c 	add.w	r3, r7, #28
 8002d18:	4619      	mov	r1, r3
 8002d1a:	480a      	ldr	r0, [pc, #40]	; (8002d44 <LCD_GPIO_Init+0x17c>)
 8002d1c:	f001 ffd0 	bl	8004cc0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002d20:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002d26:	f107 031c 	add.w	r3, r7, #28
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4809      	ldr	r0, [pc, #36]	; (8002d54 <LCD_GPIO_Init+0x18c>)
 8002d2e:	f001 ffc7 	bl	8004cc0 <HAL_GPIO_Init>
}
 8002d32:	bf00      	nop
 8002d34:	3730      	adds	r7, #48	; 0x30
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40020000 	.word	0x40020000
 8002d44:	40020400 	.word	0x40020400
 8002d48:	40020800 	.word	0x40020800
 8002d4c:	40020c00 	.word	0x40020c00
 8002d50:	40021400 	.word	0x40021400
 8002d54:	40021800 	.word	0x40021800

08002d58 <LTCD__Init>:


void LTCD__Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  	hltdc.Instance = LTDC;
 8002d5c:	4b2a      	ldr	r3, [pc, #168]	; (8002e08 <LTCD__Init+0xb0>)
 8002d5e:	4a2b      	ldr	r2, [pc, #172]	; (8002e0c <LTCD__Init+0xb4>)
 8002d60:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8002d62:	4b29      	ldr	r3, [pc, #164]	; (8002e08 <LTCD__Init+0xb0>)
 8002d64:	2209      	movs	r2, #9
 8002d66:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8002d68:	4b27      	ldr	r3, [pc, #156]	; (8002e08 <LTCD__Init+0xb0>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8002d6e:	4b26      	ldr	r3, [pc, #152]	; (8002e08 <LTCD__Init+0xb0>)
 8002d70:	221d      	movs	r2, #29
 8002d72:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8002d74:	4b24      	ldr	r3, [pc, #144]	; (8002e08 <LTCD__Init+0xb0>)
 8002d76:	2203      	movs	r2, #3
 8002d78:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8002d7a:	4b23      	ldr	r3, [pc, #140]	; (8002e08 <LTCD__Init+0xb0>)
 8002d7c:	f240 120d 	movw	r2, #269	; 0x10d
 8002d80:	625a      	str	r2, [r3, #36]	; 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8002d82:	4b21      	ldr	r3, [pc, #132]	; (8002e08 <LTCD__Init+0xb0>)
 8002d84:	f240 1243 	movw	r2, #323	; 0x143
 8002d88:	629a      	str	r2, [r3, #40]	; 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8002d8a:	4b1f      	ldr	r3, [pc, #124]	; (8002e08 <LTCD__Init+0xb0>)
 8002d8c:	f240 1217 	movw	r2, #279	; 0x117
 8002d90:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8002d92:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <LTCD__Init+0xb0>)
 8002d94:	f240 1247 	movw	r2, #327	; 0x147
 8002d98:	631a      	str	r2, [r3, #48]	; 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8002d9a:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <LTCD__Init+0xb0>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8002da2:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <LTCD__Init+0xb0>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8002daa:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <LTCD__Init+0xb0>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002db2:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <LTCD__Init+0xb8>)
 8002db4:	2208      	movs	r2, #8
 8002db6:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002db8:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <LTCD__Init+0xb8>)
 8002dba:	22c0      	movs	r2, #192	; 0xc0
 8002dbc:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002dbe:	4b14      	ldr	r3, [pc, #80]	; (8002e10 <LTCD__Init+0xb8>)
 8002dc0:	2204      	movs	r2, #4
 8002dc2:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002dc4:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <LTCD__Init+0xb8>)
 8002dc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dca:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002dcc:	4810      	ldr	r0, [pc, #64]	; (8002e10 <LTCD__Init+0xb8>)
 8002dce:	f003 f983 	bl	80060d8 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <LTCD__Init+0xb0>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <LTCD__Init+0xb0>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002dde:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <LTCD__Init+0xb0>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002de4:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <LTCD__Init+0xb0>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8002dea:	f7ff feed 	bl	8002bc8 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002dee:	4806      	ldr	r0, [pc, #24]	; (8002e08 <LTCD__Init+0xb0>)
 8002df0:	f002 fa68 	bl	80052c4 <HAL_LTDC_Init>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8002dfa:	f000 fc67 	bl	80036cc <LCD_Error_Handler>
	 }

	ili9341_Init();
 8002dfe:	f000 fc68 	bl	80036d2 <ili9341_Init>
}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20001ffc 	.word	0x20001ffc
 8002e0c:	40016800 	.word	0x40016800
 8002e10:	200020a4 	.word	0x200020a4

08002e14 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b090      	sub	sp, #64	; 0x40
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	71fb      	strb	r3, [r7, #7]
  LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8002e22:	23f0      	movs	r3, #240	; 0xf0
 8002e24:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8002e2a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002e2e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8002e30:	2302      	movs	r3, #2
 8002e32:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8002e34:	23ff      	movs	r3, #255	; 0xff
 8002e36:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002e3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e40:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002e42:	2305      	movs	r3, #5
 8002e44:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (LayerIndex == 0){
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8002e4c:	4b0f      	ldr	r3, [pc, #60]	; (8002e8c <LTCD_Layer_Init+0x78>)
 8002e4e:	633b      	str	r3, [r7, #48]	; 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8002e50:	23f0      	movs	r3, #240	; 0xf0
 8002e52:	637b      	str	r3, [r7, #52]	; 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8002e54:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002e58:	63bb      	str	r3, [r7, #56]	; 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8002e6c:	79fa      	ldrb	r2, [r7, #7]
 8002e6e:	f107 030c 	add.w	r3, r7, #12
 8002e72:	4619      	mov	r1, r3
 8002e74:	4806      	ldr	r0, [pc, #24]	; (8002e90 <LTCD_Layer_Init+0x7c>)
 8002e76:	f002 faf5 	bl	8005464 <HAL_LTDC_ConfigLayer>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8002e80:	f000 fc24 	bl	80036cc <LCD_Error_Handler>
	}

}
 8002e84:	bf00      	nop
 8002e86:	3740      	adds	r7, #64	; 0x40
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	20002130 	.word	0x20002130
 8002e90:	20001ffc 	.word	0x20001ffc

08002e94 <LCD_Draw_Pixel>:

// Draws a single pixel, should be useds only within this fileset and should not be seen by external clients. 
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	80fb      	strh	r3, [r7, #6]
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	80bb      	strh	r3, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8002ea6:	88ba      	ldrh	r2, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	4905      	ldr	r1, [pc, #20]	; (8002ecc <LCD_Draw_Pixel+0x38>)
 8002eb8:	887a      	ldrh	r2, [r7, #2]
 8002eba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20002130 	.word	0x20002130

08002ed0 <LCD_DrawChar>:


void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	603a      	str	r2, [r7, #0]
 8002eda:	80fb      	strh	r3, [r7, #6]
 8002edc:	460b      	mov	r3, r1
 8002ede:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	e04c      	b.n	8002f88 <LCD_DrawChar+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60bb      	str	r3, [r7, #8]
 8002ef2:	e03f      	b.n	8002f74 <LCD_DrawChar+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	4413      	add	r3, r2
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	4619      	mov	r1, r3
 8002f00:	4b27      	ldr	r3, [pc, #156]	; (8002fa0 <LCD_DrawChar+0xd0>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	889b      	ldrh	r3, [r3, #4]
 8002f06:	4a27      	ldr	r2, [pc, #156]	; (8002fa4 <LCD_DrawChar+0xd4>)
 8002f08:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0c:	08db      	lsrs	r3, r3, #3
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	2280      	movs	r2, #128	; 0x80
 8002f14:	409a      	lsls	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	fa42 f303 	asr.w	r3, r2, r3
 8002f1c:	400b      	ands	r3, r1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d104      	bne.n	8002f2c <LCD_DrawChar+0x5c>
 8002f22:	4b1f      	ldr	r3, [pc, #124]	; (8002fa0 <LCD_DrawChar+0xd0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	889b      	ldrh	r3, [r3, #4]
 8002f28:	2b0c      	cmp	r3, #12
 8002f2a:	d920      	bls.n	8002f6e <LCD_DrawChar+0x9e>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	4413      	add	r3, r2
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	461a      	mov	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	fa42 f303 	asr.w	r3, r2, r3
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d104      	bne.n	8002f50 <LCD_DrawChar+0x80>
 8002f46:	4b16      	ldr	r3, [pc, #88]	; (8002fa0 <LCD_DrawChar+0xd0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	889b      	ldrh	r3, [r3, #4]
 8002f4c:	2b0c      	cmp	r3, #12
 8002f4e:	d80e      	bhi.n	8002f6e <LCD_DrawChar+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	88fb      	ldrh	r3, [r7, #6]
 8002f56:	4413      	add	r3, r2
 8002f58:	b298      	uxth	r0, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	88bb      	ldrh	r3, [r7, #4]
 8002f60:	4413      	add	r3, r2
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	4a10      	ldr	r2, [pc, #64]	; (8002fa8 <LCD_DrawChar+0xd8>)
 8002f66:	8812      	ldrh	r2, [r2, #0]
 8002f68:	4619      	mov	r1, r3
 8002f6a:	f7ff ff93 	bl	8002e94 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	3301      	adds	r3, #1
 8002f72:	60bb      	str	r3, [r7, #8]
 8002f74:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <LCD_DrawChar+0xd0>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	889b      	ldrh	r3, [r3, #4]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d3b8      	bcc.n	8002ef4 <LCD_DrawChar+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	3301      	adds	r3, #1
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <LCD_DrawChar+0xd0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	88db      	ldrh	r3, [r3, #6]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d3ab      	bcc.n	8002eee <LCD_DrawChar+0x1e>
      }
    }
  }
}
 8002f96:	bf00      	nop
 8002f98:	bf00      	nop
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	200020d4 	.word	0x200020d4
 8002fa4:	aaaaaaab 	.word	0xaaaaaaab
 8002fa8:	20000008 	.word	0x20000008

08002fac <LCD_DisplayChar>:

// Displays Char
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	80fb      	strh	r3, [r7, #6]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	80bb      	strh	r3, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	3b20      	subs	r3, #32
 8002fc2:	70fb      	strb	r3, [r7, #3]
  LCD_DrawChar(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8002fc4:	4b09      	ldr	r3, [pc, #36]	; (8002fec <LCD_DisplayChar+0x40>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	78fb      	ldrb	r3, [r7, #3]
 8002fcc:	4907      	ldr	r1, [pc, #28]	; (8002fec <LCD_DisplayChar+0x40>)
 8002fce:	6809      	ldr	r1, [r1, #0]
 8002fd0:	88c9      	ldrh	r1, [r1, #6]
 8002fd2:	fb01 f303 	mul.w	r3, r1, r3
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	441a      	add	r2, r3
 8002fda:	88b9      	ldrh	r1, [r7, #4]
 8002fdc:	88fb      	ldrh	r3, [r7, #6]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff ff76 	bl	8002ed0 <LCD_DrawChar>
}
 8002fe4:	bf00      	nop
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	200020d4 	.word	0x200020d4

08002ff0 <LCD_DisplayString>:

void LCD_DisplayString(uint16_t Xpos, uint16_t Ypos, char *string){
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	603a      	str	r2, [r7, #0]
 8002ffa:	80fb      	strh	r3, [r7, #6]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	80bb      	strh	r3, [r7, #4]
	if(string == NULL) return;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d017      	beq.n	8003036 <LCD_DisplayString+0x46>
	uint16_t offset = 0;
 8003006:	2300      	movs	r3, #0
 8003008:	81fb      	strh	r3, [r7, #14]
	while(*string != '\0'){
 800300a:	e00f      	b.n	800302c <LCD_DisplayString+0x3c>
		LCD_DisplayChar(Xpos+offset, Ypos, *string);
 800300c:	88fa      	ldrh	r2, [r7, #6]
 800300e:	89fb      	ldrh	r3, [r7, #14]
 8003010:	4413      	add	r3, r2
 8003012:	b298      	uxth	r0, r3
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	781a      	ldrb	r2, [r3, #0]
 8003018:	88bb      	ldrh	r3, [r7, #4]
 800301a:	4619      	mov	r1, r3
 800301c:	f7ff ffc6 	bl	8002fac <LCD_DisplayChar>
		string++;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	3301      	adds	r3, #1
 8003024:	603b      	str	r3, [r7, #0]
		offset+=15;
 8003026:	89fb      	ldrh	r3, [r7, #14]
 8003028:	330f      	adds	r3, #15
 800302a:	81fb      	strh	r3, [r7, #14]
	while(*string != '\0'){
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1eb      	bne.n	800300c <LCD_DisplayString+0x1c>
 8003034:	e000      	b.n	8003038 <LCD_DisplayString+0x48>
	if(string == NULL) return;
 8003036:	bf00      	nop
	}
}
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <LCD_DisplayNumber>:

//Displays Number, size is the number of digits in the number you want to Display
void LCD_DisplayNumber(uint16_t Xpos, uint16_t Ypos, uint16_t Number){
 8003040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003044:	b089      	sub	sp, #36	; 0x24
 8003046:	af00      	add	r7, sp, #0
 8003048:	4603      	mov	r3, r0
 800304a:	80fb      	strh	r3, [r7, #6]
 800304c:	460b      	mov	r3, r1
 800304e:	80bb      	strh	r3, [r7, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	807b      	strh	r3, [r7, #2]
 8003054:	466b      	mov	r3, sp
 8003056:	461e      	mov	r6, r3

	uint8_t numDigits = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	77fb      	strb	r3, [r7, #31]
	if(Number == 0){
 800305c:	887b      	ldrh	r3, [r7, #2]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d107      	bne.n	8003072 <LCD_DisplayNumber+0x32>
		LCD_DisplayChar(Xpos,Ypos,'0');
 8003062:	88b9      	ldrh	r1, [r7, #4]
 8003064:	88fb      	ldrh	r3, [r7, #6]
 8003066:	2230      	movs	r2, #48	; 0x30
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff ff9f 	bl	8002fac <LCD_DisplayChar>
		return;
 800306e:	46b5      	mov	sp, r6
 8003070:	e074      	b.n	800315c <LCD_DisplayNumber+0x11c>
	}
	else{
		uint16_t temp = Number;
 8003072:	887b      	ldrh	r3, [r7, #2]
 8003074:	83bb      	strh	r3, [r7, #28]
		while (temp > 0) {
 8003076:	e008      	b.n	800308a <LCD_DisplayNumber+0x4a>
			temp /= 10;
 8003078:	8bbb      	ldrh	r3, [r7, #28]
 800307a:	4a3a      	ldr	r2, [pc, #232]	; (8003164 <LCD_DisplayNumber+0x124>)
 800307c:	fba2 2303 	umull	r2, r3, r2, r3
 8003080:	08db      	lsrs	r3, r3, #3
 8003082:	83bb      	strh	r3, [r7, #28]
			numDigits++;
 8003084:	7ffb      	ldrb	r3, [r7, #31]
 8003086:	3301      	adds	r3, #1
 8003088:	77fb      	strb	r3, [r7, #31]
		while (temp > 0) {
 800308a:	8bbb      	ldrh	r3, [r7, #28]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1f3      	bne.n	8003078 <LCD_DisplayNumber+0x38>
		}
	}



	uint8_t num_ascii[numDigits];
 8003090:	7ff9      	ldrb	r1, [r7, #31]
 8003092:	460b      	mov	r3, r1
 8003094:	3b01      	subs	r3, #1
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	b2cb      	uxtb	r3, r1
 800309a:	2200      	movs	r2, #0
 800309c:	4698      	mov	r8, r3
 800309e:	4691      	mov	r9, r2
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030b4:	b2cb      	uxtb	r3, r1
 80030b6:	2200      	movs	r2, #0
 80030b8:	461c      	mov	r4, r3
 80030ba:	4615      	mov	r5, r2
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	00eb      	lsls	r3, r5, #3
 80030c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030ca:	00e2      	lsls	r2, r4, #3
 80030cc:	460b      	mov	r3, r1
 80030ce:	3307      	adds	r3, #7
 80030d0:	08db      	lsrs	r3, r3, #3
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	ebad 0d03 	sub.w	sp, sp, r3
 80030d8:	466b      	mov	r3, sp
 80030da:	3300      	adds	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]
	// Convert each digit to a character and print it with standard spacing.
	for (int i = numDigits - 1; i >= 0; i--) {
 80030de:	7ffb      	ldrb	r3, [r7, #31]
 80030e0:	3b01      	subs	r3, #1
 80030e2:	61bb      	str	r3, [r7, #24]
 80030e4:	e01b      	b.n	800311e <LCD_DisplayNumber+0xde>
		num_ascii[i] = '0' + (Number % 10);
 80030e6:	887a      	ldrh	r2, [r7, #2]
 80030e8:	4b1e      	ldr	r3, [pc, #120]	; (8003164 <LCD_DisplayNumber+0x124>)
 80030ea:	fba3 1302 	umull	r1, r3, r3, r2
 80030ee:	08d9      	lsrs	r1, r3, #3
 80030f0:	460b      	mov	r3, r1
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	3330      	adds	r3, #48	; 0x30
 8003100:	b2d9      	uxtb	r1, r3
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	4413      	add	r3, r2
 8003108:	460a      	mov	r2, r1
 800310a:	701a      	strb	r2, [r3, #0]

		Number /= 10;
 800310c:	887b      	ldrh	r3, [r7, #2]
 800310e:	4a15      	ldr	r2, [pc, #84]	; (8003164 <LCD_DisplayNumber+0x124>)
 8003110:	fba2 2303 	umull	r2, r3, r2, r3
 8003114:	08db      	lsrs	r3, r3, #3
 8003116:	807b      	strh	r3, [r7, #2]
	for (int i = numDigits - 1; i >= 0; i--) {
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	3b01      	subs	r3, #1
 800311c:	61bb      	str	r3, [r7, #24]
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	2b00      	cmp	r3, #0
 8003122:	dae0      	bge.n	80030e6 <LCD_DisplayNumber+0xa6>
	}

	//print numbers with offset on x-axis
	uint16_t offset = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	82fb      	strh	r3, [r7, #22]
	for(int i =0; i<numDigits; i++){
 8003128:	2300      	movs	r3, #0
 800312a:	613b      	str	r3, [r7, #16]
 800312c:	e011      	b.n	8003152 <LCD_DisplayNumber+0x112>
		LCD_DisplayChar(Xpos+offset,Ypos,num_ascii[i]);
 800312e:	88fa      	ldrh	r2, [r7, #6]
 8003130:	8afb      	ldrh	r3, [r7, #22]
 8003132:	4413      	add	r3, r2
 8003134:	b298      	uxth	r0, r3
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	4413      	add	r3, r2
 800313c:	781a      	ldrb	r2, [r3, #0]
 800313e:	88bb      	ldrh	r3, [r7, #4]
 8003140:	4619      	mov	r1, r3
 8003142:	f7ff ff33 	bl	8002fac <LCD_DisplayChar>
		offset+=12;
 8003146:	8afb      	ldrh	r3, [r7, #22]
 8003148:	330c      	adds	r3, #12
 800314a:	82fb      	strh	r3, [r7, #22]
	for(int i =0; i<numDigits; i++){
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	3301      	adds	r3, #1
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	7ffb      	ldrb	r3, [r7, #31]
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	429a      	cmp	r2, r3
 8003158:	dbe9      	blt.n	800312e <LCD_DisplayNumber+0xee>
 800315a:	46b5      	mov	sp, r6
	}

}
 800315c:	3724      	adds	r7, #36	; 0x24
 800315e:	46bd      	mov	sp, r7
 8003160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003164:	cccccccd 	.word	0xcccccccd

08003168 <LCD_SetTextColor>:

void LCD_SetTextColor(uint16_t Color)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	4603      	mov	r3, r0
 8003170:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8003172:	4a04      	ldr	r2, [pc, #16]	; (8003184 <LCD_SetTextColor+0x1c>)
 8003174:	88fb      	ldrh	r3, [r7, #6]
 8003176:	8013      	strh	r3, [r2, #0]
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	20000008 	.word	0x20000008

08003188 <LCD_SetFont>:

void LCD_SetFont(FONT_t *fonts)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8003190:	4a04      	ldr	r2, [pc, #16]	; (80031a4 <LCD_SetFont+0x1c>)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6013      	str	r3, [r2, #0]
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	200020d4 	.word	0x200020d4

080031a8 <LCD_Draw_Circle_Fill>:

// Draw Circle Filled
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4604      	mov	r4, r0
 80031b0:	4608      	mov	r0, r1
 80031b2:	4611      	mov	r1, r2
 80031b4:	461a      	mov	r2, r3
 80031b6:	4623      	mov	r3, r4
 80031b8:	80fb      	strh	r3, [r7, #6]
 80031ba:	4603      	mov	r3, r0
 80031bc:	80bb      	strh	r3, [r7, #4]
 80031be:	460b      	mov	r3, r1
 80031c0:	807b      	strh	r3, [r7, #2]
 80031c2:	4613      	mov	r3, r2
 80031c4:	803b      	strh	r3, [r7, #0]
  for(int16_t y=-radius; y<=radius; y++)
 80031c6:	887b      	ldrh	r3, [r7, #2]
 80031c8:	425b      	negs	r3, r3
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	81fb      	strh	r3, [r7, #14]
 80031ce:	e034      	b.n	800323a <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 80031d0:	887b      	ldrh	r3, [r7, #2]
 80031d2:	425b      	negs	r3, r3
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	81bb      	strh	r3, [r7, #12]
 80031d8:	e024      	b.n	8003224 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 80031da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80031de:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80031e2:	fb03 f202 	mul.w	r2, r3, r2
 80031e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031ea:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80031ee:	fb01 f303 	mul.w	r3, r1, r3
 80031f2:	441a      	add	r2, r3
 80031f4:	887b      	ldrh	r3, [r7, #2]
 80031f6:	8879      	ldrh	r1, [r7, #2]
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	429a      	cmp	r2, r3
 80031fe:	dc0b      	bgt.n	8003218 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8003200:	89ba      	ldrh	r2, [r7, #12]
 8003202:	88fb      	ldrh	r3, [r7, #6]
 8003204:	4413      	add	r3, r2
 8003206:	b298      	uxth	r0, r3
 8003208:	89fa      	ldrh	r2, [r7, #14]
 800320a:	88bb      	ldrh	r3, [r7, #4]
 800320c:	4413      	add	r3, r2
 800320e:	b29b      	uxth	r3, r3
 8003210:	883a      	ldrh	r2, [r7, #0]
 8003212:	4619      	mov	r1, r3
 8003214:	f7ff fe3e 	bl	8002e94 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8003218:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800321c:	b29b      	uxth	r3, r3
 800321e:	3301      	adds	r3, #1
 8003220:	b29b      	uxth	r3, r3
 8003222:	81bb      	strh	r3, [r7, #12]
 8003224:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003228:	887b      	ldrh	r3, [r7, #2]
 800322a:	429a      	cmp	r2, r3
 800322c:	ddd5      	ble.n	80031da <LCD_Draw_Circle_Fill+0x32>
  for(int16_t y=-radius; y<=radius; y++)
 800322e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003232:	b29b      	uxth	r3, r3
 8003234:	3301      	adds	r3, #1
 8003236:	b29b      	uxth	r3, r3
 8003238:	81fb      	strh	r3, [r7, #14]
 800323a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800323e:	887b      	ldrh	r3, [r7, #2]
 8003240:	429a      	cmp	r2, r3
 8003242:	ddc5      	ble.n	80031d0 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8003244:	bf00      	nop
 8003246:	bf00      	nop
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	bd90      	pop	{r4, r7, pc}
	...

08003250 <Check_Circle_Collision>:

int Check_Circle_Collision(uint16_t Xpos, uint16_t Ypos, uint16_t radius)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	80fb      	strh	r3, [r7, #6]
 800325a:	460b      	mov	r3, r1
 800325c:	80bb      	strh	r3, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	807b      	strh	r3, [r7, #2]
	  for(int16_t y=-radius; y<=radius; y++)
 8003262:	887b      	ldrh	r3, [r7, #2]
 8003264:	425b      	negs	r3, r3
 8003266:	b29b      	uxth	r3, r3
 8003268:	81fb      	strh	r3, [r7, #14]
 800326a:	e03d      	b.n	80032e8 <Check_Circle_Collision+0x98>
	    {
	        for(int16_t x=-radius; x<=radius; x++)
 800326c:	887b      	ldrh	r3, [r7, #2]
 800326e:	425b      	negs	r3, r3
 8003270:	b29b      	uxth	r3, r3
 8003272:	81bb      	strh	r3, [r7, #12]
 8003274:	e02d      	b.n	80032d2 <Check_Circle_Collision+0x82>
	        {
	            if(x*x+y*y <= radius*radius)
 8003276:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800327a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800327e:	fb03 f202 	mul.w	r2, r3, r2
 8003282:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003286:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800328a:	fb01 f303 	mul.w	r3, r1, r3
 800328e:	441a      	add	r2, r3
 8003290:	887b      	ldrh	r3, [r7, #2]
 8003292:	8879      	ldrh	r1, [r7, #2]
 8003294:	fb01 f303 	mul.w	r3, r1, r3
 8003298:	429a      	cmp	r2, r3
 800329a:	dc14      	bgt.n	80032c6 <Check_Circle_Collision+0x76>
	            {
	            	if(frameBuffer[(y+Ypos)*LCD_PIXEL_WIDTH+(x+Xpos)] == LCD_COLOR_BLACK){
 800329c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80032a0:	88bb      	ldrh	r3, [r7, #4]
 80032a2:	441a      	add	r2, r3
 80032a4:	4613      	mov	r3, r2
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	1a9b      	subs	r3, r3, r2
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	4619      	mov	r1, r3
 80032ae:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80032b2:	88fb      	ldrh	r3, [r7, #6]
 80032b4:	4413      	add	r3, r2
 80032b6:	440b      	add	r3, r1
 80032b8:	4a11      	ldr	r2, [pc, #68]	; (8003300 <Check_Circle_Collision+0xb0>)
 80032ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <Check_Circle_Collision+0x76>
	            		return 1;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e016      	b.n	80032f4 <Check_Circle_Collision+0xa4>
	        for(int16_t x=-radius; x<=radius; x++)
 80032c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3301      	adds	r3, #1
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	81bb      	strh	r3, [r7, #12]
 80032d2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80032d6:	887b      	ldrh	r3, [r7, #2]
 80032d8:	429a      	cmp	r2, r3
 80032da:	ddcc      	ble.n	8003276 <Check_Circle_Collision+0x26>
	  for(int16_t y=-radius; y<=radius; y++)
 80032dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	3301      	adds	r3, #1
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	81fb      	strh	r3, [r7, #14]
 80032e8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80032ec:	887b      	ldrh	r3, [r7, #2]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	ddbc      	ble.n	800326c <Check_Circle_Collision+0x1c>
	            	}
	            }
	        }
	    }
	  return 0;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	20002130 	.word	0x20002130

08003304 <Check_Waypoint_Collision>:

int Check_Waypoint_Collision(uint16_t Xpos, uint16_t Ypos, uint16_t radius)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	80fb      	strh	r3, [r7, #6]
 800330e:	460b      	mov	r3, r1
 8003310:	80bb      	strh	r3, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	807b      	strh	r3, [r7, #2]
	  for(int16_t y=-radius; y<=radius; y++)
 8003316:	887b      	ldrh	r3, [r7, #2]
 8003318:	425b      	negs	r3, r3
 800331a:	b29b      	uxth	r3, r3
 800331c:	81fb      	strh	r3, [r7, #14]
 800331e:	e03f      	b.n	80033a0 <Check_Waypoint_Collision+0x9c>
	    {
	        for(int16_t x=-radius; x<=radius; x++)
 8003320:	887b      	ldrh	r3, [r7, #2]
 8003322:	425b      	negs	r3, r3
 8003324:	b29b      	uxth	r3, r3
 8003326:	81bb      	strh	r3, [r7, #12]
 8003328:	e02f      	b.n	800338a <Check_Waypoint_Collision+0x86>
	        {
	            if(x*x+y*y <= radius*radius)
 800332a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800332e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003332:	fb03 f202 	mul.w	r2, r3, r2
 8003336:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800333a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800333e:	fb01 f303 	mul.w	r3, r1, r3
 8003342:	441a      	add	r2, r3
 8003344:	887b      	ldrh	r3, [r7, #2]
 8003346:	8879      	ldrh	r1, [r7, #2]
 8003348:	fb01 f303 	mul.w	r3, r1, r3
 800334c:	429a      	cmp	r2, r3
 800334e:	dc16      	bgt.n	800337e <Check_Waypoint_Collision+0x7a>
	            {
	            	if(frameBuffer[(y+Ypos)*LCD_PIXEL_WIDTH+(x+Xpos)] == LCD_COLOR_YELLOW){
 8003350:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003354:	88bb      	ldrh	r3, [r7, #4]
 8003356:	441a      	add	r2, r3
 8003358:	4613      	mov	r3, r2
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	1a9b      	subs	r3, r3, r2
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	4619      	mov	r1, r3
 8003362:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003366:	88fb      	ldrh	r3, [r7, #6]
 8003368:	4413      	add	r3, r2
 800336a:	440b      	add	r3, r1
 800336c:	4a12      	ldr	r2, [pc, #72]	; (80033b8 <Check_Waypoint_Collision+0xb4>)
 800336e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003372:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003376:	4293      	cmp	r3, r2
 8003378:	d101      	bne.n	800337e <Check_Waypoint_Collision+0x7a>
	            		return 1;
 800337a:	2301      	movs	r3, #1
 800337c:	e016      	b.n	80033ac <Check_Waypoint_Collision+0xa8>
	        for(int16_t x=-radius; x<=radius; x++)
 800337e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003382:	b29b      	uxth	r3, r3
 8003384:	3301      	adds	r3, #1
 8003386:	b29b      	uxth	r3, r3
 8003388:	81bb      	strh	r3, [r7, #12]
 800338a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800338e:	887b      	ldrh	r3, [r7, #2]
 8003390:	429a      	cmp	r2, r3
 8003392:	ddca      	ble.n	800332a <Check_Waypoint_Collision+0x26>
	  for(int16_t y=-radius; y<=radius; y++)
 8003394:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003398:	b29b      	uxth	r3, r3
 800339a:	3301      	adds	r3, #1
 800339c:	b29b      	uxth	r3, r3
 800339e:	81fb      	strh	r3, [r7, #14]
 80033a0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80033a4:	887b      	ldrh	r3, [r7, #2]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	ddba      	ble.n	8003320 <Check_Waypoint_Collision+0x1c>
	            	}
	            }
	        }
	    }
	  return 0;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	20002130 	.word	0x20002130

080033bc <Check_Hole_Collision>:

int Check_Hole_Collision(uint16_t Xpos, uint16_t Ypos, uint16_t radius)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	80fb      	strh	r3, [r7, #6]
 80033c6:	460b      	mov	r3, r1
 80033c8:	80bb      	strh	r3, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	807b      	strh	r3, [r7, #2]
	  for(int16_t y=-radius; y<=radius; y++)
 80033ce:	887b      	ldrh	r3, [r7, #2]
 80033d0:	425b      	negs	r3, r3
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	81fb      	strh	r3, [r7, #14]
 80033d6:	e03e      	b.n	8003456 <Check_Hole_Collision+0x9a>
	    {
	        for(int16_t x=-radius; x<=radius; x++)
 80033d8:	887b      	ldrh	r3, [r7, #2]
 80033da:	425b      	negs	r3, r3
 80033dc:	b29b      	uxth	r3, r3
 80033de:	81bb      	strh	r3, [r7, #12]
 80033e0:	e02e      	b.n	8003440 <Check_Hole_Collision+0x84>
	        {
	            if(x*x+y*y <= radius*radius)
 80033e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80033e6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80033ea:	fb03 f202 	mul.w	r2, r3, r2
 80033ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033f2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80033f6:	fb01 f303 	mul.w	r3, r1, r3
 80033fa:	441a      	add	r2, r3
 80033fc:	887b      	ldrh	r3, [r7, #2]
 80033fe:	8879      	ldrh	r1, [r7, #2]
 8003400:	fb01 f303 	mul.w	r3, r1, r3
 8003404:	429a      	cmp	r2, r3
 8003406:	dc15      	bgt.n	8003434 <Check_Hole_Collision+0x78>
	            {
	            	if(frameBuffer[(y+Ypos)*LCD_PIXEL_WIDTH+(x+Xpos)] == LCD_COLOR_RED){
 8003408:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800340c:	88bb      	ldrh	r3, [r7, #4]
 800340e:	441a      	add	r2, r3
 8003410:	4613      	mov	r3, r2
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	4619      	mov	r1, r3
 800341a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	4413      	add	r3, r2
 8003422:	440b      	add	r3, r1
 8003424:	4a12      	ldr	r2, [pc, #72]	; (8003470 <Check_Hole_Collision+0xb4>)
 8003426:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800342a:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 800342e:	d101      	bne.n	8003434 <Check_Hole_Collision+0x78>
	            		return 1;
 8003430:	2301      	movs	r3, #1
 8003432:	e016      	b.n	8003462 <Check_Hole_Collision+0xa6>
	        for(int16_t x=-radius; x<=radius; x++)
 8003434:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003438:	b29b      	uxth	r3, r3
 800343a:	3301      	adds	r3, #1
 800343c:	b29b      	uxth	r3, r3
 800343e:	81bb      	strh	r3, [r7, #12]
 8003440:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003444:	887b      	ldrh	r3, [r7, #2]
 8003446:	429a      	cmp	r2, r3
 8003448:	ddcb      	ble.n	80033e2 <Check_Hole_Collision+0x26>
	  for(int16_t y=-radius; y<=radius; y++)
 800344a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800344e:	b29b      	uxth	r3, r3
 8003450:	3301      	adds	r3, #1
 8003452:	b29b      	uxth	r3, r3
 8003454:	81fb      	strh	r3, [r7, #14]
 8003456:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800345a:	887b      	ldrh	r3, [r7, #2]
 800345c:	429a      	cmp	r2, r3
 800345e:	ddbb      	ble.n	80033d8 <Check_Hole_Collision+0x1c>
	            	}
	            }
	        }
	    }
	  return 0;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	20002130 	.word	0x20002130

08003474 <Check_Circle_Collision_X>:

uint16_t Check_Circle_Collision_X(uint16_t Xpos, uint16_t Ypos, uint16_t radius)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	80fb      	strh	r3, [r7, #6]
 800347e:	460b      	mov	r3, r1
 8003480:	80bb      	strh	r3, [r7, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	807b      	strh	r3, [r7, #2]
	  for(int16_t y=-radius; y<=radius; y++)
 8003486:	887b      	ldrh	r3, [r7, #2]
 8003488:	425b      	negs	r3, r3
 800348a:	b29b      	uxth	r3, r3
 800348c:	81fb      	strh	r3, [r7, #14]
 800348e:	e040      	b.n	8003512 <Check_Circle_Collision_X+0x9e>
	    {
	        for(int16_t x=-radius; x<=radius; x++)
 8003490:	887b      	ldrh	r3, [r7, #2]
 8003492:	425b      	negs	r3, r3
 8003494:	b29b      	uxth	r3, r3
 8003496:	81bb      	strh	r3, [r7, #12]
 8003498:	e030      	b.n	80034fc <Check_Circle_Collision_X+0x88>
	        {
	            if(x*x+y*y == radius*radius)
 800349a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800349e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80034a2:	fb03 f202 	mul.w	r2, r3, r2
 80034a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034aa:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80034ae:	fb01 f303 	mul.w	r3, r1, r3
 80034b2:	441a      	add	r2, r3
 80034b4:	887b      	ldrh	r3, [r7, #2]
 80034b6:	8879      	ldrh	r1, [r7, #2]
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	429a      	cmp	r2, r3
 80034be:	d117      	bne.n	80034f0 <Check_Circle_Collision_X+0x7c>
	            {
	            	if(frameBuffer[(y+Ypos)*LCD_PIXEL_WIDTH+(x+Xpos)] == LCD_COLOR_BLACK){
 80034c0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80034c4:	88bb      	ldrh	r3, [r7, #4]
 80034c6:	441a      	add	r2, r3
 80034c8:	4613      	mov	r3, r2
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	4619      	mov	r1, r3
 80034d2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80034d6:	88fb      	ldrh	r3, [r7, #6]
 80034d8:	4413      	add	r3, r2
 80034da:	440b      	add	r3, r1
 80034dc:	4a13      	ldr	r2, [pc, #76]	; (800352c <Check_Circle_Collision_X+0xb8>)
 80034de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d104      	bne.n	80034f0 <Check_Circle_Collision_X+0x7c>
	            		return x+Xpos;
 80034e6:	89ba      	ldrh	r2, [r7, #12]
 80034e8:	88fb      	ldrh	r3, [r7, #6]
 80034ea:	4413      	add	r3, r2
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	e017      	b.n	8003520 <Check_Circle_Collision_X+0xac>
	        for(int16_t x=-radius; x<=radius; x++)
 80034f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	3301      	adds	r3, #1
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	81bb      	strh	r3, [r7, #12]
 80034fc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003500:	887b      	ldrh	r3, [r7, #2]
 8003502:	429a      	cmp	r2, r3
 8003504:	ddc9      	ble.n	800349a <Check_Circle_Collision_X+0x26>
	  for(int16_t y=-radius; y<=radius; y++)
 8003506:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800350a:	b29b      	uxth	r3, r3
 800350c:	3301      	adds	r3, #1
 800350e:	b29b      	uxth	r3, r3
 8003510:	81fb      	strh	r3, [r7, #14]
 8003512:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003516:	887b      	ldrh	r3, [r7, #2]
 8003518:	429a      	cmp	r2, r3
 800351a:	ddb9      	ble.n	8003490 <Check_Circle_Collision_X+0x1c>
	            	}
	            }
	        }
	    }
	  return -1;
 800351c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8003520:	4618      	mov	r0, r3
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	20002130 	.word	0x20002130

08003530 <Check_Circle_Collision_Y>:

uint16_t Check_Circle_Collision_Y(uint16_t Xpos, uint16_t Ypos, uint16_t radius)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	80fb      	strh	r3, [r7, #6]
 800353a:	460b      	mov	r3, r1
 800353c:	80bb      	strh	r3, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	807b      	strh	r3, [r7, #2]
	  for(int16_t y=-radius; y<=radius; y++)
 8003542:	887b      	ldrh	r3, [r7, #2]
 8003544:	425b      	negs	r3, r3
 8003546:	b29b      	uxth	r3, r3
 8003548:	81fb      	strh	r3, [r7, #14]
 800354a:	e040      	b.n	80035ce <Check_Circle_Collision_Y+0x9e>
	    {
	        for(int16_t x=-radius; x<=radius; x++)
 800354c:	887b      	ldrh	r3, [r7, #2]
 800354e:	425b      	negs	r3, r3
 8003550:	b29b      	uxth	r3, r3
 8003552:	81bb      	strh	r3, [r7, #12]
 8003554:	e030      	b.n	80035b8 <Check_Circle_Collision_Y+0x88>
	        {
	            if(x*x+y*y == radius*radius)
 8003556:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800355a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800355e:	fb03 f202 	mul.w	r2, r3, r2
 8003562:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003566:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800356a:	fb01 f303 	mul.w	r3, r1, r3
 800356e:	441a      	add	r2, r3
 8003570:	887b      	ldrh	r3, [r7, #2]
 8003572:	8879      	ldrh	r1, [r7, #2]
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	429a      	cmp	r2, r3
 800357a:	d117      	bne.n	80035ac <Check_Circle_Collision_Y+0x7c>
	            {
	            	if(frameBuffer[(y+Ypos)*LCD_PIXEL_WIDTH+(x+Xpos)] == LCD_COLOR_BLACK){
 800357c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003580:	88bb      	ldrh	r3, [r7, #4]
 8003582:	441a      	add	r2, r3
 8003584:	4613      	mov	r3, r2
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	4619      	mov	r1, r3
 800358e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003592:	88fb      	ldrh	r3, [r7, #6]
 8003594:	4413      	add	r3, r2
 8003596:	440b      	add	r3, r1
 8003598:	4a13      	ldr	r2, [pc, #76]	; (80035e8 <Check_Circle_Collision_Y+0xb8>)
 800359a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d104      	bne.n	80035ac <Check_Circle_Collision_Y+0x7c>
	            		return y+Ypos;
 80035a2:	89fa      	ldrh	r2, [r7, #14]
 80035a4:	88bb      	ldrh	r3, [r7, #4]
 80035a6:	4413      	add	r3, r2
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	e017      	b.n	80035dc <Check_Circle_Collision_Y+0xac>
	        for(int16_t x=-radius; x<=radius; x++)
 80035ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	3301      	adds	r3, #1
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	81bb      	strh	r3, [r7, #12]
 80035b8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80035bc:	887b      	ldrh	r3, [r7, #2]
 80035be:	429a      	cmp	r2, r3
 80035c0:	ddc9      	ble.n	8003556 <Check_Circle_Collision_Y+0x26>
	  for(int16_t y=-radius; y<=radius; y++)
 80035c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	3301      	adds	r3, #1
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	81fb      	strh	r3, [r7, #14]
 80035ce:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80035d2:	887b      	ldrh	r3, [r7, #2]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	ddb9      	ble.n	800354c <Check_Circle_Collision_Y+0x1c>
	            	}
	            }
	        }
	    }
	  return -1;
 80035d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	20002130 	.word	0x20002130

080035ec <LCD_Draw_Vertical_Line>:

// Draw Vertical Line
void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 80035ec:	b590      	push	{r4, r7, lr}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	4604      	mov	r4, r0
 80035f4:	4608      	mov	r0, r1
 80035f6:	4611      	mov	r1, r2
 80035f8:	461a      	mov	r2, r3
 80035fa:	4623      	mov	r3, r4
 80035fc:	80fb      	strh	r3, [r7, #6]
 80035fe:	4603      	mov	r3, r0
 8003600:	80bb      	strh	r3, [r7, #4]
 8003602:	460b      	mov	r3, r1
 8003604:	807b      	strh	r3, [r7, #2]
 8003606:	4613      	mov	r3, r2
 8003608:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 800360a:	2300      	movs	r3, #0
 800360c:	81fb      	strh	r3, [r7, #14]
 800360e:	e00b      	b.n	8003628 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8003610:	89fa      	ldrh	r2, [r7, #14]
 8003612:	88bb      	ldrh	r3, [r7, #4]
 8003614:	4413      	add	r3, r2
 8003616:	b299      	uxth	r1, r3
 8003618:	883a      	ldrh	r2, [r7, #0]
 800361a:	88fb      	ldrh	r3, [r7, #6]
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff fc39 	bl	8002e94 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8003622:	89fb      	ldrh	r3, [r7, #14]
 8003624:	3301      	adds	r3, #1
 8003626:	81fb      	strh	r3, [r7, #14]
 8003628:	89fa      	ldrh	r2, [r7, #14]
 800362a:	887b      	ldrh	r3, [r7, #2]
 800362c:	429a      	cmp	r2, r3
 800362e:	d3ef      	bcc.n	8003610 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8003630:	bf00      	nop
 8003632:	bf00      	nop
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	bd90      	pop	{r4, r7, pc}

0800363a <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 800363a:	b590      	push	{r4, r7, lr}
 800363c:	b085      	sub	sp, #20
 800363e:	af00      	add	r7, sp, #0
 8003640:	4604      	mov	r4, r0
 8003642:	4608      	mov	r0, r1
 8003644:	4611      	mov	r1, r2
 8003646:	461a      	mov	r2, r3
 8003648:	4623      	mov	r3, r4
 800364a:	80fb      	strh	r3, [r7, #6]
 800364c:	4603      	mov	r3, r0
 800364e:	80bb      	strh	r3, [r7, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	807b      	strh	r3, [r7, #2]
 8003654:	4613      	mov	r3, r2
 8003656:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8003658:	2300      	movs	r3, #0
 800365a:	81fb      	strh	r3, [r7, #14]
 800365c:	e00b      	b.n	8003676 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 800365e:	89fa      	ldrh	r2, [r7, #14]
 8003660:	88fb      	ldrh	r3, [r7, #6]
 8003662:	4413      	add	r3, r2
 8003664:	b29b      	uxth	r3, r3
 8003666:	883a      	ldrh	r2, [r7, #0]
 8003668:	88b9      	ldrh	r1, [r7, #4]
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff fc12 	bl	8002e94 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8003670:	89fb      	ldrh	r3, [r7, #14]
 8003672:	3301      	adds	r3, #1
 8003674:	81fb      	strh	r3, [r7, #14]
 8003676:	89fa      	ldrh	r2, [r7, #14]
 8003678:	887b      	ldrh	r3, [r7, #2]
 800367a:	429a      	cmp	r2, r3
 800367c:	d3ef      	bcc.n	800365e <LCD_Draw_Horizontal_Line+0x24>
  }
}
 800367e:	bf00      	nop
 8003680:	bf00      	nop
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	bd90      	pop	{r4, r7, pc}

08003688 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	460a      	mov	r2, r1
 8003692:	71fb      	strb	r3, [r7, #7]
 8003694:	4613      	mov	r3, r2
 8003696:	80bb      	strh	r3, [r7, #4]
  if (LayerIndex == 0){
 8003698:	79fb      	ldrb	r3, [r7, #7]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10e      	bne.n	80036bc <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	e007      	b.n	80036b4 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80036a4:	4908      	ldr	r1, [pc, #32]	; (80036c8 <LCD_Clear+0x40>)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	88ba      	ldrh	r2, [r7, #4]
 80036aa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	3301      	adds	r3, #1
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 80036ba:	d3f3      	bcc.n	80036a4 <LCD_Clear+0x1c>
		}
	}
}
 80036bc:	bf00      	nop
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	20002130 	.word	0x20002130

080036cc <LCD_Error_Handler>:

void LCD_Error_Handler(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  for(;;); // Something went wrong
 80036d0:	e7fe      	b.n	80036d0 <LCD_Error_Handler+0x4>

080036d2 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80036d6:	f000 f9ff 	bl	8003ad8 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80036da:	20ca      	movs	r0, #202	; 0xca
 80036dc:	f000 f943 	bl	8003966 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80036e0:	20c3      	movs	r0, #195	; 0xc3
 80036e2:	f000 f94d 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80036e6:	2008      	movs	r0, #8
 80036e8:	f000 f94a 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80036ec:	2050      	movs	r0, #80	; 0x50
 80036ee:	f000 f947 	bl	8003980 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 80036f2:	20cf      	movs	r0, #207	; 0xcf
 80036f4:	f000 f937 	bl	8003966 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 80036f8:	2000      	movs	r0, #0
 80036fa:	f000 f941 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 80036fe:	20c1      	movs	r0, #193	; 0xc1
 8003700:	f000 f93e 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8003704:	2030      	movs	r0, #48	; 0x30
 8003706:	f000 f93b 	bl	8003980 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 800370a:	20ed      	movs	r0, #237	; 0xed
 800370c:	f000 f92b 	bl	8003966 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8003710:	2064      	movs	r0, #100	; 0x64
 8003712:	f000 f935 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8003716:	2003      	movs	r0, #3
 8003718:	f000 f932 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 800371c:	2012      	movs	r0, #18
 800371e:	f000 f92f 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8003722:	2081      	movs	r0, #129	; 0x81
 8003724:	f000 f92c 	bl	8003980 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8003728:	20e8      	movs	r0, #232	; 0xe8
 800372a:	f000 f91c 	bl	8003966 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 800372e:	2085      	movs	r0, #133	; 0x85
 8003730:	f000 f926 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003734:	2000      	movs	r0, #0
 8003736:	f000 f923 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800373a:	2078      	movs	r0, #120	; 0x78
 800373c:	f000 f920 	bl	8003980 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8003740:	20cb      	movs	r0, #203	; 0xcb
 8003742:	f000 f910 	bl	8003966 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8003746:	2039      	movs	r0, #57	; 0x39
 8003748:	f000 f91a 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 800374c:	202c      	movs	r0, #44	; 0x2c
 800374e:	f000 f917 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003752:	2000      	movs	r0, #0
 8003754:	f000 f914 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8003758:	2034      	movs	r0, #52	; 0x34
 800375a:	f000 f911 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 800375e:	2002      	movs	r0, #2
 8003760:	f000 f90e 	bl	8003980 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8003764:	20f7      	movs	r0, #247	; 0xf7
 8003766:	f000 f8fe 	bl	8003966 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 800376a:	2020      	movs	r0, #32
 800376c:	f000 f908 	bl	8003980 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8003770:	20ea      	movs	r0, #234	; 0xea
 8003772:	f000 f8f8 	bl	8003966 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003776:	2000      	movs	r0, #0
 8003778:	f000 f902 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800377c:	2000      	movs	r0, #0
 800377e:	f000 f8ff 	bl	8003980 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8003782:	20b1      	movs	r0, #177	; 0xb1
 8003784:	f000 f8ef 	bl	8003966 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003788:	2000      	movs	r0, #0
 800378a:	f000 f8f9 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800378e:	201b      	movs	r0, #27
 8003790:	f000 f8f6 	bl	8003980 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8003794:	20b6      	movs	r0, #182	; 0xb6
 8003796:	f000 f8e6 	bl	8003966 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800379a:	200a      	movs	r0, #10
 800379c:	f000 f8f0 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80037a0:	20a2      	movs	r0, #162	; 0xa2
 80037a2:	f000 f8ed 	bl	8003980 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80037a6:	20c0      	movs	r0, #192	; 0xc0
 80037a8:	f000 f8dd 	bl	8003966 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80037ac:	2010      	movs	r0, #16
 80037ae:	f000 f8e7 	bl	8003980 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80037b2:	20c1      	movs	r0, #193	; 0xc1
 80037b4:	f000 f8d7 	bl	8003966 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80037b8:	2010      	movs	r0, #16
 80037ba:	f000 f8e1 	bl	8003980 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80037be:	20c5      	movs	r0, #197	; 0xc5
 80037c0:	f000 f8d1 	bl	8003966 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80037c4:	2045      	movs	r0, #69	; 0x45
 80037c6:	f000 f8db 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80037ca:	2015      	movs	r0, #21
 80037cc:	f000 f8d8 	bl	8003980 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80037d0:	20c7      	movs	r0, #199	; 0xc7
 80037d2:	f000 f8c8 	bl	8003966 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80037d6:	2090      	movs	r0, #144	; 0x90
 80037d8:	f000 f8d2 	bl	8003980 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80037dc:	2036      	movs	r0, #54	; 0x36
 80037de:	f000 f8c2 	bl	8003966 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80037e2:	20c8      	movs	r0, #200	; 0xc8
 80037e4:	f000 f8cc 	bl	8003980 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80037e8:	20f2      	movs	r0, #242	; 0xf2
 80037ea:	f000 f8bc 	bl	8003966 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80037ee:	2000      	movs	r0, #0
 80037f0:	f000 f8c6 	bl	8003980 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 80037f4:	20b0      	movs	r0, #176	; 0xb0
 80037f6:	f000 f8b6 	bl	8003966 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 80037fa:	20c2      	movs	r0, #194	; 0xc2
 80037fc:	f000 f8c0 	bl	8003980 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8003800:	20b6      	movs	r0, #182	; 0xb6
 8003802:	f000 f8b0 	bl	8003966 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8003806:	200a      	movs	r0, #10
 8003808:	f000 f8ba 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 800380c:	20a7      	movs	r0, #167	; 0xa7
 800380e:	f000 f8b7 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8003812:	2027      	movs	r0, #39	; 0x27
 8003814:	f000 f8b4 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8003818:	2004      	movs	r0, #4
 800381a:	f000 f8b1 	bl	8003980 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 800381e:	202a      	movs	r0, #42	; 0x2a
 8003820:	f000 f8a1 	bl	8003966 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003824:	2000      	movs	r0, #0
 8003826:	f000 f8ab 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800382a:	2000      	movs	r0, #0
 800382c:	f000 f8a8 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003830:	2000      	movs	r0, #0
 8003832:	f000 f8a5 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8003836:	20ef      	movs	r0, #239	; 0xef
 8003838:	f000 f8a2 	bl	8003980 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 800383c:	202b      	movs	r0, #43	; 0x2b
 800383e:	f000 f892 	bl	8003966 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003842:	2000      	movs	r0, #0
 8003844:	f000 f89c 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003848:	2000      	movs	r0, #0
 800384a:	f000 f899 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 800384e:	2001      	movs	r0, #1
 8003850:	f000 f896 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8003854:	203f      	movs	r0, #63	; 0x3f
 8003856:	f000 f893 	bl	8003980 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 800385a:	20f6      	movs	r0, #246	; 0xf6
 800385c:	f000 f883 	bl	8003966 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8003860:	2001      	movs	r0, #1
 8003862:	f000 f88d 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003866:	2000      	movs	r0, #0
 8003868:	f000 f88a 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 800386c:	2006      	movs	r0, #6
 800386e:	f000 f887 	bl	8003980 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8003872:	202c      	movs	r0, #44	; 0x2c
 8003874:	f000 f877 	bl	8003966 <ili9341_Write_Reg>
  LCD_Delay(200);
 8003878:	20c8      	movs	r0, #200	; 0xc8
 800387a:	f000 f9e9 	bl	8003c50 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 800387e:	2026      	movs	r0, #38	; 0x26
 8003880:	f000 f871 	bl	8003966 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8003884:	2001      	movs	r0, #1
 8003886:	f000 f87b 	bl	8003980 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 800388a:	20e0      	movs	r0, #224	; 0xe0
 800388c:	f000 f86b 	bl	8003966 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8003890:	200f      	movs	r0, #15
 8003892:	f000 f875 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8003896:	2029      	movs	r0, #41	; 0x29
 8003898:	f000 f872 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 800389c:	2024      	movs	r0, #36	; 0x24
 800389e:	f000 f86f 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80038a2:	200c      	movs	r0, #12
 80038a4:	f000 f86c 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80038a8:	200e      	movs	r0, #14
 80038aa:	f000 f869 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80038ae:	2009      	movs	r0, #9
 80038b0:	f000 f866 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80038b4:	204e      	movs	r0, #78	; 0x4e
 80038b6:	f000 f863 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80038ba:	2078      	movs	r0, #120	; 0x78
 80038bc:	f000 f860 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80038c0:	203c      	movs	r0, #60	; 0x3c
 80038c2:	f000 f85d 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80038c6:	2009      	movs	r0, #9
 80038c8:	f000 f85a 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80038cc:	2013      	movs	r0, #19
 80038ce:	f000 f857 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80038d2:	2005      	movs	r0, #5
 80038d4:	f000 f854 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80038d8:	2017      	movs	r0, #23
 80038da:	f000 f851 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80038de:	2011      	movs	r0, #17
 80038e0:	f000 f84e 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80038e4:	2000      	movs	r0, #0
 80038e6:	f000 f84b 	bl	8003980 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80038ea:	20e1      	movs	r0, #225	; 0xe1
 80038ec:	f000 f83b 	bl	8003966 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80038f0:	2000      	movs	r0, #0
 80038f2:	f000 f845 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80038f6:	2016      	movs	r0, #22
 80038f8:	f000 f842 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80038fc:	201b      	movs	r0, #27
 80038fe:	f000 f83f 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8003902:	2004      	movs	r0, #4
 8003904:	f000 f83c 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8003908:	2011      	movs	r0, #17
 800390a:	f000 f839 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 800390e:	2007      	movs	r0, #7
 8003910:	f000 f836 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8003914:	2031      	movs	r0, #49	; 0x31
 8003916:	f000 f833 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 800391a:	2033      	movs	r0, #51	; 0x33
 800391c:	f000 f830 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8003920:	2042      	movs	r0, #66	; 0x42
 8003922:	f000 f82d 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8003926:	2005      	movs	r0, #5
 8003928:	f000 f82a 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800392c:	200c      	movs	r0, #12
 800392e:	f000 f827 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8003932:	200a      	movs	r0, #10
 8003934:	f000 f824 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8003938:	2028      	movs	r0, #40	; 0x28
 800393a:	f000 f821 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 800393e:	202f      	movs	r0, #47	; 0x2f
 8003940:	f000 f81e 	bl	8003980 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8003944:	200f      	movs	r0, #15
 8003946:	f000 f81b 	bl	8003980 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 800394a:	2011      	movs	r0, #17
 800394c:	f000 f80b 	bl	8003966 <ili9341_Write_Reg>
  LCD_Delay(200);
 8003950:	20c8      	movs	r0, #200	; 0xc8
 8003952:	f000 f97d 	bl	8003c50 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8003956:	2029      	movs	r0, #41	; 0x29
 8003958:	f000 f805 	bl	8003966 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 800395c:	202c      	movs	r0, #44	; 0x2c
 800395e:	f000 f802 	bl	8003966 <ili9341_Write_Reg>
}
 8003962:	bf00      	nop
 8003964:	bd80      	pop	{r7, pc}

08003966 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b082      	sub	sp, #8
 800396a:	af00      	add	r7, sp, #0
 800396c:	4603      	mov	r3, r0
 800396e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8003970:	79fb      	ldrb	r3, [r7, #7]
 8003972:	4618      	mov	r0, r3
 8003974:	f000 f94a 	bl	8003c0c <LCD_IO_WriteReg>
}
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800398a:	88fb      	ldrh	r3, [r7, #6]
 800398c:	4618      	mov	r0, r3
 800398e:	f000 f91b 	bl	8003bc8 <LCD_IO_WriteData>
}
 8003992:	bf00      	nop
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80039a0:	4819      	ldr	r0, [pc, #100]	; (8003a08 <SPI_Init+0x6c>)
 80039a2:	f003 fa23 	bl	8006dec <HAL_SPI_GetState>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d12b      	bne.n	8003a04 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80039ac:	4b16      	ldr	r3, [pc, #88]	; (8003a08 <SPI_Init+0x6c>)
 80039ae:	4a17      	ldr	r2, [pc, #92]	; (8003a0c <SPI_Init+0x70>)
 80039b0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80039b2:	4b15      	ldr	r3, [pc, #84]	; (8003a08 <SPI_Init+0x6c>)
 80039b4:	2218      	movs	r2, #24
 80039b6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80039b8:	4b13      	ldr	r3, [pc, #76]	; (8003a08 <SPI_Init+0x6c>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80039be:	4b12      	ldr	r3, [pc, #72]	; (8003a08 <SPI_Init+0x6c>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80039c4:	4b10      	ldr	r3, [pc, #64]	; (8003a08 <SPI_Init+0x6c>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80039ca:	4b0f      	ldr	r3, [pc, #60]	; (8003a08 <SPI_Init+0x6c>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80039d0:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <SPI_Init+0x6c>)
 80039d2:	2207      	movs	r2, #7
 80039d4:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80039d6:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <SPI_Init+0x6c>)
 80039d8:	2200      	movs	r2, #0
 80039da:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80039dc:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <SPI_Init+0x6c>)
 80039de:	2200      	movs	r2, #0
 80039e0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80039e2:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <SPI_Init+0x6c>)
 80039e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039e8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80039ea:	4b07      	ldr	r3, [pc, #28]	; (8003a08 <SPI_Init+0x6c>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <SPI_Init+0x6c>)
 80039f2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039f6:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80039f8:	4803      	ldr	r0, [pc, #12]	; (8003a08 <SPI_Init+0x6c>)
 80039fa:	f000 f833 	bl	8003a64 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80039fe:	4802      	ldr	r0, [pc, #8]	; (8003a08 <SPI_Init+0x6c>)
 8003a00:	f002 fd54 	bl	80064ac <HAL_SPI_Init>
  }
}
 8003a04:	bf00      	nop
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	200020d8 	.word	0x200020d8
 8003a0c:	40015000 	.word	0x40015000

08003a10 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8003a1e:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <SPI_Write+0x34>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	1db9      	adds	r1, r7, #6
 8003a24:	2201      	movs	r2, #1
 8003a26:	4808      	ldr	r0, [pc, #32]	; (8003a48 <SPI_Write+0x38>)
 8003a28:	f002 fdf1 	bl	800660e <HAL_SPI_Transmit>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8003a36:	f000 f809 	bl	8003a4c <SPI_Error>
  }
}
 8003a3a:	bf00      	nop
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	2000000c 	.word	0x2000000c
 8003a48:	200020d8 	.word	0x200020d8

08003a4c <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003a50:	4803      	ldr	r0, [pc, #12]	; (8003a60 <SPI_Error+0x14>)
 8003a52:	f002 fdb4 	bl	80065be <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8003a56:	f7ff ffa1 	bl	800399c <SPI_Init>
}
 8003a5a:	bf00      	nop
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	200020d8 	.word	0x200020d8

08003a64 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08a      	sub	sp, #40	; 0x28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	613b      	str	r3, [r7, #16]
 8003a70:	4b17      	ldr	r3, [pc, #92]	; (8003ad0 <SPI_MspInit+0x6c>)
 8003a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a74:	4a16      	ldr	r2, [pc, #88]	; (8003ad0 <SPI_MspInit+0x6c>)
 8003a76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a7a:	6453      	str	r3, [r2, #68]	; 0x44
 8003a7c:	4b14      	ldr	r3, [pc, #80]	; (8003ad0 <SPI_MspInit+0x6c>)
 8003a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	4b10      	ldr	r3, [pc, #64]	; (8003ad0 <SPI_MspInit+0x6c>)
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a90:	4a0f      	ldr	r2, [pc, #60]	; (8003ad0 <SPI_MspInit+0x6c>)
 8003a92:	f043 0320 	orr.w	r3, r3, #32
 8003a96:	6313      	str	r3, [r2, #48]	; 0x30
 8003a98:	4b0d      	ldr	r3, [pc, #52]	; (8003ad0 <SPI_MspInit+0x6c>)
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9c:	f003 0320 	and.w	r3, r3, #32
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8003aa4:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8003aaa:	2302      	movs	r3, #2
 8003aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8003aae:	2302      	movs	r3, #2
 8003ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8003ab6:	2305      	movs	r3, #5
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8003aba:	f107 0314 	add.w	r3, r7, #20
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4804      	ldr	r0, [pc, #16]	; (8003ad4 <SPI_MspInit+0x70>)
 8003ac2:	f001 f8fd 	bl	8004cc0 <HAL_GPIO_Init>
}
 8003ac6:	bf00      	nop
 8003ac8:	3728      	adds	r7, #40	; 0x28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	40021400 	.word	0x40021400

08003ad8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8003ade:	4b36      	ldr	r3, [pc, #216]	; (8003bb8 <LCD_IO_Init+0xe0>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d164      	bne.n	8003bb0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8003ae6:	4b34      	ldr	r3, [pc, #208]	; (8003bb8 <LCD_IO_Init+0xe0>)
 8003ae8:	2201      	movs	r2, #1
 8003aea:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003aec:	2300      	movs	r3, #0
 8003aee:	60bb      	str	r3, [r7, #8]
 8003af0:	4b32      	ldr	r3, [pc, #200]	; (8003bbc <LCD_IO_Init+0xe4>)
 8003af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af4:	4a31      	ldr	r2, [pc, #196]	; (8003bbc <LCD_IO_Init+0xe4>)
 8003af6:	f043 0308 	orr.w	r3, r3, #8
 8003afa:	6313      	str	r3, [r2, #48]	; 0x30
 8003afc:	4b2f      	ldr	r3, [pc, #188]	; (8003bbc <LCD_IO_Init+0xe4>)
 8003afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b00:	f003 0308 	and.w	r3, r3, #8
 8003b04:	60bb      	str	r3, [r7, #8]
 8003b06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003b08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003b16:	2302      	movs	r3, #2
 8003b18:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003b1a:	f107 030c 	add.w	r3, r7, #12
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4827      	ldr	r0, [pc, #156]	; (8003bc0 <LCD_IO_Init+0xe8>)
 8003b22:	f001 f8cd 	bl	8004cc0 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8003b26:	2300      	movs	r3, #0
 8003b28:	607b      	str	r3, [r7, #4]
 8003b2a:	4b24      	ldr	r3, [pc, #144]	; (8003bbc <LCD_IO_Init+0xe4>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	4a23      	ldr	r2, [pc, #140]	; (8003bbc <LCD_IO_Init+0xe4>)
 8003b30:	f043 0308 	orr.w	r3, r3, #8
 8003b34:	6313      	str	r3, [r2, #48]	; 0x30
 8003b36:	4b21      	ldr	r3, [pc, #132]	; (8003bbc <LCD_IO_Init+0xe4>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	607b      	str	r3, [r7, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003b42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003b50:	2302      	movs	r3, #2
 8003b52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003b54:	f107 030c 	add.w	r3, r7, #12
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4819      	ldr	r0, [pc, #100]	; (8003bc0 <LCD_IO_Init+0xe8>)
 8003b5c:	f001 f8b0 	bl	8004cc0 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003b60:	2300      	movs	r3, #0
 8003b62:	603b      	str	r3, [r7, #0]
 8003b64:	4b15      	ldr	r3, [pc, #84]	; (8003bbc <LCD_IO_Init+0xe4>)
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	4a14      	ldr	r2, [pc, #80]	; (8003bbc <LCD_IO_Init+0xe4>)
 8003b6a:	f043 0304 	orr.w	r3, r3, #4
 8003b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8003b70:	4b12      	ldr	r3, [pc, #72]	; (8003bbc <LCD_IO_Init+0xe4>)
 8003b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	603b      	str	r3, [r7, #0]
 8003b7a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003b7c:	2304      	movs	r3, #4
 8003b7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003b80:	2301      	movs	r3, #1
 8003b82:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003b84:	2300      	movs	r3, #0
 8003b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003b8c:	f107 030c 	add.w	r3, r7, #12
 8003b90:	4619      	mov	r1, r3
 8003b92:	480c      	ldr	r0, [pc, #48]	; (8003bc4 <LCD_IO_Init+0xec>)
 8003b94:	f001 f894 	bl	8004cc0 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2104      	movs	r1, #4
 8003b9c:	4809      	ldr	r0, [pc, #36]	; (8003bc4 <LCD_IO_Init+0xec>)
 8003b9e:	f001 fb5f 	bl	8005260 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	2104      	movs	r1, #4
 8003ba6:	4807      	ldr	r0, [pc, #28]	; (8003bc4 <LCD_IO_Init+0xec>)
 8003ba8:	f001 fb5a 	bl	8005260 <HAL_GPIO_WritePin>

    SPI_Init();
 8003bac:	f7ff fef6 	bl	800399c <SPI_Init>
  }
}
 8003bb0:	bf00      	nop
 8003bb2:	3720      	adds	r7, #32
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	20027930 	.word	0x20027930
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	40020c00 	.word	0x40020c00
 8003bc4:	40020800 	.word	0x40020800

08003bc8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bd8:	480a      	ldr	r0, [pc, #40]	; (8003c04 <LCD_IO_WriteData+0x3c>)
 8003bda:	f001 fb41 	bl	8005260 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8003bde:	2200      	movs	r2, #0
 8003be0:	2104      	movs	r1, #4
 8003be2:	4809      	ldr	r0, [pc, #36]	; (8003c08 <LCD_IO_WriteData+0x40>)
 8003be4:	f001 fb3c 	bl	8005260 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8003be8:	88fb      	ldrh	r3, [r7, #6]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff ff10 	bl	8003a10 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	2104      	movs	r1, #4
 8003bf4:	4804      	ldr	r0, [pc, #16]	; (8003c08 <LCD_IO_WriteData+0x40>)
 8003bf6:	f001 fb33 	bl	8005260 <HAL_GPIO_WritePin>
}
 8003bfa:	bf00      	nop
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40020c00 	.word	0x40020c00
 8003c08:	40020800 	.word	0x40020800

08003c0c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003c16:	2200      	movs	r2, #0
 8003c18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c1c:	480a      	ldr	r0, [pc, #40]	; (8003c48 <LCD_IO_WriteReg+0x3c>)
 8003c1e:	f001 fb1f 	bl	8005260 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003c22:	2200      	movs	r2, #0
 8003c24:	2104      	movs	r1, #4
 8003c26:	4809      	ldr	r0, [pc, #36]	; (8003c4c <LCD_IO_WriteReg+0x40>)
 8003c28:	f001 fb1a 	bl	8005260 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff feed 	bl	8003a10 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003c36:	2201      	movs	r2, #1
 8003c38:	2104      	movs	r1, #4
 8003c3a:	4804      	ldr	r0, [pc, #16]	; (8003c4c <LCD_IO_WriteReg+0x40>)
 8003c3c:	f001 fb10 	bl	8005260 <HAL_GPIO_WritePin>
}
 8003c40:	bf00      	nop
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40020c00 	.word	0x40020c00
 8003c4c:	40020800 	.word	0x40020800

08003c50 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  osDelay(Delay);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f003 fc05 	bl	8007468 <osDelay>
}
 8003c5e:	bf00      	nop
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
	...

08003c68 <systemClockOverride>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void systemClockOverride(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b092      	sub	sp, #72	; 0x48
 8003c6c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c6e:	2300      	movs	r3, #0
 8003c70:	603b      	str	r3, [r7, #0]
 8003c72:	4b1c      	ldr	r3, [pc, #112]	; (8003ce4 <systemClockOverride+0x7c>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	4a1b      	ldr	r2, [pc, #108]	; (8003ce4 <systemClockOverride+0x7c>)
 8003c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c7e:	4b19      	ldr	r3, [pc, #100]	; (8003ce4 <systemClockOverride+0x7c>)
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c86:	603b      	str	r3, [r7, #0]
 8003c88:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c92:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c94:	2302      	movs	r3, #2
 8003c96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c9c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003c9e:	2308      	movs	r3, #8
 8003ca0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003ca2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ca8:	2302      	movs	r3, #2
 8003caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003cac:	2307      	movs	r3, #7
 8003cae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003cb0:	1d3b      	adds	r3, r7, #4
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f001 fdac 	bl	8005810 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003cb8:	230f      	movs	r3, #15
 8003cba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003cc4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003cc8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cce:	647b      	str	r3, [r7, #68]	; 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8003cd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003cd4:	2105      	movs	r1, #5
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f002 f812 	bl	8005d00 <HAL_RCC_ClockConfig>
}
 8003cdc:	bf00      	nop
 8003cde:	3748      	adds	r7, #72	; 0x48
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40023800 	.word	0x40023800

08003ce8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003cec:	f000 fe64 	bl	80049b8 <HAL_Init>
  /* Configure the system clock */
//  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  //TODO: if you ever regenerate HAL code you will need to comment out SystemClock_Config() again located above this comment
  systemClockOverride();
 8003cf0:	f7ff ffba 	bl	8003c68 <systemClockOverride>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003cf4:	f000 f940 	bl	8003f78 <MX_GPIO_Init>
  MX_SPI5_Init();
 8003cf8:	f000 f8e4 	bl	8003ec4 <MX_SPI5_Init>
  MX_LTDC_Init();
 8003cfc:	f000 f81c 	bl	8003d38 <MX_LTDC_Init>
  MX_TIM11_Init();
 8003d00:	f000 f916 	bl	8003f30 <MX_TIM11_Init>
  MX_RNG_Init();
 8003d04:	f000 f8ca 	bl	8003e9c <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  ApplicationInit();
 8003d08:	f7fd f97e 	bl	8001008 <ApplicationInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003d0c:	f003 fad0 	bl	80072b0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003d10:	4a06      	ldr	r2, [pc, #24]	; (8003d2c <main+0x44>)
 8003d12:	2100      	movs	r1, #0
 8003d14:	4806      	ldr	r0, [pc, #24]	; (8003d30 <main+0x48>)
 8003d16:	f003 fb15 	bl	8007344 <osThreadNew>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	4a05      	ldr	r2, [pc, #20]	; (8003d34 <main+0x4c>)
 8003d1e:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  traceSTART();
 8003d20:	f008 fdfa 	bl	800c918 <SEGGER_SYSVIEW_Conf>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003d24:	f003 fae8 	bl	80072f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003d28:	e7fe      	b.n	8003d28 <main+0x40>
 8003d2a:	bf00      	nop
 8003d2c:	0801066c 	.word	0x0801066c
 8003d30:	08004349 	.word	0x08004349
 8003d34:	20027a8c 	.word	0x20027a8c

08003d38 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b09a      	sub	sp, #104	; 0x68
 8003d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003d3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003d42:	2234      	movs	r2, #52	; 0x34
 8003d44:	2100      	movs	r1, #0
 8003d46:	4618      	mov	r0, r3
 8003d48:	f009 f8cb 	bl	800cee2 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8003d4c:	463b      	mov	r3, r7
 8003d4e:	2234      	movs	r2, #52	; 0x34
 8003d50:	2100      	movs	r1, #0
 8003d52:	4618      	mov	r0, r3
 8003d54:	f009 f8c5 	bl	800cee2 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8003d58:	4b4e      	ldr	r3, [pc, #312]	; (8003e94 <MX_LTDC_Init+0x15c>)
 8003d5a:	4a4f      	ldr	r2, [pc, #316]	; (8003e98 <MX_LTDC_Init+0x160>)
 8003d5c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003d5e:	4b4d      	ldr	r3, [pc, #308]	; (8003e94 <MX_LTDC_Init+0x15c>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003d64:	4b4b      	ldr	r3, [pc, #300]	; (8003e94 <MX_LTDC_Init+0x15c>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003d6a:	4b4a      	ldr	r3, [pc, #296]	; (8003e94 <MX_LTDC_Init+0x15c>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003d70:	4b48      	ldr	r3, [pc, #288]	; (8003e94 <MX_LTDC_Init+0x15c>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8003d76:	4b47      	ldr	r3, [pc, #284]	; (8003e94 <MX_LTDC_Init+0x15c>)
 8003d78:	2207      	movs	r2, #7
 8003d7a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8003d7c:	4b45      	ldr	r3, [pc, #276]	; (8003e94 <MX_LTDC_Init+0x15c>)
 8003d7e:	2203      	movs	r2, #3
 8003d80:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8003d82:	4b44      	ldr	r3, [pc, #272]	; (8003e94 <MX_LTDC_Init+0x15c>)
 8003d84:	220e      	movs	r2, #14
 8003d86:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8003d88:	4b42      	ldr	r3, [pc, #264]	; (8003e94 <MX_LTDC_Init+0x15c>)
 8003d8a:	2205      	movs	r2, #5
 8003d8c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8003d8e:	4b41      	ldr	r3, [pc, #260]	; (8003e94 <MX_LTDC_Init+0x15c>)
 8003d90:	f240 228e 	movw	r2, #654	; 0x28e
 8003d94:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8003d96:	4b3f      	ldr	r3, [pc, #252]	; (8003e94 <MX_LTDC_Init+0x15c>)
 8003d98:	f240 12e5 	movw	r2, #485	; 0x1e5
 8003d9c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8003d9e:	4b3d      	ldr	r3, [pc, #244]	; (8003e94 <MX_LTDC_Init+0x15c>)
 8003da0:	f44f 7225 	mov.w	r2, #660	; 0x294
 8003da4:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8003da6:	4b3b      	ldr	r3, [pc, #236]	; (8003e94 <MX_LTDC_Init+0x15c>)
 8003da8:	f240 12e7 	movw	r2, #487	; 0x1e7
 8003dac:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8003dae:	4b39      	ldr	r3, [pc, #228]	; (8003e94 <MX_LTDC_Init+0x15c>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8003db6:	4b37      	ldr	r3, [pc, #220]	; (8003e94 <MX_LTDC_Init+0x15c>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003dbe:	4b35      	ldr	r3, [pc, #212]	; (8003e94 <MX_LTDC_Init+0x15c>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003dc6:	4833      	ldr	r0, [pc, #204]	; (8003e94 <MX_LTDC_Init+0x15c>)
 8003dc8:	f001 fa7c 	bl	80052c4 <HAL_LTDC_Init>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8003dd2:	f000 fac2 	bl	800435a <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8003dde:	2300      	movs	r3, #0
 8003de0:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8003de2:	2300      	movs	r3, #0
 8003de4:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003de6:	2300      	movs	r3, #0
 8003de8:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8003dee:	2300      	movs	r3, #0
 8003df0:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003df6:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003df8:	2305      	movs	r3, #5
 8003dfa:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8003e14:	2300      	movs	r3, #0
 8003e16:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003e1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e1e:	2200      	movs	r2, #0
 8003e20:	4619      	mov	r1, r3
 8003e22:	481c      	ldr	r0, [pc, #112]	; (8003e94 <MX_LTDC_Init+0x15c>)
 8003e24:	f001 fb1e 	bl	8005464 <HAL_LTDC_ConfigLayer>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8003e2e:	f000 fa94 	bl	800435a <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8003e32:	2300      	movs	r3, #0
 8003e34:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8003e36:	2300      	movs	r3, #0
 8003e38:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003e42:	2300      	movs	r3, #0
 8003e44:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8003e46:	2300      	movs	r3, #0
 8003e48:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e52:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003e54:	2305      	movs	r3, #5
 8003e56:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8003e64:	2300      	movs	r3, #0
 8003e66:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8003e70:	2300      	movs	r3, #0
 8003e72:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8003e76:	463b      	mov	r3, r7
 8003e78:	2201      	movs	r2, #1
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4805      	ldr	r0, [pc, #20]	; (8003e94 <MX_LTDC_Init+0x15c>)
 8003e7e:	f001 faf1 	bl	8005464 <HAL_LTDC_ConfigLayer>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8003e88:	f000 fa67 	bl	800435a <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8003e8c:	bf00      	nop
 8003e8e:	3768      	adds	r7, #104	; 0x68
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	20027934 	.word	0x20027934
 8003e98:	40016800 	.word	0x40016800

08003e9c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8003ea0:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <MX_RNG_Init+0x20>)
 8003ea2:	4a07      	ldr	r2, [pc, #28]	; (8003ec0 <MX_RNG_Init+0x24>)
 8003ea4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003ea6:	4805      	ldr	r0, [pc, #20]	; (8003ebc <MX_RNG_Init+0x20>)
 8003ea8:	f002 fad6 	bl	8006458 <HAL_RNG_Init>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8003eb2:	f000 fa52 	bl	800435a <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8003eb6:	bf00      	nop
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	200279dc 	.word	0x200279dc
 8003ec0:	50060800 	.word	0x50060800

08003ec4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8003ec8:	4b17      	ldr	r3, [pc, #92]	; (8003f28 <MX_SPI5_Init+0x64>)
 8003eca:	4a18      	ldr	r2, [pc, #96]	; (8003f2c <MX_SPI5_Init+0x68>)
 8003ecc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003ece:	4b16      	ldr	r3, [pc, #88]	; (8003f28 <MX_SPI5_Init+0x64>)
 8003ed0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ed4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003ed6:	4b14      	ldr	r3, [pc, #80]	; (8003f28 <MX_SPI5_Init+0x64>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003edc:	4b12      	ldr	r3, [pc, #72]	; (8003f28 <MX_SPI5_Init+0x64>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ee2:	4b11      	ldr	r3, [pc, #68]	; (8003f28 <MX_SPI5_Init+0x64>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ee8:	4b0f      	ldr	r3, [pc, #60]	; (8003f28 <MX_SPI5_Init+0x64>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003eee:	4b0e      	ldr	r3, [pc, #56]	; (8003f28 <MX_SPI5_Init+0x64>)
 8003ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ef4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ef6:	4b0c      	ldr	r3, [pc, #48]	; (8003f28 <MX_SPI5_Init+0x64>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003efc:	4b0a      	ldr	r3, [pc, #40]	; (8003f28 <MX_SPI5_Init+0x64>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f02:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <MX_SPI5_Init+0x64>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f08:	4b07      	ldr	r3, [pc, #28]	; (8003f28 <MX_SPI5_Init+0x64>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8003f0e:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <MX_SPI5_Init+0x64>)
 8003f10:	220a      	movs	r2, #10
 8003f12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003f14:	4804      	ldr	r0, [pc, #16]	; (8003f28 <MX_SPI5_Init+0x64>)
 8003f16:	f002 fac9 	bl	80064ac <HAL_SPI_Init>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8003f20:	f000 fa1b 	bl	800435a <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8003f24:	bf00      	nop
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	200279ec 	.word	0x200279ec
 8003f2c:	40015000 	.word	0x40015000

08003f30 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003f34:	4b0e      	ldr	r3, [pc, #56]	; (8003f70 <MX_TIM11_Init+0x40>)
 8003f36:	4a0f      	ldr	r2, [pc, #60]	; (8003f74 <MX_TIM11_Init+0x44>)
 8003f38:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8003f3a:	4b0d      	ldr	r3, [pc, #52]	; (8003f70 <MX_TIM11_Init+0x40>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <MX_TIM11_Init+0x40>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8003f46:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <MX_TIM11_Init+0x40>)
 8003f48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f4c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f4e:	4b08      	ldr	r3, [pc, #32]	; (8003f70 <MX_TIM11_Init+0x40>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f54:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <MX_TIM11_Init+0x40>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003f5a:	4805      	ldr	r0, [pc, #20]	; (8003f70 <MX_TIM11_Init+0x40>)
 8003f5c:	f003 f884 	bl	8007068 <HAL_TIM_Base_Init>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8003f66:	f000 f9f8 	bl	800435a <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003f6a:	bf00      	nop
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20027a44 	.word	0x20027a44
 8003f74:	40014800 	.word	0x40014800

08003f78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08e      	sub	sp, #56	; 0x38
 8003f7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	605a      	str	r2, [r3, #4]
 8003f88:	609a      	str	r2, [r3, #8]
 8003f8a:	60da      	str	r2, [r3, #12]
 8003f8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f8e:	2300      	movs	r3, #0
 8003f90:	623b      	str	r3, [r7, #32]
 8003f92:	4bb3      	ldr	r3, [pc, #716]	; (8004260 <MX_GPIO_Init+0x2e8>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	4ab2      	ldr	r2, [pc, #712]	; (8004260 <MX_GPIO_Init+0x2e8>)
 8003f98:	f043 0304 	orr.w	r3, r3, #4
 8003f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f9e:	4bb0      	ldr	r3, [pc, #704]	; (8004260 <MX_GPIO_Init+0x2e8>)
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	623b      	str	r3, [r7, #32]
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003faa:	2300      	movs	r3, #0
 8003fac:	61fb      	str	r3, [r7, #28]
 8003fae:	4bac      	ldr	r3, [pc, #688]	; (8004260 <MX_GPIO_Init+0x2e8>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	4aab      	ldr	r2, [pc, #684]	; (8004260 <MX_GPIO_Init+0x2e8>)
 8003fb4:	f043 0320 	orr.w	r3, r3, #32
 8003fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003fba:	4ba9      	ldr	r3, [pc, #676]	; (8004260 <MX_GPIO_Init+0x2e8>)
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	f003 0320 	and.w	r3, r3, #32
 8003fc2:	61fb      	str	r3, [r7, #28]
 8003fc4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61bb      	str	r3, [r7, #24]
 8003fca:	4ba5      	ldr	r3, [pc, #660]	; (8004260 <MX_GPIO_Init+0x2e8>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fce:	4aa4      	ldr	r2, [pc, #656]	; (8004260 <MX_GPIO_Init+0x2e8>)
 8003fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fd6:	4ba2      	ldr	r3, [pc, #648]	; (8004260 <MX_GPIO_Init+0x2e8>)
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fde:	61bb      	str	r3, [r7, #24]
 8003fe0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	4b9e      	ldr	r3, [pc, #632]	; (8004260 <MX_GPIO_Init+0x2e8>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	4a9d      	ldr	r2, [pc, #628]	; (8004260 <MX_GPIO_Init+0x2e8>)
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ff2:	4b9b      	ldr	r3, [pc, #620]	; (8004260 <MX_GPIO_Init+0x2e8>)
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ffe:	2300      	movs	r3, #0
 8004000:	613b      	str	r3, [r7, #16]
 8004002:	4b97      	ldr	r3, [pc, #604]	; (8004260 <MX_GPIO_Init+0x2e8>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	4a96      	ldr	r2, [pc, #600]	; (8004260 <MX_GPIO_Init+0x2e8>)
 8004008:	f043 0302 	orr.w	r3, r3, #2
 800400c:	6313      	str	r3, [r2, #48]	; 0x30
 800400e:	4b94      	ldr	r3, [pc, #592]	; (8004260 <MX_GPIO_Init+0x2e8>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	613b      	str	r3, [r7, #16]
 8004018:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	4b90      	ldr	r3, [pc, #576]	; (8004260 <MX_GPIO_Init+0x2e8>)
 8004020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004022:	4a8f      	ldr	r2, [pc, #572]	; (8004260 <MX_GPIO_Init+0x2e8>)
 8004024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004028:	6313      	str	r3, [r2, #48]	; 0x30
 800402a:	4b8d      	ldr	r3, [pc, #564]	; (8004260 <MX_GPIO_Init+0x2e8>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004036:	2300      	movs	r3, #0
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	4b89      	ldr	r3, [pc, #548]	; (8004260 <MX_GPIO_Init+0x2e8>)
 800403c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403e:	4a88      	ldr	r2, [pc, #544]	; (8004260 <MX_GPIO_Init+0x2e8>)
 8004040:	f043 0310 	orr.w	r3, r3, #16
 8004044:	6313      	str	r3, [r2, #48]	; 0x30
 8004046:	4b86      	ldr	r3, [pc, #536]	; (8004260 <MX_GPIO_Init+0x2e8>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	f003 0310 	and.w	r3, r3, #16
 800404e:	60bb      	str	r3, [r7, #8]
 8004050:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004052:	2300      	movs	r3, #0
 8004054:	607b      	str	r3, [r7, #4]
 8004056:	4b82      	ldr	r3, [pc, #520]	; (8004260 <MX_GPIO_Init+0x2e8>)
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	4a81      	ldr	r2, [pc, #516]	; (8004260 <MX_GPIO_Init+0x2e8>)
 800405c:	f043 0308 	orr.w	r3, r3, #8
 8004060:	6313      	str	r3, [r2, #48]	; 0x30
 8004062:	4b7f      	ldr	r3, [pc, #508]	; (8004260 <MX_GPIO_Init+0x2e8>)
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	607b      	str	r3, [r7, #4]
 800406c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800406e:	2200      	movs	r2, #0
 8004070:	2116      	movs	r1, #22
 8004072:	487c      	ldr	r0, [pc, #496]	; (8004264 <MX_GPIO_Init+0x2ec>)
 8004074:	f001 f8f4 	bl	8005260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8004078:	2200      	movs	r2, #0
 800407a:	2180      	movs	r1, #128	; 0x80
 800407c:	487a      	ldr	r0, [pc, #488]	; (8004268 <MX_GPIO_Init+0x2f0>)
 800407e:	f001 f8ef 	bl	8005260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8004082:	2200      	movs	r2, #0
 8004084:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004088:	4878      	ldr	r0, [pc, #480]	; (800426c <MX_GPIO_Init+0x2f4>)
 800408a:	f001 f8e9 	bl	8005260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800408e:	2200      	movs	r2, #0
 8004090:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8004094:	4876      	ldr	r0, [pc, #472]	; (8004270 <MX_GPIO_Init+0x2f8>)
 8004096:	f001 f8e3 	bl	8005260 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800409a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a0:	2302      	movs	r3, #2
 80040a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a4:	2300      	movs	r3, #0
 80040a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a8:	2303      	movs	r3, #3
 80040aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80040ac:	230c      	movs	r3, #12
 80040ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80040b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040b4:	4619      	mov	r1, r3
 80040b6:	486f      	ldr	r0, [pc, #444]	; (8004274 <MX_GPIO_Init+0x2fc>)
 80040b8:	f000 fe02 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80040bc:	2301      	movs	r3, #1
 80040be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c0:	2302      	movs	r3, #2
 80040c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c4:	2300      	movs	r3, #0
 80040c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040c8:	2303      	movs	r3, #3
 80040ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80040cc:	230c      	movs	r3, #12
 80040ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80040d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040d4:	4619      	mov	r1, r3
 80040d6:	4863      	ldr	r0, [pc, #396]	; (8004264 <MX_GPIO_Init+0x2ec>)
 80040d8:	f000 fdf2 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80040dc:	2316      	movs	r3, #22
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040e0:	2301      	movs	r3, #1
 80040e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e4:	2300      	movs	r3, #0
 80040e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040e8:	2300      	movs	r3, #0
 80040ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040f0:	4619      	mov	r1, r3
 80040f2:	485c      	ldr	r0, [pc, #368]	; (8004264 <MX_GPIO_Init+0x2ec>)
 80040f4:	f000 fde4 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80040f8:	2301      	movs	r3, #1
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80040fc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8004100:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004102:	2300      	movs	r3, #0
 8004104:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800410a:	4619      	mov	r1, r3
 800410c:	4856      	ldr	r0, [pc, #344]	; (8004268 <MX_GPIO_Init+0x2f0>)
 800410e:	f000 fdd7 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8004112:	f248 0306 	movw	r3, #32774	; 0x8006
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004118:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800411c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411e:	2300      	movs	r3, #0
 8004120:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004126:	4619      	mov	r1, r3
 8004128:	484f      	ldr	r0, [pc, #316]	; (8004268 <MX_GPIO_Init+0x2f0>)
 800412a:	f000 fdc9 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800412e:	2380      	movs	r3, #128	; 0x80
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004132:	2301      	movs	r3, #1
 8004134:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004136:	2300      	movs	r3, #0
 8004138:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800413a:	2300      	movs	r3, #0
 800413c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800413e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004142:	4619      	mov	r1, r3
 8004144:	4848      	ldr	r0, [pc, #288]	; (8004268 <MX_GPIO_Init+0x2f0>)
 8004146:	f000 fdbb 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800414a:	2320      	movs	r3, #32
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800414e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8004152:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004154:	2300      	movs	r3, #0
 8004156:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8004158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800415c:	4619      	mov	r1, r3
 800415e:	4841      	ldr	r0, [pc, #260]	; (8004264 <MX_GPIO_Init+0x2ec>)
 8004160:	f000 fdae 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8004164:	2304      	movs	r3, #4
 8004166:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004168:	2300      	movs	r3, #0
 800416a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416c:	2300      	movs	r3, #0
 800416e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8004170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004174:	4619      	mov	r1, r3
 8004176:	4840      	ldr	r0, [pc, #256]	; (8004278 <MX_GPIO_Init+0x300>)
 8004178:	f000 fda2 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800417c:	f248 1333 	movw	r3, #33075	; 0x8133
 8004180:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004182:	2302      	movs	r3, #2
 8004184:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004186:	2300      	movs	r3, #0
 8004188:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800418a:	2303      	movs	r3, #3
 800418c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800418e:	230c      	movs	r3, #12
 8004190:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004196:	4619      	mov	r1, r3
 8004198:	4835      	ldr	r0, [pc, #212]	; (8004270 <MX_GPIO_Init+0x2f8>)
 800419a:	f000 fd91 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800419e:	f64f 7383 	movw	r3, #65411	; 0xff83
 80041a2:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a4:	2302      	movs	r3, #2
 80041a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041ac:	2303      	movs	r3, #3
 80041ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80041b0:	230c      	movs	r3, #12
 80041b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041b8:	4619      	mov	r1, r3
 80041ba:	4830      	ldr	r0, [pc, #192]	; (800427c <MX_GPIO_Init+0x304>)
 80041bc:	f000 fd80 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80041c0:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80041c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c6:	2302      	movs	r3, #2
 80041c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ca:	2300      	movs	r3, #0
 80041cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ce:	2300      	movs	r3, #0
 80041d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80041d2:	230c      	movs	r3, #12
 80041d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041da:	4619      	mov	r1, r3
 80041dc:	4826      	ldr	r0, [pc, #152]	; (8004278 <MX_GPIO_Init+0x300>)
 80041de:	f000 fd6f 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80041e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041e8:	2300      	movs	r3, #0
 80041ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ec:	2300      	movs	r3, #0
 80041ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80041f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041f4:	4619      	mov	r1, r3
 80041f6:	4820      	ldr	r0, [pc, #128]	; (8004278 <MX_GPIO_Init+0x300>)
 80041f8:	f000 fd62 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80041fc:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004200:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004202:	2302      	movs	r3, #2
 8004204:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004206:	2300      	movs	r3, #0
 8004208:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800420a:	2303      	movs	r3, #3
 800420c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800420e:	230c      	movs	r3, #12
 8004210:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004216:	4619      	mov	r1, r3
 8004218:	4814      	ldr	r0, [pc, #80]	; (800426c <MX_GPIO_Init+0x2f4>)
 800421a:	f000 fd51 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 800421e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004222:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004224:	2300      	movs	r3, #0
 8004226:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004228:	2300      	movs	r3, #0
 800422a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800422c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004230:	4619      	mov	r1, r3
 8004232:	480e      	ldr	r0, [pc, #56]	; (800426c <MX_GPIO_Init+0x2f4>)
 8004234:	f000 fd44 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8004238:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800423c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800423e:	2301      	movs	r3, #1
 8004240:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004242:	2300      	movs	r3, #0
 8004244:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004246:	2300      	movs	r3, #0
 8004248:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800424a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800424e:	4619      	mov	r1, r3
 8004250:	4806      	ldr	r0, [pc, #24]	; (800426c <MX_GPIO_Init+0x2f4>)
 8004252:	f000 fd35 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8004256:	f44f 7300 	mov.w	r3, #512	; 0x200
 800425a:	627b      	str	r3, [r7, #36]	; 0x24
 800425c:	e010      	b.n	8004280 <MX_GPIO_Init+0x308>
 800425e:	bf00      	nop
 8004260:	40023800 	.word	0x40023800
 8004264:	40020800 	.word	0x40020800
 8004268:	40020000 	.word	0x40020000
 800426c:	40020c00 	.word	0x40020c00
 8004270:	40021800 	.word	0x40021800
 8004274:	40021400 	.word	0x40021400
 8004278:	40020400 	.word	0x40020400
 800427c:	40021000 	.word	0x40021000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004280:	2312      	movs	r3, #18
 8004282:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004284:	2300      	movs	r3, #0
 8004286:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004288:	2300      	movs	r3, #0
 800428a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800428c:	2304      	movs	r3, #4
 800428e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8004290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004294:	4619      	mov	r1, r3
 8004296:	4828      	ldr	r0, [pc, #160]	; (8004338 <MX_GPIO_Init+0x3c0>)
 8004298:	f000 fd12 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800429c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042a2:	2312      	movs	r3, #18
 80042a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042aa:	2300      	movs	r3, #0
 80042ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80042ae:	2304      	movs	r3, #4
 80042b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80042b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042b6:	4619      	mov	r1, r3
 80042b8:	4820      	ldr	r0, [pc, #128]	; (800433c <MX_GPIO_Init+0x3c4>)
 80042ba:	f000 fd01 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80042be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c4:	2302      	movs	r3, #2
 80042c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c8:	2300      	movs	r3, #0
 80042ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042cc:	2303      	movs	r3, #3
 80042ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042d0:	2307      	movs	r3, #7
 80042d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042d8:	4619      	mov	r1, r3
 80042da:	4818      	ldr	r0, [pc, #96]	; (800433c <MX_GPIO_Init+0x3c4>)
 80042dc:	f000 fcf0 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80042e0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042e6:	2301      	movs	r3, #1
 80042e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ee:	2300      	movs	r3, #0
 80042f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80042f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042f6:	4619      	mov	r1, r3
 80042f8:	4811      	ldr	r0, [pc, #68]	; (8004340 <MX_GPIO_Init+0x3c8>)
 80042fa:	f000 fce1 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80042fe:	2360      	movs	r3, #96	; 0x60
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004302:	2302      	movs	r3, #2
 8004304:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004306:	2300      	movs	r3, #0
 8004308:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800430a:	2303      	movs	r3, #3
 800430c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800430e:	230c      	movs	r3, #12
 8004310:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004316:	4619      	mov	r1, r3
 8004318:	480a      	ldr	r0, [pc, #40]	; (8004344 <MX_GPIO_Init+0x3cc>)
 800431a:	f000 fcd1 	bl	8004cc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800431e:	2200      	movs	r2, #0
 8004320:	2105      	movs	r1, #5
 8004322:	2006      	movs	r0, #6
 8004324:	f000 fc95 	bl	8004c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004328:	2006      	movs	r0, #6
 800432a:	f000 fcae 	bl	8004c8a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800432e:	bf00      	nop
 8004330:	3738      	adds	r7, #56	; 0x38
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40020800 	.word	0x40020800
 800433c:	40020000 	.word	0x40020000
 8004340:	40021800 	.word	0x40021800
 8004344:	40020400 	.word	0x40020400

08004348 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	//RunDemoForLCD();
    osDelay(10000);
 8004350:	f242 7010 	movw	r0, #10000	; 0x2710
 8004354:	f003 f888 	bl	8007468 <osDelay>
 8004358:	e7fa      	b.n	8004350 <StartDefaultTask+0x8>

0800435a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800435a:	b480      	push	{r7}
 800435c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800435e:	b672      	cpsid	i
}
 8004360:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004362:	e7fe      	b.n	8004362 <Error_Handler+0x8>

08004364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800436a:	2300      	movs	r3, #0
 800436c:	607b      	str	r3, [r7, #4]
 800436e:	4b12      	ldr	r3, [pc, #72]	; (80043b8 <HAL_MspInit+0x54>)
 8004370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004372:	4a11      	ldr	r2, [pc, #68]	; (80043b8 <HAL_MspInit+0x54>)
 8004374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004378:	6453      	str	r3, [r2, #68]	; 0x44
 800437a:	4b0f      	ldr	r3, [pc, #60]	; (80043b8 <HAL_MspInit+0x54>)
 800437c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004382:	607b      	str	r3, [r7, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004386:	2300      	movs	r3, #0
 8004388:	603b      	str	r3, [r7, #0]
 800438a:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <HAL_MspInit+0x54>)
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	4a0a      	ldr	r2, [pc, #40]	; (80043b8 <HAL_MspInit+0x54>)
 8004390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004394:	6413      	str	r3, [r2, #64]	; 0x40
 8004396:	4b08      	ldr	r3, [pc, #32]	; (80043b8 <HAL_MspInit+0x54>)
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439e:	603b      	str	r3, [r7, #0]
 80043a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80043a2:	2200      	movs	r2, #0
 80043a4:	210f      	movs	r1, #15
 80043a6:	f06f 0001 	mvn.w	r0, #1
 80043aa:	f000 fc52 	bl	8004c52 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043ae:	bf00      	nop
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40023800 	.word	0x40023800

080043bc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b09a      	sub	sp, #104	; 0x68
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	605a      	str	r2, [r3, #4]
 80043ce:	609a      	str	r2, [r3, #8]
 80043d0:	60da      	str	r2, [r3, #12]
 80043d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80043d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043d8:	2230      	movs	r2, #48	; 0x30
 80043da:	2100      	movs	r1, #0
 80043dc:	4618      	mov	r0, r3
 80043de:	f008 fd80 	bl	800cee2 <memset>
  if(hltdc->Instance==LTDC)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a81      	ldr	r2, [pc, #516]	; (80045ec <HAL_LTDC_MspInit+0x230>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	f040 80fa 	bne.w	80045e2 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80043ee:	2308      	movs	r3, #8
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80043f2:	2332      	movs	r3, #50	; 0x32
 80043f4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80043f6:	2302      	movs	r3, #2
 80043f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80043fa:	2300      	movs	r3, #0
 80043fc:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004402:	4618      	mov	r0, r3
 8004404:	f001 fe68 	bl	80060d8 <HAL_RCCEx_PeriphCLKConfig>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800440e:	f7ff ffa4 	bl	800435a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004412:	2300      	movs	r3, #0
 8004414:	623b      	str	r3, [r7, #32]
 8004416:	4b76      	ldr	r3, [pc, #472]	; (80045f0 <HAL_LTDC_MspInit+0x234>)
 8004418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441a:	4a75      	ldr	r2, [pc, #468]	; (80045f0 <HAL_LTDC_MspInit+0x234>)
 800441c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004420:	6453      	str	r3, [r2, #68]	; 0x44
 8004422:	4b73      	ldr	r3, [pc, #460]	; (80045f0 <HAL_LTDC_MspInit+0x234>)
 8004424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004426:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800442a:	623b      	str	r3, [r7, #32]
 800442c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800442e:	2300      	movs	r3, #0
 8004430:	61fb      	str	r3, [r7, #28]
 8004432:	4b6f      	ldr	r3, [pc, #444]	; (80045f0 <HAL_LTDC_MspInit+0x234>)
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	4a6e      	ldr	r2, [pc, #440]	; (80045f0 <HAL_LTDC_MspInit+0x234>)
 8004438:	f043 0320 	orr.w	r3, r3, #32
 800443c:	6313      	str	r3, [r2, #48]	; 0x30
 800443e:	4b6c      	ldr	r3, [pc, #432]	; (80045f0 <HAL_LTDC_MspInit+0x234>)
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004442:	f003 0320 	and.w	r3, r3, #32
 8004446:	61fb      	str	r3, [r7, #28]
 8004448:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800444a:	2300      	movs	r3, #0
 800444c:	61bb      	str	r3, [r7, #24]
 800444e:	4b68      	ldr	r3, [pc, #416]	; (80045f0 <HAL_LTDC_MspInit+0x234>)
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	4a67      	ldr	r2, [pc, #412]	; (80045f0 <HAL_LTDC_MspInit+0x234>)
 8004454:	f043 0301 	orr.w	r3, r3, #1
 8004458:	6313      	str	r3, [r2, #48]	; 0x30
 800445a:	4b65      	ldr	r3, [pc, #404]	; (80045f0 <HAL_LTDC_MspInit+0x234>)
 800445c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	61bb      	str	r3, [r7, #24]
 8004464:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004466:	2300      	movs	r3, #0
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	4b61      	ldr	r3, [pc, #388]	; (80045f0 <HAL_LTDC_MspInit+0x234>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	4a60      	ldr	r2, [pc, #384]	; (80045f0 <HAL_LTDC_MspInit+0x234>)
 8004470:	f043 0302 	orr.w	r3, r3, #2
 8004474:	6313      	str	r3, [r2, #48]	; 0x30
 8004476:	4b5e      	ldr	r3, [pc, #376]	; (80045f0 <HAL_LTDC_MspInit+0x234>)
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004482:	2300      	movs	r3, #0
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	4b5a      	ldr	r3, [pc, #360]	; (80045f0 <HAL_LTDC_MspInit+0x234>)
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	4a59      	ldr	r2, [pc, #356]	; (80045f0 <HAL_LTDC_MspInit+0x234>)
 800448c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004490:	6313      	str	r3, [r2, #48]	; 0x30
 8004492:	4b57      	ldr	r3, [pc, #348]	; (80045f0 <HAL_LTDC_MspInit+0x234>)
 8004494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	4b53      	ldr	r3, [pc, #332]	; (80045f0 <HAL_LTDC_MspInit+0x234>)
 80044a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a6:	4a52      	ldr	r2, [pc, #328]	; (80045f0 <HAL_LTDC_MspInit+0x234>)
 80044a8:	f043 0304 	orr.w	r3, r3, #4
 80044ac:	6313      	str	r3, [r2, #48]	; 0x30
 80044ae:	4b50      	ldr	r3, [pc, #320]	; (80045f0 <HAL_LTDC_MspInit+0x234>)
 80044b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b2:	f003 0304 	and.w	r3, r3, #4
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80044ba:	2300      	movs	r3, #0
 80044bc:	60bb      	str	r3, [r7, #8]
 80044be:	4b4c      	ldr	r3, [pc, #304]	; (80045f0 <HAL_LTDC_MspInit+0x234>)
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	4a4b      	ldr	r2, [pc, #300]	; (80045f0 <HAL_LTDC_MspInit+0x234>)
 80044c4:	f043 0308 	orr.w	r3, r3, #8
 80044c8:	6313      	str	r3, [r2, #48]	; 0x30
 80044ca:	4b49      	ldr	r3, [pc, #292]	; (80045f0 <HAL_LTDC_MspInit+0x234>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	60bb      	str	r3, [r7, #8]
 80044d4:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80044d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044da:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044dc:	2302      	movs	r3, #2
 80044de:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e0:	2300      	movs	r3, #0
 80044e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044e4:	2300      	movs	r3, #0
 80044e6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80044e8:	230e      	movs	r3, #14
 80044ea:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80044ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80044f0:	4619      	mov	r1, r3
 80044f2:	4840      	ldr	r0, [pc, #256]	; (80045f4 <HAL_LTDC_MspInit+0x238>)
 80044f4:	f000 fbe4 	bl	8004cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80044f8:	f641 0358 	movw	r3, #6232	; 0x1858
 80044fc:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044fe:	2302      	movs	r3, #2
 8004500:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004502:	2300      	movs	r3, #0
 8004504:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004506:	2300      	movs	r3, #0
 8004508:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800450a:	230e      	movs	r3, #14
 800450c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800450e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004512:	4619      	mov	r1, r3
 8004514:	4838      	ldr	r0, [pc, #224]	; (80045f8 <HAL_LTDC_MspInit+0x23c>)
 8004516:	f000 fbd3 	bl	8004cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800451a:	2303      	movs	r3, #3
 800451c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800451e:	2302      	movs	r3, #2
 8004520:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004522:	2300      	movs	r3, #0
 8004524:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004526:	2300      	movs	r3, #0
 8004528:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800452a:	2309      	movs	r3, #9
 800452c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800452e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004532:	4619      	mov	r1, r3
 8004534:	4831      	ldr	r0, [pc, #196]	; (80045fc <HAL_LTDC_MspInit+0x240>)
 8004536:	f000 fbc3 	bl	8004cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800453a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800453e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004540:	2302      	movs	r3, #2
 8004542:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004544:	2300      	movs	r3, #0
 8004546:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004548:	2300      	movs	r3, #0
 800454a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800454c:	230e      	movs	r3, #14
 800454e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004550:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004554:	4619      	mov	r1, r3
 8004556:	4829      	ldr	r0, [pc, #164]	; (80045fc <HAL_LTDC_MspInit+0x240>)
 8004558:	f000 fbb2 	bl	8004cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800455c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8004560:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004562:	2302      	movs	r3, #2
 8004564:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004566:	2300      	movs	r3, #0
 8004568:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800456a:	2300      	movs	r3, #0
 800456c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800456e:	230e      	movs	r3, #14
 8004570:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004572:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004576:	4619      	mov	r1, r3
 8004578:	4821      	ldr	r0, [pc, #132]	; (8004600 <HAL_LTDC_MspInit+0x244>)
 800457a:	f000 fba1 	bl	8004cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800457e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8004582:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004584:	2302      	movs	r3, #2
 8004586:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004588:	2300      	movs	r3, #0
 800458a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800458c:	2300      	movs	r3, #0
 800458e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004590:	230e      	movs	r3, #14
 8004592:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004594:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004598:	4619      	mov	r1, r3
 800459a:	481a      	ldr	r0, [pc, #104]	; (8004604 <HAL_LTDC_MspInit+0x248>)
 800459c:	f000 fb90 	bl	8004cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80045a0:	2348      	movs	r3, #72	; 0x48
 80045a2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a4:	2302      	movs	r3, #2
 80045a6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ac:	2300      	movs	r3, #0
 80045ae:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80045b0:	230e      	movs	r3, #14
 80045b2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80045b8:	4619      	mov	r1, r3
 80045ba:	4813      	ldr	r0, [pc, #76]	; (8004608 <HAL_LTDC_MspInit+0x24c>)
 80045bc:	f000 fb80 	bl	8004cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80045c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80045c4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045c6:	2302      	movs	r3, #2
 80045c8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ce:	2300      	movs	r3, #0
 80045d0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80045d2:	2309      	movs	r3, #9
 80045d4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80045d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80045da:	4619      	mov	r1, r3
 80045dc:	4808      	ldr	r0, [pc, #32]	; (8004600 <HAL_LTDC_MspInit+0x244>)
 80045de:	f000 fb6f 	bl	8004cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80045e2:	bf00      	nop
 80045e4:	3768      	adds	r7, #104	; 0x68
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40016800 	.word	0x40016800
 80045f0:	40023800 	.word	0x40023800
 80045f4:	40021400 	.word	0x40021400
 80045f8:	40020000 	.word	0x40020000
 80045fc:	40020400 	.word	0x40020400
 8004600:	40021800 	.word	0x40021800
 8004604:	40020800 	.word	0x40020800
 8004608:	40020c00 	.word	0x40020c00

0800460c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a0b      	ldr	r2, [pc, #44]	; (8004648 <HAL_RNG_MspInit+0x3c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d10d      	bne.n	800463a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	4b0a      	ldr	r3, [pc, #40]	; (800464c <HAL_RNG_MspInit+0x40>)
 8004624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004626:	4a09      	ldr	r2, [pc, #36]	; (800464c <HAL_RNG_MspInit+0x40>)
 8004628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800462c:	6353      	str	r3, [r2, #52]	; 0x34
 800462e:	4b07      	ldr	r3, [pc, #28]	; (800464c <HAL_RNG_MspInit+0x40>)
 8004630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800463a:	bf00      	nop
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	50060800 	.word	0x50060800
 800464c:	40023800 	.word	0x40023800

08004650 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08a      	sub	sp, #40	; 0x28
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004658:	f107 0314 	add.w	r3, r7, #20
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	605a      	str	r2, [r3, #4]
 8004662:	609a      	str	r2, [r3, #8]
 8004664:	60da      	str	r2, [r3, #12]
 8004666:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a19      	ldr	r2, [pc, #100]	; (80046d4 <HAL_SPI_MspInit+0x84>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d12c      	bne.n	80046cc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004672:	2300      	movs	r3, #0
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	4b18      	ldr	r3, [pc, #96]	; (80046d8 <HAL_SPI_MspInit+0x88>)
 8004678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467a:	4a17      	ldr	r2, [pc, #92]	; (80046d8 <HAL_SPI_MspInit+0x88>)
 800467c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004680:	6453      	str	r3, [r2, #68]	; 0x44
 8004682:	4b15      	ldr	r3, [pc, #84]	; (80046d8 <HAL_SPI_MspInit+0x88>)
 8004684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800468e:	2300      	movs	r3, #0
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	4b11      	ldr	r3, [pc, #68]	; (80046d8 <HAL_SPI_MspInit+0x88>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	4a10      	ldr	r2, [pc, #64]	; (80046d8 <HAL_SPI_MspInit+0x88>)
 8004698:	f043 0320 	orr.w	r3, r3, #32
 800469c:	6313      	str	r3, [r2, #48]	; 0x30
 800469e:	4b0e      	ldr	r3, [pc, #56]	; (80046d8 <HAL_SPI_MspInit+0x88>)
 80046a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a2:	f003 0320 	and.w	r3, r3, #32
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80046aa:	f44f 7360 	mov.w	r3, #896	; 0x380
 80046ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046b0:	2302      	movs	r3, #2
 80046b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b4:	2300      	movs	r3, #0
 80046b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046b8:	2300      	movs	r3, #0
 80046ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80046bc:	2305      	movs	r3, #5
 80046be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80046c0:	f107 0314 	add.w	r3, r7, #20
 80046c4:	4619      	mov	r1, r3
 80046c6:	4805      	ldr	r0, [pc, #20]	; (80046dc <HAL_SPI_MspInit+0x8c>)
 80046c8:	f000 fafa 	bl	8004cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80046cc:	bf00      	nop
 80046ce:	3728      	adds	r7, #40	; 0x28
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40015000 	.word	0x40015000
 80046d8:	40023800 	.word	0x40023800
 80046dc:	40021400 	.word	0x40021400

080046e0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a08      	ldr	r2, [pc, #32]	; (8004710 <HAL_SPI_MspDeInit+0x30>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d10a      	bne.n	8004708 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80046f2:	4b08      	ldr	r3, [pc, #32]	; (8004714 <HAL_SPI_MspDeInit+0x34>)
 80046f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f6:	4a07      	ldr	r2, [pc, #28]	; (8004714 <HAL_SPI_MspDeInit+0x34>)
 80046f8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80046fc:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80046fe:	f44f 7160 	mov.w	r1, #896	; 0x380
 8004702:	4805      	ldr	r0, [pc, #20]	; (8004718 <HAL_SPI_MspDeInit+0x38>)
 8004704:	f000 fc88 	bl	8005018 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8004708:	bf00      	nop
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40015000 	.word	0x40015000
 8004714:	40023800 	.word	0x40023800
 8004718:	40021400 	.word	0x40021400

0800471c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a0b      	ldr	r2, [pc, #44]	; (8004758 <HAL_TIM_Base_MspInit+0x3c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d10d      	bne.n	800474a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800472e:	2300      	movs	r3, #0
 8004730:	60fb      	str	r3, [r7, #12]
 8004732:	4b0a      	ldr	r3, [pc, #40]	; (800475c <HAL_TIM_Base_MspInit+0x40>)
 8004734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004736:	4a09      	ldr	r2, [pc, #36]	; (800475c <HAL_TIM_Base_MspInit+0x40>)
 8004738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800473c:	6453      	str	r3, [r2, #68]	; 0x44
 800473e:	4b07      	ldr	r3, [pc, #28]	; (800475c <HAL_TIM_Base_MspInit+0x40>)
 8004740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800474a:	bf00      	nop
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	40014800 	.word	0x40014800
 800475c:	40023800 	.word	0x40023800

08004760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004764:	e7fe      	b.n	8004764 <NMI_Handler+0x4>

08004766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004766:	b480      	push	{r7}
 8004768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800476a:	e7fe      	b.n	800476a <HardFault_Handler+0x4>

0800476c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004770:	e7fe      	b.n	8004770 <MemManage_Handler+0x4>

08004772 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004772:	b480      	push	{r7}
 8004774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004776:	e7fe      	b.n	8004776 <BusFault_Handler+0x4>

08004778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800477c:	e7fe      	b.n	800477c <UsageFault_Handler+0x4>

0800477e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800477e:	b480      	push	{r7}
 8004780:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004782:	bf00      	nop
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004790:	f000 f964 	bl	8004a5c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004794:	f005 fabe 	bl	8009d14 <xTaskGetSchedulerState>
 8004798:	4603      	mov	r3, r0
 800479a:	2b01      	cmp	r3, #1
 800479c:	d001      	beq.n	80047a2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800479e:	f006 faa3 	bl	800ace8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047a2:	bf00      	nop
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80047aa:	2001      	movs	r0, #1
 80047ac:	f000 fd72 	bl	8005294 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80047b0:	bf00      	nop
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
  return 1;
 80047b8:	2301      	movs	r3, #1
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <_kill>:

int _kill(int pid, int sig)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80047ce:	f008 fc59 	bl	800d084 <__errno>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2216      	movs	r2, #22
 80047d6:	601a      	str	r2, [r3, #0]
  return -1;
 80047d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <_exit>:

void _exit (int status)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80047ec:	f04f 31ff 	mov.w	r1, #4294967295
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7ff ffe7 	bl	80047c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80047f6:	e7fe      	b.n	80047f6 <_exit+0x12>

080047f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004804:	2300      	movs	r3, #0
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	e00a      	b.n	8004820 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800480a:	f3af 8000 	nop.w
 800480e:	4601      	mov	r1, r0
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	60ba      	str	r2, [r7, #8]
 8004816:	b2ca      	uxtb	r2, r1
 8004818:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	3301      	adds	r3, #1
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	429a      	cmp	r2, r3
 8004826:	dbf0      	blt.n	800480a <_read+0x12>
  }

  return len;
 8004828:	687b      	ldr	r3, [r7, #4]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b086      	sub	sp, #24
 8004836:	af00      	add	r7, sp, #0
 8004838:	60f8      	str	r0, [r7, #12]
 800483a:	60b9      	str	r1, [r7, #8]
 800483c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800483e:	2300      	movs	r3, #0
 8004840:	617b      	str	r3, [r7, #20]
 8004842:	e009      	b.n	8004858 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	60ba      	str	r2, [r7, #8]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	4618      	mov	r0, r3
 800484e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	3301      	adds	r3, #1
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	429a      	cmp	r2, r3
 800485e:	dbf1      	blt.n	8004844 <_write+0x12>
  }
  return len;
 8004860:	687b      	ldr	r3, [r7, #4]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3718      	adds	r7, #24
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <_close>:

int _close(int file)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004872:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004876:	4618      	mov	r0, r3
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004892:	605a      	str	r2, [r3, #4]
  return 0;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <_isatty>:

int _isatty(int file)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80048aa:	2301      	movs	r3, #1
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
	...

080048d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048dc:	4a14      	ldr	r2, [pc, #80]	; (8004930 <_sbrk+0x5c>)
 80048de:	4b15      	ldr	r3, [pc, #84]	; (8004934 <_sbrk+0x60>)
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80048e8:	4b13      	ldr	r3, [pc, #76]	; (8004938 <_sbrk+0x64>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d102      	bne.n	80048f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80048f0:	4b11      	ldr	r3, [pc, #68]	; (8004938 <_sbrk+0x64>)
 80048f2:	4a12      	ldr	r2, [pc, #72]	; (800493c <_sbrk+0x68>)
 80048f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80048f6:	4b10      	ldr	r3, [pc, #64]	; (8004938 <_sbrk+0x64>)
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4413      	add	r3, r2
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	429a      	cmp	r2, r3
 8004902:	d207      	bcs.n	8004914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004904:	f008 fbbe 	bl	800d084 <__errno>
 8004908:	4603      	mov	r3, r0
 800490a:	220c      	movs	r2, #12
 800490c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800490e:	f04f 33ff 	mov.w	r3, #4294967295
 8004912:	e009      	b.n	8004928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004914:	4b08      	ldr	r3, [pc, #32]	; (8004938 <_sbrk+0x64>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800491a:	4b07      	ldr	r3, [pc, #28]	; (8004938 <_sbrk+0x64>)
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4413      	add	r3, r2
 8004922:	4a05      	ldr	r2, [pc, #20]	; (8004938 <_sbrk+0x64>)
 8004924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004926:	68fb      	ldr	r3, [r7, #12]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	20030000 	.word	0x20030000
 8004934:	00000400 	.word	0x00000400
 8004938:	20027a90 	.word	0x20027a90
 800493c:	2002d048 	.word	0x2002d048

08004940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004944:	4b06      	ldr	r3, [pc, #24]	; (8004960 <SystemInit+0x20>)
 8004946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494a:	4a05      	ldr	r2, [pc, #20]	; (8004960 <SystemInit+0x20>)
 800494c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004954:	bf00      	nop
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	e000ed00 	.word	0xe000ed00

08004964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800499c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004968:	480d      	ldr	r0, [pc, #52]	; (80049a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800496a:	490e      	ldr	r1, [pc, #56]	; (80049a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800496c:	4a0e      	ldr	r2, [pc, #56]	; (80049a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800496e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004970:	e002      	b.n	8004978 <LoopCopyDataInit>

08004972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004976:	3304      	adds	r3, #4

08004978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800497a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800497c:	d3f9      	bcc.n	8004972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800497e:	4a0b      	ldr	r2, [pc, #44]	; (80049ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004980:	4c0b      	ldr	r4, [pc, #44]	; (80049b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004984:	e001      	b.n	800498a <LoopFillZerobss>

08004986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004988:	3204      	adds	r2, #4

0800498a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800498a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800498c:	d3fb      	bcc.n	8004986 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800498e:	f7ff ffd7 	bl	8004940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004992:	f008 fb7d 	bl	800d090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004996:	f7ff f9a7 	bl	8003ce8 <main>
  bx  lr    
 800499a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800499c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80049a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049a4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80049a8:	08010980 	.word	0x08010980
  ldr r2, =_sbss
 80049ac:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80049b0:	2002d048 	.word	0x2002d048

080049b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049b4:	e7fe      	b.n	80049b4 <ADC_IRQHandler>
	...

080049b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80049bc:	4b0e      	ldr	r3, [pc, #56]	; (80049f8 <HAL_Init+0x40>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a0d      	ldr	r2, [pc, #52]	; (80049f8 <HAL_Init+0x40>)
 80049c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80049c8:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <HAL_Init+0x40>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a0a      	ldr	r2, [pc, #40]	; (80049f8 <HAL_Init+0x40>)
 80049ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049d4:	4b08      	ldr	r3, [pc, #32]	; (80049f8 <HAL_Init+0x40>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a07      	ldr	r2, [pc, #28]	; (80049f8 <HAL_Init+0x40>)
 80049da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049e0:	2003      	movs	r0, #3
 80049e2:	f000 f92b 	bl	8004c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80049e6:	200f      	movs	r0, #15
 80049e8:	f000 f808 	bl	80049fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80049ec:	f7ff fcba 	bl	8004364 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	40023c00 	.word	0x40023c00

080049fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a04:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <HAL_InitTick+0x54>)
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	4b12      	ldr	r3, [pc, #72]	; (8004a54 <HAL_InitTick+0x58>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 f943 	bl	8004ca6 <HAL_SYSTICK_Config>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e00e      	b.n	8004a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b0f      	cmp	r3, #15
 8004a2e:	d80a      	bhi.n	8004a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a30:	2200      	movs	r2, #0
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	f04f 30ff 	mov.w	r0, #4294967295
 8004a38:	f000 f90b 	bl	8004c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a3c:	4a06      	ldr	r2, [pc, #24]	; (8004a58 <HAL_InitTick+0x5c>)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	e000      	b.n	8004a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3708      	adds	r7, #8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	20000018 	.word	0x20000018
 8004a54:	20000020 	.word	0x20000020
 8004a58:	2000001c 	.word	0x2000001c

08004a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a60:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <HAL_IncTick+0x20>)
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	461a      	mov	r2, r3
 8004a66:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <HAL_IncTick+0x24>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	4a04      	ldr	r2, [pc, #16]	; (8004a80 <HAL_IncTick+0x24>)
 8004a6e:	6013      	str	r3, [r2, #0]
}
 8004a70:	bf00      	nop
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	20000020 	.word	0x20000020
 8004a80:	20027a94 	.word	0x20027a94

08004a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
  return uwTick;
 8004a88:	4b03      	ldr	r3, [pc, #12]	; (8004a98 <HAL_GetTick+0x14>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	20027a94 	.word	0x20027a94

08004a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004aac:	4b0c      	ldr	r3, [pc, #48]	; (8004ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ab8:	4013      	ands	r3, r2
 8004aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ace:	4a04      	ldr	r2, [pc, #16]	; (8004ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	60d3      	str	r3, [r2, #12]
}
 8004ad4:	bf00      	nop
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	e000ed00 	.word	0xe000ed00

08004ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ae8:	4b04      	ldr	r3, [pc, #16]	; (8004afc <__NVIC_GetPriorityGrouping+0x18>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	0a1b      	lsrs	r3, r3, #8
 8004aee:	f003 0307 	and.w	r3, r3, #7
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	e000ed00 	.word	0xe000ed00

08004b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	4603      	mov	r3, r0
 8004b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	db0b      	blt.n	8004b2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	f003 021f 	and.w	r2, r3, #31
 8004b18:	4907      	ldr	r1, [pc, #28]	; (8004b38 <__NVIC_EnableIRQ+0x38>)
 8004b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b1e:	095b      	lsrs	r3, r3, #5
 8004b20:	2001      	movs	r0, #1
 8004b22:	fa00 f202 	lsl.w	r2, r0, r2
 8004b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	e000e100 	.word	0xe000e100

08004b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	4603      	mov	r3, r0
 8004b44:	6039      	str	r1, [r7, #0]
 8004b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	db0a      	blt.n	8004b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	490c      	ldr	r1, [pc, #48]	; (8004b88 <__NVIC_SetPriority+0x4c>)
 8004b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b5a:	0112      	lsls	r2, r2, #4
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	440b      	add	r3, r1
 8004b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b64:	e00a      	b.n	8004b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	4908      	ldr	r1, [pc, #32]	; (8004b8c <__NVIC_SetPriority+0x50>)
 8004b6c:	79fb      	ldrb	r3, [r7, #7]
 8004b6e:	f003 030f 	and.w	r3, r3, #15
 8004b72:	3b04      	subs	r3, #4
 8004b74:	0112      	lsls	r2, r2, #4
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	440b      	add	r3, r1
 8004b7a:	761a      	strb	r2, [r3, #24]
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	e000e100 	.word	0xe000e100
 8004b8c:	e000ed00 	.word	0xe000ed00

08004b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b089      	sub	sp, #36	; 0x24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f1c3 0307 	rsb	r3, r3, #7
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	bf28      	it	cs
 8004bae:	2304      	movcs	r3, #4
 8004bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	2b06      	cmp	r3, #6
 8004bb8:	d902      	bls.n	8004bc0 <NVIC_EncodePriority+0x30>
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	3b03      	subs	r3, #3
 8004bbe:	e000      	b.n	8004bc2 <NVIC_EncodePriority+0x32>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	fa02 f303 	lsl.w	r3, r2, r3
 8004bce:	43da      	mvns	r2, r3
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	401a      	ands	r2, r3
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	fa01 f303 	lsl.w	r3, r1, r3
 8004be2:	43d9      	mvns	r1, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004be8:	4313      	orrs	r3, r2
         );
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3724      	adds	r7, #36	; 0x24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
	...

08004bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c08:	d301      	bcc.n	8004c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e00f      	b.n	8004c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c0e:	4a0a      	ldr	r2, [pc, #40]	; (8004c38 <SysTick_Config+0x40>)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c16:	210f      	movs	r1, #15
 8004c18:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1c:	f7ff ff8e 	bl	8004b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c20:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <SysTick_Config+0x40>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c26:	4b04      	ldr	r3, [pc, #16]	; (8004c38 <SysTick_Config+0x40>)
 8004c28:	2207      	movs	r2, #7
 8004c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	e000e010 	.word	0xe000e010

08004c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff ff29 	bl	8004a9c <__NVIC_SetPriorityGrouping>
}
 8004c4a:	bf00      	nop
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b086      	sub	sp, #24
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	4603      	mov	r3, r0
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	607a      	str	r2, [r7, #4]
 8004c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c64:	f7ff ff3e 	bl	8004ae4 <__NVIC_GetPriorityGrouping>
 8004c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	68b9      	ldr	r1, [r7, #8]
 8004c6e:	6978      	ldr	r0, [r7, #20]
 8004c70:	f7ff ff8e 	bl	8004b90 <NVIC_EncodePriority>
 8004c74:	4602      	mov	r2, r0
 8004c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7ff ff5d 	bl	8004b3c <__NVIC_SetPriority>
}
 8004c82:	bf00      	nop
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b082      	sub	sp, #8
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	4603      	mov	r3, r0
 8004c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff ff31 	bl	8004b00 <__NVIC_EnableIRQ>
}
 8004c9e:	bf00      	nop
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b082      	sub	sp, #8
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7ff ffa2 	bl	8004bf8 <SysTick_Config>
 8004cb4:	4603      	mov	r3, r0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
	...

08004cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b089      	sub	sp, #36	; 0x24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	61fb      	str	r3, [r7, #28]
 8004cda:	e177      	b.n	8004fcc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004cdc:	2201      	movs	r2, #1
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	4013      	ands	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	f040 8166 	bne.w	8004fc6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f003 0303 	and.w	r3, r3, #3
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d005      	beq.n	8004d12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d130      	bne.n	8004d74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	2203      	movs	r2, #3
 8004d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d22:	43db      	mvns	r3, r3
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	4013      	ands	r3, r2
 8004d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	fa02 f303 	lsl.w	r3, r2, r3
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d48:	2201      	movs	r2, #1
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d50:	43db      	mvns	r3, r3
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	4013      	ands	r3, r2
 8004d56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	091b      	lsrs	r3, r3, #4
 8004d5e:	f003 0201 	and.w	r2, r3, #1
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f003 0303 	and.w	r3, r3, #3
 8004d7c:	2b03      	cmp	r3, #3
 8004d7e:	d017      	beq.n	8004db0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	2203      	movs	r2, #3
 8004d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d90:	43db      	mvns	r3, r3
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	4013      	ands	r3, r2
 8004d96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	fa02 f303 	lsl.w	r3, r2, r3
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f003 0303 	and.w	r3, r3, #3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d123      	bne.n	8004e04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	08da      	lsrs	r2, r3, #3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3208      	adds	r2, #8
 8004dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	f003 0307 	and.w	r3, r3, #7
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	220f      	movs	r2, #15
 8004dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd8:	43db      	mvns	r3, r3
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	691a      	ldr	r2, [r3, #16]
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	08da      	lsrs	r2, r3, #3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3208      	adds	r2, #8
 8004dfe:	69b9      	ldr	r1, [r7, #24]
 8004e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	2203      	movs	r2, #3
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	43db      	mvns	r3, r3
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	4013      	ands	r3, r2
 8004e1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f003 0203 	and.w	r2, r3, #3
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 80c0 	beq.w	8004fc6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e46:	2300      	movs	r3, #0
 8004e48:	60fb      	str	r3, [r7, #12]
 8004e4a:	4b66      	ldr	r3, [pc, #408]	; (8004fe4 <HAL_GPIO_Init+0x324>)
 8004e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4e:	4a65      	ldr	r2, [pc, #404]	; (8004fe4 <HAL_GPIO_Init+0x324>)
 8004e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e54:	6453      	str	r3, [r2, #68]	; 0x44
 8004e56:	4b63      	ldr	r3, [pc, #396]	; (8004fe4 <HAL_GPIO_Init+0x324>)
 8004e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e62:	4a61      	ldr	r2, [pc, #388]	; (8004fe8 <HAL_GPIO_Init+0x328>)
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	089b      	lsrs	r3, r3, #2
 8004e68:	3302      	adds	r3, #2
 8004e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	220f      	movs	r2, #15
 8004e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7e:	43db      	mvns	r3, r3
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	4013      	ands	r3, r2
 8004e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a58      	ldr	r2, [pc, #352]	; (8004fec <HAL_GPIO_Init+0x32c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d037      	beq.n	8004efe <HAL_GPIO_Init+0x23e>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a57      	ldr	r2, [pc, #348]	; (8004ff0 <HAL_GPIO_Init+0x330>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d031      	beq.n	8004efa <HAL_GPIO_Init+0x23a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a56      	ldr	r2, [pc, #344]	; (8004ff4 <HAL_GPIO_Init+0x334>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d02b      	beq.n	8004ef6 <HAL_GPIO_Init+0x236>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a55      	ldr	r2, [pc, #340]	; (8004ff8 <HAL_GPIO_Init+0x338>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d025      	beq.n	8004ef2 <HAL_GPIO_Init+0x232>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a54      	ldr	r2, [pc, #336]	; (8004ffc <HAL_GPIO_Init+0x33c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d01f      	beq.n	8004eee <HAL_GPIO_Init+0x22e>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a53      	ldr	r2, [pc, #332]	; (8005000 <HAL_GPIO_Init+0x340>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d019      	beq.n	8004eea <HAL_GPIO_Init+0x22a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a52      	ldr	r2, [pc, #328]	; (8005004 <HAL_GPIO_Init+0x344>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d013      	beq.n	8004ee6 <HAL_GPIO_Init+0x226>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a51      	ldr	r2, [pc, #324]	; (8005008 <HAL_GPIO_Init+0x348>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d00d      	beq.n	8004ee2 <HAL_GPIO_Init+0x222>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a50      	ldr	r2, [pc, #320]	; (800500c <HAL_GPIO_Init+0x34c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d007      	beq.n	8004ede <HAL_GPIO_Init+0x21e>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a4f      	ldr	r2, [pc, #316]	; (8005010 <HAL_GPIO_Init+0x350>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d101      	bne.n	8004eda <HAL_GPIO_Init+0x21a>
 8004ed6:	2309      	movs	r3, #9
 8004ed8:	e012      	b.n	8004f00 <HAL_GPIO_Init+0x240>
 8004eda:	230a      	movs	r3, #10
 8004edc:	e010      	b.n	8004f00 <HAL_GPIO_Init+0x240>
 8004ede:	2308      	movs	r3, #8
 8004ee0:	e00e      	b.n	8004f00 <HAL_GPIO_Init+0x240>
 8004ee2:	2307      	movs	r3, #7
 8004ee4:	e00c      	b.n	8004f00 <HAL_GPIO_Init+0x240>
 8004ee6:	2306      	movs	r3, #6
 8004ee8:	e00a      	b.n	8004f00 <HAL_GPIO_Init+0x240>
 8004eea:	2305      	movs	r3, #5
 8004eec:	e008      	b.n	8004f00 <HAL_GPIO_Init+0x240>
 8004eee:	2304      	movs	r3, #4
 8004ef0:	e006      	b.n	8004f00 <HAL_GPIO_Init+0x240>
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e004      	b.n	8004f00 <HAL_GPIO_Init+0x240>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e002      	b.n	8004f00 <HAL_GPIO_Init+0x240>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <HAL_GPIO_Init+0x240>
 8004efe:	2300      	movs	r3, #0
 8004f00:	69fa      	ldr	r2, [r7, #28]
 8004f02:	f002 0203 	and.w	r2, r2, #3
 8004f06:	0092      	lsls	r2, r2, #2
 8004f08:	4093      	lsls	r3, r2
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f10:	4935      	ldr	r1, [pc, #212]	; (8004fe8 <HAL_GPIO_Init+0x328>)
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	089b      	lsrs	r3, r3, #2
 8004f16:	3302      	adds	r3, #2
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f1e:	4b3d      	ldr	r3, [pc, #244]	; (8005014 <HAL_GPIO_Init+0x354>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	43db      	mvns	r3, r3
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f42:	4a34      	ldr	r2, [pc, #208]	; (8005014 <HAL_GPIO_Init+0x354>)
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f48:	4b32      	ldr	r3, [pc, #200]	; (8005014 <HAL_GPIO_Init+0x354>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	43db      	mvns	r3, r3
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	4013      	ands	r3, r2
 8004f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f6c:	4a29      	ldr	r2, [pc, #164]	; (8005014 <HAL_GPIO_Init+0x354>)
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f72:	4b28      	ldr	r3, [pc, #160]	; (8005014 <HAL_GPIO_Init+0x354>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	43db      	mvns	r3, r3
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f96:	4a1f      	ldr	r2, [pc, #124]	; (8005014 <HAL_GPIO_Init+0x354>)
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f9c:	4b1d      	ldr	r3, [pc, #116]	; (8005014 <HAL_GPIO_Init+0x354>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	43db      	mvns	r3, r3
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fc0:	4a14      	ldr	r2, [pc, #80]	; (8005014 <HAL_GPIO_Init+0x354>)
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	61fb      	str	r3, [r7, #28]
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	2b0f      	cmp	r3, #15
 8004fd0:	f67f ae84 	bls.w	8004cdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop
 8004fd8:	3724      	adds	r7, #36	; 0x24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	40013800 	.word	0x40013800
 8004fec:	40020000 	.word	0x40020000
 8004ff0:	40020400 	.word	0x40020400
 8004ff4:	40020800 	.word	0x40020800
 8004ff8:	40020c00 	.word	0x40020c00
 8004ffc:	40021000 	.word	0x40021000
 8005000:	40021400 	.word	0x40021400
 8005004:	40021800 	.word	0x40021800
 8005008:	40021c00 	.word	0x40021c00
 800500c:	40022000 	.word	0x40022000
 8005010:	40022400 	.word	0x40022400
 8005014:	40013c00 	.word	0x40013c00

08005018 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005022:	2300      	movs	r3, #0
 8005024:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005026:	2300      	movs	r3, #0
 8005028:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800502a:	2300      	movs	r3, #0
 800502c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800502e:	2300      	movs	r3, #0
 8005030:	617b      	str	r3, [r7, #20]
 8005032:	e0d9      	b.n	80051e8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005034:	2201      	movs	r2, #1
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	fa02 f303 	lsl.w	r3, r2, r3
 800503c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	4013      	ands	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	429a      	cmp	r2, r3
 800504c:	f040 80c9 	bne.w	80051e2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005050:	4a6b      	ldr	r2, [pc, #428]	; (8005200 <HAL_GPIO_DeInit+0x1e8>)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	089b      	lsrs	r3, r3, #2
 8005056:	3302      	adds	r3, #2
 8005058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800505c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f003 0303 	and.w	r3, r3, #3
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	220f      	movs	r2, #15
 8005068:	fa02 f303 	lsl.w	r3, r2, r3
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	4013      	ands	r3, r2
 8005070:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a63      	ldr	r2, [pc, #396]	; (8005204 <HAL_GPIO_DeInit+0x1ec>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d037      	beq.n	80050ea <HAL_GPIO_DeInit+0xd2>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a62      	ldr	r2, [pc, #392]	; (8005208 <HAL_GPIO_DeInit+0x1f0>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d031      	beq.n	80050e6 <HAL_GPIO_DeInit+0xce>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a61      	ldr	r2, [pc, #388]	; (800520c <HAL_GPIO_DeInit+0x1f4>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d02b      	beq.n	80050e2 <HAL_GPIO_DeInit+0xca>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a60      	ldr	r2, [pc, #384]	; (8005210 <HAL_GPIO_DeInit+0x1f8>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d025      	beq.n	80050de <HAL_GPIO_DeInit+0xc6>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a5f      	ldr	r2, [pc, #380]	; (8005214 <HAL_GPIO_DeInit+0x1fc>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d01f      	beq.n	80050da <HAL_GPIO_DeInit+0xc2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a5e      	ldr	r2, [pc, #376]	; (8005218 <HAL_GPIO_DeInit+0x200>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d019      	beq.n	80050d6 <HAL_GPIO_DeInit+0xbe>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a5d      	ldr	r2, [pc, #372]	; (800521c <HAL_GPIO_DeInit+0x204>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d013      	beq.n	80050d2 <HAL_GPIO_DeInit+0xba>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a5c      	ldr	r2, [pc, #368]	; (8005220 <HAL_GPIO_DeInit+0x208>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d00d      	beq.n	80050ce <HAL_GPIO_DeInit+0xb6>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a5b      	ldr	r2, [pc, #364]	; (8005224 <HAL_GPIO_DeInit+0x20c>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d007      	beq.n	80050ca <HAL_GPIO_DeInit+0xb2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a5a      	ldr	r2, [pc, #360]	; (8005228 <HAL_GPIO_DeInit+0x210>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d101      	bne.n	80050c6 <HAL_GPIO_DeInit+0xae>
 80050c2:	2309      	movs	r3, #9
 80050c4:	e012      	b.n	80050ec <HAL_GPIO_DeInit+0xd4>
 80050c6:	230a      	movs	r3, #10
 80050c8:	e010      	b.n	80050ec <HAL_GPIO_DeInit+0xd4>
 80050ca:	2308      	movs	r3, #8
 80050cc:	e00e      	b.n	80050ec <HAL_GPIO_DeInit+0xd4>
 80050ce:	2307      	movs	r3, #7
 80050d0:	e00c      	b.n	80050ec <HAL_GPIO_DeInit+0xd4>
 80050d2:	2306      	movs	r3, #6
 80050d4:	e00a      	b.n	80050ec <HAL_GPIO_DeInit+0xd4>
 80050d6:	2305      	movs	r3, #5
 80050d8:	e008      	b.n	80050ec <HAL_GPIO_DeInit+0xd4>
 80050da:	2304      	movs	r3, #4
 80050dc:	e006      	b.n	80050ec <HAL_GPIO_DeInit+0xd4>
 80050de:	2303      	movs	r3, #3
 80050e0:	e004      	b.n	80050ec <HAL_GPIO_DeInit+0xd4>
 80050e2:	2302      	movs	r3, #2
 80050e4:	e002      	b.n	80050ec <HAL_GPIO_DeInit+0xd4>
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <HAL_GPIO_DeInit+0xd4>
 80050ea:	2300      	movs	r3, #0
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	f002 0203 	and.w	r2, r2, #3
 80050f2:	0092      	lsls	r2, r2, #2
 80050f4:	4093      	lsls	r3, r2
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d132      	bne.n	8005162 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80050fc:	4b4b      	ldr	r3, [pc, #300]	; (800522c <HAL_GPIO_DeInit+0x214>)
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	43db      	mvns	r3, r3
 8005104:	4949      	ldr	r1, [pc, #292]	; (800522c <HAL_GPIO_DeInit+0x214>)
 8005106:	4013      	ands	r3, r2
 8005108:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800510a:	4b48      	ldr	r3, [pc, #288]	; (800522c <HAL_GPIO_DeInit+0x214>)
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	43db      	mvns	r3, r3
 8005112:	4946      	ldr	r1, [pc, #280]	; (800522c <HAL_GPIO_DeInit+0x214>)
 8005114:	4013      	ands	r3, r2
 8005116:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005118:	4b44      	ldr	r3, [pc, #272]	; (800522c <HAL_GPIO_DeInit+0x214>)
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	43db      	mvns	r3, r3
 8005120:	4942      	ldr	r1, [pc, #264]	; (800522c <HAL_GPIO_DeInit+0x214>)
 8005122:	4013      	ands	r3, r2
 8005124:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005126:	4b41      	ldr	r3, [pc, #260]	; (800522c <HAL_GPIO_DeInit+0x214>)
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	43db      	mvns	r3, r3
 800512e:	493f      	ldr	r1, [pc, #252]	; (800522c <HAL_GPIO_DeInit+0x214>)
 8005130:	4013      	ands	r3, r2
 8005132:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	220f      	movs	r2, #15
 800513e:	fa02 f303 	lsl.w	r3, r2, r3
 8005142:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005144:	4a2e      	ldr	r2, [pc, #184]	; (8005200 <HAL_GPIO_DeInit+0x1e8>)
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	089b      	lsrs	r3, r3, #2
 800514a:	3302      	adds	r3, #2
 800514c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	43da      	mvns	r2, r3
 8005154:	482a      	ldr	r0, [pc, #168]	; (8005200 <HAL_GPIO_DeInit+0x1e8>)
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	089b      	lsrs	r3, r3, #2
 800515a:	400a      	ands	r2, r1
 800515c:	3302      	adds	r3, #2
 800515e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	2103      	movs	r1, #3
 800516c:	fa01 f303 	lsl.w	r3, r1, r3
 8005170:	43db      	mvns	r3, r3
 8005172:	401a      	ands	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	08da      	lsrs	r2, r3, #3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3208      	adds	r2, #8
 8005180:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	220f      	movs	r2, #15
 800518e:	fa02 f303 	lsl.w	r3, r2, r3
 8005192:	43db      	mvns	r3, r3
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	08d2      	lsrs	r2, r2, #3
 8005198:	4019      	ands	r1, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	3208      	adds	r2, #8
 800519e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	2103      	movs	r1, #3
 80051ac:	fa01 f303 	lsl.w	r3, r1, r3
 80051b0:	43db      	mvns	r3, r3
 80051b2:	401a      	ands	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	2101      	movs	r1, #1
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	fa01 f303 	lsl.w	r3, r1, r3
 80051c4:	43db      	mvns	r3, r3
 80051c6:	401a      	ands	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	2103      	movs	r1, #3
 80051d6:	fa01 f303 	lsl.w	r3, r1, r3
 80051da:	43db      	mvns	r3, r3
 80051dc:	401a      	ands	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	3301      	adds	r3, #1
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	2b0f      	cmp	r3, #15
 80051ec:	f67f af22 	bls.w	8005034 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80051f0:	bf00      	nop
 80051f2:	bf00      	nop
 80051f4:	371c      	adds	r7, #28
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40013800 	.word	0x40013800
 8005204:	40020000 	.word	0x40020000
 8005208:	40020400 	.word	0x40020400
 800520c:	40020800 	.word	0x40020800
 8005210:	40020c00 	.word	0x40020c00
 8005214:	40021000 	.word	0x40021000
 8005218:	40021400 	.word	0x40021400
 800521c:	40021800 	.word	0x40021800
 8005220:	40021c00 	.word	0x40021c00
 8005224:	40022000 	.word	0x40022000
 8005228:	40022400 	.word	0x40022400
 800522c:	40013c00 	.word	0x40013c00

08005230 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	460b      	mov	r3, r1
 800523a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691a      	ldr	r2, [r3, #16]
 8005240:	887b      	ldrh	r3, [r7, #2]
 8005242:	4013      	ands	r3, r2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d002      	beq.n	800524e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005248:	2301      	movs	r3, #1
 800524a:	73fb      	strb	r3, [r7, #15]
 800524c:	e001      	b.n	8005252 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800524e:	2300      	movs	r3, #0
 8005250:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005252:	7bfb      	ldrb	r3, [r7, #15]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	460b      	mov	r3, r1
 800526a:	807b      	strh	r3, [r7, #2]
 800526c:	4613      	mov	r3, r2
 800526e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005270:	787b      	ldrb	r3, [r7, #1]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005276:	887a      	ldrh	r2, [r7, #2]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800527c:	e003      	b.n	8005286 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800527e:	887b      	ldrh	r3, [r7, #2]
 8005280:	041a      	lsls	r2, r3, #16
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	619a      	str	r2, [r3, #24]
}
 8005286:	bf00      	nop
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
	...

08005294 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	4603      	mov	r3, r0
 800529c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800529e:	4b08      	ldr	r3, [pc, #32]	; (80052c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80052a0:	695a      	ldr	r2, [r3, #20]
 80052a2:	88fb      	ldrh	r3, [r7, #6]
 80052a4:	4013      	ands	r3, r2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d006      	beq.n	80052b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80052aa:	4a05      	ldr	r2, [pc, #20]	; (80052c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80052ac:	88fb      	ldrh	r3, [r7, #6]
 80052ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80052b0:	88fb      	ldrh	r3, [r7, #6]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fc f9a4 	bl	8001600 <HAL_GPIO_EXTI_Callback>
  }
}
 80052b8:	bf00      	nop
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	40013c00 	.word	0x40013c00

080052c4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e0bf      	b.n	8005456 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d106      	bne.n	80052f0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7ff f866 	bl	80043bc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	699a      	ldr	r2, [r3, #24]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005306:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6999      	ldr	r1, [r3, #24]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800531c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6899      	ldr	r1, [r3, #8]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	4b4a      	ldr	r3, [pc, #296]	; (8005460 <HAL_LTDC_Init+0x19c>)
 8005338:	400b      	ands	r3, r1
 800533a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	041b      	lsls	r3, r3, #16
 8005342:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6899      	ldr	r1, [r3, #8]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	699a      	ldr	r2, [r3, #24]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	431a      	orrs	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68d9      	ldr	r1, [r3, #12]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	4b3e      	ldr	r3, [pc, #248]	; (8005460 <HAL_LTDC_Init+0x19c>)
 8005366:	400b      	ands	r3, r1
 8005368:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	041b      	lsls	r3, r3, #16
 8005370:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68d9      	ldr	r1, [r3, #12]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a1a      	ldr	r2, [r3, #32]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	431a      	orrs	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6919      	ldr	r1, [r3, #16]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	4b33      	ldr	r3, [pc, #204]	; (8005460 <HAL_LTDC_Init+0x19c>)
 8005394:	400b      	ands	r3, r1
 8005396:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	041b      	lsls	r3, r3, #16
 800539e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6919      	ldr	r1, [r3, #16]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	431a      	orrs	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6959      	ldr	r1, [r3, #20]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	4b27      	ldr	r3, [pc, #156]	; (8005460 <HAL_LTDC_Init+0x19c>)
 80053c2:	400b      	ands	r3, r1
 80053c4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ca:	041b      	lsls	r3, r3, #16
 80053cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	6959      	ldr	r1, [r3, #20]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053ea:	021b      	lsls	r3, r3, #8
 80053ec:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80053f4:	041b      	lsls	r3, r3, #16
 80053f6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005406:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4313      	orrs	r3, r2
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f042 0206 	orr.w	r2, r2, #6
 8005432:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	699a      	ldr	r2, [r3, #24]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 0201 	orr.w	r2, r2, #1
 8005442:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	f000f800 	.word	0xf000f800

08005464 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005464:	b5b0      	push	{r4, r5, r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005476:	2b01      	cmp	r3, #1
 8005478:	d101      	bne.n	800547e <HAL_LTDC_ConfigLayer+0x1a>
 800547a:	2302      	movs	r3, #2
 800547c:	e02c      	b.n	80054d8 <HAL_LTDC_ConfigLayer+0x74>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2202      	movs	r2, #2
 800548a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2134      	movs	r1, #52	; 0x34
 8005494:	fb01 f303 	mul.w	r3, r1, r3
 8005498:	4413      	add	r3, r2
 800549a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	4614      	mov	r4, r2
 80054a2:	461d      	mov	r5, r3
 80054a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054b0:	682b      	ldr	r3, [r5, #0]
 80054b2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	68b9      	ldr	r1, [r7, #8]
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 f811 	bl	80054e0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2201      	movs	r2, #1
 80054c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bdb0      	pop	{r4, r5, r7, pc}

080054e0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b089      	sub	sp, #36	; 0x24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	0c1b      	lsrs	r3, r3, #16
 80054f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054fc:	4413      	add	r3, r2
 80054fe:	041b      	lsls	r3, r3, #16
 8005500:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	01db      	lsls	r3, r3, #7
 800550c:	4413      	add	r3, r2
 800550e:	3384      	adds	r3, #132	; 0x84
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	6812      	ldr	r2, [r2, #0]
 8005516:	4611      	mov	r1, r2
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	01d2      	lsls	r2, r2, #7
 800551c:	440a      	add	r2, r1
 800551e:	3284      	adds	r2, #132	; 0x84
 8005520:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005524:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	0c1b      	lsrs	r3, r3, #16
 8005532:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005536:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005538:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4619      	mov	r1, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	01db      	lsls	r3, r3, #7
 8005544:	440b      	add	r3, r1
 8005546:	3384      	adds	r3, #132	; 0x84
 8005548:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800554e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	68da      	ldr	r2, [r3, #12]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800555e:	4413      	add	r3, r2
 8005560:	041b      	lsls	r3, r3, #16
 8005562:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	461a      	mov	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	01db      	lsls	r3, r3, #7
 800556e:	4413      	add	r3, r2
 8005570:	3384      	adds	r3, #132	; 0x84
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	6812      	ldr	r2, [r2, #0]
 8005578:	4611      	mov	r1, r2
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	01d2      	lsls	r2, r2, #7
 800557e:	440a      	add	r2, r1
 8005580:	3284      	adds	r2, #132	; 0x84
 8005582:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005586:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005596:	4413      	add	r3, r2
 8005598:	1c5a      	adds	r2, r3, #1
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4619      	mov	r1, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	01db      	lsls	r3, r3, #7
 80055a4:	440b      	add	r3, r1
 80055a6:	3384      	adds	r3, #132	; 0x84
 80055a8:	4619      	mov	r1, r3
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	461a      	mov	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	01db      	lsls	r3, r3, #7
 80055ba:	4413      	add	r3, r2
 80055bc:	3384      	adds	r3, #132	; 0x84
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	6812      	ldr	r2, [r2, #0]
 80055c4:	4611      	mov	r1, r2
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	01d2      	lsls	r2, r2, #7
 80055ca:	440a      	add	r2, r1
 80055cc:	3284      	adds	r2, #132	; 0x84
 80055ce:	f023 0307 	bic.w	r3, r3, #7
 80055d2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	461a      	mov	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	01db      	lsls	r3, r3, #7
 80055de:	4413      	add	r3, r2
 80055e0:	3384      	adds	r3, #132	; 0x84
 80055e2:	461a      	mov	r2, r3
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80055f0:	021b      	lsls	r3, r3, #8
 80055f2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80055fa:	041b      	lsls	r3, r3, #16
 80055fc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	061b      	lsls	r3, r3, #24
 8005604:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	461a      	mov	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	01db      	lsls	r3, r3, #7
 8005610:	4413      	add	r3, r2
 8005612:	3384      	adds	r3, #132	; 0x84
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	461a      	mov	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	01db      	lsls	r3, r3, #7
 8005620:	4413      	add	r3, r2
 8005622:	3384      	adds	r3, #132	; 0x84
 8005624:	461a      	mov	r2, r3
 8005626:	2300      	movs	r3, #0
 8005628:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005630:	461a      	mov	r2, r3
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	431a      	orrs	r2, r3
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	431a      	orrs	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4619      	mov	r1, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	01db      	lsls	r3, r3, #7
 8005644:	440b      	add	r3, r1
 8005646:	3384      	adds	r3, #132	; 0x84
 8005648:	4619      	mov	r1, r3
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	4313      	orrs	r3, r2
 800564e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	461a      	mov	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	01db      	lsls	r3, r3, #7
 800565a:	4413      	add	r3, r2
 800565c:	3384      	adds	r3, #132	; 0x84
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	6812      	ldr	r2, [r2, #0]
 8005664:	4611      	mov	r1, r2
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	01d2      	lsls	r2, r2, #7
 800566a:	440a      	add	r2, r1
 800566c:	3284      	adds	r2, #132	; 0x84
 800566e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005672:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	461a      	mov	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	01db      	lsls	r3, r3, #7
 800567e:	4413      	add	r3, r2
 8005680:	3384      	adds	r3, #132	; 0x84
 8005682:	461a      	mov	r2, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	01db      	lsls	r3, r3, #7
 8005694:	4413      	add	r3, r2
 8005696:	3384      	adds	r3, #132	; 0x84
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	6812      	ldr	r2, [r2, #0]
 800569e:	4611      	mov	r1, r2
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	01d2      	lsls	r2, r2, #7
 80056a4:	440a      	add	r2, r1
 80056a6:	3284      	adds	r2, #132	; 0x84
 80056a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80056ac:	f023 0307 	bic.w	r3, r3, #7
 80056b0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	69da      	ldr	r2, [r3, #28]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	68f9      	ldr	r1, [r7, #12]
 80056bc:	6809      	ldr	r1, [r1, #0]
 80056be:	4608      	mov	r0, r1
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	01c9      	lsls	r1, r1, #7
 80056c4:	4401      	add	r1, r0
 80056c6:	3184      	adds	r1, #132	; 0x84
 80056c8:	4313      	orrs	r3, r2
 80056ca:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	461a      	mov	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	01db      	lsls	r3, r3, #7
 80056d6:	4413      	add	r3, r2
 80056d8:	3384      	adds	r3, #132	; 0x84
 80056da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	461a      	mov	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	01db      	lsls	r3, r3, #7
 80056e6:	4413      	add	r3, r2
 80056e8:	3384      	adds	r3, #132	; 0x84
 80056ea:	461a      	mov	r2, r3
 80056ec:	2300      	movs	r3, #0
 80056ee:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	461a      	mov	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	01db      	lsls	r3, r3, #7
 80056fa:	4413      	add	r3, r2
 80056fc:	3384      	adds	r3, #132	; 0x84
 80056fe:	461a      	mov	r2, r3
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d102      	bne.n	8005714 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800570e:	2304      	movs	r3, #4
 8005710:	61fb      	str	r3, [r7, #28]
 8005712:	e01b      	b.n	800574c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d102      	bne.n	8005722 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800571c:	2303      	movs	r3, #3
 800571e:	61fb      	str	r3, [r7, #28]
 8005720:	e014      	b.n	800574c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	2b04      	cmp	r3, #4
 8005728:	d00b      	beq.n	8005742 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800572e:	2b02      	cmp	r3, #2
 8005730:	d007      	beq.n	8005742 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005736:	2b03      	cmp	r3, #3
 8005738:	d003      	beq.n	8005742 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800573e:	2b07      	cmp	r3, #7
 8005740:	d102      	bne.n	8005748 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005742:	2302      	movs	r3, #2
 8005744:	61fb      	str	r3, [r7, #28]
 8005746:	e001      	b.n	800574c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005748:	2301      	movs	r3, #1
 800574a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	461a      	mov	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	01db      	lsls	r3, r3, #7
 8005756:	4413      	add	r3, r2
 8005758:	3384      	adds	r3, #132	; 0x84
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	6812      	ldr	r2, [r2, #0]
 8005760:	4611      	mov	r1, r2
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	01d2      	lsls	r2, r2, #7
 8005766:	440a      	add	r2, r1
 8005768:	3284      	adds	r2, #132	; 0x84
 800576a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800576e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005774:	69fa      	ldr	r2, [r7, #28]
 8005776:	fb02 f303 	mul.w	r3, r2, r3
 800577a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	6859      	ldr	r1, [r3, #4]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	1acb      	subs	r3, r1, r3
 8005786:	69f9      	ldr	r1, [r7, #28]
 8005788:	fb01 f303 	mul.w	r3, r1, r3
 800578c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800578e:	68f9      	ldr	r1, [r7, #12]
 8005790:	6809      	ldr	r1, [r1, #0]
 8005792:	4608      	mov	r0, r1
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	01c9      	lsls	r1, r1, #7
 8005798:	4401      	add	r1, r0
 800579a:	3184      	adds	r1, #132	; 0x84
 800579c:	4313      	orrs	r3, r2
 800579e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	461a      	mov	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	01db      	lsls	r3, r3, #7
 80057aa:	4413      	add	r3, r2
 80057ac:	3384      	adds	r3, #132	; 0x84
 80057ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	6812      	ldr	r2, [r2, #0]
 80057b4:	4611      	mov	r1, r2
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	01d2      	lsls	r2, r2, #7
 80057ba:	440a      	add	r2, r1
 80057bc:	3284      	adds	r2, #132	; 0x84
 80057be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80057c2:	f023 0307 	bic.w	r3, r3, #7
 80057c6:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	461a      	mov	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	01db      	lsls	r3, r3, #7
 80057d2:	4413      	add	r3, r2
 80057d4:	3384      	adds	r3, #132	; 0x84
 80057d6:	461a      	mov	r2, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057dc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	461a      	mov	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	01db      	lsls	r3, r3, #7
 80057e8:	4413      	add	r3, r2
 80057ea:	3384      	adds	r3, #132	; 0x84
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	6812      	ldr	r2, [r2, #0]
 80057f2:	4611      	mov	r1, r2
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	01d2      	lsls	r2, r2, #7
 80057f8:	440a      	add	r2, r1
 80057fa:	3284      	adds	r2, #132	; 0x84
 80057fc:	f043 0301 	orr.w	r3, r3, #1
 8005800:	6013      	str	r3, [r2, #0]
}
 8005802:	bf00      	nop
 8005804:	3724      	adds	r7, #36	; 0x24
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
	...

08005810 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e267      	b.n	8005cf2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	d075      	beq.n	800591a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800582e:	4b88      	ldr	r3, [pc, #544]	; (8005a50 <HAL_RCC_OscConfig+0x240>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f003 030c 	and.w	r3, r3, #12
 8005836:	2b04      	cmp	r3, #4
 8005838:	d00c      	beq.n	8005854 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800583a:	4b85      	ldr	r3, [pc, #532]	; (8005a50 <HAL_RCC_OscConfig+0x240>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005842:	2b08      	cmp	r3, #8
 8005844:	d112      	bne.n	800586c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005846:	4b82      	ldr	r3, [pc, #520]	; (8005a50 <HAL_RCC_OscConfig+0x240>)
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800584e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005852:	d10b      	bne.n	800586c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005854:	4b7e      	ldr	r3, [pc, #504]	; (8005a50 <HAL_RCC_OscConfig+0x240>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d05b      	beq.n	8005918 <HAL_RCC_OscConfig+0x108>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d157      	bne.n	8005918 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e242      	b.n	8005cf2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005874:	d106      	bne.n	8005884 <HAL_RCC_OscConfig+0x74>
 8005876:	4b76      	ldr	r3, [pc, #472]	; (8005a50 <HAL_RCC_OscConfig+0x240>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a75      	ldr	r2, [pc, #468]	; (8005a50 <HAL_RCC_OscConfig+0x240>)
 800587c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005880:	6013      	str	r3, [r2, #0]
 8005882:	e01d      	b.n	80058c0 <HAL_RCC_OscConfig+0xb0>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800588c:	d10c      	bne.n	80058a8 <HAL_RCC_OscConfig+0x98>
 800588e:	4b70      	ldr	r3, [pc, #448]	; (8005a50 <HAL_RCC_OscConfig+0x240>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a6f      	ldr	r2, [pc, #444]	; (8005a50 <HAL_RCC_OscConfig+0x240>)
 8005894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005898:	6013      	str	r3, [r2, #0]
 800589a:	4b6d      	ldr	r3, [pc, #436]	; (8005a50 <HAL_RCC_OscConfig+0x240>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a6c      	ldr	r2, [pc, #432]	; (8005a50 <HAL_RCC_OscConfig+0x240>)
 80058a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	e00b      	b.n	80058c0 <HAL_RCC_OscConfig+0xb0>
 80058a8:	4b69      	ldr	r3, [pc, #420]	; (8005a50 <HAL_RCC_OscConfig+0x240>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a68      	ldr	r2, [pc, #416]	; (8005a50 <HAL_RCC_OscConfig+0x240>)
 80058ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058b2:	6013      	str	r3, [r2, #0]
 80058b4:	4b66      	ldr	r3, [pc, #408]	; (8005a50 <HAL_RCC_OscConfig+0x240>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a65      	ldr	r2, [pc, #404]	; (8005a50 <HAL_RCC_OscConfig+0x240>)
 80058ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d013      	beq.n	80058f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c8:	f7ff f8dc 	bl	8004a84 <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058d0:	f7ff f8d8 	bl	8004a84 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b64      	cmp	r3, #100	; 0x64
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e207      	b.n	8005cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058e2:	4b5b      	ldr	r3, [pc, #364]	; (8005a50 <HAL_RCC_OscConfig+0x240>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0f0      	beq.n	80058d0 <HAL_RCC_OscConfig+0xc0>
 80058ee:	e014      	b.n	800591a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f0:	f7ff f8c8 	bl	8004a84 <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058f6:	e008      	b.n	800590a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058f8:	f7ff f8c4 	bl	8004a84 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b64      	cmp	r3, #100	; 0x64
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e1f3      	b.n	8005cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800590a:	4b51      	ldr	r3, [pc, #324]	; (8005a50 <HAL_RCC_OscConfig+0x240>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1f0      	bne.n	80058f8 <HAL_RCC_OscConfig+0xe8>
 8005916:	e000      	b.n	800591a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d063      	beq.n	80059ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005926:	4b4a      	ldr	r3, [pc, #296]	; (8005a50 <HAL_RCC_OscConfig+0x240>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 030c 	and.w	r3, r3, #12
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00b      	beq.n	800594a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005932:	4b47      	ldr	r3, [pc, #284]	; (8005a50 <HAL_RCC_OscConfig+0x240>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800593a:	2b08      	cmp	r3, #8
 800593c:	d11c      	bne.n	8005978 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800593e:	4b44      	ldr	r3, [pc, #272]	; (8005a50 <HAL_RCC_OscConfig+0x240>)
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d116      	bne.n	8005978 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800594a:	4b41      	ldr	r3, [pc, #260]	; (8005a50 <HAL_RCC_OscConfig+0x240>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d005      	beq.n	8005962 <HAL_RCC_OscConfig+0x152>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d001      	beq.n	8005962 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e1c7      	b.n	8005cf2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005962:	4b3b      	ldr	r3, [pc, #236]	; (8005a50 <HAL_RCC_OscConfig+0x240>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	00db      	lsls	r3, r3, #3
 8005970:	4937      	ldr	r1, [pc, #220]	; (8005a50 <HAL_RCC_OscConfig+0x240>)
 8005972:	4313      	orrs	r3, r2
 8005974:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005976:	e03a      	b.n	80059ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d020      	beq.n	80059c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005980:	4b34      	ldr	r3, [pc, #208]	; (8005a54 <HAL_RCC_OscConfig+0x244>)
 8005982:	2201      	movs	r2, #1
 8005984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005986:	f7ff f87d 	bl	8004a84 <HAL_GetTick>
 800598a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800598c:	e008      	b.n	80059a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800598e:	f7ff f879 	bl	8004a84 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d901      	bls.n	80059a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e1a8      	b.n	8005cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059a0:	4b2b      	ldr	r3, [pc, #172]	; (8005a50 <HAL_RCC_OscConfig+0x240>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0f0      	beq.n	800598e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059ac:	4b28      	ldr	r3, [pc, #160]	; (8005a50 <HAL_RCC_OscConfig+0x240>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	00db      	lsls	r3, r3, #3
 80059ba:	4925      	ldr	r1, [pc, #148]	; (8005a50 <HAL_RCC_OscConfig+0x240>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	600b      	str	r3, [r1, #0]
 80059c0:	e015      	b.n	80059ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059c2:	4b24      	ldr	r3, [pc, #144]	; (8005a54 <HAL_RCC_OscConfig+0x244>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c8:	f7ff f85c 	bl	8004a84 <HAL_GetTick>
 80059cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059ce:	e008      	b.n	80059e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059d0:	f7ff f858 	bl	8004a84 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e187      	b.n	8005cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059e2:	4b1b      	ldr	r3, [pc, #108]	; (8005a50 <HAL_RCC_OscConfig+0x240>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1f0      	bne.n	80059d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0308 	and.w	r3, r3, #8
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d036      	beq.n	8005a68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d016      	beq.n	8005a30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a02:	4b15      	ldr	r3, [pc, #84]	; (8005a58 <HAL_RCC_OscConfig+0x248>)
 8005a04:	2201      	movs	r2, #1
 8005a06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a08:	f7ff f83c 	bl	8004a84 <HAL_GetTick>
 8005a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a0e:	e008      	b.n	8005a22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a10:	f7ff f838 	bl	8004a84 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e167      	b.n	8005cf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a22:	4b0b      	ldr	r3, [pc, #44]	; (8005a50 <HAL_RCC_OscConfig+0x240>)
 8005a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0f0      	beq.n	8005a10 <HAL_RCC_OscConfig+0x200>
 8005a2e:	e01b      	b.n	8005a68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a30:	4b09      	ldr	r3, [pc, #36]	; (8005a58 <HAL_RCC_OscConfig+0x248>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a36:	f7ff f825 	bl	8004a84 <HAL_GetTick>
 8005a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a3c:	e00e      	b.n	8005a5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a3e:	f7ff f821 	bl	8004a84 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d907      	bls.n	8005a5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e150      	b.n	8005cf2 <HAL_RCC_OscConfig+0x4e2>
 8005a50:	40023800 	.word	0x40023800
 8005a54:	42470000 	.word	0x42470000
 8005a58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a5c:	4b88      	ldr	r3, [pc, #544]	; (8005c80 <HAL_RCC_OscConfig+0x470>)
 8005a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1ea      	bne.n	8005a3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 8097 	beq.w	8005ba4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a76:	2300      	movs	r3, #0
 8005a78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a7a:	4b81      	ldr	r3, [pc, #516]	; (8005c80 <HAL_RCC_OscConfig+0x470>)
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10f      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a86:	2300      	movs	r3, #0
 8005a88:	60bb      	str	r3, [r7, #8]
 8005a8a:	4b7d      	ldr	r3, [pc, #500]	; (8005c80 <HAL_RCC_OscConfig+0x470>)
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	4a7c      	ldr	r2, [pc, #496]	; (8005c80 <HAL_RCC_OscConfig+0x470>)
 8005a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a94:	6413      	str	r3, [r2, #64]	; 0x40
 8005a96:	4b7a      	ldr	r3, [pc, #488]	; (8005c80 <HAL_RCC_OscConfig+0x470>)
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a9e:	60bb      	str	r3, [r7, #8]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aa6:	4b77      	ldr	r3, [pc, #476]	; (8005c84 <HAL_RCC_OscConfig+0x474>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d118      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ab2:	4b74      	ldr	r3, [pc, #464]	; (8005c84 <HAL_RCC_OscConfig+0x474>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a73      	ldr	r2, [pc, #460]	; (8005c84 <HAL_RCC_OscConfig+0x474>)
 8005ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005abe:	f7fe ffe1 	bl	8004a84 <HAL_GetTick>
 8005ac2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ac4:	e008      	b.n	8005ad8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ac6:	f7fe ffdd 	bl	8004a84 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e10c      	b.n	8005cf2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ad8:	4b6a      	ldr	r3, [pc, #424]	; (8005c84 <HAL_RCC_OscConfig+0x474>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d0f0      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d106      	bne.n	8005afa <HAL_RCC_OscConfig+0x2ea>
 8005aec:	4b64      	ldr	r3, [pc, #400]	; (8005c80 <HAL_RCC_OscConfig+0x470>)
 8005aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af0:	4a63      	ldr	r2, [pc, #396]	; (8005c80 <HAL_RCC_OscConfig+0x470>)
 8005af2:	f043 0301 	orr.w	r3, r3, #1
 8005af6:	6713      	str	r3, [r2, #112]	; 0x70
 8005af8:	e01c      	b.n	8005b34 <HAL_RCC_OscConfig+0x324>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	2b05      	cmp	r3, #5
 8005b00:	d10c      	bne.n	8005b1c <HAL_RCC_OscConfig+0x30c>
 8005b02:	4b5f      	ldr	r3, [pc, #380]	; (8005c80 <HAL_RCC_OscConfig+0x470>)
 8005b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b06:	4a5e      	ldr	r2, [pc, #376]	; (8005c80 <HAL_RCC_OscConfig+0x470>)
 8005b08:	f043 0304 	orr.w	r3, r3, #4
 8005b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b0e:	4b5c      	ldr	r3, [pc, #368]	; (8005c80 <HAL_RCC_OscConfig+0x470>)
 8005b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b12:	4a5b      	ldr	r2, [pc, #364]	; (8005c80 <HAL_RCC_OscConfig+0x470>)
 8005b14:	f043 0301 	orr.w	r3, r3, #1
 8005b18:	6713      	str	r3, [r2, #112]	; 0x70
 8005b1a:	e00b      	b.n	8005b34 <HAL_RCC_OscConfig+0x324>
 8005b1c:	4b58      	ldr	r3, [pc, #352]	; (8005c80 <HAL_RCC_OscConfig+0x470>)
 8005b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b20:	4a57      	ldr	r2, [pc, #348]	; (8005c80 <HAL_RCC_OscConfig+0x470>)
 8005b22:	f023 0301 	bic.w	r3, r3, #1
 8005b26:	6713      	str	r3, [r2, #112]	; 0x70
 8005b28:	4b55      	ldr	r3, [pc, #340]	; (8005c80 <HAL_RCC_OscConfig+0x470>)
 8005b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2c:	4a54      	ldr	r2, [pc, #336]	; (8005c80 <HAL_RCC_OscConfig+0x470>)
 8005b2e:	f023 0304 	bic.w	r3, r3, #4
 8005b32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d015      	beq.n	8005b68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b3c:	f7fe ffa2 	bl	8004a84 <HAL_GetTick>
 8005b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b42:	e00a      	b.n	8005b5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b44:	f7fe ff9e 	bl	8004a84 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d901      	bls.n	8005b5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e0cb      	b.n	8005cf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b5a:	4b49      	ldr	r3, [pc, #292]	; (8005c80 <HAL_RCC_OscConfig+0x470>)
 8005b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d0ee      	beq.n	8005b44 <HAL_RCC_OscConfig+0x334>
 8005b66:	e014      	b.n	8005b92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b68:	f7fe ff8c 	bl	8004a84 <HAL_GetTick>
 8005b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b6e:	e00a      	b.n	8005b86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b70:	f7fe ff88 	bl	8004a84 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d901      	bls.n	8005b86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e0b5      	b.n	8005cf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b86:	4b3e      	ldr	r3, [pc, #248]	; (8005c80 <HAL_RCC_OscConfig+0x470>)
 8005b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1ee      	bne.n	8005b70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b92:	7dfb      	ldrb	r3, [r7, #23]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d105      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b98:	4b39      	ldr	r3, [pc, #228]	; (8005c80 <HAL_RCC_OscConfig+0x470>)
 8005b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9c:	4a38      	ldr	r2, [pc, #224]	; (8005c80 <HAL_RCC_OscConfig+0x470>)
 8005b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ba2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f000 80a1 	beq.w	8005cf0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bae:	4b34      	ldr	r3, [pc, #208]	; (8005c80 <HAL_RCC_OscConfig+0x470>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f003 030c 	and.w	r3, r3, #12
 8005bb6:	2b08      	cmp	r3, #8
 8005bb8:	d05c      	beq.n	8005c74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d141      	bne.n	8005c46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bc2:	4b31      	ldr	r3, [pc, #196]	; (8005c88 <HAL_RCC_OscConfig+0x478>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc8:	f7fe ff5c 	bl	8004a84 <HAL_GetTick>
 8005bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bce:	e008      	b.n	8005be2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bd0:	f7fe ff58 	bl	8004a84 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e087      	b.n	8005cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005be2:	4b27      	ldr	r3, [pc, #156]	; (8005c80 <HAL_RCC_OscConfig+0x470>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1f0      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	69da      	ldr	r2, [r3, #28]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfc:	019b      	lsls	r3, r3, #6
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c04:	085b      	lsrs	r3, r3, #1
 8005c06:	3b01      	subs	r3, #1
 8005c08:	041b      	lsls	r3, r3, #16
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c10:	061b      	lsls	r3, r3, #24
 8005c12:	491b      	ldr	r1, [pc, #108]	; (8005c80 <HAL_RCC_OscConfig+0x470>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c18:	4b1b      	ldr	r3, [pc, #108]	; (8005c88 <HAL_RCC_OscConfig+0x478>)
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c1e:	f7fe ff31 	bl	8004a84 <HAL_GetTick>
 8005c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c24:	e008      	b.n	8005c38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c26:	f7fe ff2d 	bl	8004a84 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d901      	bls.n	8005c38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e05c      	b.n	8005cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c38:	4b11      	ldr	r3, [pc, #68]	; (8005c80 <HAL_RCC_OscConfig+0x470>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d0f0      	beq.n	8005c26 <HAL_RCC_OscConfig+0x416>
 8005c44:	e054      	b.n	8005cf0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c46:	4b10      	ldr	r3, [pc, #64]	; (8005c88 <HAL_RCC_OscConfig+0x478>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c4c:	f7fe ff1a 	bl	8004a84 <HAL_GetTick>
 8005c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c52:	e008      	b.n	8005c66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c54:	f7fe ff16 	bl	8004a84 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d901      	bls.n	8005c66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e045      	b.n	8005cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c66:	4b06      	ldr	r3, [pc, #24]	; (8005c80 <HAL_RCC_OscConfig+0x470>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1f0      	bne.n	8005c54 <HAL_RCC_OscConfig+0x444>
 8005c72:	e03d      	b.n	8005cf0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d107      	bne.n	8005c8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e038      	b.n	8005cf2 <HAL_RCC_OscConfig+0x4e2>
 8005c80:	40023800 	.word	0x40023800
 8005c84:	40007000 	.word	0x40007000
 8005c88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c8c:	4b1b      	ldr	r3, [pc, #108]	; (8005cfc <HAL_RCC_OscConfig+0x4ec>)
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d028      	beq.n	8005cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d121      	bne.n	8005cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d11a      	bne.n	8005cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005cc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d111      	bne.n	8005cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd2:	085b      	lsrs	r3, r3, #1
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d107      	bne.n	8005cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d001      	beq.n	8005cf0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e000      	b.n	8005cf2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3718      	adds	r7, #24
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	40023800 	.word	0x40023800

08005d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d101      	bne.n	8005d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e0cc      	b.n	8005eae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d14:	4b68      	ldr	r3, [pc, #416]	; (8005eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 030f 	and.w	r3, r3, #15
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d90c      	bls.n	8005d3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d22:	4b65      	ldr	r3, [pc, #404]	; (8005eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	b2d2      	uxtb	r2, r2
 8005d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d2a:	4b63      	ldr	r3, [pc, #396]	; (8005eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 030f 	and.w	r3, r3, #15
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d001      	beq.n	8005d3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e0b8      	b.n	8005eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d020      	beq.n	8005d8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0304 	and.w	r3, r3, #4
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d005      	beq.n	8005d60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d54:	4b59      	ldr	r3, [pc, #356]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	4a58      	ldr	r2, [pc, #352]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005d5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0308 	and.w	r3, r3, #8
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d005      	beq.n	8005d78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d6c:	4b53      	ldr	r3, [pc, #332]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	4a52      	ldr	r2, [pc, #328]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005d72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d78:	4b50      	ldr	r3, [pc, #320]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	494d      	ldr	r1, [pc, #308]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d044      	beq.n	8005e20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d107      	bne.n	8005dae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d9e:	4b47      	ldr	r3, [pc, #284]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d119      	bne.n	8005dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e07f      	b.n	8005eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d003      	beq.n	8005dbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dba:	2b03      	cmp	r3, #3
 8005dbc:	d107      	bne.n	8005dce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dbe:	4b3f      	ldr	r3, [pc, #252]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d109      	bne.n	8005dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e06f      	b.n	8005eae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dce:	4b3b      	ldr	r3, [pc, #236]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e067      	b.n	8005eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dde:	4b37      	ldr	r3, [pc, #220]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f023 0203 	bic.w	r2, r3, #3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	4934      	ldr	r1, [pc, #208]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005df0:	f7fe fe48 	bl	8004a84 <HAL_GetTick>
 8005df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005df6:	e00a      	b.n	8005e0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005df8:	f7fe fe44 	bl	8004a84 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d901      	bls.n	8005e0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e04f      	b.n	8005eae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e0e:	4b2b      	ldr	r3, [pc, #172]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f003 020c 	and.w	r2, r3, #12
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d1eb      	bne.n	8005df8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e20:	4b25      	ldr	r3, [pc, #148]	; (8005eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 030f 	and.w	r3, r3, #15
 8005e28:	683a      	ldr	r2, [r7, #0]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d20c      	bcs.n	8005e48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e2e:	4b22      	ldr	r3, [pc, #136]	; (8005eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	b2d2      	uxtb	r2, r2
 8005e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e36:	4b20      	ldr	r3, [pc, #128]	; (8005eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 030f 	and.w	r3, r3, #15
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d001      	beq.n	8005e48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e032      	b.n	8005eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d008      	beq.n	8005e66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e54:	4b19      	ldr	r3, [pc, #100]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	4916      	ldr	r1, [pc, #88]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0308 	and.w	r3, r3, #8
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d009      	beq.n	8005e86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e72:	4b12      	ldr	r3, [pc, #72]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	490e      	ldr	r1, [pc, #56]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e86:	f000 f821 	bl	8005ecc <HAL_RCC_GetSysClockFreq>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	4b0b      	ldr	r3, [pc, #44]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	091b      	lsrs	r3, r3, #4
 8005e92:	f003 030f 	and.w	r3, r3, #15
 8005e96:	490a      	ldr	r1, [pc, #40]	; (8005ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8005e98:	5ccb      	ldrb	r3, [r1, r3]
 8005e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e9e:	4a09      	ldr	r2, [pc, #36]	; (8005ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8005ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ea2:	4b09      	ldr	r3, [pc, #36]	; (8005ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fe fda8 	bl	80049fc <HAL_InitTick>

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	40023c00 	.word	0x40023c00
 8005ebc:	40023800 	.word	0x40023800
 8005ec0:	08010690 	.word	0x08010690
 8005ec4:	20000018 	.word	0x20000018
 8005ec8:	2000001c 	.word	0x2000001c

08005ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ed0:	b094      	sub	sp, #80	; 0x50
 8005ed2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ed8:	2300      	movs	r3, #0
 8005eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005edc:	2300      	movs	r3, #0
 8005ede:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ee4:	4b79      	ldr	r3, [pc, #484]	; (80060cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f003 030c 	and.w	r3, r3, #12
 8005eec:	2b08      	cmp	r3, #8
 8005eee:	d00d      	beq.n	8005f0c <HAL_RCC_GetSysClockFreq+0x40>
 8005ef0:	2b08      	cmp	r3, #8
 8005ef2:	f200 80e1 	bhi.w	80060b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d002      	beq.n	8005f00 <HAL_RCC_GetSysClockFreq+0x34>
 8005efa:	2b04      	cmp	r3, #4
 8005efc:	d003      	beq.n	8005f06 <HAL_RCC_GetSysClockFreq+0x3a>
 8005efe:	e0db      	b.n	80060b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f00:	4b73      	ldr	r3, [pc, #460]	; (80060d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005f04:	e0db      	b.n	80060be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f06:	4b73      	ldr	r3, [pc, #460]	; (80060d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005f08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f0a:	e0d8      	b.n	80060be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f0c:	4b6f      	ldr	r3, [pc, #444]	; (80060cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f16:	4b6d      	ldr	r3, [pc, #436]	; (80060cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d063      	beq.n	8005fea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f22:	4b6a      	ldr	r3, [pc, #424]	; (80060cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	099b      	lsrs	r3, r3, #6
 8005f28:	2200      	movs	r2, #0
 8005f2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f34:	633b      	str	r3, [r7, #48]	; 0x30
 8005f36:	2300      	movs	r3, #0
 8005f38:	637b      	str	r3, [r7, #52]	; 0x34
 8005f3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005f3e:	4622      	mov	r2, r4
 8005f40:	462b      	mov	r3, r5
 8005f42:	f04f 0000 	mov.w	r0, #0
 8005f46:	f04f 0100 	mov.w	r1, #0
 8005f4a:	0159      	lsls	r1, r3, #5
 8005f4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f50:	0150      	lsls	r0, r2, #5
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	4621      	mov	r1, r4
 8005f58:	1a51      	subs	r1, r2, r1
 8005f5a:	6139      	str	r1, [r7, #16]
 8005f5c:	4629      	mov	r1, r5
 8005f5e:	eb63 0301 	sbc.w	r3, r3, r1
 8005f62:	617b      	str	r3, [r7, #20]
 8005f64:	f04f 0200 	mov.w	r2, #0
 8005f68:	f04f 0300 	mov.w	r3, #0
 8005f6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f70:	4659      	mov	r1, fp
 8005f72:	018b      	lsls	r3, r1, #6
 8005f74:	4651      	mov	r1, sl
 8005f76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f7a:	4651      	mov	r1, sl
 8005f7c:	018a      	lsls	r2, r1, #6
 8005f7e:	4651      	mov	r1, sl
 8005f80:	ebb2 0801 	subs.w	r8, r2, r1
 8005f84:	4659      	mov	r1, fp
 8005f86:	eb63 0901 	sbc.w	r9, r3, r1
 8005f8a:	f04f 0200 	mov.w	r2, #0
 8005f8e:	f04f 0300 	mov.w	r3, #0
 8005f92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f9e:	4690      	mov	r8, r2
 8005fa0:	4699      	mov	r9, r3
 8005fa2:	4623      	mov	r3, r4
 8005fa4:	eb18 0303 	adds.w	r3, r8, r3
 8005fa8:	60bb      	str	r3, [r7, #8]
 8005faa:	462b      	mov	r3, r5
 8005fac:	eb49 0303 	adc.w	r3, r9, r3
 8005fb0:	60fb      	str	r3, [r7, #12]
 8005fb2:	f04f 0200 	mov.w	r2, #0
 8005fb6:	f04f 0300 	mov.w	r3, #0
 8005fba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005fbe:	4629      	mov	r1, r5
 8005fc0:	024b      	lsls	r3, r1, #9
 8005fc2:	4621      	mov	r1, r4
 8005fc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005fc8:	4621      	mov	r1, r4
 8005fca:	024a      	lsls	r2, r1, #9
 8005fcc:	4610      	mov	r0, r2
 8005fce:	4619      	mov	r1, r3
 8005fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005fdc:	f7fa fe96 	bl	8000d0c <__aeabi_uldivmod>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fe8:	e058      	b.n	800609c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fea:	4b38      	ldr	r3, [pc, #224]	; (80060cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	099b      	lsrs	r3, r3, #6
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	4611      	mov	r1, r2
 8005ff6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005ffa:	623b      	str	r3, [r7, #32]
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8006000:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006004:	4642      	mov	r2, r8
 8006006:	464b      	mov	r3, r9
 8006008:	f04f 0000 	mov.w	r0, #0
 800600c:	f04f 0100 	mov.w	r1, #0
 8006010:	0159      	lsls	r1, r3, #5
 8006012:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006016:	0150      	lsls	r0, r2, #5
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	4641      	mov	r1, r8
 800601e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006022:	4649      	mov	r1, r9
 8006024:	eb63 0b01 	sbc.w	fp, r3, r1
 8006028:	f04f 0200 	mov.w	r2, #0
 800602c:	f04f 0300 	mov.w	r3, #0
 8006030:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006034:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006038:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800603c:	ebb2 040a 	subs.w	r4, r2, sl
 8006040:	eb63 050b 	sbc.w	r5, r3, fp
 8006044:	f04f 0200 	mov.w	r2, #0
 8006048:	f04f 0300 	mov.w	r3, #0
 800604c:	00eb      	lsls	r3, r5, #3
 800604e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006052:	00e2      	lsls	r2, r4, #3
 8006054:	4614      	mov	r4, r2
 8006056:	461d      	mov	r5, r3
 8006058:	4643      	mov	r3, r8
 800605a:	18e3      	adds	r3, r4, r3
 800605c:	603b      	str	r3, [r7, #0]
 800605e:	464b      	mov	r3, r9
 8006060:	eb45 0303 	adc.w	r3, r5, r3
 8006064:	607b      	str	r3, [r7, #4]
 8006066:	f04f 0200 	mov.w	r2, #0
 800606a:	f04f 0300 	mov.w	r3, #0
 800606e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006072:	4629      	mov	r1, r5
 8006074:	028b      	lsls	r3, r1, #10
 8006076:	4621      	mov	r1, r4
 8006078:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800607c:	4621      	mov	r1, r4
 800607e:	028a      	lsls	r2, r1, #10
 8006080:	4610      	mov	r0, r2
 8006082:	4619      	mov	r1, r3
 8006084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006086:	2200      	movs	r2, #0
 8006088:	61bb      	str	r3, [r7, #24]
 800608a:	61fa      	str	r2, [r7, #28]
 800608c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006090:	f7fa fe3c 	bl	8000d0c <__aeabi_uldivmod>
 8006094:	4602      	mov	r2, r0
 8006096:	460b      	mov	r3, r1
 8006098:	4613      	mov	r3, r2
 800609a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800609c:	4b0b      	ldr	r3, [pc, #44]	; (80060cc <HAL_RCC_GetSysClockFreq+0x200>)
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	0c1b      	lsrs	r3, r3, #16
 80060a2:	f003 0303 	and.w	r3, r3, #3
 80060a6:	3301      	adds	r3, #1
 80060a8:	005b      	lsls	r3, r3, #1
 80060aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80060ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060b6:	e002      	b.n	80060be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060b8:	4b05      	ldr	r3, [pc, #20]	; (80060d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80060ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3750      	adds	r7, #80	; 0x50
 80060c4:	46bd      	mov	sp, r7
 80060c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060ca:	bf00      	nop
 80060cc:	40023800 	.word	0x40023800
 80060d0:	00f42400 	.word	0x00f42400
 80060d4:	007a1200 	.word	0x007a1200

080060d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10b      	bne.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d105      	bne.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006108:	2b00      	cmp	r3, #0
 800610a:	d075      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800610c:	4b91      	ldr	r3, [pc, #580]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800610e:	2200      	movs	r2, #0
 8006110:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006112:	f7fe fcb7 	bl	8004a84 <HAL_GetTick>
 8006116:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006118:	e008      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800611a:	f7fe fcb3 	bl	8004a84 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	d901      	bls.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e189      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800612c:	4b8a      	ldr	r3, [pc, #552]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1f0      	bne.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	d009      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	019a      	lsls	r2, r3, #6
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	071b      	lsls	r3, r3, #28
 8006150:	4981      	ldr	r1, [pc, #516]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006152:	4313      	orrs	r3, r2
 8006154:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0302 	and.w	r3, r3, #2
 8006160:	2b00      	cmp	r3, #0
 8006162:	d01f      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006164:	4b7c      	ldr	r3, [pc, #496]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800616a:	0f1b      	lsrs	r3, r3, #28
 800616c:	f003 0307 	and.w	r3, r3, #7
 8006170:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	019a      	lsls	r2, r3, #6
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	061b      	lsls	r3, r3, #24
 800617e:	431a      	orrs	r2, r3
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	071b      	lsls	r3, r3, #28
 8006184:	4974      	ldr	r1, [pc, #464]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006186:	4313      	orrs	r3, r2
 8006188:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800618c:	4b72      	ldr	r3, [pc, #456]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800618e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006192:	f023 021f 	bic.w	r2, r3, #31
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	3b01      	subs	r3, #1
 800619c:	496e      	ldr	r1, [pc, #440]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00d      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	019a      	lsls	r2, r3, #6
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	061b      	lsls	r3, r3, #24
 80061bc:	431a      	orrs	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	071b      	lsls	r3, r3, #28
 80061c4:	4964      	ldr	r1, [pc, #400]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80061cc:	4b61      	ldr	r3, [pc, #388]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80061ce:	2201      	movs	r2, #1
 80061d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80061d2:	f7fe fc57 	bl	8004a84 <HAL_GetTick>
 80061d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061d8:	e008      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80061da:	f7fe fc53 	bl	8004a84 <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d901      	bls.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e129      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061ec:	4b5a      	ldr	r3, [pc, #360]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d0f0      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0304 	and.w	r3, r3, #4
 8006200:	2b00      	cmp	r3, #0
 8006202:	d105      	bne.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800620c:	2b00      	cmp	r3, #0
 800620e:	d079      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006210:	4b52      	ldr	r3, [pc, #328]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006212:	2200      	movs	r2, #0
 8006214:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006216:	f7fe fc35 	bl	8004a84 <HAL_GetTick>
 800621a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800621c:	e008      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800621e:	f7fe fc31 	bl	8004a84 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	2b02      	cmp	r3, #2
 800622a:	d901      	bls.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e107      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006230:	4b49      	ldr	r3, [pc, #292]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800623c:	d0ef      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0304 	and.w	r3, r3, #4
 8006246:	2b00      	cmp	r3, #0
 8006248:	d020      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800624a:	4b43      	ldr	r3, [pc, #268]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800624c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006250:	0f1b      	lsrs	r3, r3, #28
 8006252:	f003 0307 	and.w	r3, r3, #7
 8006256:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	019a      	lsls	r2, r3, #6
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	061b      	lsls	r3, r3, #24
 8006264:	431a      	orrs	r2, r3
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	071b      	lsls	r3, r3, #28
 800626a:	493b      	ldr	r1, [pc, #236]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800626c:	4313      	orrs	r3, r2
 800626e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006272:	4b39      	ldr	r3, [pc, #228]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006278:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a1b      	ldr	r3, [r3, #32]
 8006280:	3b01      	subs	r3, #1
 8006282:	021b      	lsls	r3, r3, #8
 8006284:	4934      	ldr	r1, [pc, #208]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006286:	4313      	orrs	r3, r2
 8006288:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0308 	and.w	r3, r3, #8
 8006294:	2b00      	cmp	r3, #0
 8006296:	d01e      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006298:	4b2f      	ldr	r3, [pc, #188]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800629a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800629e:	0e1b      	lsrs	r3, r3, #24
 80062a0:	f003 030f 	and.w	r3, r3, #15
 80062a4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	019a      	lsls	r2, r3, #6
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	061b      	lsls	r3, r3, #24
 80062b0:	431a      	orrs	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	071b      	lsls	r3, r3, #28
 80062b8:	4927      	ldr	r1, [pc, #156]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80062c0:	4b25      	ldr	r3, [pc, #148]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ce:	4922      	ldr	r1, [pc, #136]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80062d6:	4b21      	ldr	r3, [pc, #132]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80062d8:	2201      	movs	r2, #1
 80062da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062dc:	f7fe fbd2 	bl	8004a84 <HAL_GetTick>
 80062e0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80062e2:	e008      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80062e4:	f7fe fbce 	bl	8004a84 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d901      	bls.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e0a4      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80062f6:	4b18      	ldr	r3, [pc, #96]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006302:	d1ef      	bne.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0320 	and.w	r3, r3, #32
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 808b 	beq.w	8006428 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006312:	2300      	movs	r3, #0
 8006314:	60fb      	str	r3, [r7, #12]
 8006316:	4b10      	ldr	r3, [pc, #64]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631a:	4a0f      	ldr	r2, [pc, #60]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800631c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006320:	6413      	str	r3, [r2, #64]	; 0x40
 8006322:	4b0d      	ldr	r3, [pc, #52]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800632a:	60fb      	str	r3, [r7, #12]
 800632c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800632e:	4b0c      	ldr	r3, [pc, #48]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a0b      	ldr	r2, [pc, #44]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006338:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800633a:	f7fe fba3 	bl	8004a84 <HAL_GetTick>
 800633e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006340:	e010      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006342:	f7fe fb9f 	bl	8004a84 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	2b02      	cmp	r3, #2
 800634e:	d909      	bls.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e075      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006354:	42470068 	.word	0x42470068
 8006358:	40023800 	.word	0x40023800
 800635c:	42470070 	.word	0x42470070
 8006360:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006364:	4b38      	ldr	r3, [pc, #224]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800636c:	2b00      	cmp	r3, #0
 800636e:	d0e8      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006370:	4b36      	ldr	r3, [pc, #216]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006374:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006378:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d02f      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	429a      	cmp	r2, r3
 800638c:	d028      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800638e:	4b2f      	ldr	r3, [pc, #188]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006396:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006398:	4b2d      	ldr	r3, [pc, #180]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800639a:	2201      	movs	r2, #1
 800639c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800639e:	4b2c      	ldr	r3, [pc, #176]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80063a4:	4a29      	ldr	r2, [pc, #164]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80063aa:	4b28      	ldr	r3, [pc, #160]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d114      	bne.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80063b6:	f7fe fb65 	bl	8004a84 <HAL_GetTick>
 80063ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063bc:	e00a      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063be:	f7fe fb61 	bl	8004a84 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d901      	bls.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e035      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063d4:	4b1d      	ldr	r3, [pc, #116]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d8:	f003 0302 	and.w	r3, r3, #2
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d0ee      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063ec:	d10d      	bne.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x332>
 80063ee:	4b17      	ldr	r3, [pc, #92]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80063fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006402:	4912      	ldr	r1, [pc, #72]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006404:	4313      	orrs	r3, r2
 8006406:	608b      	str	r3, [r1, #8]
 8006408:	e005      	b.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800640a:	4b10      	ldr	r3, [pc, #64]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	4a0f      	ldr	r2, [pc, #60]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006410:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006414:	6093      	str	r3, [r2, #8]
 8006416:	4b0d      	ldr	r3, [pc, #52]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006418:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006422:	490a      	ldr	r1, [pc, #40]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006424:	4313      	orrs	r3, r2
 8006426:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0310 	and.w	r3, r3, #16
 8006430:	2b00      	cmp	r3, #0
 8006432:	d004      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800643a:	4b06      	ldr	r3, [pc, #24]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800643c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3718      	adds	r7, #24
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	40007000 	.word	0x40007000
 800644c:	40023800 	.word	0x40023800
 8006450:	42470e40 	.word	0x42470e40
 8006454:	424711e0 	.word	0x424711e0

08006458 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e01c      	b.n	80064a4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	795b      	ldrb	r3, [r3, #5]
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b00      	cmp	r3, #0
 8006472:	d105      	bne.n	8006480 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7fe f8c6 	bl	800460c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f042 0204 	orr.w	r2, r2, #4
 8006494:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e07b      	b.n	80065b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d108      	bne.n	80064d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064ce:	d009      	beq.n	80064e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	61da      	str	r2, [r3, #28]
 80064d6:	e005      	b.n	80064e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d106      	bne.n	8006504 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7fe f8a6 	bl	8004650 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2202      	movs	r2, #2
 8006508:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800651a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800652c:	431a      	orrs	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006536:	431a      	orrs	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	f003 0302 	and.w	r3, r3, #2
 8006540:	431a      	orrs	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	431a      	orrs	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006554:	431a      	orrs	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800655e:	431a      	orrs	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006568:	ea42 0103 	orr.w	r1, r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006570:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	0c1b      	lsrs	r3, r3, #16
 8006582:	f003 0104 	and.w	r1, r3, #4
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	f003 0210 	and.w	r2, r3, #16
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	69da      	ldr	r2, [r3, #28]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b082      	sub	sp, #8
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e01a      	b.n	8006606 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2202      	movs	r2, #2
 80065d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065e6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7fe f879 	bl	80046e0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b088      	sub	sp, #32
 8006612:	af00      	add	r7, sp, #0
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	603b      	str	r3, [r7, #0]
 800661a:	4613      	mov	r3, r2
 800661c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800661e:	2300      	movs	r3, #0
 8006620:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006628:	2b01      	cmp	r3, #1
 800662a:	d101      	bne.n	8006630 <HAL_SPI_Transmit+0x22>
 800662c:	2302      	movs	r3, #2
 800662e:	e126      	b.n	800687e <HAL_SPI_Transmit+0x270>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006638:	f7fe fa24 	bl	8004a84 <HAL_GetTick>
 800663c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800663e:	88fb      	ldrh	r3, [r7, #6]
 8006640:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b01      	cmp	r3, #1
 800664c:	d002      	beq.n	8006654 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800664e:	2302      	movs	r3, #2
 8006650:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006652:	e10b      	b.n	800686c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d002      	beq.n	8006660 <HAL_SPI_Transmit+0x52>
 800665a:	88fb      	ldrh	r3, [r7, #6]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d102      	bne.n	8006666 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006664:	e102      	b.n	800686c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2203      	movs	r2, #3
 800666a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	88fa      	ldrh	r2, [r7, #6]
 800667e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	88fa      	ldrh	r2, [r7, #6]
 8006684:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066ac:	d10f      	bne.n	80066ce <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d8:	2b40      	cmp	r3, #64	; 0x40
 80066da:	d007      	beq.n	80066ec <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066f4:	d14b      	bne.n	800678e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d002      	beq.n	8006704 <HAL_SPI_Transmit+0xf6>
 80066fe:	8afb      	ldrh	r3, [r7, #22]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d13e      	bne.n	8006782 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006708:	881a      	ldrh	r2, [r3, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006714:	1c9a      	adds	r2, r3, #2
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800671e:	b29b      	uxth	r3, r3
 8006720:	3b01      	subs	r3, #1
 8006722:	b29a      	uxth	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006728:	e02b      	b.n	8006782 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f003 0302 	and.w	r3, r3, #2
 8006734:	2b02      	cmp	r3, #2
 8006736:	d112      	bne.n	800675e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673c:	881a      	ldrh	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006748:	1c9a      	adds	r2, r3, #2
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006752:	b29b      	uxth	r3, r3
 8006754:	3b01      	subs	r3, #1
 8006756:	b29a      	uxth	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	86da      	strh	r2, [r3, #54]	; 0x36
 800675c:	e011      	b.n	8006782 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800675e:	f7fe f991 	bl	8004a84 <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	429a      	cmp	r2, r3
 800676c:	d803      	bhi.n	8006776 <HAL_SPI_Transmit+0x168>
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006774:	d102      	bne.n	800677c <HAL_SPI_Transmit+0x16e>
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d102      	bne.n	8006782 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006780:	e074      	b.n	800686c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006786:	b29b      	uxth	r3, r3
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1ce      	bne.n	800672a <HAL_SPI_Transmit+0x11c>
 800678c:	e04c      	b.n	8006828 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d002      	beq.n	800679c <HAL_SPI_Transmit+0x18e>
 8006796:	8afb      	ldrh	r3, [r7, #22]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d140      	bne.n	800681e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	330c      	adds	r3, #12
 80067a6:	7812      	ldrb	r2, [r2, #0]
 80067a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ae:	1c5a      	adds	r2, r3, #1
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	3b01      	subs	r3, #1
 80067bc:	b29a      	uxth	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80067c2:	e02c      	b.n	800681e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d113      	bne.n	80067fa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	330c      	adds	r3, #12
 80067dc:	7812      	ldrb	r2, [r2, #0]
 80067de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e4:	1c5a      	adds	r2, r3, #1
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	3b01      	subs	r3, #1
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80067f8:	e011      	b.n	800681e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067fa:	f7fe f943 	bl	8004a84 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	683a      	ldr	r2, [r7, #0]
 8006806:	429a      	cmp	r2, r3
 8006808:	d803      	bhi.n	8006812 <HAL_SPI_Transmit+0x204>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006810:	d102      	bne.n	8006818 <HAL_SPI_Transmit+0x20a>
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d102      	bne.n	800681e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800681c:	e026      	b.n	800686c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006822:	b29b      	uxth	r3, r3
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1cd      	bne.n	80067c4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	6839      	ldr	r1, [r7, #0]
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f000 fbd9 	bl	8006fe4 <SPI_EndRxTxTransaction>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2220      	movs	r2, #32
 800683c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10a      	bne.n	800685c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006846:	2300      	movs	r3, #0
 8006848:	613b      	str	r3, [r7, #16]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	613b      	str	r3, [r7, #16]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	613b      	str	r3, [r7, #16]
 800685a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006860:	2b00      	cmp	r3, #0
 8006862:	d002      	beq.n	800686a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	77fb      	strb	r3, [r7, #31]
 8006868:	e000      	b.n	800686c <HAL_SPI_Transmit+0x25e>
  }

error:
 800686a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800687c:	7ffb      	ldrb	r3, [r7, #31]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3720      	adds	r7, #32
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b088      	sub	sp, #32
 800688a:	af02      	add	r7, sp, #8
 800688c:	60f8      	str	r0, [r7, #12]
 800688e:	60b9      	str	r1, [r7, #8]
 8006890:	603b      	str	r3, [r7, #0]
 8006892:	4613      	mov	r3, r2
 8006894:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068a2:	d112      	bne.n	80068ca <HAL_SPI_Receive+0x44>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10e      	bne.n	80068ca <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2204      	movs	r2, #4
 80068b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80068b4:	88fa      	ldrh	r2, [r7, #6]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	4613      	mov	r3, r2
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	68b9      	ldr	r1, [r7, #8]
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 f8f1 	bl	8006aa8 <HAL_SPI_TransmitReceive>
 80068c6:	4603      	mov	r3, r0
 80068c8:	e0ea      	b.n	8006aa0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d101      	bne.n	80068d8 <HAL_SPI_Receive+0x52>
 80068d4:	2302      	movs	r3, #2
 80068d6:	e0e3      	b.n	8006aa0 <HAL_SPI_Receive+0x21a>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068e0:	f7fe f8d0 	bl	8004a84 <HAL_GetTick>
 80068e4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d002      	beq.n	80068f8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80068f2:	2302      	movs	r3, #2
 80068f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80068f6:	e0ca      	b.n	8006a8e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d002      	beq.n	8006904 <HAL_SPI_Receive+0x7e>
 80068fe:	88fb      	ldrh	r3, [r7, #6]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d102      	bne.n	800690a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006908:	e0c1      	b.n	8006a8e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2204      	movs	r2, #4
 800690e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	88fa      	ldrh	r2, [r7, #6]
 8006922:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	88fa      	ldrh	r2, [r7, #6]
 8006928:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006950:	d10f      	bne.n	8006972 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006960:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006970:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697c:	2b40      	cmp	r3, #64	; 0x40
 800697e:	d007      	beq.n	8006990 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800698e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d162      	bne.n	8006a5e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006998:	e02e      	b.n	80069f8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d115      	bne.n	80069d4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f103 020c 	add.w	r2, r3, #12
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b4:	7812      	ldrb	r2, [r2, #0]
 80069b6:	b2d2      	uxtb	r2, r2
 80069b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069be:	1c5a      	adds	r2, r3, #1
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	3b01      	subs	r3, #1
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069d2:	e011      	b.n	80069f8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069d4:	f7fe f856 	bl	8004a84 <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d803      	bhi.n	80069ec <HAL_SPI_Receive+0x166>
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ea:	d102      	bne.n	80069f2 <HAL_SPI_Receive+0x16c>
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d102      	bne.n	80069f8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80069f6:	e04a      	b.n	8006a8e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1cb      	bne.n	800699a <HAL_SPI_Receive+0x114>
 8006a02:	e031      	b.n	8006a68 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d113      	bne.n	8006a3a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68da      	ldr	r2, [r3, #12]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1c:	b292      	uxth	r2, r2
 8006a1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a24:	1c9a      	adds	r2, r3, #2
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a38:	e011      	b.n	8006a5e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a3a:	f7fe f823 	bl	8004a84 <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	683a      	ldr	r2, [r7, #0]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d803      	bhi.n	8006a52 <HAL_SPI_Receive+0x1cc>
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a50:	d102      	bne.n	8006a58 <HAL_SPI_Receive+0x1d2>
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d102      	bne.n	8006a5e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006a5c:	e017      	b.n	8006a8e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1cd      	bne.n	8006a04 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	6839      	ldr	r1, [r7, #0]
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 fa53 	bl	8006f18 <SPI_EndRxTransaction>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d002      	beq.n	8006a8c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	75fb      	strb	r3, [r7, #23]
 8006a8a:	e000      	b.n	8006a8e <HAL_SPI_Receive+0x208>
  }

error :
 8006a8c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3718      	adds	r7, #24
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b08c      	sub	sp, #48	; 0x30
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
 8006ab4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006aba:	2300      	movs	r3, #0
 8006abc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d101      	bne.n	8006ace <HAL_SPI_TransmitReceive+0x26>
 8006aca:	2302      	movs	r3, #2
 8006acc:	e18a      	b.n	8006de4 <HAL_SPI_TransmitReceive+0x33c>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ad6:	f7fd ffd5 	bl	8004a84 <HAL_GetTick>
 8006ada:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006aec:	887b      	ldrh	r3, [r7, #2]
 8006aee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006af0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d00f      	beq.n	8006b18 <HAL_SPI_TransmitReceive+0x70>
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006afe:	d107      	bne.n	8006b10 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d103      	bne.n	8006b10 <HAL_SPI_TransmitReceive+0x68>
 8006b08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b0c:	2b04      	cmp	r3, #4
 8006b0e:	d003      	beq.n	8006b18 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006b10:	2302      	movs	r3, #2
 8006b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006b16:	e15b      	b.n	8006dd0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d005      	beq.n	8006b2a <HAL_SPI_TransmitReceive+0x82>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d002      	beq.n	8006b2a <HAL_SPI_TransmitReceive+0x82>
 8006b24:	887b      	ldrh	r3, [r7, #2]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d103      	bne.n	8006b32 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006b30:	e14e      	b.n	8006dd0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b04      	cmp	r3, #4
 8006b3c:	d003      	beq.n	8006b46 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2205      	movs	r2, #5
 8006b42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	887a      	ldrh	r2, [r7, #2]
 8006b56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	887a      	ldrh	r2, [r7, #2]
 8006b5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	887a      	ldrh	r2, [r7, #2]
 8006b68:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	887a      	ldrh	r2, [r7, #2]
 8006b6e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b86:	2b40      	cmp	r3, #64	; 0x40
 8006b88:	d007      	beq.n	8006b9a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ba2:	d178      	bne.n	8006c96 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d002      	beq.n	8006bb2 <HAL_SPI_TransmitReceive+0x10a>
 8006bac:	8b7b      	ldrh	r3, [r7, #26]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d166      	bne.n	8006c80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb6:	881a      	ldrh	r2, [r3, #0]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc2:	1c9a      	adds	r2, r3, #2
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bd6:	e053      	b.n	8006c80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f003 0302 	and.w	r3, r3, #2
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d11b      	bne.n	8006c1e <HAL_SPI_TransmitReceive+0x176>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d016      	beq.n	8006c1e <HAL_SPI_TransmitReceive+0x176>
 8006bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d113      	bne.n	8006c1e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfa:	881a      	ldrh	r2, [r3, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c06:	1c9a      	adds	r2, r3, #2
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	3b01      	subs	r3, #1
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d119      	bne.n	8006c60 <HAL_SPI_TransmitReceive+0x1b8>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d014      	beq.n	8006c60 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68da      	ldr	r2, [r3, #12]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c40:	b292      	uxth	r2, r2
 8006c42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c48:	1c9a      	adds	r2, r3, #2
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	3b01      	subs	r3, #1
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c60:	f7fd ff10 	bl	8004a84 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d807      	bhi.n	8006c80 <HAL_SPI_TransmitReceive+0x1d8>
 8006c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c76:	d003      	beq.n	8006c80 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006c7e:	e0a7      	b.n	8006dd0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1a6      	bne.n	8006bd8 <HAL_SPI_TransmitReceive+0x130>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1a1      	bne.n	8006bd8 <HAL_SPI_TransmitReceive+0x130>
 8006c94:	e07c      	b.n	8006d90 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d002      	beq.n	8006ca4 <HAL_SPI_TransmitReceive+0x1fc>
 8006c9e:	8b7b      	ldrh	r3, [r7, #26]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d16b      	bne.n	8006d7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	330c      	adds	r3, #12
 8006cae:	7812      	ldrb	r2, [r2, #0]
 8006cb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb6:	1c5a      	adds	r2, r3, #1
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cca:	e057      	b.n	8006d7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d11c      	bne.n	8006d14 <HAL_SPI_TransmitReceive+0x26c>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d017      	beq.n	8006d14 <HAL_SPI_TransmitReceive+0x26c>
 8006ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d114      	bne.n	8006d14 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	330c      	adds	r3, #12
 8006cf4:	7812      	ldrb	r2, [r2, #0]
 8006cf6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfc:	1c5a      	adds	r2, r3, #1
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d10:	2300      	movs	r3, #0
 8006d12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d119      	bne.n	8006d56 <HAL_SPI_TransmitReceive+0x2ae>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d014      	beq.n	8006d56 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68da      	ldr	r2, [r3, #12]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d36:	b2d2      	uxtb	r2, r2
 8006d38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3e:	1c5a      	adds	r2, r3, #1
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d52:	2301      	movs	r3, #1
 8006d54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d56:	f7fd fe95 	bl	8004a84 <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d803      	bhi.n	8006d6e <HAL_SPI_TransmitReceive+0x2c6>
 8006d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6c:	d102      	bne.n	8006d74 <HAL_SPI_TransmitReceive+0x2cc>
 8006d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d103      	bne.n	8006d7c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006d7a:	e029      	b.n	8006dd0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1a2      	bne.n	8006ccc <HAL_SPI_TransmitReceive+0x224>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d19d      	bne.n	8006ccc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 f925 	bl	8006fe4 <SPI_EndRxTxTransaction>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d006      	beq.n	8006dae <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2220      	movs	r2, #32
 8006daa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006dac:	e010      	b.n	8006dd0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10b      	bne.n	8006dce <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006db6:	2300      	movs	r3, #0
 8006db8:	617b      	str	r3, [r7, #20]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	617b      	str	r3, [r7, #20]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	617b      	str	r3, [r7, #20]
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	e000      	b.n	8006dd0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006dce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006de0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3730      	adds	r7, #48	; 0x30
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006dfa:	b2db      	uxtb	r3, r3
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b088      	sub	sp, #32
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	603b      	str	r3, [r7, #0]
 8006e14:	4613      	mov	r3, r2
 8006e16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e18:	f7fd fe34 	bl	8004a84 <HAL_GetTick>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e20:	1a9b      	subs	r3, r3, r2
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	4413      	add	r3, r2
 8006e26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e28:	f7fd fe2c 	bl	8004a84 <HAL_GetTick>
 8006e2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e2e:	4b39      	ldr	r3, [pc, #228]	; (8006f14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	015b      	lsls	r3, r3, #5
 8006e34:	0d1b      	lsrs	r3, r3, #20
 8006e36:	69fa      	ldr	r2, [r7, #28]
 8006e38:	fb02 f303 	mul.w	r3, r2, r3
 8006e3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e3e:	e054      	b.n	8006eea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e46:	d050      	beq.n	8006eea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e48:	f7fd fe1c 	bl	8004a84 <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	69fa      	ldr	r2, [r7, #28]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d902      	bls.n	8006e5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d13d      	bne.n	8006eda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	685a      	ldr	r2, [r3, #4]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e76:	d111      	bne.n	8006e9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e80:	d004      	beq.n	8006e8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e8a:	d107      	bne.n	8006e9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ea4:	d10f      	bne.n	8006ec6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006eb4:	601a      	str	r2, [r3, #0]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ec4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e017      	b.n	8006f0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	689a      	ldr	r2, [r3, #8]
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	68ba      	ldr	r2, [r7, #8]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	bf0c      	ite	eq
 8006efa:	2301      	moveq	r3, #1
 8006efc:	2300      	movne	r3, #0
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	461a      	mov	r2, r3
 8006f02:	79fb      	ldrb	r3, [r7, #7]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d19b      	bne.n	8006e40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3720      	adds	r7, #32
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	20000018 	.word	0x20000018

08006f18 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af02      	add	r7, sp, #8
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f2c:	d111      	bne.n	8006f52 <SPI_EndRxTransaction+0x3a>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f36:	d004      	beq.n	8006f42 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f40:	d107      	bne.n	8006f52 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f50:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f5a:	d12a      	bne.n	8006fb2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f64:	d012      	beq.n	8006f8c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	2180      	movs	r1, #128	; 0x80
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f7ff ff49 	bl	8006e08 <SPI_WaitFlagStateUntilTimeout>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d02d      	beq.n	8006fd8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f80:	f043 0220 	orr.w	r2, r3, #32
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e026      	b.n	8006fda <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	2200      	movs	r2, #0
 8006f94:	2101      	movs	r1, #1
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f7ff ff36 	bl	8006e08 <SPI_WaitFlagStateUntilTimeout>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d01a      	beq.n	8006fd8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa6:	f043 0220 	orr.w	r2, r3, #32
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e013      	b.n	8006fda <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	2101      	movs	r1, #1
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f7ff ff23 	bl	8006e08 <SPI_WaitFlagStateUntilTimeout>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d007      	beq.n	8006fd8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fcc:	f043 0220 	orr.w	r2, r3, #32
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	e000      	b.n	8006fda <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
	...

08006fe4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b088      	sub	sp, #32
 8006fe8:	af02      	add	r7, sp, #8
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ff0:	4b1b      	ldr	r3, [pc, #108]	; (8007060 <SPI_EndRxTxTransaction+0x7c>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a1b      	ldr	r2, [pc, #108]	; (8007064 <SPI_EndRxTxTransaction+0x80>)
 8006ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8006ffa:	0d5b      	lsrs	r3, r3, #21
 8006ffc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007000:	fb02 f303 	mul.w	r3, r2, r3
 8007004:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800700e:	d112      	bne.n	8007036 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2200      	movs	r2, #0
 8007018:	2180      	movs	r1, #128	; 0x80
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f7ff fef4 	bl	8006e08 <SPI_WaitFlagStateUntilTimeout>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d016      	beq.n	8007054 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800702a:	f043 0220 	orr.w	r2, r3, #32
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e00f      	b.n	8007056 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00a      	beq.n	8007052 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	3b01      	subs	r3, #1
 8007040:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800704c:	2b80      	cmp	r3, #128	; 0x80
 800704e:	d0f2      	beq.n	8007036 <SPI_EndRxTxTransaction+0x52>
 8007050:	e000      	b.n	8007054 <SPI_EndRxTxTransaction+0x70>
        break;
 8007052:	bf00      	nop
  }

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3718      	adds	r7, #24
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	20000018 	.word	0x20000018
 8007064:	165e9f81 	.word	0x165e9f81

08007068 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e041      	b.n	80070fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d106      	bne.n	8007094 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7fd fb44 	bl	800471c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2202      	movs	r2, #2
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	3304      	adds	r3, #4
 80070a4:	4619      	mov	r1, r3
 80070a6:	4610      	mov	r0, r2
 80070a8:	f000 f82e 	bl	8007108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3708      	adds	r7, #8
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
	...

08007108 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a40      	ldr	r2, [pc, #256]	; (800721c <TIM_Base_SetConfig+0x114>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d013      	beq.n	8007148 <TIM_Base_SetConfig+0x40>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007126:	d00f      	beq.n	8007148 <TIM_Base_SetConfig+0x40>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a3d      	ldr	r2, [pc, #244]	; (8007220 <TIM_Base_SetConfig+0x118>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d00b      	beq.n	8007148 <TIM_Base_SetConfig+0x40>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a3c      	ldr	r2, [pc, #240]	; (8007224 <TIM_Base_SetConfig+0x11c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d007      	beq.n	8007148 <TIM_Base_SetConfig+0x40>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a3b      	ldr	r2, [pc, #236]	; (8007228 <TIM_Base_SetConfig+0x120>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d003      	beq.n	8007148 <TIM_Base_SetConfig+0x40>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a3a      	ldr	r2, [pc, #232]	; (800722c <TIM_Base_SetConfig+0x124>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d108      	bne.n	800715a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800714e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	4313      	orrs	r3, r2
 8007158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a2f      	ldr	r2, [pc, #188]	; (800721c <TIM_Base_SetConfig+0x114>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d02b      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007168:	d027      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a2c      	ldr	r2, [pc, #176]	; (8007220 <TIM_Base_SetConfig+0x118>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d023      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a2b      	ldr	r2, [pc, #172]	; (8007224 <TIM_Base_SetConfig+0x11c>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d01f      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a2a      	ldr	r2, [pc, #168]	; (8007228 <TIM_Base_SetConfig+0x120>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d01b      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a29      	ldr	r2, [pc, #164]	; (800722c <TIM_Base_SetConfig+0x124>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d017      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a28      	ldr	r2, [pc, #160]	; (8007230 <TIM_Base_SetConfig+0x128>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d013      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a27      	ldr	r2, [pc, #156]	; (8007234 <TIM_Base_SetConfig+0x12c>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d00f      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a26      	ldr	r2, [pc, #152]	; (8007238 <TIM_Base_SetConfig+0x130>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d00b      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a25      	ldr	r2, [pc, #148]	; (800723c <TIM_Base_SetConfig+0x134>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d007      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a24      	ldr	r2, [pc, #144]	; (8007240 <TIM_Base_SetConfig+0x138>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d003      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a23      	ldr	r2, [pc, #140]	; (8007244 <TIM_Base_SetConfig+0x13c>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d108      	bne.n	80071cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a0a      	ldr	r2, [pc, #40]	; (800721c <TIM_Base_SetConfig+0x114>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d003      	beq.n	8007200 <TIM_Base_SetConfig+0xf8>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a0c      	ldr	r2, [pc, #48]	; (800722c <TIM_Base_SetConfig+0x124>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d103      	bne.n	8007208 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	691a      	ldr	r2, [r3, #16]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	615a      	str	r2, [r3, #20]
}
 800720e:	bf00      	nop
 8007210:	3714      	adds	r7, #20
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	40010000 	.word	0x40010000
 8007220:	40000400 	.word	0x40000400
 8007224:	40000800 	.word	0x40000800
 8007228:	40000c00 	.word	0x40000c00
 800722c:	40010400 	.word	0x40010400
 8007230:	40014000 	.word	0x40014000
 8007234:	40014400 	.word	0x40014400
 8007238:	40014800 	.word	0x40014800
 800723c:	40001800 	.word	0x40001800
 8007240:	40001c00 	.word	0x40001c00
 8007244:	40002000 	.word	0x40002000

08007248 <__NVIC_SetPriority>:
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	4603      	mov	r3, r0
 8007250:	6039      	str	r1, [r7, #0]
 8007252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007258:	2b00      	cmp	r3, #0
 800725a:	db0a      	blt.n	8007272 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	b2da      	uxtb	r2, r3
 8007260:	490c      	ldr	r1, [pc, #48]	; (8007294 <__NVIC_SetPriority+0x4c>)
 8007262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007266:	0112      	lsls	r2, r2, #4
 8007268:	b2d2      	uxtb	r2, r2
 800726a:	440b      	add	r3, r1
 800726c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007270:	e00a      	b.n	8007288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	b2da      	uxtb	r2, r3
 8007276:	4908      	ldr	r1, [pc, #32]	; (8007298 <__NVIC_SetPriority+0x50>)
 8007278:	79fb      	ldrb	r3, [r7, #7]
 800727a:	f003 030f 	and.w	r3, r3, #15
 800727e:	3b04      	subs	r3, #4
 8007280:	0112      	lsls	r2, r2, #4
 8007282:	b2d2      	uxtb	r2, r2
 8007284:	440b      	add	r3, r1
 8007286:	761a      	strb	r2, [r3, #24]
}
 8007288:	bf00      	nop
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	e000e100 	.word	0xe000e100
 8007298:	e000ed00 	.word	0xe000ed00

0800729c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800729c:	b580      	push	{r7, lr}
 800729e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80072a0:	2100      	movs	r1, #0
 80072a2:	f06f 0004 	mvn.w	r0, #4
 80072a6:	f7ff ffcf 	bl	8007248 <__NVIC_SetPriority>
#endif
}
 80072aa:	bf00      	nop
 80072ac:	bd80      	pop	{r7, pc}
	...

080072b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072b6:	f3ef 8305 	mrs	r3, IPSR
 80072ba:	603b      	str	r3, [r7, #0]
  return(result);
 80072bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80072c2:	f06f 0305 	mvn.w	r3, #5
 80072c6:	607b      	str	r3, [r7, #4]
 80072c8:	e00c      	b.n	80072e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80072ca:	4b0a      	ldr	r3, [pc, #40]	; (80072f4 <osKernelInitialize+0x44>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d105      	bne.n	80072de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80072d2:	4b08      	ldr	r3, [pc, #32]	; (80072f4 <osKernelInitialize+0x44>)
 80072d4:	2201      	movs	r2, #1
 80072d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80072d8:	2300      	movs	r3, #0
 80072da:	607b      	str	r3, [r7, #4]
 80072dc:	e002      	b.n	80072e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80072de:	f04f 33ff 	mov.w	r3, #4294967295
 80072e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80072e4:	687b      	ldr	r3, [r7, #4]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	20027a98 	.word	0x20027a98

080072f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072fe:	f3ef 8305 	mrs	r3, IPSR
 8007302:	603b      	str	r3, [r7, #0]
  return(result);
 8007304:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007306:	2b00      	cmp	r3, #0
 8007308:	d003      	beq.n	8007312 <osKernelStart+0x1a>
    stat = osErrorISR;
 800730a:	f06f 0305 	mvn.w	r3, #5
 800730e:	607b      	str	r3, [r7, #4]
 8007310:	e010      	b.n	8007334 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007312:	4b0b      	ldr	r3, [pc, #44]	; (8007340 <osKernelStart+0x48>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d109      	bne.n	800732e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800731a:	f7ff ffbf 	bl	800729c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800731e:	4b08      	ldr	r3, [pc, #32]	; (8007340 <osKernelStart+0x48>)
 8007320:	2202      	movs	r2, #2
 8007322:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007324:	f002 f81c 	bl	8009360 <vTaskStartScheduler>
      stat = osOK;
 8007328:	2300      	movs	r3, #0
 800732a:	607b      	str	r3, [r7, #4]
 800732c:	e002      	b.n	8007334 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800732e:	f04f 33ff 	mov.w	r3, #4294967295
 8007332:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007334:	687b      	ldr	r3, [r7, #4]
}
 8007336:	4618      	mov	r0, r3
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	20027a98 	.word	0x20027a98

08007344 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007344:	b580      	push	{r7, lr}
 8007346:	b08e      	sub	sp, #56	; 0x38
 8007348:	af04      	add	r7, sp, #16
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007350:	2300      	movs	r3, #0
 8007352:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007354:	f3ef 8305 	mrs	r3, IPSR
 8007358:	617b      	str	r3, [r7, #20]
  return(result);
 800735a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800735c:	2b00      	cmp	r3, #0
 800735e:	d17e      	bne.n	800745e <osThreadNew+0x11a>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d07b      	beq.n	800745e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007366:	2380      	movs	r3, #128	; 0x80
 8007368:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800736a:	2318      	movs	r3, #24
 800736c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800736e:	2300      	movs	r3, #0
 8007370:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007372:	f04f 33ff 	mov.w	r3, #4294967295
 8007376:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d045      	beq.n	800740a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d002      	beq.n	800738c <osThreadNew+0x48>
        name = attr->name;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d008      	beq.n	80073b2 <osThreadNew+0x6e>
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	2b38      	cmp	r3, #56	; 0x38
 80073a4:	d805      	bhi.n	80073b2 <osThreadNew+0x6e>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f003 0301 	and.w	r3, r3, #1
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d001      	beq.n	80073b6 <osThreadNew+0x72>
        return (NULL);
 80073b2:	2300      	movs	r3, #0
 80073b4:	e054      	b.n	8007460 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d003      	beq.n	80073c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	089b      	lsrs	r3, r3, #2
 80073c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00e      	beq.n	80073ec <osThreadNew+0xa8>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	2ba7      	cmp	r3, #167	; 0xa7
 80073d4:	d90a      	bls.n	80073ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d006      	beq.n	80073ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d002      	beq.n	80073ec <osThreadNew+0xa8>
        mem = 1;
 80073e6:	2301      	movs	r3, #1
 80073e8:	61bb      	str	r3, [r7, #24]
 80073ea:	e010      	b.n	800740e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10c      	bne.n	800740e <osThreadNew+0xca>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d108      	bne.n	800740e <osThreadNew+0xca>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d104      	bne.n	800740e <osThreadNew+0xca>
          mem = 0;
 8007404:	2300      	movs	r3, #0
 8007406:	61bb      	str	r3, [r7, #24]
 8007408:	e001      	b.n	800740e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800740a:	2300      	movs	r3, #0
 800740c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	2b01      	cmp	r3, #1
 8007412:	d110      	bne.n	8007436 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800741c:	9202      	str	r2, [sp, #8]
 800741e:	9301      	str	r3, [sp, #4]
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	6a3a      	ldr	r2, [r7, #32]
 8007428:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f001 fd8a 	bl	8008f44 <xTaskCreateStatic>
 8007430:	4603      	mov	r3, r0
 8007432:	613b      	str	r3, [r7, #16]
 8007434:	e013      	b.n	800745e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d110      	bne.n	800745e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	b29a      	uxth	r2, r3
 8007440:	f107 0310 	add.w	r3, r7, #16
 8007444:	9301      	str	r3, [sp, #4]
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f001 fdd5 	bl	8008ffe <xTaskCreate>
 8007454:	4603      	mov	r3, r0
 8007456:	2b01      	cmp	r3, #1
 8007458:	d001      	beq.n	800745e <osThreadNew+0x11a>
            hTask = NULL;
 800745a:	2300      	movs	r3, #0
 800745c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800745e:	693b      	ldr	r3, [r7, #16]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3728      	adds	r7, #40	; 0x28
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007470:	f3ef 8305 	mrs	r3, IPSR
 8007474:	60bb      	str	r3, [r7, #8]
  return(result);
 8007476:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007478:	2b00      	cmp	r3, #0
 800747a:	d003      	beq.n	8007484 <osDelay+0x1c>
    stat = osErrorISR;
 800747c:	f06f 0305 	mvn.w	r3, #5
 8007480:	60fb      	str	r3, [r7, #12]
 8007482:	e007      	b.n	8007494 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007484:	2300      	movs	r3, #0
 8007486:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d002      	beq.n	8007494 <osDelay+0x2c>
      vTaskDelay(ticks);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f001 ff2e 	bl	80092f0 <vTaskDelay>
    }
  }

  return (stat);
 8007494:	68fb      	ldr	r3, [r7, #12]
}
 8007496:	4618      	mov	r0, r3
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800749e:	b580      	push	{r7, lr}
 80074a0:	b084      	sub	sp, #16
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f003 fa3d 	bl	800a926 <pvTimerGetTimerID>
 80074ac:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d005      	beq.n	80074c0 <TimerCallback+0x22>
    callb->func (callb->arg);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	6852      	ldr	r2, [r2, #4]
 80074bc:	4610      	mov	r0, r2
 80074be:	4798      	blx	r3
  }
}
 80074c0:	bf00      	nop
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b08c      	sub	sp, #48	; 0x30
 80074cc:	af02      	add	r7, sp, #8
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	607a      	str	r2, [r7, #4]
 80074d2:	603b      	str	r3, [r7, #0]
 80074d4:	460b      	mov	r3, r1
 80074d6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80074d8:	2300      	movs	r3, #0
 80074da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074dc:	f3ef 8305 	mrs	r3, IPSR
 80074e0:	613b      	str	r3, [r7, #16]
  return(result);
 80074e2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d163      	bne.n	80075b0 <osTimerNew+0xe8>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d060      	beq.n	80075b0 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80074ee:	2008      	movs	r0, #8
 80074f0:	f003 fc8a 	bl	800ae08 <pvPortMalloc>
 80074f4:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d059      	beq.n	80075b0 <osTimerNew+0xe8>
      callb->func = func;
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8007508:	7afb      	ldrb	r3, [r7, #11]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d102      	bne.n	8007514 <osTimerNew+0x4c>
        reload = pdFALSE;
 800750e:	2300      	movs	r3, #0
 8007510:	61fb      	str	r3, [r7, #28]
 8007512:	e001      	b.n	8007518 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8007514:	2301      	movs	r3, #1
 8007516:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8007518:	f04f 33ff 	mov.w	r3, #4294967295
 800751c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800751e:	2300      	movs	r3, #0
 8007520:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d01c      	beq.n	8007562 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <osTimerNew+0x6e>
          name = attr->name;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d006      	beq.n	800754c <osTimerNew+0x84>
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	2b2b      	cmp	r3, #43	; 0x2b
 8007544:	d902      	bls.n	800754c <osTimerNew+0x84>
          mem = 1;
 8007546:	2301      	movs	r3, #1
 8007548:	61bb      	str	r3, [r7, #24]
 800754a:	e00c      	b.n	8007566 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d108      	bne.n	8007566 <osTimerNew+0x9e>
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d104      	bne.n	8007566 <osTimerNew+0x9e>
            mem = 0;
 800755c:	2300      	movs	r3, #0
 800755e:	61bb      	str	r3, [r7, #24]
 8007560:	e001      	b.n	8007566 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8007562:	2300      	movs	r3, #0
 8007564:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d10c      	bne.n	8007586 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	9301      	str	r3, [sp, #4]
 8007572:	4b12      	ldr	r3, [pc, #72]	; (80075bc <osTimerNew+0xf4>)
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	69fa      	ldr	r2, [r7, #28]
 800757a:	2101      	movs	r1, #1
 800757c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800757e:	f002 fe2a 	bl	800a1d6 <xTimerCreateStatic>
 8007582:	6238      	str	r0, [r7, #32]
 8007584:	e00b      	b.n	800759e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d108      	bne.n	800759e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800758c:	4b0b      	ldr	r3, [pc, #44]	; (80075bc <osTimerNew+0xf4>)
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	69fa      	ldr	r2, [r7, #28]
 8007594:	2101      	movs	r1, #1
 8007596:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007598:	f002 fdfc 	bl	800a194 <xTimerCreate>
 800759c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800759e:	6a3b      	ldr	r3, [r7, #32]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d105      	bne.n	80075b0 <osTimerNew+0xe8>
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d002      	beq.n	80075b0 <osTimerNew+0xe8>
        vPortFree (callb);
 80075aa:	6978      	ldr	r0, [r7, #20]
 80075ac:	f003 fcf8 	bl	800afa0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80075b0:	6a3b      	ldr	r3, [r7, #32]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3728      	adds	r7, #40	; 0x28
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	0800749f 	.word	0x0800749f

080075c0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b088      	sub	sp, #32
 80075c4:	af02      	add	r7, sp, #8
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075ce:	f3ef 8305 	mrs	r3, IPSR
 80075d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80075d4:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <osTimerStart+0x22>
    stat = osErrorISR;
 80075da:	f06f 0305 	mvn.w	r3, #5
 80075de:	617b      	str	r3, [r7, #20]
 80075e0:	e017      	b.n	8007612 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d103      	bne.n	80075f0 <osTimerStart+0x30>
    stat = osErrorParameter;
 80075e8:	f06f 0303 	mvn.w	r3, #3
 80075ec:	617b      	str	r3, [r7, #20]
 80075ee:	e010      	b.n	8007612 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80075f0:	2300      	movs	r3, #0
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	2300      	movs	r3, #0
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	2104      	movs	r1, #4
 80075fa:	6938      	ldr	r0, [r7, #16]
 80075fc:	f002 fe64 	bl	800a2c8 <xTimerGenericCommand>
 8007600:	4603      	mov	r3, r0
 8007602:	2b01      	cmp	r3, #1
 8007604:	d102      	bne.n	800760c <osTimerStart+0x4c>
      stat = osOK;
 8007606:	2300      	movs	r3, #0
 8007608:	617b      	str	r3, [r7, #20]
 800760a:	e002      	b.n	8007612 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800760c:	f06f 0302 	mvn.w	r3, #2
 8007610:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007612:	697b      	ldr	r3, [r7, #20]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3718      	adds	r7, #24
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800761c:	b580      	push	{r7, lr}
 800761e:	b088      	sub	sp, #32
 8007620:	af02      	add	r7, sp, #8
 8007622:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007628:	f3ef 8305 	mrs	r3, IPSR
 800762c:	60fb      	str	r3, [r7, #12]
  return(result);
 800762e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007630:	2b00      	cmp	r3, #0
 8007632:	d003      	beq.n	800763c <osTimerStop+0x20>
    stat = osErrorISR;
 8007634:	f06f 0305 	mvn.w	r3, #5
 8007638:	617b      	str	r3, [r7, #20]
 800763a:	e021      	b.n	8007680 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d103      	bne.n	800764a <osTimerStop+0x2e>
    stat = osErrorParameter;
 8007642:	f06f 0303 	mvn.w	r3, #3
 8007646:	617b      	str	r3, [r7, #20]
 8007648:	e01a      	b.n	8007680 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800764a:	6938      	ldr	r0, [r7, #16]
 800764c:	f003 f942 	bl	800a8d4 <xTimerIsTimerActive>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d103      	bne.n	800765e <osTimerStop+0x42>
      stat = osErrorResource;
 8007656:	f06f 0302 	mvn.w	r3, #2
 800765a:	617b      	str	r3, [r7, #20]
 800765c:	e010      	b.n	8007680 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800765e:	2300      	movs	r3, #0
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	2300      	movs	r3, #0
 8007664:	2200      	movs	r2, #0
 8007666:	2103      	movs	r1, #3
 8007668:	6938      	ldr	r0, [r7, #16]
 800766a:	f002 fe2d 	bl	800a2c8 <xTimerGenericCommand>
 800766e:	4603      	mov	r3, r0
 8007670:	2b01      	cmp	r3, #1
 8007672:	d102      	bne.n	800767a <osTimerStop+0x5e>
        stat = osOK;
 8007674:	2300      	movs	r3, #0
 8007676:	617b      	str	r3, [r7, #20]
 8007678:	e002      	b.n	8007680 <osTimerStop+0x64>
      } else {
        stat = osError;
 800767a:	f04f 33ff 	mov.w	r3, #4294967295
 800767e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007680:	697b      	ldr	r3, [r7, #20]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3718      	adds	r7, #24
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800768a:	b580      	push	{r7, lr}
 800768c:	b086      	sub	sp, #24
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8007692:	2300      	movs	r3, #0
 8007694:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007696:	f3ef 8305 	mrs	r3, IPSR
 800769a:	60fb      	str	r3, [r7, #12]
  return(result);
 800769c:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d12d      	bne.n	80076fe <osEventFlagsNew+0x74>
    mem = -1;
 80076a2:	f04f 33ff 	mov.w	r3, #4294967295
 80076a6:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d015      	beq.n	80076da <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d006      	beq.n	80076c4 <osEventFlagsNew+0x3a>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	2b1f      	cmp	r3, #31
 80076bc:	d902      	bls.n	80076c4 <osEventFlagsNew+0x3a>
        mem = 1;
 80076be:	2301      	movs	r3, #1
 80076c0:	613b      	str	r3, [r7, #16]
 80076c2:	e00c      	b.n	80076de <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d108      	bne.n	80076de <osEventFlagsNew+0x54>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d104      	bne.n	80076de <osEventFlagsNew+0x54>
          mem = 0;
 80076d4:	2300      	movs	r3, #0
 80076d6:	613b      	str	r3, [r7, #16]
 80076d8:	e001      	b.n	80076de <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80076da:	2300      	movs	r3, #0
 80076dc:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d106      	bne.n	80076f2 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	4618      	mov	r0, r3
 80076ea:	f000 f9e7 	bl	8007abc <xEventGroupCreateStatic>
 80076ee:	6178      	str	r0, [r7, #20]
 80076f0:	e005      	b.n	80076fe <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d102      	bne.n	80076fe <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80076f8:	f000 fa17 	bl	8007b2a <xEventGroupCreate>
 80076fc:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80076fe:	697b      	ldr	r3, [r7, #20]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3718      	adds	r7, #24
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007708:	b580      	push	{r7, lr}
 800770a:	b088      	sub	sp, #32
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007710:	2300      	movs	r3, #0
 8007712:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007714:	f3ef 8305 	mrs	r3, IPSR
 8007718:	60bb      	str	r3, [r7, #8]
  return(result);
 800771a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800771c:	2b00      	cmp	r3, #0
 800771e:	d174      	bne.n	800780a <osMutexNew+0x102>
    if (attr != NULL) {
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d003      	beq.n	800772e <osMutexNew+0x26>
      type = attr->attr_bits;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	61bb      	str	r3, [r7, #24]
 800772c:	e001      	b.n	8007732 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800772e:	2300      	movs	r3, #0
 8007730:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	f003 0301 	and.w	r3, r3, #1
 8007738:	2b00      	cmp	r3, #0
 800773a:	d002      	beq.n	8007742 <osMutexNew+0x3a>
      rmtx = 1U;
 800773c:	2301      	movs	r3, #1
 800773e:	617b      	str	r3, [r7, #20]
 8007740:	e001      	b.n	8007746 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007742:	2300      	movs	r3, #0
 8007744:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	f003 0308 	and.w	r3, r3, #8
 800774c:	2b00      	cmp	r3, #0
 800774e:	d15c      	bne.n	800780a <osMutexNew+0x102>
      mem = -1;
 8007750:	f04f 33ff 	mov.w	r3, #4294967295
 8007754:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d015      	beq.n	8007788 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d006      	beq.n	8007772 <osMutexNew+0x6a>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	2b4f      	cmp	r3, #79	; 0x4f
 800776a:	d902      	bls.n	8007772 <osMutexNew+0x6a>
          mem = 1;
 800776c:	2301      	movs	r3, #1
 800776e:	613b      	str	r3, [r7, #16]
 8007770:	e00c      	b.n	800778c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d108      	bne.n	800778c <osMutexNew+0x84>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d104      	bne.n	800778c <osMutexNew+0x84>
            mem = 0;
 8007782:	2300      	movs	r3, #0
 8007784:	613b      	str	r3, [r7, #16]
 8007786:	e001      	b.n	800778c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007788:	2300      	movs	r3, #0
 800778a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d112      	bne.n	80077b8 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d007      	beq.n	80077a8 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	4619      	mov	r1, r3
 800779e:	2004      	movs	r0, #4
 80077a0:	f000 fc07 	bl	8007fb2 <xQueueCreateMutexStatic>
 80077a4:	61f8      	str	r0, [r7, #28]
 80077a6:	e016      	b.n	80077d6 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	4619      	mov	r1, r3
 80077ae:	2001      	movs	r0, #1
 80077b0:	f000 fbff 	bl	8007fb2 <xQueueCreateMutexStatic>
 80077b4:	61f8      	str	r0, [r7, #28]
 80077b6:	e00e      	b.n	80077d6 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10b      	bne.n	80077d6 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d004      	beq.n	80077ce <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80077c4:	2004      	movs	r0, #4
 80077c6:	f000 fbdc 	bl	8007f82 <xQueueCreateMutex>
 80077ca:	61f8      	str	r0, [r7, #28]
 80077cc:	e003      	b.n	80077d6 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80077ce:	2001      	movs	r0, #1
 80077d0:	f000 fbd7 	bl	8007f82 <xQueueCreateMutex>
 80077d4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00c      	beq.n	80077f6 <osMutexNew+0xee>
        if (attr != NULL) {
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <osMutexNew+0xe2>
          name = attr->name;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	60fb      	str	r3, [r7, #12]
 80077e8:	e001      	b.n	80077ee <osMutexNew+0xe6>
        } else {
          name = NULL;
 80077ea:	2300      	movs	r3, #0
 80077ec:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80077ee:	68f9      	ldr	r1, [r7, #12]
 80077f0:	69f8      	ldr	r0, [r7, #28]
 80077f2:	f001 fb17 	bl	8008e24 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d006      	beq.n	800780a <osMutexNew+0x102>
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d003      	beq.n	800780a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	f043 0301 	orr.w	r3, r3, #1
 8007808:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800780a:	69fb      	ldr	r3, [r7, #28]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3720      	adds	r7, #32
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007814:	b580      	push	{r7, lr}
 8007816:	b08a      	sub	sp, #40	; 0x28
 8007818:	af02      	add	r7, sp, #8
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007820:	2300      	movs	r3, #0
 8007822:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007824:	f3ef 8305 	mrs	r3, IPSR
 8007828:	613b      	str	r3, [r7, #16]
  return(result);
 800782a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800782c:	2b00      	cmp	r3, #0
 800782e:	d175      	bne.n	800791c <osSemaphoreNew+0x108>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d072      	beq.n	800791c <osSemaphoreNew+0x108>
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	429a      	cmp	r2, r3
 800783c:	d86e      	bhi.n	800791c <osSemaphoreNew+0x108>
    mem = -1;
 800783e:	f04f 33ff 	mov.w	r3, #4294967295
 8007842:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d015      	beq.n	8007876 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d006      	beq.n	8007860 <osSemaphoreNew+0x4c>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	2b4f      	cmp	r3, #79	; 0x4f
 8007858:	d902      	bls.n	8007860 <osSemaphoreNew+0x4c>
        mem = 1;
 800785a:	2301      	movs	r3, #1
 800785c:	61bb      	str	r3, [r7, #24]
 800785e:	e00c      	b.n	800787a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d108      	bne.n	800787a <osSemaphoreNew+0x66>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d104      	bne.n	800787a <osSemaphoreNew+0x66>
          mem = 0;
 8007870:	2300      	movs	r3, #0
 8007872:	61bb      	str	r3, [r7, #24]
 8007874:	e001      	b.n	800787a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007876:	2300      	movs	r3, #0
 8007878:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007880:	d04c      	beq.n	800791c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d128      	bne.n	80078da <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d10a      	bne.n	80078a4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	2203      	movs	r2, #3
 8007894:	9200      	str	r2, [sp, #0]
 8007896:	2200      	movs	r2, #0
 8007898:	2100      	movs	r1, #0
 800789a:	2001      	movs	r0, #1
 800789c:	f000 fa7c 	bl	8007d98 <xQueueGenericCreateStatic>
 80078a0:	61f8      	str	r0, [r7, #28]
 80078a2:	e005      	b.n	80078b0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80078a4:	2203      	movs	r2, #3
 80078a6:	2100      	movs	r1, #0
 80078a8:	2001      	movs	r0, #1
 80078aa:	f000 faed 	bl	8007e88 <xQueueGenericCreate>
 80078ae:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d022      	beq.n	80078fc <osSemaphoreNew+0xe8>
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d01f      	beq.n	80078fc <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80078bc:	2300      	movs	r3, #0
 80078be:	2200      	movs	r2, #0
 80078c0:	2100      	movs	r1, #0
 80078c2:	69f8      	ldr	r0, [r7, #28]
 80078c4:	f000 fbfa 	bl	80080bc <xQueueGenericSend>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d016      	beq.n	80078fc <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80078ce:	69f8      	ldr	r0, [r7, #28]
 80078d0:	f001 f954 	bl	8008b7c <vQueueDelete>
            hSemaphore = NULL;
 80078d4:	2300      	movs	r3, #0
 80078d6:	61fb      	str	r3, [r7, #28]
 80078d8:	e010      	b.n	80078fc <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d108      	bne.n	80078f2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	461a      	mov	r2, r3
 80078e6:	68b9      	ldr	r1, [r7, #8]
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f000 fb7d 	bl	8007fe8 <xQueueCreateCountingSemaphoreStatic>
 80078ee:	61f8      	str	r0, [r7, #28]
 80078f0:	e004      	b.n	80078fc <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80078f2:	68b9      	ldr	r1, [r7, #8]
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 fbae 	bl	8008056 <xQueueCreateCountingSemaphore>
 80078fa:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00c      	beq.n	800791c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d003      	beq.n	8007910 <osSemaphoreNew+0xfc>
          name = attr->name;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	617b      	str	r3, [r7, #20]
 800790e:	e001      	b.n	8007914 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007910:	2300      	movs	r3, #0
 8007912:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007914:	6979      	ldr	r1, [r7, #20]
 8007916:	69f8      	ldr	r0, [r7, #28]
 8007918:	f001 fa84 	bl	8008e24 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800791c:	69fb      	ldr	r3, [r7, #28]
}
 800791e:	4618      	mov	r0, r3
 8007920:	3720      	adds	r7, #32
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
	...

08007928 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007928:	b580      	push	{r7, lr}
 800792a:	b086      	sub	sp, #24
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007936:	2300      	movs	r3, #0
 8007938:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d103      	bne.n	8007948 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007940:	f06f 0303 	mvn.w	r3, #3
 8007944:	617b      	str	r3, [r7, #20]
 8007946:	e039      	b.n	80079bc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007948:	f3ef 8305 	mrs	r3, IPSR
 800794c:	60fb      	str	r3, [r7, #12]
  return(result);
 800794e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007950:	2b00      	cmp	r3, #0
 8007952:	d022      	beq.n	800799a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d003      	beq.n	8007962 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800795a:	f06f 0303 	mvn.w	r3, #3
 800795e:	617b      	str	r3, [r7, #20]
 8007960:	e02c      	b.n	80079bc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8007962:	2300      	movs	r3, #0
 8007964:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007966:	f107 0308 	add.w	r3, r7, #8
 800796a:	461a      	mov	r2, r3
 800796c:	2100      	movs	r1, #0
 800796e:	6938      	ldr	r0, [r7, #16]
 8007970:	f001 f866 	bl	8008a40 <xQueueReceiveFromISR>
 8007974:	4603      	mov	r3, r0
 8007976:	2b01      	cmp	r3, #1
 8007978:	d003      	beq.n	8007982 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800797a:	f06f 0302 	mvn.w	r3, #2
 800797e:	617b      	str	r3, [r7, #20]
 8007980:	e01c      	b.n	80079bc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d019      	beq.n	80079bc <osSemaphoreAcquire+0x94>
 8007988:	4b0f      	ldr	r3, [pc, #60]	; (80079c8 <osSemaphoreAcquire+0xa0>)
 800798a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800798e:	601a      	str	r2, [r3, #0]
 8007990:	f3bf 8f4f 	dsb	sy
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	e010      	b.n	80079bc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6938      	ldr	r0, [r7, #16]
 800799e:	f000 ff13 	bl	80087c8 <xQueueSemaphoreTake>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d009      	beq.n	80079bc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d003      	beq.n	80079b6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80079ae:	f06f 0301 	mvn.w	r3, #1
 80079b2:	617b      	str	r3, [r7, #20]
 80079b4:	e002      	b.n	80079bc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80079b6:	f06f 0302 	mvn.w	r3, #2
 80079ba:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80079bc:	697b      	ldr	r3, [r7, #20]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3718      	adds	r7, #24
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	e000ed04 	.word	0xe000ed04

080079cc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b086      	sub	sp, #24
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80079d8:	2300      	movs	r3, #0
 80079da:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d103      	bne.n	80079ea <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80079e2:	f06f 0303 	mvn.w	r3, #3
 80079e6:	617b      	str	r3, [r7, #20]
 80079e8:	e02c      	b.n	8007a44 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079ea:	f3ef 8305 	mrs	r3, IPSR
 80079ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80079f0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d01a      	beq.n	8007a2c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80079f6:	2300      	movs	r3, #0
 80079f8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80079fa:	f107 0308 	add.w	r3, r7, #8
 80079fe:	4619      	mov	r1, r3
 8007a00:	6938      	ldr	r0, [r7, #16]
 8007a02:	f000 fd30 	bl	8008466 <xQueueGiveFromISR>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d003      	beq.n	8007a14 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8007a0c:	f06f 0302 	mvn.w	r3, #2
 8007a10:	617b      	str	r3, [r7, #20]
 8007a12:	e017      	b.n	8007a44 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d014      	beq.n	8007a44 <osSemaphoreRelease+0x78>
 8007a1a:	4b0d      	ldr	r3, [pc, #52]	; (8007a50 <osSemaphoreRelease+0x84>)
 8007a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a20:	601a      	str	r2, [r3, #0]
 8007a22:	f3bf 8f4f 	dsb	sy
 8007a26:	f3bf 8f6f 	isb	sy
 8007a2a:	e00b      	b.n	8007a44 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	2200      	movs	r2, #0
 8007a30:	2100      	movs	r1, #0
 8007a32:	6938      	ldr	r0, [r7, #16]
 8007a34:	f000 fb42 	bl	80080bc <xQueueGenericSend>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d002      	beq.n	8007a44 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8007a3e:	f06f 0302 	mvn.w	r3, #2
 8007a42:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007a44:	697b      	ldr	r3, [r7, #20]
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	e000ed04 	.word	0xe000ed04

08007a54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	4a07      	ldr	r2, [pc, #28]	; (8007a80 <vApplicationGetIdleTaskMemory+0x2c>)
 8007a64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	4a06      	ldr	r2, [pc, #24]	; (8007a84 <vApplicationGetIdleTaskMemory+0x30>)
 8007a6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2280      	movs	r2, #128	; 0x80
 8007a70:	601a      	str	r2, [r3, #0]
}
 8007a72:	bf00      	nop
 8007a74:	3714      	adds	r7, #20
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	20027a9c 	.word	0x20027a9c
 8007a84:	20027b44 	.word	0x20027b44

08007a88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	4a07      	ldr	r2, [pc, #28]	; (8007ab4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007a98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	4a06      	ldr	r2, [pc, #24]	; (8007ab8 <vApplicationGetTimerTaskMemory+0x30>)
 8007a9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007aa6:	601a      	str	r2, [r3, #0]
}
 8007aa8:	bf00      	nop
 8007aaa:	3714      	adds	r7, #20
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	20027d44 	.word	0x20027d44
 8007ab8:	20027dec 	.word	0x20027dec

08007abc <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b086      	sub	sp, #24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10a      	bne.n	8007ae0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ace:	f383 8811 	msr	BASEPRI, r3
 8007ad2:	f3bf 8f6f 	isb	sy
 8007ad6:	f3bf 8f4f 	dsb	sy
 8007ada:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007adc:	bf00      	nop
 8007ade:	e7fe      	b.n	8007ade <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8007ae0:	2320      	movs	r3, #32
 8007ae2:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	2b20      	cmp	r3, #32
 8007ae8:	d00a      	beq.n	8007b00 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8007aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aee:	f383 8811 	msr	BASEPRI, r3
 8007af2:	f3bf 8f6f 	isb	sy
 8007af6:	f3bf 8f4f 	dsb	sy
 8007afa:	60fb      	str	r3, [r7, #12]
}
 8007afc:	bf00      	nop
 8007afe:	e7fe      	b.n	8007afe <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00a      	beq.n	8007b20 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	3304      	adds	r3, #4
 8007b14:	4618      	mov	r0, r3
 8007b16:	f000 f822 	bl	8007b5e <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8007b20:	697b      	ldr	r3, [r7, #20]
	}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3718      	adds	r7, #24
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b082      	sub	sp, #8
 8007b2e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8007b30:	2020      	movs	r0, #32
 8007b32:	f003 f969 	bl	800ae08 <pvPortMalloc>
 8007b36:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00a      	beq.n	8007b54 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	3304      	adds	r3, #4
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f000 f808 	bl	8007b5e <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8007b54:	687b      	ldr	r3, [r7, #4]
	}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b5e:	b480      	push	{r7}
 8007b60:	b083      	sub	sp, #12
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f103 0208 	add.w	r2, r3, #8
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f04f 32ff 	mov.w	r2, #4294967295
 8007b76:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f103 0208 	add.w	r2, r3, #8
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f103 0208 	add.w	r2, r3, #8
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b92:	bf00      	nop
 8007b94:	370c      	adds	r7, #12
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr

08007b9e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b083      	sub	sp, #12
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	689a      	ldr	r2, [r3, #8]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	683a      	ldr	r2, [r7, #0]
 8007bdc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	683a      	ldr	r2, [r7, #0]
 8007be2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	1c5a      	adds	r2, r3, #1
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	601a      	str	r2, [r3, #0]
}
 8007bf4:	bf00      	nop
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c16:	d103      	bne.n	8007c20 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	60fb      	str	r3, [r7, #12]
 8007c1e:	e00c      	b.n	8007c3a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	3308      	adds	r3, #8
 8007c24:	60fb      	str	r3, [r7, #12]
 8007c26:	e002      	b.n	8007c2e <vListInsert+0x2e>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	60fb      	str	r3, [r7, #12]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d2f6      	bcs.n	8007c28 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	685a      	ldr	r2, [r3, #4]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	683a      	ldr	r2, [r7, #0]
 8007c48:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	1c5a      	adds	r2, r3, #1
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	601a      	str	r2, [r3, #0]
}
 8007c66:	bf00      	nop
 8007c68:	3714      	adds	r7, #20
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c72:	b480      	push	{r7}
 8007c74:	b085      	sub	sp, #20
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	6892      	ldr	r2, [r2, #8]
 8007c88:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	6852      	ldr	r2, [r2, #4]
 8007c92:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d103      	bne.n	8007ca6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	689a      	ldr	r2, [r3, #8]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	1e5a      	subs	r2, r3, #1
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3714      	adds	r7, #20
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
	...

08007cc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10a      	bne.n	8007cf2 <xQueueGenericReset+0x2a>
	__asm volatile
 8007cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce0:	f383 8811 	msr	BASEPRI, r3
 8007ce4:	f3bf 8f6f 	isb	sy
 8007ce8:	f3bf 8f4f 	dsb	sy
 8007cec:	60bb      	str	r3, [r7, #8]
}
 8007cee:	bf00      	nop
 8007cf0:	e7fe      	b.n	8007cf0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007cf2:	f002 ff67 	bl	800abc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cfe:	68f9      	ldr	r1, [r7, #12]
 8007d00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d02:	fb01 f303 	mul.w	r3, r1, r3
 8007d06:	441a      	add	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d22:	3b01      	subs	r3, #1
 8007d24:	68f9      	ldr	r1, [r7, #12]
 8007d26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d28:	fb01 f303 	mul.w	r3, r1, r3
 8007d2c:	441a      	add	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	22ff      	movs	r2, #255	; 0xff
 8007d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	22ff      	movs	r2, #255	; 0xff
 8007d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d114      	bne.n	8007d72 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d01a      	beq.n	8007d86 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	3310      	adds	r3, #16
 8007d54:	4618      	mov	r0, r3
 8007d56:	f001 fddf 	bl	8009918 <xTaskRemoveFromEventList>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d012      	beq.n	8007d86 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d60:	4b0c      	ldr	r3, [pc, #48]	; (8007d94 <xQueueGenericReset+0xcc>)
 8007d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d66:	601a      	str	r2, [r3, #0]
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	e009      	b.n	8007d86 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	3310      	adds	r3, #16
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7ff fef1 	bl	8007b5e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	3324      	adds	r3, #36	; 0x24
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7ff feec 	bl	8007b5e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d86:	f002 ff4d 	bl	800ac24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d8a:	2301      	movs	r3, #1
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	e000ed04 	.word	0xe000ed04

08007d98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b08e      	sub	sp, #56	; 0x38
 8007d9c:	af02      	add	r7, sp, #8
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
 8007da4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10a      	bne.n	8007dc2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db0:	f383 8811 	msr	BASEPRI, r3
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007dbe:	bf00      	nop
 8007dc0:	e7fe      	b.n	8007dc0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10a      	bne.n	8007dde <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dcc:	f383 8811 	msr	BASEPRI, r3
 8007dd0:	f3bf 8f6f 	isb	sy
 8007dd4:	f3bf 8f4f 	dsb	sy
 8007dd8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007dda:	bf00      	nop
 8007ddc:	e7fe      	b.n	8007ddc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d002      	beq.n	8007dea <xQueueGenericCreateStatic+0x52>
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d001      	beq.n	8007dee <xQueueGenericCreateStatic+0x56>
 8007dea:	2301      	movs	r3, #1
 8007dec:	e000      	b.n	8007df0 <xQueueGenericCreateStatic+0x58>
 8007dee:	2300      	movs	r3, #0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10a      	bne.n	8007e0a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df8:	f383 8811 	msr	BASEPRI, r3
 8007dfc:	f3bf 8f6f 	isb	sy
 8007e00:	f3bf 8f4f 	dsb	sy
 8007e04:	623b      	str	r3, [r7, #32]
}
 8007e06:	bf00      	nop
 8007e08:	e7fe      	b.n	8007e08 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d102      	bne.n	8007e16 <xQueueGenericCreateStatic+0x7e>
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d101      	bne.n	8007e1a <xQueueGenericCreateStatic+0x82>
 8007e16:	2301      	movs	r3, #1
 8007e18:	e000      	b.n	8007e1c <xQueueGenericCreateStatic+0x84>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10a      	bne.n	8007e36 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	61fb      	str	r3, [r7, #28]
}
 8007e32:	bf00      	nop
 8007e34:	e7fe      	b.n	8007e34 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e36:	2350      	movs	r3, #80	; 0x50
 8007e38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	2b50      	cmp	r3, #80	; 0x50
 8007e3e:	d00a      	beq.n	8007e56 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	61bb      	str	r3, [r7, #24]
}
 8007e52:	bf00      	nop
 8007e54:	e7fe      	b.n	8007e54 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e56:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00d      	beq.n	8007e7e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e70:	9300      	str	r3, [sp, #0]
 8007e72:	4613      	mov	r3, r2
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	68b9      	ldr	r1, [r7, #8]
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f000 f83f 	bl	8007efc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3730      	adds	r7, #48	; 0x30
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b08a      	sub	sp, #40	; 0x28
 8007e8c:	af02      	add	r7, sp, #8
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	4613      	mov	r3, r2
 8007e94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d10a      	bne.n	8007eb2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea0:	f383 8811 	msr	BASEPRI, r3
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	613b      	str	r3, [r7, #16]
}
 8007eae:	bf00      	nop
 8007eb0:	e7fe      	b.n	8007eb0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	fb02 f303 	mul.w	r3, r2, r3
 8007eba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	3350      	adds	r3, #80	; 0x50
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f002 ffa1 	bl	800ae08 <pvPortMalloc>
 8007ec6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d011      	beq.n	8007ef2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	3350      	adds	r3, #80	; 0x50
 8007ed6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ee0:	79fa      	ldrb	r2, [r7, #7]
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	697a      	ldr	r2, [r7, #20]
 8007eea:	68b9      	ldr	r1, [r7, #8]
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f000 f805 	bl	8007efc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007ef2:	69bb      	ldr	r3, [r7, #24]
	}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3720      	adds	r7, #32
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
 8007f08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d103      	bne.n	8007f18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	69ba      	ldr	r2, [r7, #24]
 8007f14:	601a      	str	r2, [r3, #0]
 8007f16:	e002      	b.n	8007f1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007f2a:	2101      	movs	r1, #1
 8007f2c:	69b8      	ldr	r0, [r7, #24]
 8007f2e:	f7ff fecb 	bl	8007cc8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	78fa      	ldrb	r2, [r7, #3]
 8007f36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8007f3a:	78fb      	ldrb	r3, [r7, #3]
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	68f9      	ldr	r1, [r7, #12]
 8007f40:	2073      	movs	r0, #115	; 0x73
 8007f42:	f003 fe25 	bl	800bb90 <SEGGER_SYSVIEW_RecordU32x3>
}
 8007f46:	bf00      	nop
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b082      	sub	sp, #8
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00e      	beq.n	8007f7a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007f6e:	2300      	movs	r3, #0
 8007f70:	2200      	movs	r2, #0
 8007f72:	2100      	movs	r1, #0
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 f8a1 	bl	80080bc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007f7a:	bf00      	nop
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b086      	sub	sp, #24
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	4603      	mov	r3, r0
 8007f8a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	617b      	str	r3, [r7, #20]
 8007f90:	2300      	movs	r3, #0
 8007f92:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007f94:	79fb      	ldrb	r3, [r7, #7]
 8007f96:	461a      	mov	r2, r3
 8007f98:	6939      	ldr	r1, [r7, #16]
 8007f9a:	6978      	ldr	r0, [r7, #20]
 8007f9c:	f7ff ff74 	bl	8007e88 <xQueueGenericCreate>
 8007fa0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f7ff ffd3 	bl	8007f4e <prvInitialiseMutex>

		return xNewQueue;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
	}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3718      	adds	r7, #24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b088      	sub	sp, #32
 8007fb6:	af02      	add	r7, sp, #8
 8007fb8:	4603      	mov	r3, r0
 8007fba:	6039      	str	r1, [r7, #0]
 8007fbc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	617b      	str	r3, [r7, #20]
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007fc6:	79fb      	ldrb	r3, [r7, #7]
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	6939      	ldr	r1, [r7, #16]
 8007fd0:	6978      	ldr	r0, [r7, #20]
 8007fd2:	f7ff fee1 	bl	8007d98 <xQueueGenericCreateStatic>
 8007fd6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f7ff ffb8 	bl	8007f4e <prvInitialiseMutex>

		return xNewQueue;
 8007fde:	68fb      	ldr	r3, [r7, #12]
	}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3718      	adds	r7, #24
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b08a      	sub	sp, #40	; 0x28
 8007fec:	af02      	add	r7, sp, #8
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10a      	bne.n	8008010 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffe:	f383 8811 	msr	BASEPRI, r3
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	61bb      	str	r3, [r7, #24]
}
 800800c:	bf00      	nop
 800800e:	e7fe      	b.n	800800e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	429a      	cmp	r2, r3
 8008016:	d90a      	bls.n	800802e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801c:	f383 8811 	msr	BASEPRI, r3
 8008020:	f3bf 8f6f 	isb	sy
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	617b      	str	r3, [r7, #20]
}
 800802a:	bf00      	nop
 800802c:	e7fe      	b.n	800802c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800802e:	2302      	movs	r3, #2
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	2100      	movs	r1, #0
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f7ff fead 	bl	8007d98 <xQueueGenericCreateStatic>
 800803e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d002      	beq.n	800804c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800804c:	69fb      	ldr	r3, [r7, #28]
	}
 800804e:	4618      	mov	r0, r3
 8008050:	3720      	adds	r7, #32
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008056:	b580      	push	{r7, lr}
 8008058:	b086      	sub	sp, #24
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d10a      	bne.n	800807c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806a:	f383 8811 	msr	BASEPRI, r3
 800806e:	f3bf 8f6f 	isb	sy
 8008072:	f3bf 8f4f 	dsb	sy
 8008076:	613b      	str	r3, [r7, #16]
}
 8008078:	bf00      	nop
 800807a:	e7fe      	b.n	800807a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800807c:	683a      	ldr	r2, [r7, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	429a      	cmp	r2, r3
 8008082:	d90a      	bls.n	800809a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	60fb      	str	r3, [r7, #12]
}
 8008096:	bf00      	nop
 8008098:	e7fe      	b.n	8008098 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800809a:	2202      	movs	r2, #2
 800809c:	2100      	movs	r1, #0
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7ff fef2 	bl	8007e88 <xQueueGenericCreate>
 80080a4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d002      	beq.n	80080b2 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80080b2:	697b      	ldr	r3, [r7, #20]
	}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3718      	adds	r7, #24
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b090      	sub	sp, #64	; 0x40
 80080c0:	af02      	add	r7, sp, #8
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	607a      	str	r2, [r7, #4]
 80080c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80080ca:	2300      	movs	r3, #0
 80080cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80080d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10a      	bne.n	80080ee <xQueueGenericSend+0x32>
	__asm volatile
 80080d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080dc:	f383 8811 	msr	BASEPRI, r3
 80080e0:	f3bf 8f6f 	isb	sy
 80080e4:	f3bf 8f4f 	dsb	sy
 80080e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80080ea:	bf00      	nop
 80080ec:	e7fe      	b.n	80080ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d103      	bne.n	80080fc <xQueueGenericSend+0x40>
 80080f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <xQueueGenericSend+0x44>
 80080fc:	2301      	movs	r3, #1
 80080fe:	e000      	b.n	8008102 <xQueueGenericSend+0x46>
 8008100:	2300      	movs	r3, #0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10a      	bne.n	800811c <xQueueGenericSend+0x60>
	__asm volatile
 8008106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810a:	f383 8811 	msr	BASEPRI, r3
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008118:	bf00      	nop
 800811a:	e7fe      	b.n	800811a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	2b02      	cmp	r3, #2
 8008120:	d103      	bne.n	800812a <xQueueGenericSend+0x6e>
 8008122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008126:	2b01      	cmp	r3, #1
 8008128:	d101      	bne.n	800812e <xQueueGenericSend+0x72>
 800812a:	2301      	movs	r3, #1
 800812c:	e000      	b.n	8008130 <xQueueGenericSend+0x74>
 800812e:	2300      	movs	r3, #0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10a      	bne.n	800814a <xQueueGenericSend+0x8e>
	__asm volatile
 8008134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	623b      	str	r3, [r7, #32]
}
 8008146:	bf00      	nop
 8008148:	e7fe      	b.n	8008148 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800814a:	f001 fde3 	bl	8009d14 <xTaskGetSchedulerState>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d102      	bne.n	800815a <xQueueGenericSend+0x9e>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d101      	bne.n	800815e <xQueueGenericSend+0xa2>
 800815a:	2301      	movs	r3, #1
 800815c:	e000      	b.n	8008160 <xQueueGenericSend+0xa4>
 800815e:	2300      	movs	r3, #0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10a      	bne.n	800817a <xQueueGenericSend+0xbe>
	__asm volatile
 8008164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008168:	f383 8811 	msr	BASEPRI, r3
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	61fb      	str	r3, [r7, #28]
}
 8008176:	bf00      	nop
 8008178:	e7fe      	b.n	8008178 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800817a:	f002 fd23 	bl	800abc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800817e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008186:	429a      	cmp	r2, r3
 8008188:	d302      	bcc.n	8008190 <xQueueGenericSend+0xd4>
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	2b02      	cmp	r3, #2
 800818e:	d136      	bne.n	80081fe <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 8008190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008192:	4618      	mov	r0, r3
 8008194:	f004 f9ae 	bl	800c4f4 <SEGGER_SYSVIEW_ShrinkId>
 8008198:	68ba      	ldr	r2, [r7, #8]
 800819a:	6879      	ldr	r1, [r7, #4]
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	460b      	mov	r3, r1
 80081a2:	4601      	mov	r1, r0
 80081a4:	205a      	movs	r0, #90	; 0x5a
 80081a6:	f003 fd69 	bl	800bc7c <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	68b9      	ldr	r1, [r7, #8]
 80081ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081b0:	f000 fd28 	bl	8008c04 <prvCopyDataToQueue>
 80081b4:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d010      	beq.n	80081e0 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c0:	3324      	adds	r3, #36	; 0x24
 80081c2:	4618      	mov	r0, r3
 80081c4:	f001 fba8 	bl	8009918 <xTaskRemoveFromEventList>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d013      	beq.n	80081f6 <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80081ce:	4b4d      	ldr	r3, [pc, #308]	; (8008304 <xQueueGenericSend+0x248>)
 80081d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081d4:	601a      	str	r2, [r3, #0]
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	f3bf 8f6f 	isb	sy
 80081de:	e00a      	b.n	80081f6 <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80081e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d007      	beq.n	80081f6 <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80081e6:	4b47      	ldr	r3, [pc, #284]	; (8008304 <xQueueGenericSend+0x248>)
 80081e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ec:	601a      	str	r2, [r3, #0]
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80081f6:	f002 fd15 	bl	800ac24 <vPortExitCritical>
				return pdPASS;
 80081fa:	2301      	movs	r3, #1
 80081fc:	e07d      	b.n	80082fa <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d110      	bne.n	8008226 <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008204:	f002 fd0e 	bl	800ac24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8008208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820a:	4618      	mov	r0, r3
 800820c:	f004 f972 	bl	800c4f4 <SEGGER_SYSVIEW_ShrinkId>
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	6879      	ldr	r1, [r7, #4]
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	460b      	mov	r3, r1
 800821a:	4601      	mov	r1, r0
 800821c:	205a      	movs	r0, #90	; 0x5a
 800821e:	f003 fd2d 	bl	800bc7c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8008222:	2300      	movs	r3, #0
 8008224:	e069      	b.n	80082fa <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008228:	2b00      	cmp	r3, #0
 800822a:	d106      	bne.n	800823a <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800822c:	f107 0314 	add.w	r3, r7, #20
 8008230:	4618      	mov	r0, r3
 8008232:	f001 fbd9 	bl	80099e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008236:	2301      	movs	r3, #1
 8008238:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800823a:	f002 fcf3 	bl	800ac24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800823e:	f001 f911 	bl	8009464 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008242:	f002 fcbf 	bl	800abc4 <vPortEnterCritical>
 8008246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008248:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800824c:	b25b      	sxtb	r3, r3
 800824e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008252:	d103      	bne.n	800825c <xQueueGenericSend+0x1a0>
 8008254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008256:	2200      	movs	r2, #0
 8008258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800825c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008262:	b25b      	sxtb	r3, r3
 8008264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008268:	d103      	bne.n	8008272 <xQueueGenericSend+0x1b6>
 800826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826c:	2200      	movs	r2, #0
 800826e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008272:	f002 fcd7 	bl	800ac24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008276:	1d3a      	adds	r2, r7, #4
 8008278:	f107 0314 	add.w	r3, r7, #20
 800827c:	4611      	mov	r1, r2
 800827e:	4618      	mov	r0, r3
 8008280:	f001 fbc8 	bl	8009a14 <xTaskCheckForTimeOut>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d124      	bne.n	80082d4 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800828a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800828c:	f000 fdb2 	bl	8008df4 <prvIsQueueFull>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d018      	beq.n	80082c8 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008298:	3310      	adds	r3, #16
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	4611      	mov	r1, r2
 800829e:	4618      	mov	r0, r3
 80082a0:	f001 fae8 	bl	8009874 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80082a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082a6:	f000 fd3d 	bl	8008d24 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80082aa:	f001 f8e9 	bl	8009480 <xTaskResumeAll>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f47f af62 	bne.w	800817a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80082b6:	4b13      	ldr	r3, [pc, #76]	; (8008304 <xQueueGenericSend+0x248>)
 80082b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082bc:	601a      	str	r2, [r3, #0]
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	e758      	b.n	800817a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80082c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082ca:	f000 fd2b 	bl	8008d24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082ce:	f001 f8d7 	bl	8009480 <xTaskResumeAll>
 80082d2:	e752      	b.n	800817a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80082d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082d6:	f000 fd25 	bl	8008d24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082da:	f001 f8d1 	bl	8009480 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 80082de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e0:	4618      	mov	r0, r3
 80082e2:	f004 f907 	bl	800c4f4 <SEGGER_SYSVIEW_ShrinkId>
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	6879      	ldr	r1, [r7, #4]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	460b      	mov	r3, r1
 80082f0:	4601      	mov	r1, r0
 80082f2:	205a      	movs	r0, #90	; 0x5a
 80082f4:	f003 fcc2 	bl	800bc7c <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 80082f8:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3738      	adds	r7, #56	; 0x38
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	e000ed04 	.word	0xe000ed04

08008308 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b090      	sub	sp, #64	; 0x40
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	607a      	str	r2, [r7, #4]
 8008314:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800831a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10a      	bne.n	8008336 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008332:	bf00      	nop
 8008334:	e7fe      	b.n	8008334 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d103      	bne.n	8008344 <xQueueGenericSendFromISR+0x3c>
 800833c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008340:	2b00      	cmp	r3, #0
 8008342:	d101      	bne.n	8008348 <xQueueGenericSendFromISR+0x40>
 8008344:	2301      	movs	r3, #1
 8008346:	e000      	b.n	800834a <xQueueGenericSendFromISR+0x42>
 8008348:	2300      	movs	r3, #0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d10a      	bne.n	8008364 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800834e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008352:	f383 8811 	msr	BASEPRI, r3
 8008356:	f3bf 8f6f 	isb	sy
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008360:	bf00      	nop
 8008362:	e7fe      	b.n	8008362 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	2b02      	cmp	r3, #2
 8008368:	d103      	bne.n	8008372 <xQueueGenericSendFromISR+0x6a>
 800836a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800836e:	2b01      	cmp	r3, #1
 8008370:	d101      	bne.n	8008376 <xQueueGenericSendFromISR+0x6e>
 8008372:	2301      	movs	r3, #1
 8008374:	e000      	b.n	8008378 <xQueueGenericSendFromISR+0x70>
 8008376:	2300      	movs	r3, #0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d10a      	bne.n	8008392 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800837c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008380:	f383 8811 	msr	BASEPRI, r3
 8008384:	f3bf 8f6f 	isb	sy
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	623b      	str	r3, [r7, #32]
}
 800838e:	bf00      	nop
 8008390:	e7fe      	b.n	8008390 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008392:	f002 fcf9 	bl	800ad88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008396:	f3ef 8211 	mrs	r2, BASEPRI
 800839a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839e:	f383 8811 	msr	BASEPRI, r3
 80083a2:	f3bf 8f6f 	isb	sy
 80083a6:	f3bf 8f4f 	dsb	sy
 80083aa:	61fa      	str	r2, [r7, #28]
 80083ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80083ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80083b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d302      	bcc.n	80083c4 <xQueueGenericSendFromISR+0xbc>
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	d139      	bne.n	8008438 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80083c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d2:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80083d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d6:	4618      	mov	r0, r3
 80083d8:	f004 f88c 	bl	800c4f4 <SEGGER_SYSVIEW_ShrinkId>
 80083dc:	4601      	mov	r1, r0
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	461a      	mov	r2, r3
 80083e2:	2060      	movs	r0, #96	; 0x60
 80083e4:	f003 fb7a 	bl	800badc <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083e8:	683a      	ldr	r2, [r7, #0]
 80083ea:	68b9      	ldr	r1, [r7, #8]
 80083ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80083ee:	f000 fc09 	bl	8008c04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80083f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80083f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fa:	d112      	bne.n	8008422 <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008400:	2b00      	cmp	r3, #0
 8008402:	d016      	beq.n	8008432 <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008406:	3324      	adds	r3, #36	; 0x24
 8008408:	4618      	mov	r0, r3
 800840a:	f001 fa85 	bl	8009918 <xTaskRemoveFromEventList>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00e      	beq.n	8008432 <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00b      	beq.n	8008432 <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2201      	movs	r2, #1
 800841e:	601a      	str	r2, [r3, #0]
 8008420:	e007      	b.n	8008432 <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008422:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008426:	3301      	adds	r3, #1
 8008428:	b2db      	uxtb	r3, r3
 800842a:	b25a      	sxtb	r2, r3
 800842c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008432:	2301      	movs	r3, #1
 8008434:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008436:	e00b      	b.n	8008450 <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8008438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843a:	4618      	mov	r0, r3
 800843c:	f004 f85a 	bl	800c4f4 <SEGGER_SYSVIEW_ShrinkId>
 8008440:	4601      	mov	r1, r0
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	461a      	mov	r2, r3
 8008446:	2060      	movs	r0, #96	; 0x60
 8008448:	f003 fb48 	bl	800badc <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 800844c:	2300      	movs	r3, #0
 800844e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008452:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800845a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800845c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800845e:	4618      	mov	r0, r3
 8008460:	3740      	adds	r7, #64	; 0x40
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b08e      	sub	sp, #56	; 0x38
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
 800846e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10a      	bne.n	8008490 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800847a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	623b      	str	r3, [r7, #32]
}
 800848c:	bf00      	nop
 800848e:	e7fe      	b.n	800848e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00a      	beq.n	80084ae <xQueueGiveFromISR+0x48>
	__asm volatile
 8008498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849c:	f383 8811 	msr	BASEPRI, r3
 80084a0:	f3bf 8f6f 	isb	sy
 80084a4:	f3bf 8f4f 	dsb	sy
 80084a8:	61fb      	str	r3, [r7, #28]
}
 80084aa:	bf00      	nop
 80084ac:	e7fe      	b.n	80084ac <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80084ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d103      	bne.n	80084be <xQueueGiveFromISR+0x58>
 80084b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d101      	bne.n	80084c2 <xQueueGiveFromISR+0x5c>
 80084be:	2301      	movs	r3, #1
 80084c0:	e000      	b.n	80084c4 <xQueueGiveFromISR+0x5e>
 80084c2:	2300      	movs	r3, #0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10a      	bne.n	80084de <xQueueGiveFromISR+0x78>
	__asm volatile
 80084c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084cc:	f383 8811 	msr	BASEPRI, r3
 80084d0:	f3bf 8f6f 	isb	sy
 80084d4:	f3bf 8f4f 	dsb	sy
 80084d8:	61bb      	str	r3, [r7, #24]
}
 80084da:	bf00      	nop
 80084dc:	e7fe      	b.n	80084dc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80084de:	f002 fc53 	bl	800ad88 <vPortValidateInterruptPriority>
	__asm volatile
 80084e2:	f3ef 8211 	mrs	r2, BASEPRI
 80084e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	617a      	str	r2, [r7, #20]
 80084f8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80084fa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80084fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008502:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800850a:	429a      	cmp	r2, r3
 800850c:	d235      	bcs.n	800857a <xQueueGiveFromISR+0x114>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800850e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008510:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008514:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8008518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851a:	4618      	mov	r0, r3
 800851c:	f003 ffea 	bl	800c4f4 <SEGGER_SYSVIEW_ShrinkId>
 8008520:	4601      	mov	r1, r0
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	461a      	mov	r2, r3
 8008526:	2060      	movs	r0, #96	; 0x60
 8008528:	f003 fad8 	bl	800badc <SEGGER_SYSVIEW_RecordU32x2>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800852c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852e:	1c5a      	adds	r2, r3, #1
 8008530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008532:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008534:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800853c:	d112      	bne.n	8008564 <xQueueGiveFromISR+0xfe>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800853e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008542:	2b00      	cmp	r3, #0
 8008544:	d016      	beq.n	8008574 <xQueueGiveFromISR+0x10e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008548:	3324      	adds	r3, #36	; 0x24
 800854a:	4618      	mov	r0, r3
 800854c:	f001 f9e4 	bl	8009918 <xTaskRemoveFromEventList>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00e      	beq.n	8008574 <xQueueGiveFromISR+0x10e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00b      	beq.n	8008574 <xQueueGiveFromISR+0x10e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2201      	movs	r2, #1
 8008560:	601a      	str	r2, [r3, #0]
 8008562:	e007      	b.n	8008574 <xQueueGiveFromISR+0x10e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008568:	3301      	adds	r3, #1
 800856a:	b2db      	uxtb	r3, r3
 800856c:	b25a      	sxtb	r2, r3
 800856e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008574:	2301      	movs	r3, #1
 8008576:	637b      	str	r3, [r7, #52]	; 0x34
 8008578:	e00b      	b.n	8008592 <xQueueGiveFromISR+0x12c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800857a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857c:	4618      	mov	r0, r3
 800857e:	f003 ffb9 	bl	800c4f4 <SEGGER_SYSVIEW_ShrinkId>
 8008582:	4601      	mov	r1, r0
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	461a      	mov	r2, r3
 8008588:	2060      	movs	r0, #96	; 0x60
 800858a:	f003 faa7 	bl	800badc <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 800858e:	2300      	movs	r3, #0
 8008590:	637b      	str	r3, [r7, #52]	; 0x34
 8008592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008594:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f383 8811 	msr	BASEPRI, r3
}
 800859c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800859e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3738      	adds	r7, #56	; 0x38
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80085a8:	b590      	push	{r4, r7, lr}
 80085aa:	b08f      	sub	sp, #60	; 0x3c
 80085ac:	af02      	add	r7, sp, #8
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80085b4:	2300      	movs	r3, #0
 80085b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80085bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d10a      	bne.n	80085d8 <xQueueReceive+0x30>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c6:	f383 8811 	msr	BASEPRI, r3
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	623b      	str	r3, [r7, #32]
}
 80085d4:	bf00      	nop
 80085d6:	e7fe      	b.n	80085d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d103      	bne.n	80085e6 <xQueueReceive+0x3e>
 80085de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d101      	bne.n	80085ea <xQueueReceive+0x42>
 80085e6:	2301      	movs	r3, #1
 80085e8:	e000      	b.n	80085ec <xQueueReceive+0x44>
 80085ea:	2300      	movs	r3, #0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d10a      	bne.n	8008606 <xQueueReceive+0x5e>
	__asm volatile
 80085f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f4:	f383 8811 	msr	BASEPRI, r3
 80085f8:	f3bf 8f6f 	isb	sy
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	61fb      	str	r3, [r7, #28]
}
 8008602:	bf00      	nop
 8008604:	e7fe      	b.n	8008604 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008606:	f001 fb85 	bl	8009d14 <xTaskGetSchedulerState>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d102      	bne.n	8008616 <xQueueReceive+0x6e>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d101      	bne.n	800861a <xQueueReceive+0x72>
 8008616:	2301      	movs	r3, #1
 8008618:	e000      	b.n	800861c <xQueueReceive+0x74>
 800861a:	2300      	movs	r3, #0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d10a      	bne.n	8008636 <xQueueReceive+0x8e>
	__asm volatile
 8008620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008624:	f383 8811 	msr	BASEPRI, r3
 8008628:	f3bf 8f6f 	isb	sy
 800862c:	f3bf 8f4f 	dsb	sy
 8008630:	61bb      	str	r3, [r7, #24]
}
 8008632:	bf00      	nop
 8008634:	e7fe      	b.n	8008634 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008636:	f002 fac5 	bl	800abc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800863a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800863e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008642:	2b00      	cmp	r3, #0
 8008644:	d02f      	beq.n	80086a6 <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008646:	68b9      	ldr	r1, [r7, #8]
 8008648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800864a:	f000 fb45 	bl	8008cd8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 800864e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008650:	4618      	mov	r0, r3
 8008652:	f003 ff4f 	bl	800c4f4 <SEGGER_SYSVIEW_ShrinkId>
 8008656:	4604      	mov	r4, r0
 8008658:	2000      	movs	r0, #0
 800865a:	f003 ff4b 	bl	800c4f4 <SEGGER_SYSVIEW_ShrinkId>
 800865e:	4602      	mov	r2, r0
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2101      	movs	r1, #1
 8008664:	9100      	str	r1, [sp, #0]
 8008666:	4621      	mov	r1, r4
 8008668:	205c      	movs	r0, #92	; 0x5c
 800866a:	f003 fb07 	bl	800bc7c <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800866e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008670:	1e5a      	subs	r2, r3, #1
 8008672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008674:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00f      	beq.n	800869e <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800867e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008680:	3310      	adds	r3, #16
 8008682:	4618      	mov	r0, r3
 8008684:	f001 f948 	bl	8009918 <xTaskRemoveFromEventList>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d007      	beq.n	800869e <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800868e:	4b4d      	ldr	r3, [pc, #308]	; (80087c4 <xQueueReceive+0x21c>)
 8008690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008694:	601a      	str	r2, [r3, #0]
 8008696:	f3bf 8f4f 	dsb	sy
 800869a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800869e:	f002 fac1 	bl	800ac24 <vPortExitCritical>
				return pdPASS;
 80086a2:	2301      	movs	r3, #1
 80086a4:	e08a      	b.n	80087bc <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d113      	bne.n	80086d4 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80086ac:	f002 faba 	bl	800ac24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80086b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b2:	4618      	mov	r0, r3
 80086b4:	f003 ff1e 	bl	800c4f4 <SEGGER_SYSVIEW_ShrinkId>
 80086b8:	4604      	mov	r4, r0
 80086ba:	2000      	movs	r0, #0
 80086bc:	f003 ff1a 	bl	800c4f4 <SEGGER_SYSVIEW_ShrinkId>
 80086c0:	4602      	mov	r2, r0
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2101      	movs	r1, #1
 80086c6:	9100      	str	r1, [sp, #0]
 80086c8:	4621      	mov	r1, r4
 80086ca:	205c      	movs	r0, #92	; 0x5c
 80086cc:	f003 fad6 	bl	800bc7c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 80086d0:	2300      	movs	r3, #0
 80086d2:	e073      	b.n	80087bc <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d106      	bne.n	80086e8 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086da:	f107 0310 	add.w	r3, r7, #16
 80086de:	4618      	mov	r0, r3
 80086e0:	f001 f982 	bl	80099e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086e4:	2301      	movs	r3, #1
 80086e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086e8:	f002 fa9c 	bl	800ac24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086ec:	f000 feba 	bl	8009464 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086f0:	f002 fa68 	bl	800abc4 <vPortEnterCritical>
 80086f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086fa:	b25b      	sxtb	r3, r3
 80086fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008700:	d103      	bne.n	800870a <xQueueReceive+0x162>
 8008702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008704:	2200      	movs	r2, #0
 8008706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800870a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008710:	b25b      	sxtb	r3, r3
 8008712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008716:	d103      	bne.n	8008720 <xQueueReceive+0x178>
 8008718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871a:	2200      	movs	r2, #0
 800871c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008720:	f002 fa80 	bl	800ac24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008724:	1d3a      	adds	r2, r7, #4
 8008726:	f107 0310 	add.w	r3, r7, #16
 800872a:	4611      	mov	r1, r2
 800872c:	4618      	mov	r0, r3
 800872e:	f001 f971 	bl	8009a14 <xTaskCheckForTimeOut>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d124      	bne.n	8008782 <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800873a:	f000 fb45 	bl	8008dc8 <prvIsQueueEmpty>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d018      	beq.n	8008776 <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008746:	3324      	adds	r3, #36	; 0x24
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	4611      	mov	r1, r2
 800874c:	4618      	mov	r0, r3
 800874e:	f001 f891 	bl	8009874 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008754:	f000 fae6 	bl	8008d24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008758:	f000 fe92 	bl	8009480 <xTaskResumeAll>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	f47f af69 	bne.w	8008636 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008764:	4b17      	ldr	r3, [pc, #92]	; (80087c4 <xQueueReceive+0x21c>)
 8008766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800876a:	601a      	str	r2, [r3, #0]
 800876c:	f3bf 8f4f 	dsb	sy
 8008770:	f3bf 8f6f 	isb	sy
 8008774:	e75f      	b.n	8008636 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008778:	f000 fad4 	bl	8008d24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800877c:	f000 fe80 	bl	8009480 <xTaskResumeAll>
 8008780:	e759      	b.n	8008636 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008782:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008784:	f000 face 	bl	8008d24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008788:	f000 fe7a 	bl	8009480 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800878c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800878e:	f000 fb1b 	bl	8008dc8 <prvIsQueueEmpty>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	f43f af4e 	beq.w	8008636 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800879a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879c:	4618      	mov	r0, r3
 800879e:	f003 fea9 	bl	800c4f4 <SEGGER_SYSVIEW_ShrinkId>
 80087a2:	4604      	mov	r4, r0
 80087a4:	2000      	movs	r0, #0
 80087a6:	f003 fea5 	bl	800c4f4 <SEGGER_SYSVIEW_ShrinkId>
 80087aa:	4602      	mov	r2, r0
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2101      	movs	r1, #1
 80087b0:	9100      	str	r1, [sp, #0]
 80087b2:	4621      	mov	r1, r4
 80087b4:	205c      	movs	r0, #92	; 0x5c
 80087b6:	f003 fa61 	bl	800bc7c <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 80087ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3734      	adds	r7, #52	; 0x34
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd90      	pop	{r4, r7, pc}
 80087c4:	e000ed04 	.word	0xe000ed04

080087c8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80087c8:	b590      	push	{r4, r7, lr}
 80087ca:	b091      	sub	sp, #68	; 0x44
 80087cc:	af02      	add	r7, sp, #8
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80087d2:	2300      	movs	r3, #0
 80087d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80087da:	2300      	movs	r3, #0
 80087dc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80087de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d10a      	bne.n	80087fa <xQueueSemaphoreTake+0x32>
	__asm volatile
 80087e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e8:	f383 8811 	msr	BASEPRI, r3
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f3bf 8f4f 	dsb	sy
 80087f4:	623b      	str	r3, [r7, #32]
}
 80087f6:	bf00      	nop
 80087f8:	e7fe      	b.n	80087f8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80087fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00a      	beq.n	8008818 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008806:	f383 8811 	msr	BASEPRI, r3
 800880a:	f3bf 8f6f 	isb	sy
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	61fb      	str	r3, [r7, #28]
}
 8008814:	bf00      	nop
 8008816:	e7fe      	b.n	8008816 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008818:	f001 fa7c 	bl	8009d14 <xTaskGetSchedulerState>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d102      	bne.n	8008828 <xQueueSemaphoreTake+0x60>
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d101      	bne.n	800882c <xQueueSemaphoreTake+0x64>
 8008828:	2301      	movs	r3, #1
 800882a:	e000      	b.n	800882e <xQueueSemaphoreTake+0x66>
 800882c:	2300      	movs	r3, #0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d10a      	bne.n	8008848 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008836:	f383 8811 	msr	BASEPRI, r3
 800883a:	f3bf 8f6f 	isb	sy
 800883e:	f3bf 8f4f 	dsb	sy
 8008842:	61bb      	str	r3, [r7, #24]
}
 8008844:	bf00      	nop
 8008846:	e7fe      	b.n	8008846 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008848:	f002 f9bc 	bl	800abc4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800884c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008850:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008854:	2b00      	cmp	r3, #0
 8008856:	d034      	beq.n	80088c2 <xQueueSemaphoreTake+0xfa>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8008858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885a:	4618      	mov	r0, r3
 800885c:	f003 fe4a 	bl	800c4f4 <SEGGER_SYSVIEW_ShrinkId>
 8008860:	4604      	mov	r4, r0
 8008862:	2000      	movs	r0, #0
 8008864:	f003 fe46 	bl	800c4f4 <SEGGER_SYSVIEW_ShrinkId>
 8008868:	4602      	mov	r2, r0
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	2101      	movs	r1, #1
 800886e:	9100      	str	r1, [sp, #0]
 8008870:	4621      	mov	r1, r4
 8008872:	205c      	movs	r0, #92	; 0x5c
 8008874:	f003 fa02 	bl	800bc7c <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887a:	1e5a      	subs	r2, r3, #1
 800887c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d104      	bne.n	8008892 <xQueueSemaphoreTake+0xca>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008888:	f001 fbd4 	bl	800a034 <pvTaskIncrementMutexHeldCount>
 800888c:	4602      	mov	r2, r0
 800888e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008890:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00f      	beq.n	80088ba <xQueueSemaphoreTake+0xf2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800889a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889c:	3310      	adds	r3, #16
 800889e:	4618      	mov	r0, r3
 80088a0:	f001 f83a 	bl	8009918 <xTaskRemoveFromEventList>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d007      	beq.n	80088ba <xQueueSemaphoreTake+0xf2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80088aa:	4b64      	ldr	r3, [pc, #400]	; (8008a3c <xQueueSemaphoreTake+0x274>)
 80088ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088b0:	601a      	str	r2, [r3, #0]
 80088b2:	f3bf 8f4f 	dsb	sy
 80088b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80088ba:	f002 f9b3 	bl	800ac24 <vPortExitCritical>
				return pdPASS;
 80088be:	2301      	movs	r3, #1
 80088c0:	e0b7      	b.n	8008a32 <xQueueSemaphoreTake+0x26a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d121      	bne.n	800890c <xQueueSemaphoreTake+0x144>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80088c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00a      	beq.n	80088e4 <xQueueSemaphoreTake+0x11c>
	__asm volatile
 80088ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	617b      	str	r3, [r7, #20]
}
 80088e0:	bf00      	nop
 80088e2:	e7fe      	b.n	80088e2 <xQueueSemaphoreTake+0x11a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80088e4:	f002 f99e 	bl	800ac24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80088e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ea:	4618      	mov	r0, r3
 80088ec:	f003 fe02 	bl	800c4f4 <SEGGER_SYSVIEW_ShrinkId>
 80088f0:	4604      	mov	r4, r0
 80088f2:	2000      	movs	r0, #0
 80088f4:	f003 fdfe 	bl	800c4f4 <SEGGER_SYSVIEW_ShrinkId>
 80088f8:	4602      	mov	r2, r0
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	2101      	movs	r1, #1
 80088fe:	9100      	str	r1, [sp, #0]
 8008900:	4621      	mov	r1, r4
 8008902:	205c      	movs	r0, #92	; 0x5c
 8008904:	f003 f9ba 	bl	800bc7c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8008908:	2300      	movs	r3, #0
 800890a:	e092      	b.n	8008a32 <xQueueSemaphoreTake+0x26a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800890c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800890e:	2b00      	cmp	r3, #0
 8008910:	d106      	bne.n	8008920 <xQueueSemaphoreTake+0x158>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008912:	f107 030c 	add.w	r3, r7, #12
 8008916:	4618      	mov	r0, r3
 8008918:	f001 f866 	bl	80099e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800891c:	2301      	movs	r3, #1
 800891e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008920:	f002 f980 	bl	800ac24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008924:	f000 fd9e 	bl	8009464 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008928:	f002 f94c 	bl	800abc4 <vPortEnterCritical>
 800892c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800892e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008932:	b25b      	sxtb	r3, r3
 8008934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008938:	d103      	bne.n	8008942 <xQueueSemaphoreTake+0x17a>
 800893a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893c:	2200      	movs	r2, #0
 800893e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008944:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008948:	b25b      	sxtb	r3, r3
 800894a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800894e:	d103      	bne.n	8008958 <xQueueSemaphoreTake+0x190>
 8008950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008952:	2200      	movs	r2, #0
 8008954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008958:	f002 f964 	bl	800ac24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800895c:	463a      	mov	r2, r7
 800895e:	f107 030c 	add.w	r3, r7, #12
 8008962:	4611      	mov	r1, r2
 8008964:	4618      	mov	r0, r3
 8008966:	f001 f855 	bl	8009a14 <xTaskCheckForTimeOut>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d132      	bne.n	80089d6 <xQueueSemaphoreTake+0x20e>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008970:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008972:	f000 fa29 	bl	8008dc8 <prvIsQueueEmpty>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d026      	beq.n	80089ca <xQueueSemaphoreTake+0x202>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800897c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d109      	bne.n	8008998 <xQueueSemaphoreTake+0x1d0>
					{
						taskENTER_CRITICAL();
 8008984:	f002 f91e 	bl	800abc4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	4618      	mov	r0, r3
 800898e:	f001 f9df 	bl	8009d50 <xTaskPriorityInherit>
 8008992:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008994:	f002 f946 	bl	800ac24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899a:	3324      	adds	r3, #36	; 0x24
 800899c:	683a      	ldr	r2, [r7, #0]
 800899e:	4611      	mov	r1, r2
 80089a0:	4618      	mov	r0, r3
 80089a2:	f000 ff67 	bl	8009874 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80089a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089a8:	f000 f9bc 	bl	8008d24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80089ac:	f000 fd68 	bl	8009480 <xTaskResumeAll>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f47f af48 	bne.w	8008848 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80089b8:	4b20      	ldr	r3, [pc, #128]	; (8008a3c <xQueueSemaphoreTake+0x274>)
 80089ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089be:	601a      	str	r2, [r3, #0]
 80089c0:	f3bf 8f4f 	dsb	sy
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	e73e      	b.n	8008848 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80089ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089cc:	f000 f9aa 	bl	8008d24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089d0:	f000 fd56 	bl	8009480 <xTaskResumeAll>
 80089d4:	e738      	b.n	8008848 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80089d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089d8:	f000 f9a4 	bl	8008d24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089dc:	f000 fd50 	bl	8009480 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089e2:	f000 f9f1 	bl	8008dc8 <prvIsQueueEmpty>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f43f af2d 	beq.w	8008848 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80089ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00d      	beq.n	8008a10 <xQueueSemaphoreTake+0x248>
					{
						taskENTER_CRITICAL();
 80089f4:	f002 f8e6 	bl	800abc4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80089f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089fa:	f000 f8eb 	bl	8008bd4 <prvGetDisinheritPriorityAfterTimeout>
 80089fe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a06:	4618      	mov	r0, r3
 8008a08:	f001 fa8a 	bl	8009f20 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008a0c:	f002 f90a 	bl	800ac24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a12:	4618      	mov	r0, r3
 8008a14:	f003 fd6e 	bl	800c4f4 <SEGGER_SYSVIEW_ShrinkId>
 8008a18:	4604      	mov	r4, r0
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	f003 fd6a 	bl	800c4f4 <SEGGER_SYSVIEW_ShrinkId>
 8008a20:	4602      	mov	r2, r0
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	2101      	movs	r1, #1
 8008a26:	9100      	str	r1, [sp, #0]
 8008a28:	4621      	mov	r1, r4
 8008a2a:	205c      	movs	r0, #92	; 0x5c
 8008a2c:	f003 f926 	bl	800bc7c <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8008a30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	373c      	adds	r7, #60	; 0x3c
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd90      	pop	{r4, r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	e000ed04 	.word	0xe000ed04

08008a40 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008a40:	b590      	push	{r4, r7, lr}
 8008a42:	b08f      	sub	sp, #60	; 0x3c
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10a      	bne.n	8008a6c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5a:	f383 8811 	msr	BASEPRI, r3
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f3bf 8f4f 	dsb	sy
 8008a66:	623b      	str	r3, [r7, #32]
}
 8008a68:	bf00      	nop
 8008a6a:	e7fe      	b.n	8008a6a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d103      	bne.n	8008a7a <xQueueReceiveFromISR+0x3a>
 8008a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d101      	bne.n	8008a7e <xQueueReceiveFromISR+0x3e>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e000      	b.n	8008a80 <xQueueReceiveFromISR+0x40>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10a      	bne.n	8008a9a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a88:	f383 8811 	msr	BASEPRI, r3
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	61fb      	str	r3, [r7, #28]
}
 8008a96:	bf00      	nop
 8008a98:	e7fe      	b.n	8008a98 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a9a:	f002 f975 	bl	800ad88 <vPortValidateInterruptPriority>
	__asm volatile
 8008a9e:	f3ef 8211 	mrs	r2, BASEPRI
 8008aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	61ba      	str	r2, [r7, #24]
 8008ab4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008ab6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008abe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d03e      	beq.n	8008b44 <xQueueReceiveFromISR+0x104>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8008ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f003 fd0e 	bl	800c4f4 <SEGGER_SYSVIEW_ShrinkId>
 8008ad8:	4604      	mov	r4, r0
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	4618      	mov	r0, r3
 8008ade:	f003 fd09 	bl	800c4f4 <SEGGER_SYSVIEW_ShrinkId>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	2062      	movs	r0, #98	; 0x62
 8008aea:	f003 f851 	bl	800bb90 <SEGGER_SYSVIEW_RecordU32x3>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008aee:	68b9      	ldr	r1, [r7, #8]
 8008af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008af2:	f000 f8f1 	bl	8008cd8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af8:	1e5a      	subs	r2, r3, #1
 8008afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afc:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008afe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b06:	d112      	bne.n	8008b2e <xQueueReceiveFromISR+0xee>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d016      	beq.n	8008b3e <xQueueReceiveFromISR+0xfe>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b12:	3310      	adds	r3, #16
 8008b14:	4618      	mov	r0, r3
 8008b16:	f000 feff 	bl	8009918 <xTaskRemoveFromEventList>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00e      	beq.n	8008b3e <xQueueReceiveFromISR+0xfe>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00b      	beq.n	8008b3e <xQueueReceiveFromISR+0xfe>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	601a      	str	r2, [r3, #0]
 8008b2c:	e007      	b.n	8008b3e <xQueueReceiveFromISR+0xfe>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008b2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b32:	3301      	adds	r3, #1
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	b25a      	sxtb	r2, r3
 8008b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	637b      	str	r3, [r7, #52]	; 0x34
 8008b42:	e010      	b.n	8008b66 <xQueueReceiveFromISR+0x126>
		}
		else
		{
			xReturn = pdFAIL;
 8008b44:	2300      	movs	r3, #0
 8008b46:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8008b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f003 fcd2 	bl	800c4f4 <SEGGER_SYSVIEW_ShrinkId>
 8008b50:	4604      	mov	r4, r0
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	4618      	mov	r0, r3
 8008b56:	f003 fccd 	bl	800c4f4 <SEGGER_SYSVIEW_ShrinkId>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4621      	mov	r1, r4
 8008b60:	2062      	movs	r0, #98	; 0x62
 8008b62:	f003 f815 	bl	800bb90 <SEGGER_SYSVIEW_RecordU32x3>
 8008b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b68:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	f383 8811 	msr	BASEPRI, r3
}
 8008b70:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	373c      	adds	r7, #60	; 0x3c
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd90      	pop	{r4, r7, pc}

08008b7c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d10a      	bne.n	8008ba4 <vQueueDelete+0x28>
	__asm volatile
 8008b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b92:	f383 8811 	msr	BASEPRI, r3
 8008b96:	f3bf 8f6f 	isb	sy
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	60bb      	str	r3, [r7, #8]
}
 8008ba0:	bf00      	nop
 8008ba2:	e7fe      	b.n	8008ba2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f003 fca4 	bl	800c4f4 <SEGGER_SYSVIEW_ShrinkId>
 8008bac:	4603      	mov	r3, r0
 8008bae:	4619      	mov	r1, r3
 8008bb0:	205f      	movs	r0, #95	; 0x5f
 8008bb2:	f002 ff57 	bl	800ba64 <SEGGER_SYSVIEW_RecordU32>

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f000 f966 	bl	8008e88 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d102      	bne.n	8008bcc <vQueueDelete+0x50>
		{
			vPortFree( pxQueue );
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f002 f9ea 	bl	800afa0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008bcc:	bf00      	nop
 8008bce:	3710      	adds	r7, #16
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d006      	beq.n	8008bf2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008bee:	60fb      	str	r3, [r7, #12]
 8008bf0:	e001      	b.n	8008bf6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
	}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3714      	adds	r7, #20
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008c10:	2300      	movs	r3, #0
 8008c12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d10d      	bne.n	8008c3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d14d      	bne.n	8008cc6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f001 f900 	bl	8009e34 <xTaskPriorityDisinherit>
 8008c34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	609a      	str	r2, [r3, #8]
 8008c3c:	e043      	b.n	8008cc6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d119      	bne.n	8008c78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6858      	ldr	r0, [r3, #4]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	68b9      	ldr	r1, [r7, #8]
 8008c50:	f004 fa45 	bl	800d0de <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	685a      	ldr	r2, [r3, #4]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5c:	441a      	add	r2, r3
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	685a      	ldr	r2, [r3, #4]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d32b      	bcc.n	8008cc6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	605a      	str	r2, [r3, #4]
 8008c76:	e026      	b.n	8008cc6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	68d8      	ldr	r0, [r3, #12]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c80:	461a      	mov	r2, r3
 8008c82:	68b9      	ldr	r1, [r7, #8]
 8008c84:	f004 fa2b 	bl	800d0de <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	68da      	ldr	r2, [r3, #12]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c90:	425b      	negs	r3, r3
 8008c92:	441a      	add	r2, r3
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	68da      	ldr	r2, [r3, #12]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d207      	bcs.n	8008cb4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	689a      	ldr	r2, [r3, #8]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cac:	425b      	negs	r3, r3
 8008cae:	441a      	add	r2, r3
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d105      	bne.n	8008cc6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d002      	beq.n	8008cc6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	1c5a      	adds	r2, r3, #1
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008cce:	697b      	ldr	r3, [r7, #20]
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3718      	adds	r7, #24
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d018      	beq.n	8008d1c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	68da      	ldr	r2, [r3, #12]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf2:	441a      	add	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	68da      	ldr	r2, [r3, #12]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d303      	bcc.n	8008d0c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	68d9      	ldr	r1, [r3, #12]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d14:	461a      	mov	r2, r3
 8008d16:	6838      	ldr	r0, [r7, #0]
 8008d18:	f004 f9e1 	bl	800d0de <memcpy>
	}
}
 8008d1c:	bf00      	nop
 8008d1e:	3708      	adds	r7, #8
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008d2c:	f001 ff4a 	bl	800abc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d36:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d38:	e011      	b.n	8008d5e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d012      	beq.n	8008d68 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	3324      	adds	r3, #36	; 0x24
 8008d46:	4618      	mov	r0, r3
 8008d48:	f000 fde6 	bl	8009918 <xTaskRemoveFromEventList>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d001      	beq.n	8008d56 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008d52:	f000 fec1 	bl	8009ad8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008d56:	7bfb      	ldrb	r3, [r7, #15]
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	dce9      	bgt.n	8008d3a <prvUnlockQueue+0x16>
 8008d66:	e000      	b.n	8008d6a <prvUnlockQueue+0x46>
					break;
 8008d68:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	22ff      	movs	r2, #255	; 0xff
 8008d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008d72:	f001 ff57 	bl	800ac24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008d76:	f001 ff25 	bl	800abc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d80:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d82:	e011      	b.n	8008da8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d012      	beq.n	8008db2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	3310      	adds	r3, #16
 8008d90:	4618      	mov	r0, r3
 8008d92:	f000 fdc1 	bl	8009918 <xTaskRemoveFromEventList>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d001      	beq.n	8008da0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008d9c:	f000 fe9c 	bl	8009ad8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008da0:	7bbb      	ldrb	r3, [r7, #14]
 8008da2:	3b01      	subs	r3, #1
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008da8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	dce9      	bgt.n	8008d84 <prvUnlockQueue+0x60>
 8008db0:	e000      	b.n	8008db4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008db2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	22ff      	movs	r2, #255	; 0xff
 8008db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008dbc:	f001 ff32 	bl	800ac24 <vPortExitCritical>
}
 8008dc0:	bf00      	nop
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008dd0:	f001 fef8 	bl	800abc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d102      	bne.n	8008de2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	60fb      	str	r3, [r7, #12]
 8008de0:	e001      	b.n	8008de6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008de2:	2300      	movs	r3, #0
 8008de4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008de6:	f001 ff1d 	bl	800ac24 <vPortExitCritical>

	return xReturn;
 8008dea:	68fb      	ldr	r3, [r7, #12]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3710      	adds	r7, #16
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008dfc:	f001 fee2 	bl	800abc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d102      	bne.n	8008e12 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	60fb      	str	r3, [r7, #12]
 8008e10:	e001      	b.n	8008e16 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008e12:	2300      	movs	r3, #0
 8008e14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e16:	f001 ff05 	bl	800ac24 <vPortExitCritical>

	return xReturn;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e2e:	2300      	movs	r3, #0
 8008e30:	60fb      	str	r3, [r7, #12]
 8008e32:	e01e      	b.n	8008e72 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008e34:	4a13      	ldr	r2, [pc, #76]	; (8008e84 <vQueueAddToRegistry+0x60>)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d115      	bne.n	8008e6c <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008e40:	4910      	ldr	r1, [pc, #64]	; (8008e84 <vQueueAddToRegistry+0x60>)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	683a      	ldr	r2, [r7, #0]
 8008e46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008e4a:	4a0e      	ldr	r2, [pc, #56]	; (8008e84 <vQueueAddToRegistry+0x60>)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	00db      	lsls	r3, r3, #3
 8008e50:	4413      	add	r3, r2
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f003 fb4b 	bl	800c4f4 <SEGGER_SYSVIEW_ShrinkId>
 8008e5e:	4601      	mov	r1, r0
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	461a      	mov	r2, r3
 8008e64:	2071      	movs	r0, #113	; 0x71
 8008e66:	f002 fe39 	bl	800badc <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8008e6a:	e006      	b.n	8008e7a <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	60fb      	str	r3, [r7, #12]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2b07      	cmp	r3, #7
 8008e76:	d9dd      	bls.n	8008e34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008e78:	bf00      	nop
 8008e7a:	bf00      	nop
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	200281ec 	.word	0x200281ec

08008e88 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e90:	2300      	movs	r3, #0
 8008e92:	60fb      	str	r3, [r7, #12]
 8008e94:	e016      	b.n	8008ec4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008e96:	4a10      	ldr	r2, [pc, #64]	; (8008ed8 <vQueueUnregisterQueue+0x50>)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	00db      	lsls	r3, r3, #3
 8008e9c:	4413      	add	r3, r2
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d10b      	bne.n	8008ebe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008ea6:	4a0c      	ldr	r2, [pc, #48]	; (8008ed8 <vQueueUnregisterQueue+0x50>)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2100      	movs	r1, #0
 8008eac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008eb0:	4a09      	ldr	r2, [pc, #36]	; (8008ed8 <vQueueUnregisterQueue+0x50>)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	00db      	lsls	r3, r3, #3
 8008eb6:	4413      	add	r3, r2
 8008eb8:	2200      	movs	r2, #0
 8008eba:	605a      	str	r2, [r3, #4]
				break;
 8008ebc:	e006      	b.n	8008ecc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	60fb      	str	r3, [r7, #12]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2b07      	cmp	r3, #7
 8008ec8:	d9e5      	bls.n	8008e96 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008eca:	bf00      	nop
 8008ecc:	bf00      	nop
 8008ece:	3714      	adds	r7, #20
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr
 8008ed8:	200281ec 	.word	0x200281ec

08008edc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b086      	sub	sp, #24
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008eec:	f001 fe6a 	bl	800abc4 <vPortEnterCritical>
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ef6:	b25b      	sxtb	r3, r3
 8008ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008efc:	d103      	bne.n	8008f06 <vQueueWaitForMessageRestricted+0x2a>
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	2200      	movs	r2, #0
 8008f02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f0c:	b25b      	sxtb	r3, r3
 8008f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f12:	d103      	bne.n	8008f1c <vQueueWaitForMessageRestricted+0x40>
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f1c:	f001 fe82 	bl	800ac24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d106      	bne.n	8008f36 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	3324      	adds	r3, #36	; 0x24
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	68b9      	ldr	r1, [r7, #8]
 8008f30:	4618      	mov	r0, r3
 8008f32:	f000 fcc3 	bl	80098bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008f36:	6978      	ldr	r0, [r7, #20]
 8008f38:	f7ff fef4 	bl	8008d24 <prvUnlockQueue>
	}
 8008f3c:	bf00      	nop
 8008f3e:	3718      	adds	r7, #24
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b08e      	sub	sp, #56	; 0x38
 8008f48:	af04      	add	r7, sp, #16
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	607a      	str	r2, [r7, #4]
 8008f50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d10a      	bne.n	8008f6e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5c:	f383 8811 	msr	BASEPRI, r3
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	623b      	str	r3, [r7, #32]
}
 8008f6a:	bf00      	nop
 8008f6c:	e7fe      	b.n	8008f6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10a      	bne.n	8008f8a <xTaskCreateStatic+0x46>
	__asm volatile
 8008f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f78:	f383 8811 	msr	BASEPRI, r3
 8008f7c:	f3bf 8f6f 	isb	sy
 8008f80:	f3bf 8f4f 	dsb	sy
 8008f84:	61fb      	str	r3, [r7, #28]
}
 8008f86:	bf00      	nop
 8008f88:	e7fe      	b.n	8008f88 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008f8a:	23a8      	movs	r3, #168	; 0xa8
 8008f8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	2ba8      	cmp	r3, #168	; 0xa8
 8008f92:	d00a      	beq.n	8008faa <xTaskCreateStatic+0x66>
	__asm volatile
 8008f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f98:	f383 8811 	msr	BASEPRI, r3
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	61bb      	str	r3, [r7, #24]
}
 8008fa6:	bf00      	nop
 8008fa8:	e7fe      	b.n	8008fa8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008faa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d01e      	beq.n	8008ff0 <xTaskCreateStatic+0xac>
 8008fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d01b      	beq.n	8008ff0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fc0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc4:	2202      	movs	r2, #2
 8008fc6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008fca:	2300      	movs	r3, #0
 8008fcc:	9303      	str	r3, [sp, #12]
 8008fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd0:	9302      	str	r3, [sp, #8]
 8008fd2:	f107 0314 	add.w	r3, r7, #20
 8008fd6:	9301      	str	r3, [sp, #4]
 8008fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	68b9      	ldr	r1, [r7, #8]
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	f000 f850 	bl	8009088 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fe8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008fea:	f000 f8f3 	bl	80091d4 <prvAddNewTaskToReadyList>
 8008fee:	e001      	b.n	8008ff4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008ff4:	697b      	ldr	r3, [r7, #20]
	}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3728      	adds	r7, #40	; 0x28
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b08c      	sub	sp, #48	; 0x30
 8009002:	af04      	add	r7, sp, #16
 8009004:	60f8      	str	r0, [r7, #12]
 8009006:	60b9      	str	r1, [r7, #8]
 8009008:	603b      	str	r3, [r7, #0]
 800900a:	4613      	mov	r3, r2
 800900c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800900e:	88fb      	ldrh	r3, [r7, #6]
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	4618      	mov	r0, r3
 8009014:	f001 fef8 	bl	800ae08 <pvPortMalloc>
 8009018:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00e      	beq.n	800903e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009020:	20a8      	movs	r0, #168	; 0xa8
 8009022:	f001 fef1 	bl	800ae08 <pvPortMalloc>
 8009026:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d003      	beq.n	8009036 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	697a      	ldr	r2, [r7, #20]
 8009032:	631a      	str	r2, [r3, #48]	; 0x30
 8009034:	e005      	b.n	8009042 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009036:	6978      	ldr	r0, [r7, #20]
 8009038:	f001 ffb2 	bl	800afa0 <vPortFree>
 800903c:	e001      	b.n	8009042 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800903e:	2300      	movs	r3, #0
 8009040:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d017      	beq.n	8009078 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	2200      	movs	r2, #0
 800904c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009050:	88fa      	ldrh	r2, [r7, #6]
 8009052:	2300      	movs	r3, #0
 8009054:	9303      	str	r3, [sp, #12]
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	9302      	str	r3, [sp, #8]
 800905a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905c:	9301      	str	r3, [sp, #4]
 800905e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009060:	9300      	str	r3, [sp, #0]
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	68b9      	ldr	r1, [r7, #8]
 8009066:	68f8      	ldr	r0, [r7, #12]
 8009068:	f000 f80e 	bl	8009088 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800906c:	69f8      	ldr	r0, [r7, #28]
 800906e:	f000 f8b1 	bl	80091d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009072:	2301      	movs	r3, #1
 8009074:	61bb      	str	r3, [r7, #24]
 8009076:	e002      	b.n	800907e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009078:	f04f 33ff 	mov.w	r3, #4294967295
 800907c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800907e:	69bb      	ldr	r3, [r7, #24]
	}
 8009080:	4618      	mov	r0, r3
 8009082:	3720      	adds	r7, #32
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b088      	sub	sp, #32
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	607a      	str	r2, [r7, #4]
 8009094:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009098:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	461a      	mov	r2, r3
 80090a0:	21a5      	movs	r1, #165	; 0xa5
 80090a2:	f003 ff1e 	bl	800cee2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80090a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80090b0:	3b01      	subs	r3, #1
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4413      	add	r3, r2
 80090b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	f023 0307 	bic.w	r3, r3, #7
 80090be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	f003 0307 	and.w	r3, r3, #7
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00a      	beq.n	80090e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80090ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ce:	f383 8811 	msr	BASEPRI, r3
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	f3bf 8f4f 	dsb	sy
 80090da:	617b      	str	r3, [r7, #20]
}
 80090dc:	bf00      	nop
 80090de:	e7fe      	b.n	80090de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d01f      	beq.n	8009126 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090e6:	2300      	movs	r3, #0
 80090e8:	61fb      	str	r3, [r7, #28]
 80090ea:	e012      	b.n	8009112 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80090ec:	68ba      	ldr	r2, [r7, #8]
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	4413      	add	r3, r2
 80090f2:	7819      	ldrb	r1, [r3, #0]
 80090f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	4413      	add	r3, r2
 80090fa:	3334      	adds	r3, #52	; 0x34
 80090fc:	460a      	mov	r2, r1
 80090fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	4413      	add	r3, r2
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d006      	beq.n	800911a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	3301      	adds	r3, #1
 8009110:	61fb      	str	r3, [r7, #28]
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	2b0f      	cmp	r3, #15
 8009116:	d9e9      	bls.n	80090ec <prvInitialiseNewTask+0x64>
 8009118:	e000      	b.n	800911c <prvInitialiseNewTask+0x94>
			{
				break;
 800911a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800911c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911e:	2200      	movs	r2, #0
 8009120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009124:	e003      	b.n	800912e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009128:	2200      	movs	r2, #0
 800912a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800912e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009130:	2b37      	cmp	r3, #55	; 0x37
 8009132:	d901      	bls.n	8009138 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009134:	2337      	movs	r3, #55	; 0x37
 8009136:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800913c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800913e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009140:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009142:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009146:	2200      	movs	r2, #0
 8009148:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800914a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914c:	3304      	adds	r3, #4
 800914e:	4618      	mov	r0, r3
 8009150:	f7fe fd25 	bl	8007b9e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009156:	3318      	adds	r3, #24
 8009158:	4618      	mov	r0, r3
 800915a:	f7fe fd20 	bl	8007b9e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800915e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009162:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009166:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800916a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800916e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009172:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009176:	2200      	movs	r2, #0
 8009178:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800917c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917e:	2200      	movs	r2, #0
 8009180:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009186:	3354      	adds	r3, #84	; 0x54
 8009188:	224c      	movs	r2, #76	; 0x4c
 800918a:	2100      	movs	r1, #0
 800918c:	4618      	mov	r0, r3
 800918e:	f003 fea8 	bl	800cee2 <memset>
 8009192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009194:	4a0c      	ldr	r2, [pc, #48]	; (80091c8 <prvInitialiseNewTask+0x140>)
 8009196:	659a      	str	r2, [r3, #88]	; 0x58
 8009198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919a:	4a0c      	ldr	r2, [pc, #48]	; (80091cc <prvInitialiseNewTask+0x144>)
 800919c:	65da      	str	r2, [r3, #92]	; 0x5c
 800919e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a0:	4a0b      	ldr	r2, [pc, #44]	; (80091d0 <prvInitialiseNewTask+0x148>)
 80091a2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80091a4:	683a      	ldr	r2, [r7, #0]
 80091a6:	68f9      	ldr	r1, [r7, #12]
 80091a8:	69b8      	ldr	r0, [r7, #24]
 80091aa:	f001 fbdd 	bl	800a968 <pxPortInitialiseStack>
 80091ae:	4602      	mov	r2, r0
 80091b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80091b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d002      	beq.n	80091c0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80091ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091c0:	bf00      	nop
 80091c2:	3720      	adds	r7, #32
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	2002cefc 	.word	0x2002cefc
 80091cc:	2002cf64 	.word	0x2002cf64
 80091d0:	2002cfcc 	.word	0x2002cfcc

080091d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80091d4:	b5b0      	push	{r4, r5, r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af02      	add	r7, sp, #8
 80091da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80091dc:	f001 fcf2 	bl	800abc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80091e0:	4b3c      	ldr	r3, [pc, #240]	; (80092d4 <prvAddNewTaskToReadyList+0x100>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	3301      	adds	r3, #1
 80091e6:	4a3b      	ldr	r2, [pc, #236]	; (80092d4 <prvAddNewTaskToReadyList+0x100>)
 80091e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80091ea:	4b3b      	ldr	r3, [pc, #236]	; (80092d8 <prvAddNewTaskToReadyList+0x104>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d109      	bne.n	8009206 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80091f2:	4a39      	ldr	r2, [pc, #228]	; (80092d8 <prvAddNewTaskToReadyList+0x104>)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80091f8:	4b36      	ldr	r3, [pc, #216]	; (80092d4 <prvAddNewTaskToReadyList+0x100>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d110      	bne.n	8009222 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009200:	f000 fc8e 	bl	8009b20 <prvInitialiseTaskLists>
 8009204:	e00d      	b.n	8009222 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009206:	4b35      	ldr	r3, [pc, #212]	; (80092dc <prvAddNewTaskToReadyList+0x108>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d109      	bne.n	8009222 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800920e:	4b32      	ldr	r3, [pc, #200]	; (80092d8 <prvAddNewTaskToReadyList+0x104>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009218:	429a      	cmp	r2, r3
 800921a:	d802      	bhi.n	8009222 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800921c:	4a2e      	ldr	r2, [pc, #184]	; (80092d8 <prvAddNewTaskToReadyList+0x104>)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009222:	4b2f      	ldr	r3, [pc, #188]	; (80092e0 <prvAddNewTaskToReadyList+0x10c>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	3301      	adds	r3, #1
 8009228:	4a2d      	ldr	r2, [pc, #180]	; (80092e0 <prvAddNewTaskToReadyList+0x10c>)
 800922a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800922c:	4b2c      	ldr	r3, [pc, #176]	; (80092e0 <prvAddNewTaskToReadyList+0x10c>)
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d016      	beq.n	8009268 <prvAddNewTaskToReadyList+0x94>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4618      	mov	r0, r3
 800923e:	f003 f893 	bl	800c368 <SEGGER_SYSVIEW_OnTaskCreate>
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009252:	461d      	mov	r5, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	461c      	mov	r4, r3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800925e:	1ae3      	subs	r3, r4, r3
 8009260:	9300      	str	r3, [sp, #0]
 8009262:	462b      	mov	r3, r5
 8009264:	f003 fc12 	bl	800ca8c <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4618      	mov	r0, r3
 800926c:	f003 f900 	bl	800c470 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009274:	4b1b      	ldr	r3, [pc, #108]	; (80092e4 <prvAddNewTaskToReadyList+0x110>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	429a      	cmp	r2, r3
 800927a:	d903      	bls.n	8009284 <prvAddNewTaskToReadyList+0xb0>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009280:	4a18      	ldr	r2, [pc, #96]	; (80092e4 <prvAddNewTaskToReadyList+0x110>)
 8009282:	6013      	str	r3, [r2, #0]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009288:	4613      	mov	r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	4413      	add	r3, r2
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	4a15      	ldr	r2, [pc, #84]	; (80092e8 <prvAddNewTaskToReadyList+0x114>)
 8009292:	441a      	add	r2, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	3304      	adds	r3, #4
 8009298:	4619      	mov	r1, r3
 800929a:	4610      	mov	r0, r2
 800929c:	f7fe fc8c 	bl	8007bb8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80092a0:	f001 fcc0 	bl	800ac24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80092a4:	4b0d      	ldr	r3, [pc, #52]	; (80092dc <prvAddNewTaskToReadyList+0x108>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00e      	beq.n	80092ca <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80092ac:	4b0a      	ldr	r3, [pc, #40]	; (80092d8 <prvAddNewTaskToReadyList+0x104>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d207      	bcs.n	80092ca <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80092ba:	4b0c      	ldr	r3, [pc, #48]	; (80092ec <prvAddNewTaskToReadyList+0x118>)
 80092bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092c0:	601a      	str	r2, [r3, #0]
 80092c2:	f3bf 8f4f 	dsb	sy
 80092c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092ca:	bf00      	nop
 80092cc:	3708      	adds	r7, #8
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bdb0      	pop	{r4, r5, r7, pc}
 80092d2:	bf00      	nop
 80092d4:	20028700 	.word	0x20028700
 80092d8:	2002822c 	.word	0x2002822c
 80092dc:	2002870c 	.word	0x2002870c
 80092e0:	2002871c 	.word	0x2002871c
 80092e4:	20028708 	.word	0x20028708
 80092e8:	20028230 	.word	0x20028230
 80092ec:	e000ed04 	.word	0xe000ed04

080092f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80092f8:	2300      	movs	r3, #0
 80092fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d01b      	beq.n	800933a <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009302:	4b15      	ldr	r3, [pc, #84]	; (8009358 <vTaskDelay+0x68>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d00a      	beq.n	8009320 <vTaskDelay+0x30>
	__asm volatile
 800930a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930e:	f383 8811 	msr	BASEPRI, r3
 8009312:	f3bf 8f6f 	isb	sy
 8009316:	f3bf 8f4f 	dsb	sy
 800931a:	60bb      	str	r3, [r7, #8]
}
 800931c:	bf00      	nop
 800931e:	e7fe      	b.n	800931e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009320:	f000 f8a0 	bl	8009464 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8009324:	6879      	ldr	r1, [r7, #4]
 8009326:	2023      	movs	r0, #35	; 0x23
 8009328:	f002 fb9c 	bl	800ba64 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800932c:	2100      	movs	r1, #0
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 fe94 	bl	800a05c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009334:	f000 f8a4 	bl	8009480 <xTaskResumeAll>
 8009338:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d107      	bne.n	8009350 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 8009340:	4b06      	ldr	r3, [pc, #24]	; (800935c <vTaskDelay+0x6c>)
 8009342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009346:	601a      	str	r2, [r3, #0]
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009350:	bf00      	nop
 8009352:	3710      	adds	r7, #16
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	20028728 	.word	0x20028728
 800935c:	e000ed04 	.word	0xe000ed04

08009360 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b08a      	sub	sp, #40	; 0x28
 8009364:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009366:	2300      	movs	r3, #0
 8009368:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800936a:	2300      	movs	r3, #0
 800936c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800936e:	463a      	mov	r2, r7
 8009370:	1d39      	adds	r1, r7, #4
 8009372:	f107 0308 	add.w	r3, r7, #8
 8009376:	4618      	mov	r0, r3
 8009378:	f7fe fb6c 	bl	8007a54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800937c:	6839      	ldr	r1, [r7, #0]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	68ba      	ldr	r2, [r7, #8]
 8009382:	9202      	str	r2, [sp, #8]
 8009384:	9301      	str	r3, [sp, #4]
 8009386:	2300      	movs	r3, #0
 8009388:	9300      	str	r3, [sp, #0]
 800938a:	2300      	movs	r3, #0
 800938c:	460a      	mov	r2, r1
 800938e:	492d      	ldr	r1, [pc, #180]	; (8009444 <vTaskStartScheduler+0xe4>)
 8009390:	482d      	ldr	r0, [pc, #180]	; (8009448 <vTaskStartScheduler+0xe8>)
 8009392:	f7ff fdd7 	bl	8008f44 <xTaskCreateStatic>
 8009396:	4603      	mov	r3, r0
 8009398:	4a2c      	ldr	r2, [pc, #176]	; (800944c <vTaskStartScheduler+0xec>)
 800939a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800939c:	4b2b      	ldr	r3, [pc, #172]	; (800944c <vTaskStartScheduler+0xec>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d002      	beq.n	80093aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80093a4:	2301      	movs	r3, #1
 80093a6:	617b      	str	r3, [r7, #20]
 80093a8:	e001      	b.n	80093ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80093aa:	2300      	movs	r3, #0
 80093ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d102      	bne.n	80093ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80093b4:	f000 fea6 	bl	800a104 <xTimerCreateTimerTask>
 80093b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d12e      	bne.n	800941e <vTaskStartScheduler+0xbe>
	__asm volatile
 80093c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c4:	f383 8811 	msr	BASEPRI, r3
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	613b      	str	r3, [r7, #16]
}
 80093d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80093d4:	4b1e      	ldr	r3, [pc, #120]	; (8009450 <vTaskStartScheduler+0xf0>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	3354      	adds	r3, #84	; 0x54
 80093da:	4a1e      	ldr	r2, [pc, #120]	; (8009454 <vTaskStartScheduler+0xf4>)
 80093dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80093de:	4b1e      	ldr	r3, [pc, #120]	; (8009458 <vTaskStartScheduler+0xf8>)
 80093e0:	f04f 32ff 	mov.w	r2, #4294967295
 80093e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80093e6:	4b1d      	ldr	r3, [pc, #116]	; (800945c <vTaskStartScheduler+0xfc>)
 80093e8:	2201      	movs	r2, #1
 80093ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80093ec:	4b1c      	ldr	r3, [pc, #112]	; (8009460 <vTaskStartScheduler+0x100>)
 80093ee:	2200      	movs	r2, #0
 80093f0:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 80093f2:	4b17      	ldr	r3, [pc, #92]	; (8009450 <vTaskStartScheduler+0xf0>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	3334      	adds	r3, #52	; 0x34
 80093f8:	2205      	movs	r2, #5
 80093fa:	4912      	ldr	r1, [pc, #72]	; (8009444 <vTaskStartScheduler+0xe4>)
 80093fc:	4618      	mov	r0, r3
 80093fe:	f003 fd60 	bl	800cec2 <memcmp>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d005      	beq.n	8009414 <vTaskStartScheduler+0xb4>
 8009408:	4b11      	ldr	r3, [pc, #68]	; (8009450 <vTaskStartScheduler+0xf0>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4618      	mov	r0, r3
 800940e:	f002 ffed 	bl	800c3ec <SEGGER_SYSVIEW_OnTaskStartExec>
 8009412:	e001      	b.n	8009418 <vTaskStartScheduler+0xb8>
 8009414:	f002 ff8c 	bl	800c330 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009418:	f001 fb32 	bl	800aa80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800941c:	e00e      	b.n	800943c <vTaskStartScheduler+0xdc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009424:	d10a      	bne.n	800943c <vTaskStartScheduler+0xdc>
	__asm volatile
 8009426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942a:	f383 8811 	msr	BASEPRI, r3
 800942e:	f3bf 8f6f 	isb	sy
 8009432:	f3bf 8f4f 	dsb	sy
 8009436:	60fb      	str	r3, [r7, #12]
}
 8009438:	bf00      	nop
 800943a:	e7fe      	b.n	800943a <vTaskStartScheduler+0xda>
}
 800943c:	bf00      	nop
 800943e:	3718      	adds	r7, #24
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}
 8009444:	0800f2e8 	.word	0x0800f2e8
 8009448:	08009af1 	.word	0x08009af1
 800944c:	20028724 	.word	0x20028724
 8009450:	2002822c 	.word	0x2002822c
 8009454:	20000080 	.word	0x20000080
 8009458:	20028720 	.word	0x20028720
 800945c:	2002870c 	.word	0x2002870c
 8009460:	20028704 	.word	0x20028704

08009464 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009464:	b480      	push	{r7}
 8009466:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009468:	4b04      	ldr	r3, [pc, #16]	; (800947c <vTaskSuspendAll+0x18>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	3301      	adds	r3, #1
 800946e:	4a03      	ldr	r2, [pc, #12]	; (800947c <vTaskSuspendAll+0x18>)
 8009470:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009472:	bf00      	nop
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr
 800947c:	20028728 	.word	0x20028728

08009480 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009486:	2300      	movs	r3, #0
 8009488:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800948a:	2300      	movs	r3, #0
 800948c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800948e:	4b44      	ldr	r3, [pc, #272]	; (80095a0 <xTaskResumeAll+0x120>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d10a      	bne.n	80094ac <xTaskResumeAll+0x2c>
	__asm volatile
 8009496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949a:	f383 8811 	msr	BASEPRI, r3
 800949e:	f3bf 8f6f 	isb	sy
 80094a2:	f3bf 8f4f 	dsb	sy
 80094a6:	603b      	str	r3, [r7, #0]
}
 80094a8:	bf00      	nop
 80094aa:	e7fe      	b.n	80094aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80094ac:	f001 fb8a 	bl	800abc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80094b0:	4b3b      	ldr	r3, [pc, #236]	; (80095a0 <xTaskResumeAll+0x120>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	3b01      	subs	r3, #1
 80094b6:	4a3a      	ldr	r2, [pc, #232]	; (80095a0 <xTaskResumeAll+0x120>)
 80094b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094ba:	4b39      	ldr	r3, [pc, #228]	; (80095a0 <xTaskResumeAll+0x120>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d166      	bne.n	8009590 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80094c2:	4b38      	ldr	r3, [pc, #224]	; (80095a4 <xTaskResumeAll+0x124>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d062      	beq.n	8009590 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094ca:	e033      	b.n	8009534 <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094cc:	4b36      	ldr	r3, [pc, #216]	; (80095a8 <xTaskResumeAll+0x128>)
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	3318      	adds	r3, #24
 80094d8:	4618      	mov	r0, r3
 80094da:	f7fe fbca 	bl	8007c72 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	3304      	adds	r3, #4
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7fe fbc5 	bl	8007c72 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f002 ffc0 	bl	800c470 <SEGGER_SYSVIEW_OnTaskStartReady>
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f4:	4b2d      	ldr	r3, [pc, #180]	; (80095ac <xTaskResumeAll+0x12c>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d903      	bls.n	8009504 <xTaskResumeAll+0x84>
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009500:	4a2a      	ldr	r2, [pc, #168]	; (80095ac <xTaskResumeAll+0x12c>)
 8009502:	6013      	str	r3, [r2, #0]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009508:	4613      	mov	r3, r2
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	4413      	add	r3, r2
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	4a27      	ldr	r2, [pc, #156]	; (80095b0 <xTaskResumeAll+0x130>)
 8009512:	441a      	add	r2, r3
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	3304      	adds	r3, #4
 8009518:	4619      	mov	r1, r3
 800951a:	4610      	mov	r0, r2
 800951c:	f7fe fb4c 	bl	8007bb8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009524:	4b23      	ldr	r3, [pc, #140]	; (80095b4 <xTaskResumeAll+0x134>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952a:	429a      	cmp	r2, r3
 800952c:	d302      	bcc.n	8009534 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 800952e:	4b22      	ldr	r3, [pc, #136]	; (80095b8 <xTaskResumeAll+0x138>)
 8009530:	2201      	movs	r2, #1
 8009532:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009534:	4b1c      	ldr	r3, [pc, #112]	; (80095a8 <xTaskResumeAll+0x128>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d1c7      	bne.n	80094cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d001      	beq.n	8009546 <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009542:	f000 fbc7 	bl	8009cd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009546:	4b1d      	ldr	r3, [pc, #116]	; (80095bc <xTaskResumeAll+0x13c>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d010      	beq.n	8009574 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009552:	f000 f859 	bl	8009608 <xTaskIncrementTick>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d002      	beq.n	8009562 <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 800955c:	4b16      	ldr	r3, [pc, #88]	; (80095b8 <xTaskResumeAll+0x138>)
 800955e:	2201      	movs	r2, #1
 8009560:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	3b01      	subs	r3, #1
 8009566:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1f1      	bne.n	8009552 <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 800956e:	4b13      	ldr	r3, [pc, #76]	; (80095bc <xTaskResumeAll+0x13c>)
 8009570:	2200      	movs	r2, #0
 8009572:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009574:	4b10      	ldr	r3, [pc, #64]	; (80095b8 <xTaskResumeAll+0x138>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d009      	beq.n	8009590 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800957c:	2301      	movs	r3, #1
 800957e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009580:	4b0f      	ldr	r3, [pc, #60]	; (80095c0 <xTaskResumeAll+0x140>)
 8009582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009586:	601a      	str	r2, [r3, #0]
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009590:	f001 fb48 	bl	800ac24 <vPortExitCritical>

	return xAlreadyYielded;
 8009594:	68bb      	ldr	r3, [r7, #8]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	20028728 	.word	0x20028728
 80095a4:	20028700 	.word	0x20028700
 80095a8:	200286c0 	.word	0x200286c0
 80095ac:	20028708 	.word	0x20028708
 80095b0:	20028230 	.word	0x20028230
 80095b4:	2002822c 	.word	0x2002822c
 80095b8:	20028714 	.word	0x20028714
 80095bc:	20028710 	.word	0x20028710
 80095c0:	e000ed04 	.word	0xe000ed04

080095c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80095ca:	4b05      	ldr	r3, [pc, #20]	; (80095e0 <xTaskGetTickCount+0x1c>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80095d0:	687b      	ldr	r3, [r7, #4]
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	370c      	adds	r7, #12
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	20028704 	.word	0x20028704

080095e4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80095ea:	f001 fbcd 	bl	800ad88 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80095ee:	2300      	movs	r3, #0
 80095f0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80095f2:	4b04      	ldr	r3, [pc, #16]	; (8009604 <xTaskGetTickCountFromISR+0x20>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80095f8:	683b      	ldr	r3, [r7, #0]
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3708      	adds	r7, #8
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	20028704 	.word	0x20028704

08009608 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800960e:	2300      	movs	r3, #0
 8009610:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009612:	4b51      	ldr	r3, [pc, #324]	; (8009758 <xTaskIncrementTick+0x150>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	f040 8093 	bne.w	8009742 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800961c:	4b4f      	ldr	r3, [pc, #316]	; (800975c <xTaskIncrementTick+0x154>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	3301      	adds	r3, #1
 8009622:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009624:	4a4d      	ldr	r2, [pc, #308]	; (800975c <xTaskIncrementTick+0x154>)
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d120      	bne.n	8009672 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009630:	4b4b      	ldr	r3, [pc, #300]	; (8009760 <xTaskIncrementTick+0x158>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00a      	beq.n	8009650 <xTaskIncrementTick+0x48>
	__asm volatile
 800963a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963e:	f383 8811 	msr	BASEPRI, r3
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	603b      	str	r3, [r7, #0]
}
 800964c:	bf00      	nop
 800964e:	e7fe      	b.n	800964e <xTaskIncrementTick+0x46>
 8009650:	4b43      	ldr	r3, [pc, #268]	; (8009760 <xTaskIncrementTick+0x158>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	60fb      	str	r3, [r7, #12]
 8009656:	4b43      	ldr	r3, [pc, #268]	; (8009764 <xTaskIncrementTick+0x15c>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a41      	ldr	r2, [pc, #260]	; (8009760 <xTaskIncrementTick+0x158>)
 800965c:	6013      	str	r3, [r2, #0]
 800965e:	4a41      	ldr	r2, [pc, #260]	; (8009764 <xTaskIncrementTick+0x15c>)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6013      	str	r3, [r2, #0]
 8009664:	4b40      	ldr	r3, [pc, #256]	; (8009768 <xTaskIncrementTick+0x160>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	3301      	adds	r3, #1
 800966a:	4a3f      	ldr	r2, [pc, #252]	; (8009768 <xTaskIncrementTick+0x160>)
 800966c:	6013      	str	r3, [r2, #0]
 800966e:	f000 fb31 	bl	8009cd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009672:	4b3e      	ldr	r3, [pc, #248]	; (800976c <xTaskIncrementTick+0x164>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	693a      	ldr	r2, [r7, #16]
 8009678:	429a      	cmp	r2, r3
 800967a:	d34d      	bcc.n	8009718 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800967c:	4b38      	ldr	r3, [pc, #224]	; (8009760 <xTaskIncrementTick+0x158>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d104      	bne.n	8009690 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009686:	4b39      	ldr	r3, [pc, #228]	; (800976c <xTaskIncrementTick+0x164>)
 8009688:	f04f 32ff 	mov.w	r2, #4294967295
 800968c:	601a      	str	r2, [r3, #0]
					break;
 800968e:	e043      	b.n	8009718 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009690:	4b33      	ldr	r3, [pc, #204]	; (8009760 <xTaskIncrementTick+0x158>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80096a0:	693a      	ldr	r2, [r7, #16]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d203      	bcs.n	80096b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80096a8:	4a30      	ldr	r2, [pc, #192]	; (800976c <xTaskIncrementTick+0x164>)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80096ae:	e033      	b.n	8009718 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	3304      	adds	r3, #4
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7fe fadc 	bl	8007c72 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d004      	beq.n	80096cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	3318      	adds	r3, #24
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7fe fad3 	bl	8007c72 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	4618      	mov	r0, r3
 80096d0:	f002 fece 	bl	800c470 <SEGGER_SYSVIEW_OnTaskStartReady>
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096d8:	4b25      	ldr	r3, [pc, #148]	; (8009770 <xTaskIncrementTick+0x168>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d903      	bls.n	80096e8 <xTaskIncrementTick+0xe0>
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e4:	4a22      	ldr	r2, [pc, #136]	; (8009770 <xTaskIncrementTick+0x168>)
 80096e6:	6013      	str	r3, [r2, #0]
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ec:	4613      	mov	r3, r2
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	4413      	add	r3, r2
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	4a1f      	ldr	r2, [pc, #124]	; (8009774 <xTaskIncrementTick+0x16c>)
 80096f6:	441a      	add	r2, r3
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	3304      	adds	r3, #4
 80096fc:	4619      	mov	r1, r3
 80096fe:	4610      	mov	r0, r2
 8009700:	f7fe fa5a 	bl	8007bb8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009708:	4b1b      	ldr	r3, [pc, #108]	; (8009778 <xTaskIncrementTick+0x170>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970e:	429a      	cmp	r2, r3
 8009710:	d3b4      	bcc.n	800967c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009712:	2301      	movs	r3, #1
 8009714:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009716:	e7b1      	b.n	800967c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009718:	4b17      	ldr	r3, [pc, #92]	; (8009778 <xTaskIncrementTick+0x170>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800971e:	4915      	ldr	r1, [pc, #84]	; (8009774 <xTaskIncrementTick+0x16c>)
 8009720:	4613      	mov	r3, r2
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	4413      	add	r3, r2
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	440b      	add	r3, r1
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2b01      	cmp	r3, #1
 800972e:	d901      	bls.n	8009734 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8009730:	2301      	movs	r3, #1
 8009732:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009734:	4b11      	ldr	r3, [pc, #68]	; (800977c <xTaskIncrementTick+0x174>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d007      	beq.n	800974c <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 800973c:	2301      	movs	r3, #1
 800973e:	617b      	str	r3, [r7, #20]
 8009740:	e004      	b.n	800974c <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009742:	4b0f      	ldr	r3, [pc, #60]	; (8009780 <xTaskIncrementTick+0x178>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	3301      	adds	r3, #1
 8009748:	4a0d      	ldr	r2, [pc, #52]	; (8009780 <xTaskIncrementTick+0x178>)
 800974a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800974c:	697b      	ldr	r3, [r7, #20]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3718      	adds	r7, #24
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	20028728 	.word	0x20028728
 800975c:	20028704 	.word	0x20028704
 8009760:	200286b8 	.word	0x200286b8
 8009764:	200286bc 	.word	0x200286bc
 8009768:	20028718 	.word	0x20028718
 800976c:	20028720 	.word	0x20028720
 8009770:	20028708 	.word	0x20028708
 8009774:	20028230 	.word	0x20028230
 8009778:	2002822c 	.word	0x2002822c
 800977c:	20028714 	.word	0x20028714
 8009780:	20028710 	.word	0x20028710

08009784 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800978a:	4b33      	ldr	r3, [pc, #204]	; (8009858 <vTaskSwitchContext+0xd4>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d003      	beq.n	800979a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009792:	4b32      	ldr	r3, [pc, #200]	; (800985c <vTaskSwitchContext+0xd8>)
 8009794:	2201      	movs	r2, #1
 8009796:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009798:	e059      	b.n	800984e <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 800979a:	4b30      	ldr	r3, [pc, #192]	; (800985c <vTaskSwitchContext+0xd8>)
 800979c:	2200      	movs	r2, #0
 800979e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097a0:	4b2f      	ldr	r3, [pc, #188]	; (8009860 <vTaskSwitchContext+0xdc>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	60fb      	str	r3, [r7, #12]
 80097a6:	e010      	b.n	80097ca <vTaskSwitchContext+0x46>
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10a      	bne.n	80097c4 <vTaskSwitchContext+0x40>
	__asm volatile
 80097ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b2:	f383 8811 	msr	BASEPRI, r3
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	607b      	str	r3, [r7, #4]
}
 80097c0:	bf00      	nop
 80097c2:	e7fe      	b.n	80097c2 <vTaskSwitchContext+0x3e>
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	3b01      	subs	r3, #1
 80097c8:	60fb      	str	r3, [r7, #12]
 80097ca:	4926      	ldr	r1, [pc, #152]	; (8009864 <vTaskSwitchContext+0xe0>)
 80097cc:	68fa      	ldr	r2, [r7, #12]
 80097ce:	4613      	mov	r3, r2
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	4413      	add	r3, r2
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	440b      	add	r3, r1
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d0e4      	beq.n	80097a8 <vTaskSwitchContext+0x24>
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	4613      	mov	r3, r2
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	4413      	add	r3, r2
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	4a1e      	ldr	r2, [pc, #120]	; (8009864 <vTaskSwitchContext+0xe0>)
 80097ea:	4413      	add	r3, r2
 80097ec:	60bb      	str	r3, [r7, #8]
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	685a      	ldr	r2, [r3, #4]
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	605a      	str	r2, [r3, #4]
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	685a      	ldr	r2, [r3, #4]
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	3308      	adds	r3, #8
 8009800:	429a      	cmp	r2, r3
 8009802:	d104      	bne.n	800980e <vTaskSwitchContext+0x8a>
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	685a      	ldr	r2, [r3, #4]
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	605a      	str	r2, [r3, #4]
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	4a14      	ldr	r2, [pc, #80]	; (8009868 <vTaskSwitchContext+0xe4>)
 8009816:	6013      	str	r3, [r2, #0]
 8009818:	4a11      	ldr	r2, [pc, #68]	; (8009860 <vTaskSwitchContext+0xdc>)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800981e:	4b12      	ldr	r3, [pc, #72]	; (8009868 <vTaskSwitchContext+0xe4>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	3334      	adds	r3, #52	; 0x34
 8009824:	2205      	movs	r2, #5
 8009826:	4911      	ldr	r1, [pc, #68]	; (800986c <vTaskSwitchContext+0xe8>)
 8009828:	4618      	mov	r0, r3
 800982a:	f003 fb4a 	bl	800cec2 <memcmp>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d005      	beq.n	8009840 <vTaskSwitchContext+0xbc>
 8009834:	4b0c      	ldr	r3, [pc, #48]	; (8009868 <vTaskSwitchContext+0xe4>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4618      	mov	r0, r3
 800983a:	f002 fdd7 	bl	800c3ec <SEGGER_SYSVIEW_OnTaskStartExec>
 800983e:	e001      	b.n	8009844 <vTaskSwitchContext+0xc0>
 8009840:	f002 fd76 	bl	800c330 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009844:	4b08      	ldr	r3, [pc, #32]	; (8009868 <vTaskSwitchContext+0xe4>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	3354      	adds	r3, #84	; 0x54
 800984a:	4a09      	ldr	r2, [pc, #36]	; (8009870 <vTaskSwitchContext+0xec>)
 800984c:	6013      	str	r3, [r2, #0]
}
 800984e:	bf00      	nop
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	20028728 	.word	0x20028728
 800985c:	20028714 	.word	0x20028714
 8009860:	20028708 	.word	0x20028708
 8009864:	20028230 	.word	0x20028230
 8009868:	2002822c 	.word	0x2002822c
 800986c:	0800f2e8 	.word	0x0800f2e8
 8009870:	20000080 	.word	0x20000080

08009874 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d10a      	bne.n	800989a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009888:	f383 8811 	msr	BASEPRI, r3
 800988c:	f3bf 8f6f 	isb	sy
 8009890:	f3bf 8f4f 	dsb	sy
 8009894:	60fb      	str	r3, [r7, #12]
}
 8009896:	bf00      	nop
 8009898:	e7fe      	b.n	8009898 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800989a:	4b07      	ldr	r3, [pc, #28]	; (80098b8 <vTaskPlaceOnEventList+0x44>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	3318      	adds	r3, #24
 80098a0:	4619      	mov	r1, r3
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f7fe f9ac 	bl	8007c00 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80098a8:	2101      	movs	r1, #1
 80098aa:	6838      	ldr	r0, [r7, #0]
 80098ac:	f000 fbd6 	bl	800a05c <prvAddCurrentTaskToDelayedList>
}
 80098b0:	bf00      	nop
 80098b2:	3710      	adds	r7, #16
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	2002822c 	.word	0x2002822c

080098bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b086      	sub	sp, #24
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d10a      	bne.n	80098e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80098ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d2:	f383 8811 	msr	BASEPRI, r3
 80098d6:	f3bf 8f6f 	isb	sy
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	617b      	str	r3, [r7, #20]
}
 80098e0:	bf00      	nop
 80098e2:	e7fe      	b.n	80098e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80098e4:	4b0b      	ldr	r3, [pc, #44]	; (8009914 <vTaskPlaceOnEventListRestricted+0x58>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	3318      	adds	r3, #24
 80098ea:	4619      	mov	r1, r3
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f7fe f963 	bl	8007bb8 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d002      	beq.n	80098fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80098f8:	f04f 33ff 	mov.w	r3, #4294967295
 80098fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80098fe:	2024      	movs	r0, #36	; 0x24
 8009900:	f002 f892 	bl	800ba28 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009904:	6879      	ldr	r1, [r7, #4]
 8009906:	68b8      	ldr	r0, [r7, #8]
 8009908:	f000 fba8 	bl	800a05c <prvAddCurrentTaskToDelayedList>
	}
 800990c:	bf00      	nop
 800990e:	3718      	adds	r7, #24
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}
 8009914:	2002822c 	.word	0x2002822c

08009918 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b086      	sub	sp, #24
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d10a      	bne.n	8009944 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800992e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009932:	f383 8811 	msr	BASEPRI, r3
 8009936:	f3bf 8f6f 	isb	sy
 800993a:	f3bf 8f4f 	dsb	sy
 800993e:	60fb      	str	r3, [r7, #12]
}
 8009940:	bf00      	nop
 8009942:	e7fe      	b.n	8009942 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	3318      	adds	r3, #24
 8009948:	4618      	mov	r0, r3
 800994a:	f7fe f992 	bl	8007c72 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800994e:	4b20      	ldr	r3, [pc, #128]	; (80099d0 <xTaskRemoveFromEventList+0xb8>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d121      	bne.n	800999a <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	3304      	adds	r3, #4
 800995a:	4618      	mov	r0, r3
 800995c:	f7fe f989 	bl	8007c72 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	4618      	mov	r0, r3
 8009964:	f002 fd84 	bl	800c470 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800996c:	4b19      	ldr	r3, [pc, #100]	; (80099d4 <xTaskRemoveFromEventList+0xbc>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	429a      	cmp	r2, r3
 8009972:	d903      	bls.n	800997c <xTaskRemoveFromEventList+0x64>
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009978:	4a16      	ldr	r2, [pc, #88]	; (80099d4 <xTaskRemoveFromEventList+0xbc>)
 800997a:	6013      	str	r3, [r2, #0]
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009980:	4613      	mov	r3, r2
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	4413      	add	r3, r2
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	4a13      	ldr	r2, [pc, #76]	; (80099d8 <xTaskRemoveFromEventList+0xc0>)
 800998a:	441a      	add	r2, r3
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	3304      	adds	r3, #4
 8009990:	4619      	mov	r1, r3
 8009992:	4610      	mov	r0, r2
 8009994:	f7fe f910 	bl	8007bb8 <vListInsertEnd>
 8009998:	e005      	b.n	80099a6 <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	3318      	adds	r3, #24
 800999e:	4619      	mov	r1, r3
 80099a0:	480e      	ldr	r0, [pc, #56]	; (80099dc <xTaskRemoveFromEventList+0xc4>)
 80099a2:	f7fe f909 	bl	8007bb8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099aa:	4b0d      	ldr	r3, [pc, #52]	; (80099e0 <xTaskRemoveFromEventList+0xc8>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d905      	bls.n	80099c0 <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80099b4:	2301      	movs	r3, #1
 80099b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80099b8:	4b0a      	ldr	r3, [pc, #40]	; (80099e4 <xTaskRemoveFromEventList+0xcc>)
 80099ba:	2201      	movs	r2, #1
 80099bc:	601a      	str	r2, [r3, #0]
 80099be:	e001      	b.n	80099c4 <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 80099c0:	2300      	movs	r3, #0
 80099c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80099c4:	697b      	ldr	r3, [r7, #20]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3718      	adds	r7, #24
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	20028728 	.word	0x20028728
 80099d4:	20028708 	.word	0x20028708
 80099d8:	20028230 	.word	0x20028230
 80099dc:	200286c0 	.word	0x200286c0
 80099e0:	2002822c 	.word	0x2002822c
 80099e4:	20028714 	.word	0x20028714

080099e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80099f0:	4b06      	ldr	r3, [pc, #24]	; (8009a0c <vTaskInternalSetTimeOutState+0x24>)
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80099f8:	4b05      	ldr	r3, [pc, #20]	; (8009a10 <vTaskInternalSetTimeOutState+0x28>)
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	605a      	str	r2, [r3, #4]
}
 8009a00:	bf00      	nop
 8009a02:	370c      	adds	r7, #12
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr
 8009a0c:	20028718 	.word	0x20028718
 8009a10:	20028704 	.word	0x20028704

08009a14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b088      	sub	sp, #32
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10a      	bne.n	8009a3a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a28:	f383 8811 	msr	BASEPRI, r3
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	613b      	str	r3, [r7, #16]
}
 8009a36:	bf00      	nop
 8009a38:	e7fe      	b.n	8009a38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d10a      	bne.n	8009a56 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a44:	f383 8811 	msr	BASEPRI, r3
 8009a48:	f3bf 8f6f 	isb	sy
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	60fb      	str	r3, [r7, #12]
}
 8009a52:	bf00      	nop
 8009a54:	e7fe      	b.n	8009a54 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009a56:	f001 f8b5 	bl	800abc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009a5a:	4b1d      	ldr	r3, [pc, #116]	; (8009ad0 <xTaskCheckForTimeOut+0xbc>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	69ba      	ldr	r2, [r7, #24]
 8009a66:	1ad3      	subs	r3, r2, r3
 8009a68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a72:	d102      	bne.n	8009a7a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009a74:	2300      	movs	r3, #0
 8009a76:	61fb      	str	r3, [r7, #28]
 8009a78:	e023      	b.n	8009ac2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	4b15      	ldr	r3, [pc, #84]	; (8009ad4 <xTaskCheckForTimeOut+0xc0>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d007      	beq.n	8009a96 <xTaskCheckForTimeOut+0x82>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	69ba      	ldr	r2, [r7, #24]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d302      	bcc.n	8009a96 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009a90:	2301      	movs	r3, #1
 8009a92:	61fb      	str	r3, [r7, #28]
 8009a94:	e015      	b.n	8009ac2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	697a      	ldr	r2, [r7, #20]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d20b      	bcs.n	8009ab8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	1ad2      	subs	r2, r2, r3
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f7ff ff9b 	bl	80099e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	61fb      	str	r3, [r7, #28]
 8009ab6:	e004      	b.n	8009ac2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	2200      	movs	r2, #0
 8009abc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009ac2:	f001 f8af 	bl	800ac24 <vPortExitCritical>

	return xReturn;
 8009ac6:	69fb      	ldr	r3, [r7, #28]
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3720      	adds	r7, #32
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	20028704 	.word	0x20028704
 8009ad4:	20028718 	.word	0x20028718

08009ad8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009ad8:	b480      	push	{r7}
 8009ada:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009adc:	4b03      	ldr	r3, [pc, #12]	; (8009aec <vTaskMissedYield+0x14>)
 8009ade:	2201      	movs	r2, #1
 8009ae0:	601a      	str	r2, [r3, #0]
}
 8009ae2:	bf00      	nop
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr
 8009aec:	20028714 	.word	0x20028714

08009af0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009af8:	f000 f852 	bl	8009ba0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009afc:	4b06      	ldr	r3, [pc, #24]	; (8009b18 <prvIdleTask+0x28>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d9f9      	bls.n	8009af8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009b04:	4b05      	ldr	r3, [pc, #20]	; (8009b1c <prvIdleTask+0x2c>)
 8009b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b0a:	601a      	str	r2, [r3, #0]
 8009b0c:	f3bf 8f4f 	dsb	sy
 8009b10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009b14:	e7f0      	b.n	8009af8 <prvIdleTask+0x8>
 8009b16:	bf00      	nop
 8009b18:	20028230 	.word	0x20028230
 8009b1c:	e000ed04 	.word	0xe000ed04

08009b20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b26:	2300      	movs	r3, #0
 8009b28:	607b      	str	r3, [r7, #4]
 8009b2a:	e00c      	b.n	8009b46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	4613      	mov	r3, r2
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	4413      	add	r3, r2
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	4a12      	ldr	r2, [pc, #72]	; (8009b80 <prvInitialiseTaskLists+0x60>)
 8009b38:	4413      	add	r3, r2
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7fe f80f 	bl	8007b5e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	3301      	adds	r3, #1
 8009b44:	607b      	str	r3, [r7, #4]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2b37      	cmp	r3, #55	; 0x37
 8009b4a:	d9ef      	bls.n	8009b2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009b4c:	480d      	ldr	r0, [pc, #52]	; (8009b84 <prvInitialiseTaskLists+0x64>)
 8009b4e:	f7fe f806 	bl	8007b5e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009b52:	480d      	ldr	r0, [pc, #52]	; (8009b88 <prvInitialiseTaskLists+0x68>)
 8009b54:	f7fe f803 	bl	8007b5e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009b58:	480c      	ldr	r0, [pc, #48]	; (8009b8c <prvInitialiseTaskLists+0x6c>)
 8009b5a:	f7fe f800 	bl	8007b5e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009b5e:	480c      	ldr	r0, [pc, #48]	; (8009b90 <prvInitialiseTaskLists+0x70>)
 8009b60:	f7fd fffd 	bl	8007b5e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009b64:	480b      	ldr	r0, [pc, #44]	; (8009b94 <prvInitialiseTaskLists+0x74>)
 8009b66:	f7fd fffa 	bl	8007b5e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009b6a:	4b0b      	ldr	r3, [pc, #44]	; (8009b98 <prvInitialiseTaskLists+0x78>)
 8009b6c:	4a05      	ldr	r2, [pc, #20]	; (8009b84 <prvInitialiseTaskLists+0x64>)
 8009b6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009b70:	4b0a      	ldr	r3, [pc, #40]	; (8009b9c <prvInitialiseTaskLists+0x7c>)
 8009b72:	4a05      	ldr	r2, [pc, #20]	; (8009b88 <prvInitialiseTaskLists+0x68>)
 8009b74:	601a      	str	r2, [r3, #0]
}
 8009b76:	bf00      	nop
 8009b78:	3708      	adds	r7, #8
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	20028230 	.word	0x20028230
 8009b84:	20028690 	.word	0x20028690
 8009b88:	200286a4 	.word	0x200286a4
 8009b8c:	200286c0 	.word	0x200286c0
 8009b90:	200286d4 	.word	0x200286d4
 8009b94:	200286ec 	.word	0x200286ec
 8009b98:	200286b8 	.word	0x200286b8
 8009b9c:	200286bc 	.word	0x200286bc

08009ba0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ba6:	e019      	b.n	8009bdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009ba8:	f001 f80c 	bl	800abc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bac:	4b10      	ldr	r3, [pc, #64]	; (8009bf0 <prvCheckTasksWaitingTermination+0x50>)
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	3304      	adds	r3, #4
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7fe f85a 	bl	8007c72 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009bbe:	4b0d      	ldr	r3, [pc, #52]	; (8009bf4 <prvCheckTasksWaitingTermination+0x54>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	3b01      	subs	r3, #1
 8009bc4:	4a0b      	ldr	r2, [pc, #44]	; (8009bf4 <prvCheckTasksWaitingTermination+0x54>)
 8009bc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009bc8:	4b0b      	ldr	r3, [pc, #44]	; (8009bf8 <prvCheckTasksWaitingTermination+0x58>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	4a0a      	ldr	r2, [pc, #40]	; (8009bf8 <prvCheckTasksWaitingTermination+0x58>)
 8009bd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009bd2:	f001 f827 	bl	800ac24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 f848 	bl	8009c6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009bdc:	4b06      	ldr	r3, [pc, #24]	; (8009bf8 <prvCheckTasksWaitingTermination+0x58>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d1e1      	bne.n	8009ba8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009be4:	bf00      	nop
 8009be6:	bf00      	nop
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	200286d4 	.word	0x200286d4
 8009bf4:	20028700 	.word	0x20028700
 8009bf8:	200286e8 	.word	0x200286e8

08009bfc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b085      	sub	sp, #20
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8009c04:	2300      	movs	r3, #0
 8009c06:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009c08:	e005      	b.n	8009c16 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	607b      	str	r3, [r7, #4]
			ulCount++;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	3301      	adds	r3, #1
 8009c14:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	2ba5      	cmp	r3, #165	; 0xa5
 8009c1c:	d0f5      	beq.n	8009c0a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	089b      	lsrs	r3, r3, #2
 8009c22:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	b29b      	uxth	r3, r3
	}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3714      	adds	r7, #20
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b086      	sub	sp, #24
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d102      	bne.n	8009c48 <uxTaskGetStackHighWaterMark+0x14>
 8009c42:	4b09      	ldr	r3, [pc, #36]	; (8009c68 <uxTaskGetStackHighWaterMark+0x34>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	e000      	b.n	8009c4a <uxTaskGetStackHighWaterMark+0x16>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c50:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8009c52:	6938      	ldr	r0, [r7, #16]
 8009c54:	f7ff ffd2 	bl	8009bfc <prvTaskCheckFreeStackSpace>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
	}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3718      	adds	r7, #24
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	2002822c 	.word	0x2002822c

08009c6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	3354      	adds	r3, #84	; 0x54
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f003 f965 	bl	800cf48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d108      	bne.n	8009c9a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f001 f987 	bl	800afa0 <vPortFree>
				vPortFree( pxTCB );
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f001 f984 	bl	800afa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009c98:	e018      	b.n	8009ccc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d103      	bne.n	8009cac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f001 f97b 	bl	800afa0 <vPortFree>
	}
 8009caa:	e00f      	b.n	8009ccc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	d00a      	beq.n	8009ccc <prvDeleteTCB+0x60>
	__asm volatile
 8009cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cba:	f383 8811 	msr	BASEPRI, r3
 8009cbe:	f3bf 8f6f 	isb	sy
 8009cc2:	f3bf 8f4f 	dsb	sy
 8009cc6:	60fb      	str	r3, [r7, #12]
}
 8009cc8:	bf00      	nop
 8009cca:	e7fe      	b.n	8009cca <prvDeleteTCB+0x5e>
	}
 8009ccc:	bf00      	nop
 8009cce:	3710      	adds	r7, #16
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009cda:	4b0c      	ldr	r3, [pc, #48]	; (8009d0c <prvResetNextTaskUnblockTime+0x38>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d104      	bne.n	8009cee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ce4:	4b0a      	ldr	r3, [pc, #40]	; (8009d10 <prvResetNextTaskUnblockTime+0x3c>)
 8009ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8009cea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009cec:	e008      	b.n	8009d00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cee:	4b07      	ldr	r3, [pc, #28]	; (8009d0c <prvResetNextTaskUnblockTime+0x38>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	4a04      	ldr	r2, [pc, #16]	; (8009d10 <prvResetNextTaskUnblockTime+0x3c>)
 8009cfe:	6013      	str	r3, [r2, #0]
}
 8009d00:	bf00      	nop
 8009d02:	370c      	adds	r7, #12
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr
 8009d0c:	200286b8 	.word	0x200286b8
 8009d10:	20028720 	.word	0x20028720

08009d14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009d1a:	4b0b      	ldr	r3, [pc, #44]	; (8009d48 <xTaskGetSchedulerState+0x34>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d102      	bne.n	8009d28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009d22:	2301      	movs	r3, #1
 8009d24:	607b      	str	r3, [r7, #4]
 8009d26:	e008      	b.n	8009d3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d28:	4b08      	ldr	r3, [pc, #32]	; (8009d4c <xTaskGetSchedulerState+0x38>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d102      	bne.n	8009d36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009d30:	2302      	movs	r3, #2
 8009d32:	607b      	str	r3, [r7, #4]
 8009d34:	e001      	b.n	8009d3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009d36:	2300      	movs	r3, #0
 8009d38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009d3a:	687b      	ldr	r3, [r7, #4]
	}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr
 8009d48:	2002870c 	.word	0x2002870c
 8009d4c:	20028728 	.word	0x20028728

08009d50 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d05a      	beq.n	8009e1c <xTaskPriorityInherit+0xcc>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d6a:	4b2f      	ldr	r3, [pc, #188]	; (8009e28 <xTaskPriorityInherit+0xd8>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d24a      	bcs.n	8009e0a <xTaskPriorityInherit+0xba>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	db06      	blt.n	8009d8a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d7c:	4b2a      	ldr	r3, [pc, #168]	; (8009e28 <xTaskPriorityInherit+0xd8>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	6959      	ldr	r1, [r3, #20]
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d92:	4613      	mov	r3, r2
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	4413      	add	r3, r2
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	4a24      	ldr	r2, [pc, #144]	; (8009e2c <xTaskPriorityInherit+0xdc>)
 8009d9c:	4413      	add	r3, r2
 8009d9e:	4299      	cmp	r1, r3
 8009da0:	d126      	bne.n	8009df0 <xTaskPriorityInherit+0xa0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	3304      	adds	r3, #4
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fd ff63 	bl	8007c72 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009dac:	4b1e      	ldr	r3, [pc, #120]	; (8009e28 <xTaskPriorityInherit+0xd8>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	4618      	mov	r0, r3
 8009dba:	f002 fb59 	bl	800c470 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dc2:	4b1b      	ldr	r3, [pc, #108]	; (8009e30 <xTaskPriorityInherit+0xe0>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d903      	bls.n	8009dd2 <xTaskPriorityInherit+0x82>
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dce:	4a18      	ldr	r2, [pc, #96]	; (8009e30 <xTaskPriorityInherit+0xe0>)
 8009dd0:	6013      	str	r3, [r2, #0]
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	4413      	add	r3, r2
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	4a13      	ldr	r2, [pc, #76]	; (8009e2c <xTaskPriorityInherit+0xdc>)
 8009de0:	441a      	add	r2, r3
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	3304      	adds	r3, #4
 8009de6:	4619      	mov	r1, r3
 8009de8:	4610      	mov	r0, r2
 8009dea:	f7fd fee5 	bl	8007bb8 <vListInsertEnd>
 8009dee:	e004      	b.n	8009dfa <xTaskPriorityInherit+0xaa>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009df0:	4b0d      	ldr	r3, [pc, #52]	; (8009e28 <xTaskPriorityInherit+0xd8>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	2049      	movs	r0, #73	; 0x49
 8009e00:	f001 fe30 	bl	800ba64 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009e04:	2301      	movs	r3, #1
 8009e06:	60fb      	str	r3, [r7, #12]
 8009e08:	e008      	b.n	8009e1c <xTaskPriorityInherit+0xcc>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e0e:	4b06      	ldr	r3, [pc, #24]	; (8009e28 <xTaskPriorityInherit+0xd8>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d201      	bcs.n	8009e1c <xTaskPriorityInherit+0xcc>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
	}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	2002822c 	.word	0x2002822c
 8009e2c:	20028230 	.word	0x20028230
 8009e30:	20028708 	.word	0x20028708

08009e34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009e40:	2300      	movs	r3, #0
 8009e42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d05f      	beq.n	8009f0a <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e4a:	4b32      	ldr	r3, [pc, #200]	; (8009f14 <xTaskPriorityDisinherit+0xe0>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	693a      	ldr	r2, [r7, #16]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d00a      	beq.n	8009e6a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e58:	f383 8811 	msr	BASEPRI, r3
 8009e5c:	f3bf 8f6f 	isb	sy
 8009e60:	f3bf 8f4f 	dsb	sy
 8009e64:	60fb      	str	r3, [r7, #12]
}
 8009e66:	bf00      	nop
 8009e68:	e7fe      	b.n	8009e68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d10a      	bne.n	8009e88 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e76:	f383 8811 	msr	BASEPRI, r3
 8009e7a:	f3bf 8f6f 	isb	sy
 8009e7e:	f3bf 8f4f 	dsb	sy
 8009e82:	60bb      	str	r3, [r7, #8]
}
 8009e84:	bf00      	nop
 8009e86:	e7fe      	b.n	8009e86 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e8c:	1e5a      	subs	r2, r3, #1
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d035      	beq.n	8009f0a <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d131      	bne.n	8009f0a <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	3304      	adds	r3, #4
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7fd fee1 	bl	8007c72 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4619      	mov	r1, r3
 8009eb4:	204a      	movs	r0, #74	; 0x4a
 8009eb6:	f001 fdd5 	bl	800ba64 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f002 facd 	bl	800c470 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eda:	4b0f      	ldr	r3, [pc, #60]	; (8009f18 <xTaskPriorityDisinherit+0xe4>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d903      	bls.n	8009eea <xTaskPriorityDisinherit+0xb6>
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee6:	4a0c      	ldr	r2, [pc, #48]	; (8009f18 <xTaskPriorityDisinherit+0xe4>)
 8009ee8:	6013      	str	r3, [r2, #0]
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eee:	4613      	mov	r3, r2
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	4413      	add	r3, r2
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	4a09      	ldr	r2, [pc, #36]	; (8009f1c <xTaskPriorityDisinherit+0xe8>)
 8009ef8:	441a      	add	r2, r3
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	3304      	adds	r3, #4
 8009efe:	4619      	mov	r1, r3
 8009f00:	4610      	mov	r0, r2
 8009f02:	f7fd fe59 	bl	8007bb8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009f06:	2301      	movs	r3, #1
 8009f08:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f0a:	697b      	ldr	r3, [r7, #20]
	}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3718      	adds	r7, #24
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	2002822c 	.word	0x2002822c
 8009f18:	20028708 	.word	0x20028708
 8009f1c:	20028230 	.word	0x20028230

08009f20 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b088      	sub	sp, #32
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d073      	beq.n	800a020 <vTaskPriorityDisinheritAfterTimeout+0x100>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009f38:	69bb      	ldr	r3, [r7, #24]
 8009f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d10a      	bne.n	8009f56 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	60fb      	str	r3, [r7, #12]
}
 8009f52:	bf00      	nop
 8009f54:	e7fe      	b.n	8009f54 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f5a:	683a      	ldr	r2, [r7, #0]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d902      	bls.n	8009f66 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	61fb      	str	r3, [r7, #28]
 8009f64:	e002      	b.n	8009f6c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009f66:	69bb      	ldr	r3, [r7, #24]
 8009f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f6a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009f6c:	69bb      	ldr	r3, [r7, #24]
 8009f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f70:	69fa      	ldr	r2, [r7, #28]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d054      	beq.n	800a020 <vTaskPriorityDisinheritAfterTimeout+0x100>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009f76:	69bb      	ldr	r3, [r7, #24]
 8009f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f7a:	697a      	ldr	r2, [r7, #20]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d14f      	bne.n	800a020 <vTaskPriorityDisinheritAfterTimeout+0x100>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009f80:	4b29      	ldr	r3, [pc, #164]	; (800a028 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	69ba      	ldr	r2, [r7, #24]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d10a      	bne.n	8009fa0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8e:	f383 8811 	msr	BASEPRI, r3
 8009f92:	f3bf 8f6f 	isb	sy
 8009f96:	f3bf 8f4f 	dsb	sy
 8009f9a:	60bb      	str	r3, [r7, #8]
}
 8009f9c:	bf00      	nop
 8009f9e:	e7fe      	b.n	8009f9e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	204a      	movs	r0, #74	; 0x4a
 8009fa6:	f001 fd5d 	bl	800ba64 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fae:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009fb0:	69bb      	ldr	r3, [r7, #24]
 8009fb2:	69fa      	ldr	r2, [r7, #28]
 8009fb4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009fb6:	69bb      	ldr	r3, [r7, #24]
 8009fb8:	699b      	ldr	r3, [r3, #24]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	db04      	blt.n	8009fc8 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009fc4:	69bb      	ldr	r3, [r7, #24]
 8009fc6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	6959      	ldr	r1, [r3, #20]
 8009fcc:	693a      	ldr	r2, [r7, #16]
 8009fce:	4613      	mov	r3, r2
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	4413      	add	r3, r2
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	4a15      	ldr	r2, [pc, #84]	; (800a02c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8009fd8:	4413      	add	r3, r2
 8009fda:	4299      	cmp	r1, r3
 8009fdc:	d120      	bne.n	800a020 <vTaskPriorityDisinheritAfterTimeout+0x100>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	3304      	adds	r3, #4
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f7fd fe45 	bl	8007c72 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	4618      	mov	r0, r3
 8009fec:	f002 fa40 	bl	800c470 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009ff0:	69bb      	ldr	r3, [r7, #24]
 8009ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff4:	4b0e      	ldr	r3, [pc, #56]	; (800a030 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d903      	bls.n	800a004 <vTaskPriorityDisinheritAfterTimeout+0xe4>
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a000:	4a0b      	ldr	r2, [pc, #44]	; (800a030 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800a002:	6013      	str	r3, [r2, #0]
 800a004:	69bb      	ldr	r3, [r7, #24]
 800a006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a008:	4613      	mov	r3, r2
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	4413      	add	r3, r2
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	4a06      	ldr	r2, [pc, #24]	; (800a02c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800a012:	441a      	add	r2, r3
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	3304      	adds	r3, #4
 800a018:	4619      	mov	r1, r3
 800a01a:	4610      	mov	r0, r2
 800a01c:	f7fd fdcc 	bl	8007bb8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a020:	bf00      	nop
 800a022:	3720      	adds	r7, #32
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	2002822c 	.word	0x2002822c
 800a02c:	20028230 	.word	0x20028230
 800a030:	20028708 	.word	0x20028708

0800a034 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a034:	b480      	push	{r7}
 800a036:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a038:	4b07      	ldr	r3, [pc, #28]	; (800a058 <pvTaskIncrementMutexHeldCount+0x24>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d004      	beq.n	800a04a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a040:	4b05      	ldr	r3, [pc, #20]	; (800a058 <pvTaskIncrementMutexHeldCount+0x24>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a046:	3201      	adds	r2, #1
 800a048:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a04a:	4b03      	ldr	r3, [pc, #12]	; (800a058 <pvTaskIncrementMutexHeldCount+0x24>)
 800a04c:	681b      	ldr	r3, [r3, #0]
	}
 800a04e:	4618      	mov	r0, r3
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr
 800a058:	2002822c 	.word	0x2002822c

0800a05c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a066:	4b21      	ldr	r3, [pc, #132]	; (800a0ec <prvAddCurrentTaskToDelayedList+0x90>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a06c:	4b20      	ldr	r3, [pc, #128]	; (800a0f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	3304      	adds	r3, #4
 800a072:	4618      	mov	r0, r3
 800a074:	f7fd fdfd 	bl	8007c72 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a07e:	d10a      	bne.n	800a096 <prvAddCurrentTaskToDelayedList+0x3a>
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d007      	beq.n	800a096 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a086:	4b1a      	ldr	r3, [pc, #104]	; (800a0f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	3304      	adds	r3, #4
 800a08c:	4619      	mov	r1, r3
 800a08e:	4819      	ldr	r0, [pc, #100]	; (800a0f4 <prvAddCurrentTaskToDelayedList+0x98>)
 800a090:	f7fd fd92 	bl	8007bb8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a094:	e026      	b.n	800a0e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4413      	add	r3, r2
 800a09c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a09e:	4b14      	ldr	r3, [pc, #80]	; (800a0f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	68ba      	ldr	r2, [r7, #8]
 800a0a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a0a6:	68ba      	ldr	r2, [r7, #8]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d209      	bcs.n	800a0c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0ae:	4b12      	ldr	r3, [pc, #72]	; (800a0f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	4b0f      	ldr	r3, [pc, #60]	; (800a0f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	3304      	adds	r3, #4
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	4610      	mov	r0, r2
 800a0bc:	f7fd fda0 	bl	8007c00 <vListInsert>
}
 800a0c0:	e010      	b.n	800a0e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0c2:	4b0e      	ldr	r3, [pc, #56]	; (800a0fc <prvAddCurrentTaskToDelayedList+0xa0>)
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	4b0a      	ldr	r3, [pc, #40]	; (800a0f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	3304      	adds	r3, #4
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	4610      	mov	r0, r2
 800a0d0:	f7fd fd96 	bl	8007c00 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a0d4:	4b0a      	ldr	r3, [pc, #40]	; (800a100 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	68ba      	ldr	r2, [r7, #8]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d202      	bcs.n	800a0e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a0de:	4a08      	ldr	r2, [pc, #32]	; (800a100 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	6013      	str	r3, [r2, #0]
}
 800a0e4:	bf00      	nop
 800a0e6:	3710      	adds	r7, #16
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	20028704 	.word	0x20028704
 800a0f0:	2002822c 	.word	0x2002822c
 800a0f4:	200286ec 	.word	0x200286ec
 800a0f8:	200286bc 	.word	0x200286bc
 800a0fc:	200286b8 	.word	0x200286b8
 800a100:	20028720 	.word	0x20028720

0800a104 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b08a      	sub	sp, #40	; 0x28
 800a108:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a10a:	2300      	movs	r3, #0
 800a10c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a10e:	f000 fba1 	bl	800a854 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a112:	4b1c      	ldr	r3, [pc, #112]	; (800a184 <xTimerCreateTimerTask+0x80>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d021      	beq.n	800a15e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a11a:	2300      	movs	r3, #0
 800a11c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a11e:	2300      	movs	r3, #0
 800a120:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a122:	1d3a      	adds	r2, r7, #4
 800a124:	f107 0108 	add.w	r1, r7, #8
 800a128:	f107 030c 	add.w	r3, r7, #12
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7fd fcab 	bl	8007a88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a132:	6879      	ldr	r1, [r7, #4]
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	68fa      	ldr	r2, [r7, #12]
 800a138:	9202      	str	r2, [sp, #8]
 800a13a:	9301      	str	r3, [sp, #4]
 800a13c:	2302      	movs	r3, #2
 800a13e:	9300      	str	r3, [sp, #0]
 800a140:	2300      	movs	r3, #0
 800a142:	460a      	mov	r2, r1
 800a144:	4910      	ldr	r1, [pc, #64]	; (800a188 <xTimerCreateTimerTask+0x84>)
 800a146:	4811      	ldr	r0, [pc, #68]	; (800a18c <xTimerCreateTimerTask+0x88>)
 800a148:	f7fe fefc 	bl	8008f44 <xTaskCreateStatic>
 800a14c:	4603      	mov	r3, r0
 800a14e:	4a10      	ldr	r2, [pc, #64]	; (800a190 <xTimerCreateTimerTask+0x8c>)
 800a150:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a152:	4b0f      	ldr	r3, [pc, #60]	; (800a190 <xTimerCreateTimerTask+0x8c>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d001      	beq.n	800a15e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a15a:	2301      	movs	r3, #1
 800a15c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d10a      	bne.n	800a17a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a168:	f383 8811 	msr	BASEPRI, r3
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	613b      	str	r3, [r7, #16]
}
 800a176:	bf00      	nop
 800a178:	e7fe      	b.n	800a178 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a17a:	697b      	ldr	r3, [r7, #20]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3718      	adds	r7, #24
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	2002875c 	.word	0x2002875c
 800a188:	0800f2f0 	.word	0x0800f2f0
 800a18c:	0800a3fd 	.word	0x0800a3fd
 800a190:	20028760 	.word	0x20028760

0800a194 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a194:	b580      	push	{r7, lr}
 800a196:	b088      	sub	sp, #32
 800a198:	af02      	add	r7, sp, #8
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	607a      	str	r2, [r7, #4]
 800a1a0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a1a2:	202c      	movs	r0, #44	; 0x2c
 800a1a4:	f000 fe30 	bl	800ae08 <pvPortMalloc>
 800a1a8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d00d      	beq.n	800a1cc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	9301      	str	r3, [sp, #4]
 800a1bc:	6a3b      	ldr	r3, [r7, #32]
 800a1be:	9300      	str	r3, [sp, #0]
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	68b9      	ldr	r1, [r7, #8]
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	f000 f843 	bl	800a252 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a1cc:	697b      	ldr	r3, [r7, #20]
	}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3718      	adds	r7, #24
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}

0800a1d6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b08a      	sub	sp, #40	; 0x28
 800a1da:	af02      	add	r7, sp, #8
 800a1dc:	60f8      	str	r0, [r7, #12]
 800a1de:	60b9      	str	r1, [r7, #8]
 800a1e0:	607a      	str	r2, [r7, #4]
 800a1e2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a1e4:	232c      	movs	r3, #44	; 0x2c
 800a1e6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	2b2c      	cmp	r3, #44	; 0x2c
 800a1ec:	d00a      	beq.n	800a204 <xTimerCreateStatic+0x2e>
	__asm volatile
 800a1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f2:	f383 8811 	msr	BASEPRI, r3
 800a1f6:	f3bf 8f6f 	isb	sy
 800a1fa:	f3bf 8f4f 	dsb	sy
 800a1fe:	61bb      	str	r3, [r7, #24]
}
 800a200:	bf00      	nop
 800a202:	e7fe      	b.n	800a202 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a204:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800a206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d10a      	bne.n	800a222 <xTimerCreateStatic+0x4c>
	__asm volatile
 800a20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a210:	f383 8811 	msr	BASEPRI, r3
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	f3bf 8f4f 	dsb	sy
 800a21c:	617b      	str	r3, [r7, #20]
}
 800a21e:	bf00      	nop
 800a220:	e7fe      	b.n	800a220 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800a222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a224:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800a226:	69fb      	ldr	r3, [r7, #28]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00d      	beq.n	800a248 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	2202      	movs	r2, #2
 800a230:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	9301      	str	r3, [sp, #4]
 800a238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23a:	9300      	str	r3, [sp, #0]
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	68b9      	ldr	r1, [r7, #8]
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f000 f805 	bl	800a252 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a248:	69fb      	ldr	r3, [r7, #28]
	}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3720      	adds	r7, #32
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b086      	sub	sp, #24
 800a256:	af00      	add	r7, sp, #0
 800a258:	60f8      	str	r0, [r7, #12]
 800a25a:	60b9      	str	r1, [r7, #8]
 800a25c:	607a      	str	r2, [r7, #4]
 800a25e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d10a      	bne.n	800a27c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800a266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26a:	f383 8811 	msr	BASEPRI, r3
 800a26e:	f3bf 8f6f 	isb	sy
 800a272:	f3bf 8f4f 	dsb	sy
 800a276:	617b      	str	r3, [r7, #20]
}
 800a278:	bf00      	nop
 800a27a:	e7fe      	b.n	800a27a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800a27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d01e      	beq.n	800a2c0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a282:	f000 fae7 	bl	800a854 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28e:	68ba      	ldr	r2, [r7, #8]
 800a290:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a294:	683a      	ldr	r2, [r7, #0]
 800a296:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29a:	6a3a      	ldr	r2, [r7, #32]
 800a29c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a0:	3304      	adds	r3, #4
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7fd fc7b 	bl	8007b9e <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d008      	beq.n	800a2c0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2b4:	f043 0304 	orr.w	r3, r3, #4
 800a2b8:	b2da      	uxtb	r2, r3
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a2c0:	bf00      	nop
 800a2c2:	3718      	adds	r7, #24
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b08a      	sub	sp, #40	; 0x28
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
 800a2d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d10a      	bne.n	800a2f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e4:	f383 8811 	msr	BASEPRI, r3
 800a2e8:	f3bf 8f6f 	isb	sy
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	623b      	str	r3, [r7, #32]
}
 800a2f2:	bf00      	nop
 800a2f4:	e7fe      	b.n	800a2f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a2f6:	4b1a      	ldr	r3, [pc, #104]	; (800a360 <xTimerGenericCommand+0x98>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d02a      	beq.n	800a354 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	2b05      	cmp	r3, #5
 800a30e:	dc18      	bgt.n	800a342 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a310:	f7ff fd00 	bl	8009d14 <xTaskGetSchedulerState>
 800a314:	4603      	mov	r3, r0
 800a316:	2b02      	cmp	r3, #2
 800a318:	d109      	bne.n	800a32e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a31a:	4b11      	ldr	r3, [pc, #68]	; (800a360 <xTimerGenericCommand+0x98>)
 800a31c:	6818      	ldr	r0, [r3, #0]
 800a31e:	f107 0110 	add.w	r1, r7, #16
 800a322:	2300      	movs	r3, #0
 800a324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a326:	f7fd fec9 	bl	80080bc <xQueueGenericSend>
 800a32a:	6278      	str	r0, [r7, #36]	; 0x24
 800a32c:	e012      	b.n	800a354 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a32e:	4b0c      	ldr	r3, [pc, #48]	; (800a360 <xTimerGenericCommand+0x98>)
 800a330:	6818      	ldr	r0, [r3, #0]
 800a332:	f107 0110 	add.w	r1, r7, #16
 800a336:	2300      	movs	r3, #0
 800a338:	2200      	movs	r2, #0
 800a33a:	f7fd febf 	bl	80080bc <xQueueGenericSend>
 800a33e:	6278      	str	r0, [r7, #36]	; 0x24
 800a340:	e008      	b.n	800a354 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a342:	4b07      	ldr	r3, [pc, #28]	; (800a360 <xTimerGenericCommand+0x98>)
 800a344:	6818      	ldr	r0, [r3, #0]
 800a346:	f107 0110 	add.w	r1, r7, #16
 800a34a:	2300      	movs	r3, #0
 800a34c:	683a      	ldr	r2, [r7, #0]
 800a34e:	f7fd ffdb 	bl	8008308 <xQueueGenericSendFromISR>
 800a352:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a356:	4618      	mov	r0, r3
 800a358:	3728      	adds	r7, #40	; 0x28
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	2002875c 	.word	0x2002875c

0800a364 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b088      	sub	sp, #32
 800a368:	af02      	add	r7, sp, #8
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a36e:	4b22      	ldr	r3, [pc, #136]	; (800a3f8 <prvProcessExpiredTimer+0x94>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	3304      	adds	r3, #4
 800a37c:	4618      	mov	r0, r3
 800a37e:	f7fd fc78 	bl	8007c72 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a388:	f003 0304 	and.w	r3, r3, #4
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d022      	beq.n	800a3d6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	699a      	ldr	r2, [r3, #24]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	18d1      	adds	r1, r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	683a      	ldr	r2, [r7, #0]
 800a39c:	6978      	ldr	r0, [r7, #20]
 800a39e:	f000 f8d1 	bl	800a544 <prvInsertTimerInActiveList>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d01f      	beq.n	800a3e8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	9300      	str	r3, [sp, #0]
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	6978      	ldr	r0, [r7, #20]
 800a3b4:	f7ff ff88 	bl	800a2c8 <xTimerGenericCommand>
 800a3b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d113      	bne.n	800a3e8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c4:	f383 8811 	msr	BASEPRI, r3
 800a3c8:	f3bf 8f6f 	isb	sy
 800a3cc:	f3bf 8f4f 	dsb	sy
 800a3d0:	60fb      	str	r3, [r7, #12]
}
 800a3d2:	bf00      	nop
 800a3d4:	e7fe      	b.n	800a3d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3dc:	f023 0301 	bic.w	r3, r3, #1
 800a3e0:	b2da      	uxtb	r2, r3
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	6a1b      	ldr	r3, [r3, #32]
 800a3ec:	6978      	ldr	r0, [r7, #20]
 800a3ee:	4798      	blx	r3
}
 800a3f0:	bf00      	nop
 800a3f2:	3718      	adds	r7, #24
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	20028754 	.word	0x20028754

0800a3fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a404:	f107 0308 	add.w	r3, r7, #8
 800a408:	4618      	mov	r0, r3
 800a40a:	f000 f857 	bl	800a4bc <prvGetNextExpireTime>
 800a40e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	4619      	mov	r1, r3
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	f000 f803 	bl	800a420 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a41a:	f000 f8d5 	bl	800a5c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a41e:	e7f1      	b.n	800a404 <prvTimerTask+0x8>

0800a420 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a42a:	f7ff f81b 	bl	8009464 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a42e:	f107 0308 	add.w	r3, r7, #8
 800a432:	4618      	mov	r0, r3
 800a434:	f000 f866 	bl	800a504 <prvSampleTimeNow>
 800a438:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d130      	bne.n	800a4a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d10a      	bne.n	800a45c <prvProcessTimerOrBlockTask+0x3c>
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d806      	bhi.n	800a45c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a44e:	f7ff f817 	bl	8009480 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a452:	68f9      	ldr	r1, [r7, #12]
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f7ff ff85 	bl	800a364 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a45a:	e024      	b.n	800a4a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d008      	beq.n	800a474 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a462:	4b13      	ldr	r3, [pc, #76]	; (800a4b0 <prvProcessTimerOrBlockTask+0x90>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d101      	bne.n	800a470 <prvProcessTimerOrBlockTask+0x50>
 800a46c:	2301      	movs	r3, #1
 800a46e:	e000      	b.n	800a472 <prvProcessTimerOrBlockTask+0x52>
 800a470:	2300      	movs	r3, #0
 800a472:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a474:	4b0f      	ldr	r3, [pc, #60]	; (800a4b4 <prvProcessTimerOrBlockTask+0x94>)
 800a476:	6818      	ldr	r0, [r3, #0]
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	1ad3      	subs	r3, r2, r3
 800a47e:	683a      	ldr	r2, [r7, #0]
 800a480:	4619      	mov	r1, r3
 800a482:	f7fe fd2b 	bl	8008edc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a486:	f7fe fffb 	bl	8009480 <xTaskResumeAll>
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d10a      	bne.n	800a4a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a490:	4b09      	ldr	r3, [pc, #36]	; (800a4b8 <prvProcessTimerOrBlockTask+0x98>)
 800a492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a496:	601a      	str	r2, [r3, #0]
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	f3bf 8f6f 	isb	sy
}
 800a4a0:	e001      	b.n	800a4a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a4a2:	f7fe ffed 	bl	8009480 <xTaskResumeAll>
}
 800a4a6:	bf00      	nop
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	20028758 	.word	0x20028758
 800a4b4:	2002875c 	.word	0x2002875c
 800a4b8:	e000ed04 	.word	0xe000ed04

0800a4bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b085      	sub	sp, #20
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a4c4:	4b0e      	ldr	r3, [pc, #56]	; (800a500 <prvGetNextExpireTime+0x44>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d101      	bne.n	800a4d2 <prvGetNextExpireTime+0x16>
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	e000      	b.n	800a4d4 <prvGetNextExpireTime+0x18>
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d105      	bne.n	800a4ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a4e0:	4b07      	ldr	r3, [pc, #28]	; (800a500 <prvGetNextExpireTime+0x44>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	68db      	ldr	r3, [r3, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	60fb      	str	r3, [r7, #12]
 800a4ea:	e001      	b.n	800a4f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3714      	adds	r7, #20
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	20028754 	.word	0x20028754

0800a504 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a50c:	f7ff f85a 	bl	80095c4 <xTaskGetTickCount>
 800a510:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a512:	4b0b      	ldr	r3, [pc, #44]	; (800a540 <prvSampleTimeNow+0x3c>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d205      	bcs.n	800a528 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a51c:	f000 f936 	bl	800a78c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2201      	movs	r2, #1
 800a524:	601a      	str	r2, [r3, #0]
 800a526:	e002      	b.n	800a52e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a52e:	4a04      	ldr	r2, [pc, #16]	; (800a540 <prvSampleTimeNow+0x3c>)
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a534:	68fb      	ldr	r3, [r7, #12]
}
 800a536:	4618      	mov	r0, r3
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	20028764 	.word	0x20028764

0800a544 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b086      	sub	sp, #24
 800a548:	af00      	add	r7, sp, #0
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	60b9      	str	r1, [r7, #8]
 800a54e:	607a      	str	r2, [r7, #4]
 800a550:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a552:	2300      	movs	r3, #0
 800a554:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	68ba      	ldr	r2, [r7, #8]
 800a55a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a562:	68ba      	ldr	r2, [r7, #8]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	429a      	cmp	r2, r3
 800a568:	d812      	bhi.n	800a590 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	1ad2      	subs	r2, r2, r3
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	699b      	ldr	r3, [r3, #24]
 800a574:	429a      	cmp	r2, r3
 800a576:	d302      	bcc.n	800a57e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a578:	2301      	movs	r3, #1
 800a57a:	617b      	str	r3, [r7, #20]
 800a57c:	e01b      	b.n	800a5b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a57e:	4b10      	ldr	r3, [pc, #64]	; (800a5c0 <prvInsertTimerInActiveList+0x7c>)
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	3304      	adds	r3, #4
 800a586:	4619      	mov	r1, r3
 800a588:	4610      	mov	r0, r2
 800a58a:	f7fd fb39 	bl	8007c00 <vListInsert>
 800a58e:	e012      	b.n	800a5b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	429a      	cmp	r2, r3
 800a596:	d206      	bcs.n	800a5a6 <prvInsertTimerInActiveList+0x62>
 800a598:	68ba      	ldr	r2, [r7, #8]
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d302      	bcc.n	800a5a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	617b      	str	r3, [r7, #20]
 800a5a4:	e007      	b.n	800a5b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5a6:	4b07      	ldr	r3, [pc, #28]	; (800a5c4 <prvInsertTimerInActiveList+0x80>)
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	3304      	adds	r3, #4
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	4610      	mov	r0, r2
 800a5b2:	f7fd fb25 	bl	8007c00 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a5b6:	697b      	ldr	r3, [r7, #20]
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3718      	adds	r7, #24
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	20028758 	.word	0x20028758
 800a5c4:	20028754 	.word	0x20028754

0800a5c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b08e      	sub	sp, #56	; 0x38
 800a5cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a5ce:	e0ca      	b.n	800a766 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	da18      	bge.n	800a608 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a5d6:	1d3b      	adds	r3, r7, #4
 800a5d8:	3304      	adds	r3, #4
 800a5da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d10a      	bne.n	800a5f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e6:	f383 8811 	msr	BASEPRI, r3
 800a5ea:	f3bf 8f6f 	isb	sy
 800a5ee:	f3bf 8f4f 	dsb	sy
 800a5f2:	61fb      	str	r3, [r7, #28]
}
 800a5f4:	bf00      	nop
 800a5f6:	e7fe      	b.n	800a5f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5fe:	6850      	ldr	r0, [r2, #4]
 800a600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a602:	6892      	ldr	r2, [r2, #8]
 800a604:	4611      	mov	r1, r2
 800a606:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	f2c0 80ab 	blt.w	800a766 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a616:	695b      	ldr	r3, [r3, #20]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d004      	beq.n	800a626 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61e:	3304      	adds	r3, #4
 800a620:	4618      	mov	r0, r3
 800a622:	f7fd fb26 	bl	8007c72 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a626:	463b      	mov	r3, r7
 800a628:	4618      	mov	r0, r3
 800a62a:	f7ff ff6b 	bl	800a504 <prvSampleTimeNow>
 800a62e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2b09      	cmp	r3, #9
 800a634:	f200 8096 	bhi.w	800a764 <prvProcessReceivedCommands+0x19c>
 800a638:	a201      	add	r2, pc, #4	; (adr r2, 800a640 <prvProcessReceivedCommands+0x78>)
 800a63a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a63e:	bf00      	nop
 800a640:	0800a669 	.word	0x0800a669
 800a644:	0800a669 	.word	0x0800a669
 800a648:	0800a669 	.word	0x0800a669
 800a64c:	0800a6dd 	.word	0x0800a6dd
 800a650:	0800a6f1 	.word	0x0800a6f1
 800a654:	0800a73b 	.word	0x0800a73b
 800a658:	0800a669 	.word	0x0800a669
 800a65c:	0800a669 	.word	0x0800a669
 800a660:	0800a6dd 	.word	0x0800a6dd
 800a664:	0800a6f1 	.word	0x0800a6f1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a66e:	f043 0301 	orr.w	r3, r3, #1
 800a672:	b2da      	uxtb	r2, r3
 800a674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a676:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a67a:	68ba      	ldr	r2, [r7, #8]
 800a67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67e:	699b      	ldr	r3, [r3, #24]
 800a680:	18d1      	adds	r1, r2, r3
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a686:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a688:	f7ff ff5c 	bl	800a544 <prvInsertTimerInActiveList>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d069      	beq.n	800a766 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a694:	6a1b      	ldr	r3, [r3, #32]
 800a696:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a698:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6a0:	f003 0304 	and.w	r3, r3, #4
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d05e      	beq.n	800a766 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a6a8:	68ba      	ldr	r2, [r7, #8]
 800a6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ac:	699b      	ldr	r3, [r3, #24]
 800a6ae:	441a      	add	r2, r3
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	9300      	str	r3, [sp, #0]
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	2100      	movs	r1, #0
 800a6b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6ba:	f7ff fe05 	bl	800a2c8 <xTimerGenericCommand>
 800a6be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a6c0:	6a3b      	ldr	r3, [r7, #32]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d14f      	bne.n	800a766 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ca:	f383 8811 	msr	BASEPRI, r3
 800a6ce:	f3bf 8f6f 	isb	sy
 800a6d2:	f3bf 8f4f 	dsb	sy
 800a6d6:	61bb      	str	r3, [r7, #24]
}
 800a6d8:	bf00      	nop
 800a6da:	e7fe      	b.n	800a6da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6e2:	f023 0301 	bic.w	r3, r3, #1
 800a6e6:	b2da      	uxtb	r2, r3
 800a6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a6ee:	e03a      	b.n	800a766 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6f6:	f043 0301 	orr.w	r3, r3, #1
 800a6fa:	b2da      	uxtb	r2, r3
 800a6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a702:	68ba      	ldr	r2, [r7, #8]
 800a704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a706:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a70a:	699b      	ldr	r3, [r3, #24]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d10a      	bne.n	800a726 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a714:	f383 8811 	msr	BASEPRI, r3
 800a718:	f3bf 8f6f 	isb	sy
 800a71c:	f3bf 8f4f 	dsb	sy
 800a720:	617b      	str	r3, [r7, #20]
}
 800a722:	bf00      	nop
 800a724:	e7fe      	b.n	800a724 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a728:	699a      	ldr	r2, [r3, #24]
 800a72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72c:	18d1      	adds	r1, r2, r3
 800a72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a732:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a734:	f7ff ff06 	bl	800a544 <prvInsertTimerInActiveList>
					break;
 800a738:	e015      	b.n	800a766 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a740:	f003 0302 	and.w	r3, r3, #2
 800a744:	2b00      	cmp	r3, #0
 800a746:	d103      	bne.n	800a750 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a74a:	f000 fc29 	bl	800afa0 <vPortFree>
 800a74e:	e00a      	b.n	800a766 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a752:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a756:	f023 0301 	bic.w	r3, r3, #1
 800a75a:	b2da      	uxtb	r2, r3
 800a75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a762:	e000      	b.n	800a766 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a764:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a766:	4b08      	ldr	r3, [pc, #32]	; (800a788 <prvProcessReceivedCommands+0x1c0>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	1d39      	adds	r1, r7, #4
 800a76c:	2200      	movs	r2, #0
 800a76e:	4618      	mov	r0, r3
 800a770:	f7fd ff1a 	bl	80085a8 <xQueueReceive>
 800a774:	4603      	mov	r3, r0
 800a776:	2b00      	cmp	r3, #0
 800a778:	f47f af2a 	bne.w	800a5d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a77c:	bf00      	nop
 800a77e:	bf00      	nop
 800a780:	3730      	adds	r7, #48	; 0x30
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	2002875c 	.word	0x2002875c

0800a78c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b088      	sub	sp, #32
 800a790:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a792:	e048      	b.n	800a826 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a794:	4b2d      	ldr	r3, [pc, #180]	; (800a84c <prvSwitchTimerLists+0xc0>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	68db      	ldr	r3, [r3, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a79e:	4b2b      	ldr	r3, [pc, #172]	; (800a84c <prvSwitchTimerLists+0xc0>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	3304      	adds	r3, #4
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f7fd fa60 	bl	8007c72 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	6a1b      	ldr	r3, [r3, #32]
 800a7b6:	68f8      	ldr	r0, [r7, #12]
 800a7b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7c0:	f003 0304 	and.w	r3, r3, #4
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d02e      	beq.n	800a826 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	699b      	ldr	r3, [r3, #24]
 800a7cc:	693a      	ldr	r2, [r7, #16]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a7d2:	68ba      	ldr	r2, [r7, #8]
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d90e      	bls.n	800a7f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	68ba      	ldr	r2, [r7, #8]
 800a7de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	68fa      	ldr	r2, [r7, #12]
 800a7e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a7e6:	4b19      	ldr	r3, [pc, #100]	; (800a84c <prvSwitchTimerLists+0xc0>)
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	3304      	adds	r3, #4
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	4610      	mov	r0, r2
 800a7f2:	f7fd fa05 	bl	8007c00 <vListInsert>
 800a7f6:	e016      	b.n	800a826 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	9300      	str	r3, [sp, #0]
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	693a      	ldr	r2, [r7, #16]
 800a800:	2100      	movs	r1, #0
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f7ff fd60 	bl	800a2c8 <xTimerGenericCommand>
 800a808:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d10a      	bne.n	800a826 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a814:	f383 8811 	msr	BASEPRI, r3
 800a818:	f3bf 8f6f 	isb	sy
 800a81c:	f3bf 8f4f 	dsb	sy
 800a820:	603b      	str	r3, [r7, #0]
}
 800a822:	bf00      	nop
 800a824:	e7fe      	b.n	800a824 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a826:	4b09      	ldr	r3, [pc, #36]	; (800a84c <prvSwitchTimerLists+0xc0>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d1b1      	bne.n	800a794 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a830:	4b06      	ldr	r3, [pc, #24]	; (800a84c <prvSwitchTimerLists+0xc0>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a836:	4b06      	ldr	r3, [pc, #24]	; (800a850 <prvSwitchTimerLists+0xc4>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a04      	ldr	r2, [pc, #16]	; (800a84c <prvSwitchTimerLists+0xc0>)
 800a83c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a83e:	4a04      	ldr	r2, [pc, #16]	; (800a850 <prvSwitchTimerLists+0xc4>)
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	6013      	str	r3, [r2, #0]
}
 800a844:	bf00      	nop
 800a846:	3718      	adds	r7, #24
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	20028754 	.word	0x20028754
 800a850:	20028758 	.word	0x20028758

0800a854 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a85a:	f000 f9b3 	bl	800abc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a85e:	4b15      	ldr	r3, [pc, #84]	; (800a8b4 <prvCheckForValidListAndQueue+0x60>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d120      	bne.n	800a8a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a866:	4814      	ldr	r0, [pc, #80]	; (800a8b8 <prvCheckForValidListAndQueue+0x64>)
 800a868:	f7fd f979 	bl	8007b5e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a86c:	4813      	ldr	r0, [pc, #76]	; (800a8bc <prvCheckForValidListAndQueue+0x68>)
 800a86e:	f7fd f976 	bl	8007b5e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a872:	4b13      	ldr	r3, [pc, #76]	; (800a8c0 <prvCheckForValidListAndQueue+0x6c>)
 800a874:	4a10      	ldr	r2, [pc, #64]	; (800a8b8 <prvCheckForValidListAndQueue+0x64>)
 800a876:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a878:	4b12      	ldr	r3, [pc, #72]	; (800a8c4 <prvCheckForValidListAndQueue+0x70>)
 800a87a:	4a10      	ldr	r2, [pc, #64]	; (800a8bc <prvCheckForValidListAndQueue+0x68>)
 800a87c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a87e:	2300      	movs	r3, #0
 800a880:	9300      	str	r3, [sp, #0]
 800a882:	4b11      	ldr	r3, [pc, #68]	; (800a8c8 <prvCheckForValidListAndQueue+0x74>)
 800a884:	4a11      	ldr	r2, [pc, #68]	; (800a8cc <prvCheckForValidListAndQueue+0x78>)
 800a886:	2110      	movs	r1, #16
 800a888:	200a      	movs	r0, #10
 800a88a:	f7fd fa85 	bl	8007d98 <xQueueGenericCreateStatic>
 800a88e:	4603      	mov	r3, r0
 800a890:	4a08      	ldr	r2, [pc, #32]	; (800a8b4 <prvCheckForValidListAndQueue+0x60>)
 800a892:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a894:	4b07      	ldr	r3, [pc, #28]	; (800a8b4 <prvCheckForValidListAndQueue+0x60>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d005      	beq.n	800a8a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a89c:	4b05      	ldr	r3, [pc, #20]	; (800a8b4 <prvCheckForValidListAndQueue+0x60>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	490b      	ldr	r1, [pc, #44]	; (800a8d0 <prvCheckForValidListAndQueue+0x7c>)
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7fe fabe 	bl	8008e24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a8a8:	f000 f9bc 	bl	800ac24 <vPortExitCritical>
}
 800a8ac:	bf00      	nop
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	2002875c 	.word	0x2002875c
 800a8b8:	2002872c 	.word	0x2002872c
 800a8bc:	20028740 	.word	0x20028740
 800a8c0:	20028754 	.word	0x20028754
 800a8c4:	20028758 	.word	0x20028758
 800a8c8:	20028808 	.word	0x20028808
 800a8cc:	20028768 	.word	0x20028768
 800a8d0:	0800f2f8 	.word	0x0800f2f8

0800a8d4 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b086      	sub	sp, #24
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d10a      	bne.n	800a8fc <xTimerIsTimerActive+0x28>
	__asm volatile
 800a8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ea:	f383 8811 	msr	BASEPRI, r3
 800a8ee:	f3bf 8f6f 	isb	sy
 800a8f2:	f3bf 8f4f 	dsb	sy
 800a8f6:	60fb      	str	r3, [r7, #12]
}
 800a8f8:	bf00      	nop
 800a8fa:	e7fe      	b.n	800a8fa <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800a8fc:	f000 f962 	bl	800abc4 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a906:	f003 0301 	and.w	r3, r3, #1
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d102      	bne.n	800a914 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800a90e:	2300      	movs	r3, #0
 800a910:	617b      	str	r3, [r7, #20]
 800a912:	e001      	b.n	800a918 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800a914:	2301      	movs	r3, #1
 800a916:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800a918:	f000 f984 	bl	800ac24 <vPortExitCritical>

	return xReturn;
 800a91c:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800a91e:	4618      	mov	r0, r3
 800a920:	3718      	adds	r7, #24
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}

0800a926 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800a926:	b580      	push	{r7, lr}
 800a928:	b086      	sub	sp, #24
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d10a      	bne.n	800a94e <pvTimerGetTimerID+0x28>
	__asm volatile
 800a938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93c:	f383 8811 	msr	BASEPRI, r3
 800a940:	f3bf 8f6f 	isb	sy
 800a944:	f3bf 8f4f 	dsb	sy
 800a948:	60fb      	str	r3, [r7, #12]
}
 800a94a:	bf00      	nop
 800a94c:	e7fe      	b.n	800a94c <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800a94e:	f000 f939 	bl	800abc4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	69db      	ldr	r3, [r3, #28]
 800a956:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800a958:	f000 f964 	bl	800ac24 <vPortExitCritical>

	return pvReturn;
 800a95c:	693b      	ldr	r3, [r7, #16]
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3718      	adds	r7, #24
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
	...

0800a968 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a968:	b480      	push	{r7}
 800a96a:	b085      	sub	sp, #20
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	60b9      	str	r1, [r7, #8]
 800a972:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	3b04      	subs	r3, #4
 800a978:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a980:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	3b04      	subs	r3, #4
 800a986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	f023 0201 	bic.w	r2, r3, #1
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	3b04      	subs	r3, #4
 800a996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a998:	4a0c      	ldr	r2, [pc, #48]	; (800a9cc <pxPortInitialiseStack+0x64>)
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	3b14      	subs	r3, #20
 800a9a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	3b04      	subs	r3, #4
 800a9ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f06f 0202 	mvn.w	r2, #2
 800a9b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	3b20      	subs	r3, #32
 800a9bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a9be:	68fb      	ldr	r3, [r7, #12]
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3714      	adds	r7, #20
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr
 800a9cc:	0800a9d1 	.word	0x0800a9d1

0800a9d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b085      	sub	sp, #20
 800a9d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a9da:	4b12      	ldr	r3, [pc, #72]	; (800aa24 <prvTaskExitError+0x54>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9e2:	d00a      	beq.n	800a9fa <prvTaskExitError+0x2a>
	__asm volatile
 800a9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e8:	f383 8811 	msr	BASEPRI, r3
 800a9ec:	f3bf 8f6f 	isb	sy
 800a9f0:	f3bf 8f4f 	dsb	sy
 800a9f4:	60fb      	str	r3, [r7, #12]
}
 800a9f6:	bf00      	nop
 800a9f8:	e7fe      	b.n	800a9f8 <prvTaskExitError+0x28>
	__asm volatile
 800a9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fe:	f383 8811 	msr	BASEPRI, r3
 800aa02:	f3bf 8f6f 	isb	sy
 800aa06:	f3bf 8f4f 	dsb	sy
 800aa0a:	60bb      	str	r3, [r7, #8]
}
 800aa0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aa0e:	bf00      	nop
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d0fc      	beq.n	800aa10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aa16:	bf00      	nop
 800aa18:	bf00      	nop
 800aa1a:	3714      	adds	r7, #20
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr
 800aa24:	20000024 	.word	0x20000024
	...

0800aa30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aa30:	4b07      	ldr	r3, [pc, #28]	; (800aa50 <pxCurrentTCBConst2>)
 800aa32:	6819      	ldr	r1, [r3, #0]
 800aa34:	6808      	ldr	r0, [r1, #0]
 800aa36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa3a:	f380 8809 	msr	PSP, r0
 800aa3e:	f3bf 8f6f 	isb	sy
 800aa42:	f04f 0000 	mov.w	r0, #0
 800aa46:	f380 8811 	msr	BASEPRI, r0
 800aa4a:	4770      	bx	lr
 800aa4c:	f3af 8000 	nop.w

0800aa50 <pxCurrentTCBConst2>:
 800aa50:	2002822c 	.word	0x2002822c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa54:	bf00      	nop
 800aa56:	bf00      	nop

0800aa58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aa58:	4808      	ldr	r0, [pc, #32]	; (800aa7c <prvPortStartFirstTask+0x24>)
 800aa5a:	6800      	ldr	r0, [r0, #0]
 800aa5c:	6800      	ldr	r0, [r0, #0]
 800aa5e:	f380 8808 	msr	MSP, r0
 800aa62:	f04f 0000 	mov.w	r0, #0
 800aa66:	f380 8814 	msr	CONTROL, r0
 800aa6a:	b662      	cpsie	i
 800aa6c:	b661      	cpsie	f
 800aa6e:	f3bf 8f4f 	dsb	sy
 800aa72:	f3bf 8f6f 	isb	sy
 800aa76:	df00      	svc	0
 800aa78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aa7a:	bf00      	nop
 800aa7c:	e000ed08 	.word	0xe000ed08

0800aa80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b086      	sub	sp, #24
 800aa84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aa86:	4b46      	ldr	r3, [pc, #280]	; (800aba0 <xPortStartScheduler+0x120>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4a46      	ldr	r2, [pc, #280]	; (800aba4 <xPortStartScheduler+0x124>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d10a      	bne.n	800aaa6 <xPortStartScheduler+0x26>
	__asm volatile
 800aa90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa94:	f383 8811 	msr	BASEPRI, r3
 800aa98:	f3bf 8f6f 	isb	sy
 800aa9c:	f3bf 8f4f 	dsb	sy
 800aaa0:	613b      	str	r3, [r7, #16]
}
 800aaa2:	bf00      	nop
 800aaa4:	e7fe      	b.n	800aaa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aaa6:	4b3e      	ldr	r3, [pc, #248]	; (800aba0 <xPortStartScheduler+0x120>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a3f      	ldr	r2, [pc, #252]	; (800aba8 <xPortStartScheduler+0x128>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d10a      	bne.n	800aac6 <xPortStartScheduler+0x46>
	__asm volatile
 800aab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab4:	f383 8811 	msr	BASEPRI, r3
 800aab8:	f3bf 8f6f 	isb	sy
 800aabc:	f3bf 8f4f 	dsb	sy
 800aac0:	60fb      	str	r3, [r7, #12]
}
 800aac2:	bf00      	nop
 800aac4:	e7fe      	b.n	800aac4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aac6:	4b39      	ldr	r3, [pc, #228]	; (800abac <xPortStartScheduler+0x12c>)
 800aac8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	22ff      	movs	r2, #255	; 0xff
 800aad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aae0:	78fb      	ldrb	r3, [r7, #3]
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aae8:	b2da      	uxtb	r2, r3
 800aaea:	4b31      	ldr	r3, [pc, #196]	; (800abb0 <xPortStartScheduler+0x130>)
 800aaec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aaee:	4b31      	ldr	r3, [pc, #196]	; (800abb4 <xPortStartScheduler+0x134>)
 800aaf0:	2207      	movs	r2, #7
 800aaf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aaf4:	e009      	b.n	800ab0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800aaf6:	4b2f      	ldr	r3, [pc, #188]	; (800abb4 <xPortStartScheduler+0x134>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	3b01      	subs	r3, #1
 800aafc:	4a2d      	ldr	r2, [pc, #180]	; (800abb4 <xPortStartScheduler+0x134>)
 800aafe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ab00:	78fb      	ldrb	r3, [r7, #3]
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	005b      	lsls	r3, r3, #1
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab0a:	78fb      	ldrb	r3, [r7, #3]
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab12:	2b80      	cmp	r3, #128	; 0x80
 800ab14:	d0ef      	beq.n	800aaf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ab16:	4b27      	ldr	r3, [pc, #156]	; (800abb4 <xPortStartScheduler+0x134>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f1c3 0307 	rsb	r3, r3, #7
 800ab1e:	2b04      	cmp	r3, #4
 800ab20:	d00a      	beq.n	800ab38 <xPortStartScheduler+0xb8>
	__asm volatile
 800ab22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab26:	f383 8811 	msr	BASEPRI, r3
 800ab2a:	f3bf 8f6f 	isb	sy
 800ab2e:	f3bf 8f4f 	dsb	sy
 800ab32:	60bb      	str	r3, [r7, #8]
}
 800ab34:	bf00      	nop
 800ab36:	e7fe      	b.n	800ab36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ab38:	4b1e      	ldr	r3, [pc, #120]	; (800abb4 <xPortStartScheduler+0x134>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	021b      	lsls	r3, r3, #8
 800ab3e:	4a1d      	ldr	r2, [pc, #116]	; (800abb4 <xPortStartScheduler+0x134>)
 800ab40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ab42:	4b1c      	ldr	r3, [pc, #112]	; (800abb4 <xPortStartScheduler+0x134>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab4a:	4a1a      	ldr	r2, [pc, #104]	; (800abb4 <xPortStartScheduler+0x134>)
 800ab4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	b2da      	uxtb	r2, r3
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab56:	4b18      	ldr	r3, [pc, #96]	; (800abb8 <xPortStartScheduler+0x138>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a17      	ldr	r2, [pc, #92]	; (800abb8 <xPortStartScheduler+0x138>)
 800ab5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab62:	4b15      	ldr	r3, [pc, #84]	; (800abb8 <xPortStartScheduler+0x138>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a14      	ldr	r2, [pc, #80]	; (800abb8 <xPortStartScheduler+0x138>)
 800ab68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ab6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab6e:	f000 f8dd 	bl	800ad2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ab72:	4b12      	ldr	r3, [pc, #72]	; (800abbc <xPortStartScheduler+0x13c>)
 800ab74:	2200      	movs	r2, #0
 800ab76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ab78:	f000 f8fc 	bl	800ad74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab7c:	4b10      	ldr	r3, [pc, #64]	; (800abc0 <xPortStartScheduler+0x140>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a0f      	ldr	r2, [pc, #60]	; (800abc0 <xPortStartScheduler+0x140>)
 800ab82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ab86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ab88:	f7ff ff66 	bl	800aa58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ab8c:	f7fe fdfa 	bl	8009784 <vTaskSwitchContext>
	prvTaskExitError();
 800ab90:	f7ff ff1e 	bl	800a9d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab94:	2300      	movs	r3, #0
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3718      	adds	r7, #24
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	e000ed00 	.word	0xe000ed00
 800aba4:	410fc271 	.word	0x410fc271
 800aba8:	410fc270 	.word	0x410fc270
 800abac:	e000e400 	.word	0xe000e400
 800abb0:	20028858 	.word	0x20028858
 800abb4:	2002885c 	.word	0x2002885c
 800abb8:	e000ed20 	.word	0xe000ed20
 800abbc:	20000024 	.word	0x20000024
 800abc0:	e000ef34 	.word	0xe000ef34

0800abc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
	__asm volatile
 800abca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abce:	f383 8811 	msr	BASEPRI, r3
 800abd2:	f3bf 8f6f 	isb	sy
 800abd6:	f3bf 8f4f 	dsb	sy
 800abda:	607b      	str	r3, [r7, #4]
}
 800abdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800abde:	4b0f      	ldr	r3, [pc, #60]	; (800ac1c <vPortEnterCritical+0x58>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	3301      	adds	r3, #1
 800abe4:	4a0d      	ldr	r2, [pc, #52]	; (800ac1c <vPortEnterCritical+0x58>)
 800abe6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800abe8:	4b0c      	ldr	r3, [pc, #48]	; (800ac1c <vPortEnterCritical+0x58>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	2b01      	cmp	r3, #1
 800abee:	d10f      	bne.n	800ac10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800abf0:	4b0b      	ldr	r3, [pc, #44]	; (800ac20 <vPortEnterCritical+0x5c>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	b2db      	uxtb	r3, r3
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d00a      	beq.n	800ac10 <vPortEnterCritical+0x4c>
	__asm volatile
 800abfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfe:	f383 8811 	msr	BASEPRI, r3
 800ac02:	f3bf 8f6f 	isb	sy
 800ac06:	f3bf 8f4f 	dsb	sy
 800ac0a:	603b      	str	r3, [r7, #0]
}
 800ac0c:	bf00      	nop
 800ac0e:	e7fe      	b.n	800ac0e <vPortEnterCritical+0x4a>
	}
}
 800ac10:	bf00      	nop
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr
 800ac1c:	20000024 	.word	0x20000024
 800ac20:	e000ed04 	.word	0xe000ed04

0800ac24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ac2a:	4b12      	ldr	r3, [pc, #72]	; (800ac74 <vPortExitCritical+0x50>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d10a      	bne.n	800ac48 <vPortExitCritical+0x24>
	__asm volatile
 800ac32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac36:	f383 8811 	msr	BASEPRI, r3
 800ac3a:	f3bf 8f6f 	isb	sy
 800ac3e:	f3bf 8f4f 	dsb	sy
 800ac42:	607b      	str	r3, [r7, #4]
}
 800ac44:	bf00      	nop
 800ac46:	e7fe      	b.n	800ac46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ac48:	4b0a      	ldr	r3, [pc, #40]	; (800ac74 <vPortExitCritical+0x50>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	4a09      	ldr	r2, [pc, #36]	; (800ac74 <vPortExitCritical+0x50>)
 800ac50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ac52:	4b08      	ldr	r3, [pc, #32]	; (800ac74 <vPortExitCritical+0x50>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d105      	bne.n	800ac66 <vPortExitCritical+0x42>
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	f383 8811 	msr	BASEPRI, r3
}
 800ac64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac66:	bf00      	nop
 800ac68:	370c      	adds	r7, #12
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr
 800ac72:	bf00      	nop
 800ac74:	20000024 	.word	0x20000024
	...

0800ac80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac80:	f3ef 8009 	mrs	r0, PSP
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	4b15      	ldr	r3, [pc, #84]	; (800ace0 <pxCurrentTCBConst>)
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	f01e 0f10 	tst.w	lr, #16
 800ac90:	bf08      	it	eq
 800ac92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac9a:	6010      	str	r0, [r2, #0]
 800ac9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aca4:	f380 8811 	msr	BASEPRI, r0
 800aca8:	f3bf 8f4f 	dsb	sy
 800acac:	f3bf 8f6f 	isb	sy
 800acb0:	f7fe fd68 	bl	8009784 <vTaskSwitchContext>
 800acb4:	f04f 0000 	mov.w	r0, #0
 800acb8:	f380 8811 	msr	BASEPRI, r0
 800acbc:	bc09      	pop	{r0, r3}
 800acbe:	6819      	ldr	r1, [r3, #0]
 800acc0:	6808      	ldr	r0, [r1, #0]
 800acc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc6:	f01e 0f10 	tst.w	lr, #16
 800acca:	bf08      	it	eq
 800accc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800acd0:	f380 8809 	msr	PSP, r0
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	4770      	bx	lr
 800acda:	bf00      	nop
 800acdc:	f3af 8000 	nop.w

0800ace0 <pxCurrentTCBConst>:
 800ace0:	2002822c 	.word	0x2002822c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ace4:	bf00      	nop
 800ace6:	bf00      	nop

0800ace8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
	__asm volatile
 800acee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf2:	f383 8811 	msr	BASEPRI, r3
 800acf6:	f3bf 8f6f 	isb	sy
 800acfa:	f3bf 8f4f 	dsb	sy
 800acfe:	607b      	str	r3, [r7, #4]
}
 800ad00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ad02:	f7fe fc81 	bl	8009608 <xTaskIncrementTick>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d003      	beq.n	800ad14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ad0c:	4b06      	ldr	r3, [pc, #24]	; (800ad28 <xPortSysTickHandler+0x40>)
 800ad0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad12:	601a      	str	r2, [r3, #0]
 800ad14:	2300      	movs	r3, #0
 800ad16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	f383 8811 	msr	BASEPRI, r3
}
 800ad1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ad20:	bf00      	nop
 800ad22:	3708      	adds	r7, #8
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	e000ed04 	.word	0xe000ed04

0800ad2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ad30:	4b0b      	ldr	r3, [pc, #44]	; (800ad60 <vPortSetupTimerInterrupt+0x34>)
 800ad32:	2200      	movs	r2, #0
 800ad34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ad36:	4b0b      	ldr	r3, [pc, #44]	; (800ad64 <vPortSetupTimerInterrupt+0x38>)
 800ad38:	2200      	movs	r2, #0
 800ad3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ad3c:	4b0a      	ldr	r3, [pc, #40]	; (800ad68 <vPortSetupTimerInterrupt+0x3c>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a0a      	ldr	r2, [pc, #40]	; (800ad6c <vPortSetupTimerInterrupt+0x40>)
 800ad42:	fba2 2303 	umull	r2, r3, r2, r3
 800ad46:	099b      	lsrs	r3, r3, #6
 800ad48:	4a09      	ldr	r2, [pc, #36]	; (800ad70 <vPortSetupTimerInterrupt+0x44>)
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ad4e:	4b04      	ldr	r3, [pc, #16]	; (800ad60 <vPortSetupTimerInterrupt+0x34>)
 800ad50:	2207      	movs	r2, #7
 800ad52:	601a      	str	r2, [r3, #0]
}
 800ad54:	bf00      	nop
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	e000e010 	.word	0xe000e010
 800ad64:	e000e018 	.word	0xe000e018
 800ad68:	20000018 	.word	0x20000018
 800ad6c:	10624dd3 	.word	0x10624dd3
 800ad70:	e000e014 	.word	0xe000e014

0800ad74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ad84 <vPortEnableVFP+0x10>
 800ad78:	6801      	ldr	r1, [r0, #0]
 800ad7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ad7e:	6001      	str	r1, [r0, #0]
 800ad80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ad82:	bf00      	nop
 800ad84:	e000ed88 	.word	0xe000ed88

0800ad88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ad88:	b480      	push	{r7}
 800ad8a:	b085      	sub	sp, #20
 800ad8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ad8e:	f3ef 8305 	mrs	r3, IPSR
 800ad92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2b0f      	cmp	r3, #15
 800ad98:	d914      	bls.n	800adc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ad9a:	4a17      	ldr	r2, [pc, #92]	; (800adf8 <vPortValidateInterruptPriority+0x70>)
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	4413      	add	r3, r2
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ada4:	4b15      	ldr	r3, [pc, #84]	; (800adfc <vPortValidateInterruptPriority+0x74>)
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	7afa      	ldrb	r2, [r7, #11]
 800adaa:	429a      	cmp	r2, r3
 800adac:	d20a      	bcs.n	800adc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800adae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb2:	f383 8811 	msr	BASEPRI, r3
 800adb6:	f3bf 8f6f 	isb	sy
 800adba:	f3bf 8f4f 	dsb	sy
 800adbe:	607b      	str	r3, [r7, #4]
}
 800adc0:	bf00      	nop
 800adc2:	e7fe      	b.n	800adc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800adc4:	4b0e      	ldr	r3, [pc, #56]	; (800ae00 <vPortValidateInterruptPriority+0x78>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800adcc:	4b0d      	ldr	r3, [pc, #52]	; (800ae04 <vPortValidateInterruptPriority+0x7c>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	429a      	cmp	r2, r3
 800add2:	d90a      	bls.n	800adea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800add4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add8:	f383 8811 	msr	BASEPRI, r3
 800addc:	f3bf 8f6f 	isb	sy
 800ade0:	f3bf 8f4f 	dsb	sy
 800ade4:	603b      	str	r3, [r7, #0]
}
 800ade6:	bf00      	nop
 800ade8:	e7fe      	b.n	800ade8 <vPortValidateInterruptPriority+0x60>
	}
 800adea:	bf00      	nop
 800adec:	3714      	adds	r7, #20
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr
 800adf6:	bf00      	nop
 800adf8:	e000e3f0 	.word	0xe000e3f0
 800adfc:	20028858 	.word	0x20028858
 800ae00:	e000ed0c 	.word	0xe000ed0c
 800ae04:	2002885c 	.word	0x2002885c

0800ae08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b08a      	sub	sp, #40	; 0x28
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ae10:	2300      	movs	r3, #0
 800ae12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ae14:	f7fe fb26 	bl	8009464 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ae18:	4b5b      	ldr	r3, [pc, #364]	; (800af88 <pvPortMalloc+0x180>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d101      	bne.n	800ae24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ae20:	f000 f920 	bl	800b064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ae24:	4b59      	ldr	r3, [pc, #356]	; (800af8c <pvPortMalloc+0x184>)
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4013      	ands	r3, r2
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f040 8093 	bne.w	800af58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d01d      	beq.n	800ae74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ae38:	2208      	movs	r2, #8
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	4413      	add	r3, r2
 800ae3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f003 0307 	and.w	r3, r3, #7
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d014      	beq.n	800ae74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f023 0307 	bic.w	r3, r3, #7
 800ae50:	3308      	adds	r3, #8
 800ae52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f003 0307 	and.w	r3, r3, #7
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d00a      	beq.n	800ae74 <pvPortMalloc+0x6c>
	__asm volatile
 800ae5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae62:	f383 8811 	msr	BASEPRI, r3
 800ae66:	f3bf 8f6f 	isb	sy
 800ae6a:	f3bf 8f4f 	dsb	sy
 800ae6e:	617b      	str	r3, [r7, #20]
}
 800ae70:	bf00      	nop
 800ae72:	e7fe      	b.n	800ae72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d06e      	beq.n	800af58 <pvPortMalloc+0x150>
 800ae7a:	4b45      	ldr	r3, [pc, #276]	; (800af90 <pvPortMalloc+0x188>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d869      	bhi.n	800af58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ae84:	4b43      	ldr	r3, [pc, #268]	; (800af94 <pvPortMalloc+0x18c>)
 800ae86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ae88:	4b42      	ldr	r3, [pc, #264]	; (800af94 <pvPortMalloc+0x18c>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae8e:	e004      	b.n	800ae9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ae90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ae94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d903      	bls.n	800aeac <pvPortMalloc+0xa4>
 800aea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1f1      	bne.n	800ae90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aeac:	4b36      	ldr	r3, [pc, #216]	; (800af88 <pvPortMalloc+0x180>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d050      	beq.n	800af58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aeb6:	6a3b      	ldr	r3, [r7, #32]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2208      	movs	r2, #8
 800aebc:	4413      	add	r3, r2
 800aebe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	6a3b      	ldr	r3, [r7, #32]
 800aec6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeca:	685a      	ldr	r2, [r3, #4]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	1ad2      	subs	r2, r2, r3
 800aed0:	2308      	movs	r3, #8
 800aed2:	005b      	lsls	r3, r3, #1
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d91f      	bls.n	800af18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	4413      	add	r3, r2
 800aede:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aee0:	69bb      	ldr	r3, [r7, #24]
 800aee2:	f003 0307 	and.w	r3, r3, #7
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00a      	beq.n	800af00 <pvPortMalloc+0xf8>
	__asm volatile
 800aeea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeee:	f383 8811 	msr	BASEPRI, r3
 800aef2:	f3bf 8f6f 	isb	sy
 800aef6:	f3bf 8f4f 	dsb	sy
 800aefa:	613b      	str	r3, [r7, #16]
}
 800aefc:	bf00      	nop
 800aefe:	e7fe      	b.n	800aefe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800af00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af02:	685a      	ldr	r2, [r3, #4]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	1ad2      	subs	r2, r2, r3
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800af0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800af12:	69b8      	ldr	r0, [r7, #24]
 800af14:	f000 f908 	bl	800b128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800af18:	4b1d      	ldr	r3, [pc, #116]	; (800af90 <pvPortMalloc+0x188>)
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	1ad3      	subs	r3, r2, r3
 800af22:	4a1b      	ldr	r2, [pc, #108]	; (800af90 <pvPortMalloc+0x188>)
 800af24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800af26:	4b1a      	ldr	r3, [pc, #104]	; (800af90 <pvPortMalloc+0x188>)
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	4b1b      	ldr	r3, [pc, #108]	; (800af98 <pvPortMalloc+0x190>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	429a      	cmp	r2, r3
 800af30:	d203      	bcs.n	800af3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800af32:	4b17      	ldr	r3, [pc, #92]	; (800af90 <pvPortMalloc+0x188>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4a18      	ldr	r2, [pc, #96]	; (800af98 <pvPortMalloc+0x190>)
 800af38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800af3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3c:	685a      	ldr	r2, [r3, #4]
 800af3e:	4b13      	ldr	r3, [pc, #76]	; (800af8c <pvPortMalloc+0x184>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	431a      	orrs	r2, r3
 800af44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800af48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4a:	2200      	movs	r2, #0
 800af4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800af4e:	4b13      	ldr	r3, [pc, #76]	; (800af9c <pvPortMalloc+0x194>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	3301      	adds	r3, #1
 800af54:	4a11      	ldr	r2, [pc, #68]	; (800af9c <pvPortMalloc+0x194>)
 800af56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800af58:	f7fe fa92 	bl	8009480 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	f003 0307 	and.w	r3, r3, #7
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00a      	beq.n	800af7c <pvPortMalloc+0x174>
	__asm volatile
 800af66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6a:	f383 8811 	msr	BASEPRI, r3
 800af6e:	f3bf 8f6f 	isb	sy
 800af72:	f3bf 8f4f 	dsb	sy
 800af76:	60fb      	str	r3, [r7, #12]
}
 800af78:	bf00      	nop
 800af7a:	e7fe      	b.n	800af7a <pvPortMalloc+0x172>
	return pvReturn;
 800af7c:	69fb      	ldr	r3, [r7, #28]
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3728      	adds	r7, #40	; 0x28
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	2002c468 	.word	0x2002c468
 800af8c:	2002c47c 	.word	0x2002c47c
 800af90:	2002c46c 	.word	0x2002c46c
 800af94:	2002c460 	.word	0x2002c460
 800af98:	2002c470 	.word	0x2002c470
 800af9c:	2002c474 	.word	0x2002c474

0800afa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b086      	sub	sp, #24
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d04d      	beq.n	800b04e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800afb2:	2308      	movs	r3, #8
 800afb4:	425b      	negs	r3, r3
 800afb6:	697a      	ldr	r2, [r7, #20]
 800afb8:	4413      	add	r3, r2
 800afba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	685a      	ldr	r2, [r3, #4]
 800afc4:	4b24      	ldr	r3, [pc, #144]	; (800b058 <vPortFree+0xb8>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4013      	ands	r3, r2
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d10a      	bne.n	800afe4 <vPortFree+0x44>
	__asm volatile
 800afce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd2:	f383 8811 	msr	BASEPRI, r3
 800afd6:	f3bf 8f6f 	isb	sy
 800afda:	f3bf 8f4f 	dsb	sy
 800afde:	60fb      	str	r3, [r7, #12]
}
 800afe0:	bf00      	nop
 800afe2:	e7fe      	b.n	800afe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d00a      	beq.n	800b002 <vPortFree+0x62>
	__asm volatile
 800afec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff0:	f383 8811 	msr	BASEPRI, r3
 800aff4:	f3bf 8f6f 	isb	sy
 800aff8:	f3bf 8f4f 	dsb	sy
 800affc:	60bb      	str	r3, [r7, #8]
}
 800affe:	bf00      	nop
 800b000:	e7fe      	b.n	800b000 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	685a      	ldr	r2, [r3, #4]
 800b006:	4b14      	ldr	r3, [pc, #80]	; (800b058 <vPortFree+0xb8>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4013      	ands	r3, r2
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d01e      	beq.n	800b04e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d11a      	bne.n	800b04e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	685a      	ldr	r2, [r3, #4]
 800b01c:	4b0e      	ldr	r3, [pc, #56]	; (800b058 <vPortFree+0xb8>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	43db      	mvns	r3, r3
 800b022:	401a      	ands	r2, r3
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b028:	f7fe fa1c 	bl	8009464 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	685a      	ldr	r2, [r3, #4]
 800b030:	4b0a      	ldr	r3, [pc, #40]	; (800b05c <vPortFree+0xbc>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4413      	add	r3, r2
 800b036:	4a09      	ldr	r2, [pc, #36]	; (800b05c <vPortFree+0xbc>)
 800b038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b03a:	6938      	ldr	r0, [r7, #16]
 800b03c:	f000 f874 	bl	800b128 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b040:	4b07      	ldr	r3, [pc, #28]	; (800b060 <vPortFree+0xc0>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	3301      	adds	r3, #1
 800b046:	4a06      	ldr	r2, [pc, #24]	; (800b060 <vPortFree+0xc0>)
 800b048:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b04a:	f7fe fa19 	bl	8009480 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b04e:	bf00      	nop
 800b050:	3718      	adds	r7, #24
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	2002c47c 	.word	0x2002c47c
 800b05c:	2002c46c 	.word	0x2002c46c
 800b060:	2002c478 	.word	0x2002c478

0800b064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b064:	b480      	push	{r7}
 800b066:	b085      	sub	sp, #20
 800b068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b06a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b06e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b070:	4b27      	ldr	r3, [pc, #156]	; (800b110 <prvHeapInit+0xac>)
 800b072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f003 0307 	and.w	r3, r3, #7
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d00c      	beq.n	800b098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	3307      	adds	r3, #7
 800b082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f023 0307 	bic.w	r3, r3, #7
 800b08a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b08c:	68ba      	ldr	r2, [r7, #8]
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	1ad3      	subs	r3, r2, r3
 800b092:	4a1f      	ldr	r2, [pc, #124]	; (800b110 <prvHeapInit+0xac>)
 800b094:	4413      	add	r3, r2
 800b096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b09c:	4a1d      	ldr	r2, [pc, #116]	; (800b114 <prvHeapInit+0xb0>)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b0a2:	4b1c      	ldr	r3, [pc, #112]	; (800b114 <prvHeapInit+0xb0>)
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	68ba      	ldr	r2, [r7, #8]
 800b0ac:	4413      	add	r3, r2
 800b0ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b0b0:	2208      	movs	r2, #8
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	1a9b      	subs	r3, r3, r2
 800b0b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f023 0307 	bic.w	r3, r3, #7
 800b0be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	4a15      	ldr	r2, [pc, #84]	; (800b118 <prvHeapInit+0xb4>)
 800b0c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b0c6:	4b14      	ldr	r3, [pc, #80]	; (800b118 <prvHeapInit+0xb4>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b0ce:	4b12      	ldr	r3, [pc, #72]	; (800b118 <prvHeapInit+0xb4>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	1ad2      	subs	r2, r2, r3
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b0e4:	4b0c      	ldr	r3, [pc, #48]	; (800b118 <prvHeapInit+0xb4>)
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	4a0a      	ldr	r2, [pc, #40]	; (800b11c <prvHeapInit+0xb8>)
 800b0f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	4a09      	ldr	r2, [pc, #36]	; (800b120 <prvHeapInit+0xbc>)
 800b0fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b0fc:	4b09      	ldr	r3, [pc, #36]	; (800b124 <prvHeapInit+0xc0>)
 800b0fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b102:	601a      	str	r2, [r3, #0]
}
 800b104:	bf00      	nop
 800b106:	3714      	adds	r7, #20
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr
 800b110:	20028860 	.word	0x20028860
 800b114:	2002c460 	.word	0x2002c460
 800b118:	2002c468 	.word	0x2002c468
 800b11c:	2002c470 	.word	0x2002c470
 800b120:	2002c46c 	.word	0x2002c46c
 800b124:	2002c47c 	.word	0x2002c47c

0800b128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b128:	b480      	push	{r7}
 800b12a:	b085      	sub	sp, #20
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b130:	4b28      	ldr	r3, [pc, #160]	; (800b1d4 <prvInsertBlockIntoFreeList+0xac>)
 800b132:	60fb      	str	r3, [r7, #12]
 800b134:	e002      	b.n	800b13c <prvInsertBlockIntoFreeList+0x14>
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	60fb      	str	r3, [r7, #12]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	429a      	cmp	r2, r3
 800b144:	d8f7      	bhi.n	800b136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	68ba      	ldr	r2, [r7, #8]
 800b150:	4413      	add	r3, r2
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	429a      	cmp	r2, r3
 800b156:	d108      	bne.n	800b16a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	685a      	ldr	r2, [r3, #4]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	441a      	add	r2, r3
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	68ba      	ldr	r2, [r7, #8]
 800b174:	441a      	add	r2, r3
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d118      	bne.n	800b1b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	4b15      	ldr	r3, [pc, #84]	; (800b1d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	429a      	cmp	r2, r3
 800b188:	d00d      	beq.n	800b1a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	685a      	ldr	r2, [r3, #4]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	441a      	add	r2, r3
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	601a      	str	r2, [r3, #0]
 800b1a4:	e008      	b.n	800b1b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b1a6:	4b0c      	ldr	r3, [pc, #48]	; (800b1d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	601a      	str	r2, [r3, #0]
 800b1ae:	e003      	b.n	800b1b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b1b8:	68fa      	ldr	r2, [r7, #12]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d002      	beq.n	800b1c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1c6:	bf00      	nop
 800b1c8:	3714      	adds	r7, #20
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop
 800b1d4:	2002c460 	.word	0x2002c460
 800b1d8:	2002c468 	.word	0x2002c468

0800b1dc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800b1dc:	b480      	push	{r7}
 800b1de:	b083      	sub	sp, #12
 800b1e0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800b1e2:	4b24      	ldr	r3, [pc, #144]	; (800b274 <_DoInit+0x98>)
 800b1e4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2203      	movs	r2, #3
 800b1ea:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2203      	movs	r2, #3
 800b1f0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	4a20      	ldr	r2, [pc, #128]	; (800b278 <_DoInit+0x9c>)
 800b1f6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	4a20      	ldr	r2, [pc, #128]	; (800b27c <_DoInit+0xa0>)
 800b1fc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b204:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2200      	movs	r2, #0
 800b216:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	4a17      	ldr	r2, [pc, #92]	; (800b278 <_DoInit+0x9c>)
 800b21c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	4a17      	ldr	r2, [pc, #92]	; (800b280 <_DoInit+0xa4>)
 800b222:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2210      	movs	r2, #16
 800b228:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	3307      	adds	r3, #7
 800b240:	4a10      	ldr	r2, [pc, #64]	; (800b284 <_DoInit+0xa8>)
 800b242:	6810      	ldr	r0, [r2, #0]
 800b244:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800b246:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	4a0e      	ldr	r2, [pc, #56]	; (800b288 <_DoInit+0xac>)
 800b24e:	6810      	ldr	r0, [r2, #0]
 800b250:	6018      	str	r0, [r3, #0]
 800b252:	8891      	ldrh	r1, [r2, #4]
 800b254:	7992      	ldrb	r2, [r2, #6]
 800b256:	8099      	strh	r1, [r3, #4]
 800b258:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800b25a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2220      	movs	r2, #32
 800b262:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800b264:	f3bf 8f5f 	dmb	sy
}
 800b268:	bf00      	nop
 800b26a:	370c      	adds	r7, #12
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr
 800b274:	2002c480 	.word	0x2002c480
 800b278:	0800f300 	.word	0x0800f300
 800b27c:	2002c528 	.word	0x2002c528
 800b280:	2002c928 	.word	0x2002c928
 800b284:	0800f30c 	.word	0x0800f30c
 800b288:	0800f310 	.word	0x0800f310

0800b28c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b08c      	sub	sp, #48	; 0x30
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800b298:	4b3e      	ldr	r3, [pc, #248]	; (800b394 <SEGGER_RTT_ReadNoLock+0x108>)
 800b29a:	623b      	str	r3, [r7, #32]
 800b29c:	6a3b      	ldr	r3, [r7, #32]
 800b29e:	781b      	ldrb	r3, [r3, #0]
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d101      	bne.n	800b2aa <SEGGER_RTT_ReadNoLock+0x1e>
 800b2a6:	f7ff ff99 	bl	800b1dc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800b2aa:	68fa      	ldr	r2, [r7, #12]
 800b2ac:	4613      	mov	r3, r2
 800b2ae:	005b      	lsls	r3, r3, #1
 800b2b0:	4413      	add	r3, r2
 800b2b2:	00db      	lsls	r3, r3, #3
 800b2b4:	3360      	adds	r3, #96	; 0x60
 800b2b6:	4a37      	ldr	r2, [pc, #220]	; (800b394 <SEGGER_RTT_ReadNoLock+0x108>)
 800b2b8:	4413      	add	r3, r2
 800b2ba:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	691b      	ldr	r3, [r3, #16]
 800b2c4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	68db      	ldr	r3, [r3, #12]
 800b2ca:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800b2d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d92b      	bls.n	800b330 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800b2d8:	69fb      	ldr	r3, [r7, #28]
 800b2da:	689a      	ldr	r2, [r3, #8]
 800b2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2de:	1ad3      	subs	r3, r2, r3
 800b2e0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800b2e2:	697a      	ldr	r2, [r7, #20]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	bf28      	it	cs
 800b2ea:	4613      	movcs	r3, r2
 800b2ec:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800b2ee:	69fb      	ldr	r3, [r7, #28]
 800b2f0:	685a      	ldr	r2, [r3, #4]
 800b2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f4:	4413      	add	r3, r2
 800b2f6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800b2f8:	697a      	ldr	r2, [r7, #20]
 800b2fa:	6939      	ldr	r1, [r7, #16]
 800b2fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2fe:	f001 feee 	bl	800d0de <memcpy>
    NumBytesRead += NumBytesRem;
 800b302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	4413      	add	r3, r2
 800b308:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800b30a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	4413      	add	r3, r2
 800b310:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	1ad3      	subs	r3, r2, r3
 800b318:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800b31a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	4413      	add	r3, r2
 800b320:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800b322:	69fb      	ldr	r3, [r7, #28]
 800b324:	689b      	ldr	r3, [r3, #8]
 800b326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b328:	429a      	cmp	r2, r3
 800b32a:	d101      	bne.n	800b330 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800b32c:	2300      	movs	r3, #0
 800b32e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800b330:	69ba      	ldr	r2, [r7, #24]
 800b332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b334:	1ad3      	subs	r3, r2, r3
 800b336:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800b338:	697a      	ldr	r2, [r7, #20]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	4293      	cmp	r3, r2
 800b33e:	bf28      	it	cs
 800b340:	4613      	movcs	r3, r2
 800b342:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d019      	beq.n	800b37e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800b34a:	69fb      	ldr	r3, [r7, #28]
 800b34c:	685a      	ldr	r2, [r3, #4]
 800b34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b350:	4413      	add	r3, r2
 800b352:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800b354:	697a      	ldr	r2, [r7, #20]
 800b356:	6939      	ldr	r1, [r7, #16]
 800b358:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b35a:	f001 fec0 	bl	800d0de <memcpy>
    NumBytesRead += NumBytesRem;
 800b35e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	4413      	add	r3, r2
 800b364:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800b366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	4413      	add	r3, r2
 800b36c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	1ad3      	subs	r3, r2, r3
 800b374:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800b376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	4413      	add	r3, r2
 800b37c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800b37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b380:	2b00      	cmp	r3, #0
 800b382:	d002      	beq.n	800b38a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800b384:	69fb      	ldr	r3, [r7, #28]
 800b386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b388:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800b38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3730      	adds	r7, #48	; 0x30
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}
 800b394:	2002c480 	.word	0x2002c480

0800b398 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800b398:	b580      	push	{r7, lr}
 800b39a:	b088      	sub	sp, #32
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	60f8      	str	r0, [r7, #12]
 800b3a0:	60b9      	str	r1, [r7, #8]
 800b3a2:	607a      	str	r2, [r7, #4]
 800b3a4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800b3a6:	4b3d      	ldr	r3, [pc, #244]	; (800b49c <SEGGER_RTT_AllocUpBuffer+0x104>)
 800b3a8:	61bb      	str	r3, [r7, #24]
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	b2db      	uxtb	r3, r3
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d101      	bne.n	800b3b8 <SEGGER_RTT_AllocUpBuffer+0x20>
 800b3b4:	f7ff ff12 	bl	800b1dc <_DoInit>
  SEGGER_RTT_LOCK();
 800b3b8:	f3ef 8311 	mrs	r3, BASEPRI
 800b3bc:	f04f 0120 	mov.w	r1, #32
 800b3c0:	f381 8811 	msr	BASEPRI, r1
 800b3c4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800b3c6:	4b35      	ldr	r3, [pc, #212]	; (800b49c <SEGGER_RTT_AllocUpBuffer+0x104>)
 800b3c8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800b3ce:	6939      	ldr	r1, [r7, #16]
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	1c5a      	adds	r2, r3, #1
 800b3d4:	4613      	mov	r3, r2
 800b3d6:	005b      	lsls	r3, r3, #1
 800b3d8:	4413      	add	r3, r2
 800b3da:	00db      	lsls	r3, r3, #3
 800b3dc:	440b      	add	r3, r1
 800b3de:	3304      	adds	r3, #4
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d008      	beq.n	800b3f8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800b3e6:	69fb      	ldr	r3, [r7, #28]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	691b      	ldr	r3, [r3, #16]
 800b3f0:	69fa      	ldr	r2, [r7, #28]
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	dbeb      	blt.n	800b3ce <SEGGER_RTT_AllocUpBuffer+0x36>
 800b3f6:	e000      	b.n	800b3fa <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800b3f8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	691b      	ldr	r3, [r3, #16]
 800b3fe:	69fa      	ldr	r2, [r7, #28]
 800b400:	429a      	cmp	r2, r3
 800b402:	da3f      	bge.n	800b484 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800b404:	6939      	ldr	r1, [r7, #16]
 800b406:	69fb      	ldr	r3, [r7, #28]
 800b408:	1c5a      	adds	r2, r3, #1
 800b40a:	4613      	mov	r3, r2
 800b40c:	005b      	lsls	r3, r3, #1
 800b40e:	4413      	add	r3, r2
 800b410:	00db      	lsls	r3, r3, #3
 800b412:	440b      	add	r3, r1
 800b414:	68fa      	ldr	r2, [r7, #12]
 800b416:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800b418:	6939      	ldr	r1, [r7, #16]
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	1c5a      	adds	r2, r3, #1
 800b41e:	4613      	mov	r3, r2
 800b420:	005b      	lsls	r3, r3, #1
 800b422:	4413      	add	r3, r2
 800b424:	00db      	lsls	r3, r3, #3
 800b426:	440b      	add	r3, r1
 800b428:	3304      	adds	r3, #4
 800b42a:	68ba      	ldr	r2, [r7, #8]
 800b42c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800b42e:	6939      	ldr	r1, [r7, #16]
 800b430:	69fa      	ldr	r2, [r7, #28]
 800b432:	4613      	mov	r3, r2
 800b434:	005b      	lsls	r3, r3, #1
 800b436:	4413      	add	r3, r2
 800b438:	00db      	lsls	r3, r3, #3
 800b43a:	440b      	add	r3, r1
 800b43c:	3320      	adds	r3, #32
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800b442:	6939      	ldr	r1, [r7, #16]
 800b444:	69fa      	ldr	r2, [r7, #28]
 800b446:	4613      	mov	r3, r2
 800b448:	005b      	lsls	r3, r3, #1
 800b44a:	4413      	add	r3, r2
 800b44c:	00db      	lsls	r3, r3, #3
 800b44e:	440b      	add	r3, r1
 800b450:	3328      	adds	r3, #40	; 0x28
 800b452:	2200      	movs	r2, #0
 800b454:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800b456:	6939      	ldr	r1, [r7, #16]
 800b458:	69fa      	ldr	r2, [r7, #28]
 800b45a:	4613      	mov	r3, r2
 800b45c:	005b      	lsls	r3, r3, #1
 800b45e:	4413      	add	r3, r2
 800b460:	00db      	lsls	r3, r3, #3
 800b462:	440b      	add	r3, r1
 800b464:	3324      	adds	r3, #36	; 0x24
 800b466:	2200      	movs	r2, #0
 800b468:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800b46a:	6939      	ldr	r1, [r7, #16]
 800b46c:	69fa      	ldr	r2, [r7, #28]
 800b46e:	4613      	mov	r3, r2
 800b470:	005b      	lsls	r3, r3, #1
 800b472:	4413      	add	r3, r2
 800b474:	00db      	lsls	r3, r3, #3
 800b476:	440b      	add	r3, r1
 800b478:	332c      	adds	r3, #44	; 0x2c
 800b47a:	683a      	ldr	r2, [r7, #0]
 800b47c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800b47e:	f3bf 8f5f 	dmb	sy
 800b482:	e002      	b.n	800b48a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800b484:	f04f 33ff 	mov.w	r3, #4294967295
 800b488:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800b490:	69fb      	ldr	r3, [r7, #28]
}
 800b492:	4618      	mov	r0, r3
 800b494:	3720      	adds	r7, #32
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	2002c480 	.word	0x2002c480

0800b4a0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b08a      	sub	sp, #40	; 0x28
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	60f8      	str	r0, [r7, #12]
 800b4a8:	60b9      	str	r1, [r7, #8]
 800b4aa:	607a      	str	r2, [r7, #4]
 800b4ac:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800b4ae:	4b21      	ldr	r3, [pc, #132]	; (800b534 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800b4b0:	623b      	str	r3, [r7, #32]
 800b4b2:	6a3b      	ldr	r3, [r7, #32]
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	b2db      	uxtb	r3, r3
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d101      	bne.n	800b4c0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800b4bc:	f7ff fe8e 	bl	800b1dc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800b4c0:	4b1c      	ldr	r3, [pc, #112]	; (800b534 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800b4c2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2b02      	cmp	r3, #2
 800b4c8:	d82c      	bhi.n	800b524 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800b4ca:	f3ef 8311 	mrs	r3, BASEPRI
 800b4ce:	f04f 0120 	mov.w	r1, #32
 800b4d2:	f381 8811 	msr	BASEPRI, r1
 800b4d6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	4613      	mov	r3, r2
 800b4dc:	005b      	lsls	r3, r3, #1
 800b4de:	4413      	add	r3, r2
 800b4e0:	00db      	lsls	r3, r3, #3
 800b4e2:	3360      	adds	r3, #96	; 0x60
 800b4e4:	69fa      	ldr	r2, [r7, #28]
 800b4e6:	4413      	add	r3, r2
 800b4e8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d00e      	beq.n	800b50e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	68ba      	ldr	r2, [r7, #8]
 800b4f4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	687a      	ldr	r2, [r7, #4]
 800b4fa:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	683a      	ldr	r2, [r7, #0]
 800b500:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	2200      	movs	r2, #0
 800b506:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	2200      	movs	r2, #0
 800b50c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b512:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800b514:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800b518:	69bb      	ldr	r3, [r7, #24]
 800b51a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800b51e:	2300      	movs	r3, #0
 800b520:	627b      	str	r3, [r7, #36]	; 0x24
 800b522:	e002      	b.n	800b52a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800b524:	f04f 33ff 	mov.w	r3, #4294967295
 800b528:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800b52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3728      	adds	r7, #40	; 0x28
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}
 800b534:	2002c480 	.word	0x2002c480

0800b538 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800b538:	b480      	push	{r7}
 800b53a:	b087      	sub	sp, #28
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	60f8      	str	r0, [r7, #12]
 800b540:	60b9      	str	r1, [r7, #8]
 800b542:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800b544:	2300      	movs	r3, #0
 800b546:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d00f      	beq.n	800b56e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800b54e:	e002      	b.n	800b556 <_EncodeStr+0x1e>
      Len++;
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	3301      	adds	r3, #1
 800b554:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800b556:	68ba      	ldr	r2, [r7, #8]
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	4413      	add	r3, r2
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d1f6      	bne.n	800b550 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800b562:	693a      	ldr	r2, [r7, #16]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	429a      	cmp	r2, r3
 800b568:	d901      	bls.n	800b56e <_EncodeStr+0x36>
      Len = Limit;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	2bfe      	cmp	r3, #254	; 0xfe
 800b572:	d806      	bhi.n	800b582 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	1c5a      	adds	r2, r3, #1
 800b578:	60fa      	str	r2, [r7, #12]
 800b57a:	693a      	ldr	r2, [r7, #16]
 800b57c:	b2d2      	uxtb	r2, r2
 800b57e:	701a      	strb	r2, [r3, #0]
 800b580:	e011      	b.n	800b5a6 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	1c5a      	adds	r2, r3, #1
 800b586:	60fa      	str	r2, [r7, #12]
 800b588:	22ff      	movs	r2, #255	; 0xff
 800b58a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	1c5a      	adds	r2, r3, #1
 800b590:	60fa      	str	r2, [r7, #12]
 800b592:	693a      	ldr	r2, [r7, #16]
 800b594:	b2d2      	uxtb	r2, r2
 800b596:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	0a19      	lsrs	r1, r3, #8
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	1c5a      	adds	r2, r3, #1
 800b5a0:	60fa      	str	r2, [r7, #12]
 800b5a2:	b2ca      	uxtb	r2, r1
 800b5a4:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800b5aa:	e00a      	b.n	800b5c2 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800b5ac:	68ba      	ldr	r2, [r7, #8]
 800b5ae:	1c53      	adds	r3, r2, #1
 800b5b0:	60bb      	str	r3, [r7, #8]
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	1c59      	adds	r1, r3, #1
 800b5b6:	60f9      	str	r1, [r7, #12]
 800b5b8:	7812      	ldrb	r2, [r2, #0]
 800b5ba:	701a      	strb	r2, [r3, #0]
    n++;
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	3301      	adds	r3, #1
 800b5c0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800b5c2:	697a      	ldr	r2, [r7, #20]
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d3f0      	bcc.n	800b5ac <_EncodeStr+0x74>
  }
  return pPayload;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	371c      	adds	r7, #28
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800b5d8:	b480      	push	{r7}
 800b5da:	b083      	sub	sp, #12
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	3304      	adds	r3, #4
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b082      	sub	sp, #8
 800b5f4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b5f6:	4b35      	ldr	r3, [pc, #212]	; (800b6cc <_HandleIncomingPacket+0xdc>)
 800b5f8:	7e1b      	ldrb	r3, [r3, #24]
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	1cfb      	adds	r3, r7, #3
 800b5fe:	2201      	movs	r2, #1
 800b600:	4619      	mov	r1, r3
 800b602:	f7ff fe43 	bl	800b28c <SEGGER_RTT_ReadNoLock>
 800b606:	4603      	mov	r3, r0
 800b608:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	dd59      	ble.n	800b6c4 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 800b610:	78fb      	ldrb	r3, [r7, #3]
 800b612:	2b80      	cmp	r3, #128	; 0x80
 800b614:	d032      	beq.n	800b67c <_HandleIncomingPacket+0x8c>
 800b616:	2b80      	cmp	r3, #128	; 0x80
 800b618:	dc42      	bgt.n	800b6a0 <_HandleIncomingPacket+0xb0>
 800b61a:	2b07      	cmp	r3, #7
 800b61c:	dc16      	bgt.n	800b64c <_HandleIncomingPacket+0x5c>
 800b61e:	2b00      	cmp	r3, #0
 800b620:	dd3e      	ble.n	800b6a0 <_HandleIncomingPacket+0xb0>
 800b622:	3b01      	subs	r3, #1
 800b624:	2b06      	cmp	r3, #6
 800b626:	d83b      	bhi.n	800b6a0 <_HandleIncomingPacket+0xb0>
 800b628:	a201      	add	r2, pc, #4	; (adr r2, 800b630 <_HandleIncomingPacket+0x40>)
 800b62a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b62e:	bf00      	nop
 800b630:	0800b653 	.word	0x0800b653
 800b634:	0800b659 	.word	0x0800b659
 800b638:	0800b65f 	.word	0x0800b65f
 800b63c:	0800b665 	.word	0x0800b665
 800b640:	0800b66b 	.word	0x0800b66b
 800b644:	0800b671 	.word	0x0800b671
 800b648:	0800b677 	.word	0x0800b677
 800b64c:	2b7f      	cmp	r3, #127	; 0x7f
 800b64e:	d034      	beq.n	800b6ba <_HandleIncomingPacket+0xca>
 800b650:	e026      	b.n	800b6a0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800b652:	f000 fba5 	bl	800bda0 <SEGGER_SYSVIEW_Start>
      break;
 800b656:	e035      	b.n	800b6c4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800b658:	f000 fc5c 	bl	800bf14 <SEGGER_SYSVIEW_Stop>
      break;
 800b65c:	e032      	b.n	800b6c4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800b65e:	f000 fe35 	bl	800c2cc <SEGGER_SYSVIEW_RecordSystime>
      break;
 800b662:	e02f      	b.n	800b6c4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800b664:	f000 fdfa 	bl	800c25c <SEGGER_SYSVIEW_SendTaskList>
      break;
 800b668:	e02c      	b.n	800b6c4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800b66a:	f000 fc79 	bl	800bf60 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800b66e:	e029      	b.n	800b6c4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800b670:	f000 ffee 	bl	800c650 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800b674:	e026      	b.n	800b6c4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800b676:	f000 ffcd 	bl	800c614 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800b67a:	e023      	b.n	800b6c4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b67c:	4b13      	ldr	r3, [pc, #76]	; (800b6cc <_HandleIncomingPacket+0xdc>)
 800b67e:	7e1b      	ldrb	r3, [r3, #24]
 800b680:	4618      	mov	r0, r3
 800b682:	1cfb      	adds	r3, r7, #3
 800b684:	2201      	movs	r2, #1
 800b686:	4619      	mov	r1, r3
 800b688:	f7ff fe00 	bl	800b28c <SEGGER_RTT_ReadNoLock>
 800b68c:	4603      	mov	r3, r0
 800b68e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2b00      	cmp	r3, #0
 800b694:	dd13      	ble.n	800b6be <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800b696:	78fb      	ldrb	r3, [r7, #3]
 800b698:	4618      	mov	r0, r3
 800b69a:	f000 ff3b 	bl	800c514 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800b69e:	e00e      	b.n	800b6be <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800b6a0:	78fb      	ldrb	r3, [r7, #3]
 800b6a2:	b25b      	sxtb	r3, r3
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	da0c      	bge.n	800b6c2 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b6a8:	4b08      	ldr	r3, [pc, #32]	; (800b6cc <_HandleIncomingPacket+0xdc>)
 800b6aa:	7e1b      	ldrb	r3, [r3, #24]
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	1cfb      	adds	r3, r7, #3
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	f7ff fdea 	bl	800b28c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800b6b8:	e003      	b.n	800b6c2 <_HandleIncomingPacket+0xd2>
      break;
 800b6ba:	bf00      	nop
 800b6bc:	e002      	b.n	800b6c4 <_HandleIncomingPacket+0xd4>
      break;
 800b6be:	bf00      	nop
 800b6c0:	e000      	b.n	800b6c4 <_HandleIncomingPacket+0xd4>
      break;
 800b6c2:	bf00      	nop
    }
  }
}
 800b6c4:	bf00      	nop
 800b6c6:	3708      	adds	r7, #8
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	2002cd44 	.word	0x2002cd44

0800b6d0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b08c      	sub	sp, #48	; 0x30
 800b6d4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800b6da:	1d3b      	adds	r3, r7, #4
 800b6dc:	3301      	adds	r3, #1
 800b6de:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800b6e0:	69fb      	ldr	r3, [r7, #28]
 800b6e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6e4:	4b31      	ldr	r3, [pc, #196]	; (800b7ac <_TrySendOverflowPacket+0xdc>)
 800b6e6:	695b      	ldr	r3, [r3, #20]
 800b6e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6ea:	e00b      	b.n	800b704 <_TrySendOverflowPacket+0x34>
 800b6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ee:	b2da      	uxtb	r2, r3
 800b6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f2:	1c59      	adds	r1, r3, #1
 800b6f4:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b6f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b6fa:	b2d2      	uxtb	r2, r2
 800b6fc:	701a      	strb	r2, [r3, #0]
 800b6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b700:	09db      	lsrs	r3, r3, #7
 800b702:	62bb      	str	r3, [r7, #40]	; 0x28
 800b704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b706:	2b7f      	cmp	r3, #127	; 0x7f
 800b708:	d8f0      	bhi.n	800b6ec <_TrySendOverflowPacket+0x1c>
 800b70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b70c:	1c5a      	adds	r2, r3, #1
 800b70e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b712:	b2d2      	uxtb	r2, r2
 800b714:	701a      	strb	r2, [r3, #0]
 800b716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b718:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800b71a:	4b25      	ldr	r3, [pc, #148]	; (800b7b0 <_TrySendOverflowPacket+0xe0>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800b720:	4b22      	ldr	r3, [pc, #136]	; (800b7ac <_TrySendOverflowPacket+0xdc>)
 800b722:	68db      	ldr	r3, [r3, #12]
 800b724:	69ba      	ldr	r2, [r7, #24]
 800b726:	1ad3      	subs	r3, r2, r3
 800b728:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800b72a:	69fb      	ldr	r3, [r7, #28]
 800b72c:	627b      	str	r3, [r7, #36]	; 0x24
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	623b      	str	r3, [r7, #32]
 800b732:	e00b      	b.n	800b74c <_TrySendOverflowPacket+0x7c>
 800b734:	6a3b      	ldr	r3, [r7, #32]
 800b736:	b2da      	uxtb	r2, r3
 800b738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73a:	1c59      	adds	r1, r3, #1
 800b73c:	6279      	str	r1, [r7, #36]	; 0x24
 800b73e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b742:	b2d2      	uxtb	r2, r2
 800b744:	701a      	strb	r2, [r3, #0]
 800b746:	6a3b      	ldr	r3, [r7, #32]
 800b748:	09db      	lsrs	r3, r3, #7
 800b74a:	623b      	str	r3, [r7, #32]
 800b74c:	6a3b      	ldr	r3, [r7, #32]
 800b74e:	2b7f      	cmp	r3, #127	; 0x7f
 800b750:	d8f0      	bhi.n	800b734 <_TrySendOverflowPacket+0x64>
 800b752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b754:	1c5a      	adds	r2, r3, #1
 800b756:	627a      	str	r2, [r7, #36]	; 0x24
 800b758:	6a3a      	ldr	r2, [r7, #32]
 800b75a:	b2d2      	uxtb	r2, r2
 800b75c:	701a      	strb	r2, [r3, #0]
 800b75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b760:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800b762:	4b12      	ldr	r3, [pc, #72]	; (800b7ac <_TrySendOverflowPacket+0xdc>)
 800b764:	785b      	ldrb	r3, [r3, #1]
 800b766:	4618      	mov	r0, r3
 800b768:	1d3b      	adds	r3, r7, #4
 800b76a:	69fa      	ldr	r2, [r7, #28]
 800b76c:	1ad3      	subs	r3, r2, r3
 800b76e:	461a      	mov	r2, r3
 800b770:	1d3b      	adds	r3, r7, #4
 800b772:	4619      	mov	r1, r3
 800b774:	f7f4 fd3c 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800b778:	4603      	mov	r3, r0
 800b77a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d009      	beq.n	800b796 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800b782:	4a0a      	ldr	r2, [pc, #40]	; (800b7ac <_TrySendOverflowPacket+0xdc>)
 800b784:	69bb      	ldr	r3, [r7, #24]
 800b786:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800b788:	4b08      	ldr	r3, [pc, #32]	; (800b7ac <_TrySendOverflowPacket+0xdc>)
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	3b01      	subs	r3, #1
 800b78e:	b2da      	uxtb	r2, r3
 800b790:	4b06      	ldr	r3, [pc, #24]	; (800b7ac <_TrySendOverflowPacket+0xdc>)
 800b792:	701a      	strb	r2, [r3, #0]
 800b794:	e004      	b.n	800b7a0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800b796:	4b05      	ldr	r3, [pc, #20]	; (800b7ac <_TrySendOverflowPacket+0xdc>)
 800b798:	695b      	ldr	r3, [r3, #20]
 800b79a:	3301      	adds	r3, #1
 800b79c:	4a03      	ldr	r2, [pc, #12]	; (800b7ac <_TrySendOverflowPacket+0xdc>)
 800b79e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800b7a0:	693b      	ldr	r3, [r7, #16]
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3730      	adds	r7, #48	; 0x30
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	2002cd44 	.word	0x2002cd44
 800b7b0:	e0001004 	.word	0xe0001004

0800b7b4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b08a      	sub	sp, #40	; 0x28
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800b7c0:	4b6c      	ldr	r3, [pc, #432]	; (800b974 <_SendPacket+0x1c0>)
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d010      	beq.n	800b7ea <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800b7c8:	4b6a      	ldr	r3, [pc, #424]	; (800b974 <_SendPacket+0x1c0>)
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f000 80a3 	beq.w	800b918 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800b7d2:	4b68      	ldr	r3, [pc, #416]	; (800b974 <_SendPacket+0x1c0>)
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	2b02      	cmp	r3, #2
 800b7d8:	d109      	bne.n	800b7ee <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800b7da:	f7ff ff79 	bl	800b6d0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800b7de:	4b65      	ldr	r3, [pc, #404]	; (800b974 <_SendPacket+0x1c0>)
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	f040 809a 	bne.w	800b91c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800b7e8:	e001      	b.n	800b7ee <_SendPacket+0x3a>
    goto Send;
 800b7ea:	bf00      	nop
 800b7ec:	e000      	b.n	800b7f0 <_SendPacket+0x3c>
Send:
 800b7ee:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2b1f      	cmp	r3, #31
 800b7f4:	d809      	bhi.n	800b80a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800b7f6:	4b5f      	ldr	r3, [pc, #380]	; (800b974 <_SendPacket+0x1c0>)
 800b7f8:	69da      	ldr	r2, [r3, #28]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	fa22 f303 	lsr.w	r3, r2, r3
 800b800:	f003 0301 	and.w	r3, r3, #1
 800b804:	2b00      	cmp	r3, #0
 800b806:	f040 808b 	bne.w	800b920 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2b17      	cmp	r3, #23
 800b80e:	d807      	bhi.n	800b820 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	3b01      	subs	r3, #1
 800b814:	60fb      	str	r3, [r7, #12]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	b2da      	uxtb	r2, r3
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	701a      	strb	r2, [r3, #0]
 800b81e:	e03d      	b.n	800b89c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800b820:	68ba      	ldr	r2, [r7, #8]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	1ad3      	subs	r3, r2, r3
 800b826:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800b828:	69fb      	ldr	r3, [r7, #28]
 800b82a:	2b7f      	cmp	r3, #127	; 0x7f
 800b82c:	d912      	bls.n	800b854 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800b82e:	69fb      	ldr	r3, [r7, #28]
 800b830:	09da      	lsrs	r2, r3, #7
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	3b01      	subs	r3, #1
 800b836:	60fb      	str	r3, [r7, #12]
 800b838:	b2d2      	uxtb	r2, r2
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800b83e:	69fb      	ldr	r3, [r7, #28]
 800b840:	b2db      	uxtb	r3, r3
 800b842:	68fa      	ldr	r2, [r7, #12]
 800b844:	3a01      	subs	r2, #1
 800b846:	60fa      	str	r2, [r7, #12]
 800b848:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b84c:	b2da      	uxtb	r2, r3
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	701a      	strb	r2, [r3, #0]
 800b852:	e006      	b.n	800b862 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	3b01      	subs	r3, #1
 800b858:	60fb      	str	r3, [r7, #12]
 800b85a:	69fb      	ldr	r3, [r7, #28]
 800b85c:	b2da      	uxtb	r2, r3
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2b7f      	cmp	r3, #127	; 0x7f
 800b866:	d912      	bls.n	800b88e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	09da      	lsrs	r2, r3, #7
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	3b01      	subs	r3, #1
 800b870:	60fb      	str	r3, [r7, #12]
 800b872:	b2d2      	uxtb	r2, r2
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	b2db      	uxtb	r3, r3
 800b87c:	68fa      	ldr	r2, [r7, #12]
 800b87e:	3a01      	subs	r2, #1
 800b880:	60fa      	str	r2, [r7, #12]
 800b882:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b886:	b2da      	uxtb	r2, r3
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	701a      	strb	r2, [r3, #0]
 800b88c:	e006      	b.n	800b89c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	3b01      	subs	r3, #1
 800b892:	60fb      	str	r3, [r7, #12]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	b2da      	uxtb	r2, r3
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800b89c:	4b36      	ldr	r3, [pc, #216]	; (800b978 <_SendPacket+0x1c4>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800b8a2:	4b34      	ldr	r3, [pc, #208]	; (800b974 <_SendPacket+0x1c0>)
 800b8a4:	68db      	ldr	r3, [r3, #12]
 800b8a6:	69ba      	ldr	r2, [r7, #24]
 800b8a8:	1ad3      	subs	r3, r2, r3
 800b8aa:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	627b      	str	r3, [r7, #36]	; 0x24
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	623b      	str	r3, [r7, #32]
 800b8b4:	e00b      	b.n	800b8ce <_SendPacket+0x11a>
 800b8b6:	6a3b      	ldr	r3, [r7, #32]
 800b8b8:	b2da      	uxtb	r2, r3
 800b8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8bc:	1c59      	adds	r1, r3, #1
 800b8be:	6279      	str	r1, [r7, #36]	; 0x24
 800b8c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b8c4:	b2d2      	uxtb	r2, r2
 800b8c6:	701a      	strb	r2, [r3, #0]
 800b8c8:	6a3b      	ldr	r3, [r7, #32]
 800b8ca:	09db      	lsrs	r3, r3, #7
 800b8cc:	623b      	str	r3, [r7, #32]
 800b8ce:	6a3b      	ldr	r3, [r7, #32]
 800b8d0:	2b7f      	cmp	r3, #127	; 0x7f
 800b8d2:	d8f0      	bhi.n	800b8b6 <_SendPacket+0x102>
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d6:	1c5a      	adds	r2, r3, #1
 800b8d8:	627a      	str	r2, [r7, #36]	; 0x24
 800b8da:	6a3a      	ldr	r2, [r7, #32]
 800b8dc:	b2d2      	uxtb	r2, r2
 800b8de:	701a      	strb	r2, [r3, #0]
 800b8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800b8e4:	4b23      	ldr	r3, [pc, #140]	; (800b974 <_SendPacket+0x1c0>)
 800b8e6:	785b      	ldrb	r3, [r3, #1]
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	68ba      	ldr	r2, [r7, #8]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	1ad3      	subs	r3, r2, r3
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	68f9      	ldr	r1, [r7, #12]
 800b8f4:	f7f4 fc7c 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d003      	beq.n	800b90a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800b902:	4a1c      	ldr	r2, [pc, #112]	; (800b974 <_SendPacket+0x1c0>)
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	60d3      	str	r3, [r2, #12]
 800b908:	e00b      	b.n	800b922 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800b90a:	4b1a      	ldr	r3, [pc, #104]	; (800b974 <_SendPacket+0x1c0>)
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	3301      	adds	r3, #1
 800b910:	b2da      	uxtb	r2, r3
 800b912:	4b18      	ldr	r3, [pc, #96]	; (800b974 <_SendPacket+0x1c0>)
 800b914:	701a      	strb	r2, [r3, #0]
 800b916:	e004      	b.n	800b922 <_SendPacket+0x16e>
    goto SendDone;
 800b918:	bf00      	nop
 800b91a:	e002      	b.n	800b922 <_SendPacket+0x16e>
      goto SendDone;
 800b91c:	bf00      	nop
 800b91e:	e000      	b.n	800b922 <_SendPacket+0x16e>
      goto SendDone;
 800b920:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800b922:	4b14      	ldr	r3, [pc, #80]	; (800b974 <_SendPacket+0x1c0>)
 800b924:	7e1b      	ldrb	r3, [r3, #24]
 800b926:	4619      	mov	r1, r3
 800b928:	4a14      	ldr	r2, [pc, #80]	; (800b97c <_SendPacket+0x1c8>)
 800b92a:	460b      	mov	r3, r1
 800b92c:	005b      	lsls	r3, r3, #1
 800b92e:	440b      	add	r3, r1
 800b930:	00db      	lsls	r3, r3, #3
 800b932:	4413      	add	r3, r2
 800b934:	336c      	adds	r3, #108	; 0x6c
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	4b0e      	ldr	r3, [pc, #56]	; (800b974 <_SendPacket+0x1c0>)
 800b93a:	7e1b      	ldrb	r3, [r3, #24]
 800b93c:	4618      	mov	r0, r3
 800b93e:	490f      	ldr	r1, [pc, #60]	; (800b97c <_SendPacket+0x1c8>)
 800b940:	4603      	mov	r3, r0
 800b942:	005b      	lsls	r3, r3, #1
 800b944:	4403      	add	r3, r0
 800b946:	00db      	lsls	r3, r3, #3
 800b948:	440b      	add	r3, r1
 800b94a:	3370      	adds	r3, #112	; 0x70
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d00b      	beq.n	800b96a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800b952:	4b08      	ldr	r3, [pc, #32]	; (800b974 <_SendPacket+0x1c0>)
 800b954:	789b      	ldrb	r3, [r3, #2]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d107      	bne.n	800b96a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800b95a:	4b06      	ldr	r3, [pc, #24]	; (800b974 <_SendPacket+0x1c0>)
 800b95c:	2201      	movs	r2, #1
 800b95e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800b960:	f7ff fe46 	bl	800b5f0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800b964:	4b03      	ldr	r3, [pc, #12]	; (800b974 <_SendPacket+0x1c0>)
 800b966:	2200      	movs	r2, #0
 800b968:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800b96a:	bf00      	nop
 800b96c:	3728      	adds	r7, #40	; 0x28
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	2002cd44 	.word	0x2002cd44
 800b978:	e0001004 	.word	0xe0001004
 800b97c:	2002c480 	.word	0x2002c480

0800b980 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800b980:	b580      	push	{r7, lr}
 800b982:	b086      	sub	sp, #24
 800b984:	af02      	add	r7, sp, #8
 800b986:	60f8      	str	r0, [r7, #12]
 800b988:	60b9      	str	r1, [r7, #8]
 800b98a:	607a      	str	r2, [r7, #4]
 800b98c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800b98e:	2300      	movs	r3, #0
 800b990:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b994:	4917      	ldr	r1, [pc, #92]	; (800b9f4 <SEGGER_SYSVIEW_Init+0x74>)
 800b996:	4818      	ldr	r0, [pc, #96]	; (800b9f8 <SEGGER_SYSVIEW_Init+0x78>)
 800b998:	f7ff fcfe 	bl	800b398 <SEGGER_RTT_AllocUpBuffer>
 800b99c:	4603      	mov	r3, r0
 800b99e:	b2da      	uxtb	r2, r3
 800b9a0:	4b16      	ldr	r3, [pc, #88]	; (800b9fc <SEGGER_SYSVIEW_Init+0x7c>)
 800b9a2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800b9a4:	4b15      	ldr	r3, [pc, #84]	; (800b9fc <SEGGER_SYSVIEW_Init+0x7c>)
 800b9a6:	785a      	ldrb	r2, [r3, #1]
 800b9a8:	4b14      	ldr	r3, [pc, #80]	; (800b9fc <SEGGER_SYSVIEW_Init+0x7c>)
 800b9aa:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800b9ac:	4b13      	ldr	r3, [pc, #76]	; (800b9fc <SEGGER_SYSVIEW_Init+0x7c>)
 800b9ae:	7e1b      	ldrb	r3, [r3, #24]
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	9300      	str	r3, [sp, #0]
 800b9b6:	2308      	movs	r3, #8
 800b9b8:	4a11      	ldr	r2, [pc, #68]	; (800ba00 <SEGGER_SYSVIEW_Init+0x80>)
 800b9ba:	490f      	ldr	r1, [pc, #60]	; (800b9f8 <SEGGER_SYSVIEW_Init+0x78>)
 800b9bc:	f7ff fd70 	bl	800b4a0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800b9c0:	4b0e      	ldr	r3, [pc, #56]	; (800b9fc <SEGGER_SYSVIEW_Init+0x7c>)
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800b9c6:	4b0f      	ldr	r3, [pc, #60]	; (800ba04 <SEGGER_SYSVIEW_Init+0x84>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	4a0c      	ldr	r2, [pc, #48]	; (800b9fc <SEGGER_SYSVIEW_Init+0x7c>)
 800b9cc:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800b9ce:	4a0b      	ldr	r2, [pc, #44]	; (800b9fc <SEGGER_SYSVIEW_Init+0x7c>)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800b9d4:	4a09      	ldr	r2, [pc, #36]	; (800b9fc <SEGGER_SYSVIEW_Init+0x7c>)
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800b9da:	4a08      	ldr	r2, [pc, #32]	; (800b9fc <SEGGER_SYSVIEW_Init+0x7c>)
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800b9e0:	4a06      	ldr	r2, [pc, #24]	; (800b9fc <SEGGER_SYSVIEW_Init+0x7c>)
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800b9e6:	4b05      	ldr	r3, [pc, #20]	; (800b9fc <SEGGER_SYSVIEW_Init+0x7c>)
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800b9ec:	bf00      	nop
 800b9ee:	3710      	adds	r7, #16
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}
 800b9f4:	2002c93c 	.word	0x2002c93c
 800b9f8:	0800f318 	.word	0x0800f318
 800b9fc:	2002cd44 	.word	0x2002cd44
 800ba00:	2002cd3c 	.word	0x2002cd3c
 800ba04:	e0001004 	.word	0xe0001004

0800ba08 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800ba08:	b480      	push	{r7}
 800ba0a:	b083      	sub	sp, #12
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800ba10:	4a04      	ldr	r2, [pc, #16]	; (800ba24 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6113      	str	r3, [r2, #16]
}
 800ba16:	bf00      	nop
 800ba18:	370c      	adds	r7, #12
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr
 800ba22:	bf00      	nop
 800ba24:	2002cd44 	.word	0x2002cd44

0800ba28 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800ba30:	f3ef 8311 	mrs	r3, BASEPRI
 800ba34:	f04f 0120 	mov.w	r1, #32
 800ba38:	f381 8811 	msr	BASEPRI, r1
 800ba3c:	60fb      	str	r3, [r7, #12]
 800ba3e:	4808      	ldr	r0, [pc, #32]	; (800ba60 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800ba40:	f7ff fdca 	bl	800b5d8 <_PreparePacket>
 800ba44:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	68b9      	ldr	r1, [r7, #8]
 800ba4a:	68b8      	ldr	r0, [r7, #8]
 800ba4c:	f7ff feb2 	bl	800b7b4 <_SendPacket>
  RECORD_END();
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	f383 8811 	msr	BASEPRI, r3
}
 800ba56:	bf00      	nop
 800ba58:	3710      	adds	r7, #16
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	2002cd74 	.word	0x2002cd74

0800ba64 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b088      	sub	sp, #32
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800ba6e:	f3ef 8311 	mrs	r3, BASEPRI
 800ba72:	f04f 0120 	mov.w	r1, #32
 800ba76:	f381 8811 	msr	BASEPRI, r1
 800ba7a:	617b      	str	r3, [r7, #20]
 800ba7c:	4816      	ldr	r0, [pc, #88]	; (800bad8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800ba7e:	f7ff fdab 	bl	800b5d8 <_PreparePacket>
 800ba82:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	61fb      	str	r3, [r7, #28]
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	61bb      	str	r3, [r7, #24]
 800ba90:	e00b      	b.n	800baaa <SEGGER_SYSVIEW_RecordU32+0x46>
 800ba92:	69bb      	ldr	r3, [r7, #24]
 800ba94:	b2da      	uxtb	r2, r3
 800ba96:	69fb      	ldr	r3, [r7, #28]
 800ba98:	1c59      	adds	r1, r3, #1
 800ba9a:	61f9      	str	r1, [r7, #28]
 800ba9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800baa0:	b2d2      	uxtb	r2, r2
 800baa2:	701a      	strb	r2, [r3, #0]
 800baa4:	69bb      	ldr	r3, [r7, #24]
 800baa6:	09db      	lsrs	r3, r3, #7
 800baa8:	61bb      	str	r3, [r7, #24]
 800baaa:	69bb      	ldr	r3, [r7, #24]
 800baac:	2b7f      	cmp	r3, #127	; 0x7f
 800baae:	d8f0      	bhi.n	800ba92 <SEGGER_SYSVIEW_RecordU32+0x2e>
 800bab0:	69fb      	ldr	r3, [r7, #28]
 800bab2:	1c5a      	adds	r2, r3, #1
 800bab4:	61fa      	str	r2, [r7, #28]
 800bab6:	69ba      	ldr	r2, [r7, #24]
 800bab8:	b2d2      	uxtb	r2, r2
 800baba:	701a      	strb	r2, [r3, #0]
 800babc:	69fb      	ldr	r3, [r7, #28]
 800babe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800bac0:	687a      	ldr	r2, [r7, #4]
 800bac2:	68f9      	ldr	r1, [r7, #12]
 800bac4:	6938      	ldr	r0, [r7, #16]
 800bac6:	f7ff fe75 	bl	800b7b4 <_SendPacket>
  RECORD_END();
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	f383 8811 	msr	BASEPRI, r3
}
 800bad0:	bf00      	nop
 800bad2:	3720      	adds	r7, #32
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	2002cd74 	.word	0x2002cd74

0800badc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800badc:	b580      	push	{r7, lr}
 800bade:	b08c      	sub	sp, #48	; 0x30
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800bae8:	f3ef 8311 	mrs	r3, BASEPRI
 800baec:	f04f 0120 	mov.w	r1, #32
 800baf0:	f381 8811 	msr	BASEPRI, r1
 800baf4:	61fb      	str	r3, [r7, #28]
 800baf6:	4825      	ldr	r0, [pc, #148]	; (800bb8c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800baf8:	f7ff fd6e 	bl	800b5d8 <_PreparePacket>
 800bafc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb0a:	e00b      	b.n	800bb24 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800bb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb0e:	b2da      	uxtb	r2, r3
 800bb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb12:	1c59      	adds	r1, r3, #1
 800bb14:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bb16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bb1a:	b2d2      	uxtb	r2, r2
 800bb1c:	701a      	strb	r2, [r3, #0]
 800bb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb20:	09db      	lsrs	r3, r3, #7
 800bb22:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb26:	2b7f      	cmp	r3, #127	; 0x7f
 800bb28:	d8f0      	bhi.n	800bb0c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800bb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb2c:	1c5a      	adds	r2, r3, #1
 800bb2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bb30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb32:	b2d2      	uxtb	r2, r2
 800bb34:	701a      	strb	r2, [r3, #0]
 800bb36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb38:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	627b      	str	r3, [r7, #36]	; 0x24
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	623b      	str	r3, [r7, #32]
 800bb42:	e00b      	b.n	800bb5c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800bb44:	6a3b      	ldr	r3, [r7, #32]
 800bb46:	b2da      	uxtb	r2, r3
 800bb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4a:	1c59      	adds	r1, r3, #1
 800bb4c:	6279      	str	r1, [r7, #36]	; 0x24
 800bb4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bb52:	b2d2      	uxtb	r2, r2
 800bb54:	701a      	strb	r2, [r3, #0]
 800bb56:	6a3b      	ldr	r3, [r7, #32]
 800bb58:	09db      	lsrs	r3, r3, #7
 800bb5a:	623b      	str	r3, [r7, #32]
 800bb5c:	6a3b      	ldr	r3, [r7, #32]
 800bb5e:	2b7f      	cmp	r3, #127	; 0x7f
 800bb60:	d8f0      	bhi.n	800bb44 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800bb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb64:	1c5a      	adds	r2, r3, #1
 800bb66:	627a      	str	r2, [r7, #36]	; 0x24
 800bb68:	6a3a      	ldr	r2, [r7, #32]
 800bb6a:	b2d2      	uxtb	r2, r2
 800bb6c:	701a      	strb	r2, [r3, #0]
 800bb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb70:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800bb72:	68fa      	ldr	r2, [r7, #12]
 800bb74:	6979      	ldr	r1, [r7, #20]
 800bb76:	69b8      	ldr	r0, [r7, #24]
 800bb78:	f7ff fe1c 	bl	800b7b4 <_SendPacket>
  RECORD_END();
 800bb7c:	69fb      	ldr	r3, [r7, #28]
 800bb7e:	f383 8811 	msr	BASEPRI, r3
}
 800bb82:	bf00      	nop
 800bb84:	3730      	adds	r7, #48	; 0x30
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
 800bb8a:	bf00      	nop
 800bb8c:	2002cd74 	.word	0x2002cd74

0800bb90 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b08e      	sub	sp, #56	; 0x38
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	607a      	str	r2, [r7, #4]
 800bb9c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800bb9e:	f3ef 8311 	mrs	r3, BASEPRI
 800bba2:	f04f 0120 	mov.w	r1, #32
 800bba6:	f381 8811 	msr	BASEPRI, r1
 800bbaa:	61fb      	str	r3, [r7, #28]
 800bbac:	4832      	ldr	r0, [pc, #200]	; (800bc78 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800bbae:	f7ff fd13 	bl	800b5d8 <_PreparePacket>
 800bbb2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800bbb4:	69bb      	ldr	r3, [r7, #24]
 800bbb6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	637b      	str	r3, [r7, #52]	; 0x34
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	633b      	str	r3, [r7, #48]	; 0x30
 800bbc0:	e00b      	b.n	800bbda <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800bbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc4:	b2da      	uxtb	r2, r3
 800bbc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbc8:	1c59      	adds	r1, r3, #1
 800bbca:	6379      	str	r1, [r7, #52]	; 0x34
 800bbcc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bbd0:	b2d2      	uxtb	r2, r2
 800bbd2:	701a      	strb	r2, [r3, #0]
 800bbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd6:	09db      	lsrs	r3, r3, #7
 800bbd8:	633b      	str	r3, [r7, #48]	; 0x30
 800bbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbdc:	2b7f      	cmp	r3, #127	; 0x7f
 800bbde:	d8f0      	bhi.n	800bbc2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800bbe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbe2:	1c5a      	adds	r2, r3, #1
 800bbe4:	637a      	str	r2, [r7, #52]	; 0x34
 800bbe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbe8:	b2d2      	uxtb	r2, r2
 800bbea:	701a      	strb	r2, [r3, #0]
 800bbec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbf8:	e00b      	b.n	800bc12 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800bbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfc:	b2da      	uxtb	r2, r3
 800bbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc00:	1c59      	adds	r1, r3, #1
 800bc02:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bc04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bc08:	b2d2      	uxtb	r2, r2
 800bc0a:	701a      	strb	r2, [r3, #0]
 800bc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc0e:	09db      	lsrs	r3, r3, #7
 800bc10:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc14:	2b7f      	cmp	r3, #127	; 0x7f
 800bc16:	d8f0      	bhi.n	800bbfa <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800bc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1a:	1c5a      	adds	r2, r3, #1
 800bc1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bc1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc20:	b2d2      	uxtb	r2, r2
 800bc22:	701a      	strb	r2, [r3, #0]
 800bc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc26:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	627b      	str	r3, [r7, #36]	; 0x24
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	623b      	str	r3, [r7, #32]
 800bc30:	e00b      	b.n	800bc4a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800bc32:	6a3b      	ldr	r3, [r7, #32]
 800bc34:	b2da      	uxtb	r2, r3
 800bc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc38:	1c59      	adds	r1, r3, #1
 800bc3a:	6279      	str	r1, [r7, #36]	; 0x24
 800bc3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bc40:	b2d2      	uxtb	r2, r2
 800bc42:	701a      	strb	r2, [r3, #0]
 800bc44:	6a3b      	ldr	r3, [r7, #32]
 800bc46:	09db      	lsrs	r3, r3, #7
 800bc48:	623b      	str	r3, [r7, #32]
 800bc4a:	6a3b      	ldr	r3, [r7, #32]
 800bc4c:	2b7f      	cmp	r3, #127	; 0x7f
 800bc4e:	d8f0      	bhi.n	800bc32 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800bc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc52:	1c5a      	adds	r2, r3, #1
 800bc54:	627a      	str	r2, [r7, #36]	; 0x24
 800bc56:	6a3a      	ldr	r2, [r7, #32]
 800bc58:	b2d2      	uxtb	r2, r2
 800bc5a:	701a      	strb	r2, [r3, #0]
 800bc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800bc60:	68fa      	ldr	r2, [r7, #12]
 800bc62:	6979      	ldr	r1, [r7, #20]
 800bc64:	69b8      	ldr	r0, [r7, #24]
 800bc66:	f7ff fda5 	bl	800b7b4 <_SendPacket>
  RECORD_END();
 800bc6a:	69fb      	ldr	r3, [r7, #28]
 800bc6c:	f383 8811 	msr	BASEPRI, r3
}
 800bc70:	bf00      	nop
 800bc72:	3738      	adds	r7, #56	; 0x38
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}
 800bc78:	2002cd74 	.word	0x2002cd74

0800bc7c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b090      	sub	sp, #64	; 0x40
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	60b9      	str	r1, [r7, #8]
 800bc86:	607a      	str	r2, [r7, #4]
 800bc88:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800bc8a:	f3ef 8311 	mrs	r3, BASEPRI
 800bc8e:	f04f 0120 	mov.w	r1, #32
 800bc92:	f381 8811 	msr	BASEPRI, r1
 800bc96:	61fb      	str	r3, [r7, #28]
 800bc98:	4840      	ldr	r0, [pc, #256]	; (800bd9c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800bc9a:	f7ff fc9d 	bl	800b5d8 <_PreparePacket>
 800bc9e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800bca0:	69bb      	ldr	r3, [r7, #24]
 800bca2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	63bb      	str	r3, [r7, #56]	; 0x38
 800bcac:	e00b      	b.n	800bcc6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800bcae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb0:	b2da      	uxtb	r2, r3
 800bcb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcb4:	1c59      	adds	r1, r3, #1
 800bcb6:	63f9      	str	r1, [r7, #60]	; 0x3c
 800bcb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bcbc:	b2d2      	uxtb	r2, r2
 800bcbe:	701a      	strb	r2, [r3, #0]
 800bcc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc2:	09db      	lsrs	r3, r3, #7
 800bcc4:	63bb      	str	r3, [r7, #56]	; 0x38
 800bcc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc8:	2b7f      	cmp	r3, #127	; 0x7f
 800bcca:	d8f0      	bhi.n	800bcae <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800bccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcce:	1c5a      	adds	r2, r3, #1
 800bcd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bcd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bcd4:	b2d2      	uxtb	r2, r2
 800bcd6:	701a      	strb	r2, [r3, #0]
 800bcd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcda:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	637b      	str	r3, [r7, #52]	; 0x34
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	633b      	str	r3, [r7, #48]	; 0x30
 800bce4:	e00b      	b.n	800bcfe <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800bce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce8:	b2da      	uxtb	r2, r3
 800bcea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcec:	1c59      	adds	r1, r3, #1
 800bcee:	6379      	str	r1, [r7, #52]	; 0x34
 800bcf0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bcf4:	b2d2      	uxtb	r2, r2
 800bcf6:	701a      	strb	r2, [r3, #0]
 800bcf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfa:	09db      	lsrs	r3, r3, #7
 800bcfc:	633b      	str	r3, [r7, #48]	; 0x30
 800bcfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd00:	2b7f      	cmp	r3, #127	; 0x7f
 800bd02:	d8f0      	bhi.n	800bce6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800bd04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd06:	1c5a      	adds	r2, r3, #1
 800bd08:	637a      	str	r2, [r7, #52]	; 0x34
 800bd0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd0c:	b2d2      	uxtb	r2, r2
 800bd0e:	701a      	strb	r2, [r3, #0]
 800bd10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd12:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd1c:	e00b      	b.n	800bd36 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800bd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd20:	b2da      	uxtb	r2, r3
 800bd22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd24:	1c59      	adds	r1, r3, #1
 800bd26:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bd28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bd2c:	b2d2      	uxtb	r2, r2
 800bd2e:	701a      	strb	r2, [r3, #0]
 800bd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd32:	09db      	lsrs	r3, r3, #7
 800bd34:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd38:	2b7f      	cmp	r3, #127	; 0x7f
 800bd3a:	d8f0      	bhi.n	800bd1e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800bd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd3e:	1c5a      	adds	r2, r3, #1
 800bd40:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bd42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd44:	b2d2      	uxtb	r2, r2
 800bd46:	701a      	strb	r2, [r3, #0]
 800bd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd4a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	627b      	str	r3, [r7, #36]	; 0x24
 800bd50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd52:	623b      	str	r3, [r7, #32]
 800bd54:	e00b      	b.n	800bd6e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800bd56:	6a3b      	ldr	r3, [r7, #32]
 800bd58:	b2da      	uxtb	r2, r3
 800bd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5c:	1c59      	adds	r1, r3, #1
 800bd5e:	6279      	str	r1, [r7, #36]	; 0x24
 800bd60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bd64:	b2d2      	uxtb	r2, r2
 800bd66:	701a      	strb	r2, [r3, #0]
 800bd68:	6a3b      	ldr	r3, [r7, #32]
 800bd6a:	09db      	lsrs	r3, r3, #7
 800bd6c:	623b      	str	r3, [r7, #32]
 800bd6e:	6a3b      	ldr	r3, [r7, #32]
 800bd70:	2b7f      	cmp	r3, #127	; 0x7f
 800bd72:	d8f0      	bhi.n	800bd56 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800bd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd76:	1c5a      	adds	r2, r3, #1
 800bd78:	627a      	str	r2, [r7, #36]	; 0x24
 800bd7a:	6a3a      	ldr	r2, [r7, #32]
 800bd7c:	b2d2      	uxtb	r2, r2
 800bd7e:	701a      	strb	r2, [r3, #0]
 800bd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd82:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800bd84:	68fa      	ldr	r2, [r7, #12]
 800bd86:	6979      	ldr	r1, [r7, #20]
 800bd88:	69b8      	ldr	r0, [r7, #24]
 800bd8a:	f7ff fd13 	bl	800b7b4 <_SendPacket>
  RECORD_END();
 800bd8e:	69fb      	ldr	r3, [r7, #28]
 800bd90:	f383 8811 	msr	BASEPRI, r3
}
 800bd94:	bf00      	nop
 800bd96:	3740      	adds	r7, #64	; 0x40
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}
 800bd9c:	2002cd74 	.word	0x2002cd74

0800bda0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b08c      	sub	sp, #48	; 0x30
 800bda4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800bda6:	4b58      	ldr	r3, [pc, #352]	; (800bf08 <SEGGER_SYSVIEW_Start+0x168>)
 800bda8:	2201      	movs	r2, #1
 800bdaa:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800bdac:	f3ef 8311 	mrs	r3, BASEPRI
 800bdb0:	f04f 0120 	mov.w	r1, #32
 800bdb4:	f381 8811 	msr	BASEPRI, r1
 800bdb8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800bdba:	4b53      	ldr	r3, [pc, #332]	; (800bf08 <SEGGER_SYSVIEW_Start+0x168>)
 800bdbc:	785b      	ldrb	r3, [r3, #1]
 800bdbe:	220a      	movs	r2, #10
 800bdc0:	4952      	ldr	r1, [pc, #328]	; (800bf0c <SEGGER_SYSVIEW_Start+0x16c>)
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f7f4 fa14 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800bdce:	200a      	movs	r0, #10
 800bdd0:	f7ff fe2a 	bl	800ba28 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800bdd4:	f3ef 8311 	mrs	r3, BASEPRI
 800bdd8:	f04f 0120 	mov.w	r1, #32
 800bddc:	f381 8811 	msr	BASEPRI, r1
 800bde0:	60bb      	str	r3, [r7, #8]
 800bde2:	484b      	ldr	r0, [pc, #300]	; (800bf10 <SEGGER_SYSVIEW_Start+0x170>)
 800bde4:	f7ff fbf8 	bl	800b5d8 <_PreparePacket>
 800bde8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bdf2:	4b45      	ldr	r3, [pc, #276]	; (800bf08 <SEGGER_SYSVIEW_Start+0x168>)
 800bdf4:	685b      	ldr	r3, [r3, #4]
 800bdf6:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdf8:	e00b      	b.n	800be12 <SEGGER_SYSVIEW_Start+0x72>
 800bdfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdfc:	b2da      	uxtb	r2, r3
 800bdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be00:	1c59      	adds	r1, r3, #1
 800be02:	62f9      	str	r1, [r7, #44]	; 0x2c
 800be04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800be08:	b2d2      	uxtb	r2, r2
 800be0a:	701a      	strb	r2, [r3, #0]
 800be0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be0e:	09db      	lsrs	r3, r3, #7
 800be10:	62bb      	str	r3, [r7, #40]	; 0x28
 800be12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be14:	2b7f      	cmp	r3, #127	; 0x7f
 800be16:	d8f0      	bhi.n	800bdfa <SEGGER_SYSVIEW_Start+0x5a>
 800be18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be1a:	1c5a      	adds	r2, r3, #1
 800be1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800be1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be20:	b2d2      	uxtb	r2, r2
 800be22:	701a      	strb	r2, [r3, #0]
 800be24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be26:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	627b      	str	r3, [r7, #36]	; 0x24
 800be2c:	4b36      	ldr	r3, [pc, #216]	; (800bf08 <SEGGER_SYSVIEW_Start+0x168>)
 800be2e:	689b      	ldr	r3, [r3, #8]
 800be30:	623b      	str	r3, [r7, #32]
 800be32:	e00b      	b.n	800be4c <SEGGER_SYSVIEW_Start+0xac>
 800be34:	6a3b      	ldr	r3, [r7, #32]
 800be36:	b2da      	uxtb	r2, r3
 800be38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3a:	1c59      	adds	r1, r3, #1
 800be3c:	6279      	str	r1, [r7, #36]	; 0x24
 800be3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800be42:	b2d2      	uxtb	r2, r2
 800be44:	701a      	strb	r2, [r3, #0]
 800be46:	6a3b      	ldr	r3, [r7, #32]
 800be48:	09db      	lsrs	r3, r3, #7
 800be4a:	623b      	str	r3, [r7, #32]
 800be4c:	6a3b      	ldr	r3, [r7, #32]
 800be4e:	2b7f      	cmp	r3, #127	; 0x7f
 800be50:	d8f0      	bhi.n	800be34 <SEGGER_SYSVIEW_Start+0x94>
 800be52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be54:	1c5a      	adds	r2, r3, #1
 800be56:	627a      	str	r2, [r7, #36]	; 0x24
 800be58:	6a3a      	ldr	r2, [r7, #32]
 800be5a:	b2d2      	uxtb	r2, r2
 800be5c:	701a      	strb	r2, [r3, #0]
 800be5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be60:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	61fb      	str	r3, [r7, #28]
 800be66:	4b28      	ldr	r3, [pc, #160]	; (800bf08 <SEGGER_SYSVIEW_Start+0x168>)
 800be68:	691b      	ldr	r3, [r3, #16]
 800be6a:	61bb      	str	r3, [r7, #24]
 800be6c:	e00b      	b.n	800be86 <SEGGER_SYSVIEW_Start+0xe6>
 800be6e:	69bb      	ldr	r3, [r7, #24]
 800be70:	b2da      	uxtb	r2, r3
 800be72:	69fb      	ldr	r3, [r7, #28]
 800be74:	1c59      	adds	r1, r3, #1
 800be76:	61f9      	str	r1, [r7, #28]
 800be78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800be7c:	b2d2      	uxtb	r2, r2
 800be7e:	701a      	strb	r2, [r3, #0]
 800be80:	69bb      	ldr	r3, [r7, #24]
 800be82:	09db      	lsrs	r3, r3, #7
 800be84:	61bb      	str	r3, [r7, #24]
 800be86:	69bb      	ldr	r3, [r7, #24]
 800be88:	2b7f      	cmp	r3, #127	; 0x7f
 800be8a:	d8f0      	bhi.n	800be6e <SEGGER_SYSVIEW_Start+0xce>
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	1c5a      	adds	r2, r3, #1
 800be90:	61fa      	str	r2, [r7, #28]
 800be92:	69ba      	ldr	r2, [r7, #24]
 800be94:	b2d2      	uxtb	r2, r2
 800be96:	701a      	strb	r2, [r3, #0]
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	617b      	str	r3, [r7, #20]
 800bea0:	2300      	movs	r3, #0
 800bea2:	613b      	str	r3, [r7, #16]
 800bea4:	e00b      	b.n	800bebe <SEGGER_SYSVIEW_Start+0x11e>
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	b2da      	uxtb	r2, r3
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	1c59      	adds	r1, r3, #1
 800beae:	6179      	str	r1, [r7, #20]
 800beb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800beb4:	b2d2      	uxtb	r2, r2
 800beb6:	701a      	strb	r2, [r3, #0]
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	09db      	lsrs	r3, r3, #7
 800bebc:	613b      	str	r3, [r7, #16]
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	2b7f      	cmp	r3, #127	; 0x7f
 800bec2:	d8f0      	bhi.n	800bea6 <SEGGER_SYSVIEW_Start+0x106>
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	1c5a      	adds	r2, r3, #1
 800bec8:	617a      	str	r2, [r7, #20]
 800beca:	693a      	ldr	r2, [r7, #16]
 800becc:	b2d2      	uxtb	r2, r2
 800bece:	701a      	strb	r2, [r3, #0]
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800bed4:	2218      	movs	r2, #24
 800bed6:	6839      	ldr	r1, [r7, #0]
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f7ff fc6b 	bl	800b7b4 <_SendPacket>
      RECORD_END();
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800bee4:	4b08      	ldr	r3, [pc, #32]	; (800bf08 <SEGGER_SYSVIEW_Start+0x168>)
 800bee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d002      	beq.n	800bef2 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800beec:	4b06      	ldr	r3, [pc, #24]	; (800bf08 <SEGGER_SYSVIEW_Start+0x168>)
 800beee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800bef2:	f000 f9eb 	bl	800c2cc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800bef6:	f000 f9b1 	bl	800c25c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800befa:	f000 fba9 	bl	800c650 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800befe:	bf00      	nop
 800bf00:	3730      	adds	r7, #48	; 0x30
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop
 800bf08:	2002cd44 	.word	0x2002cd44
 800bf0c:	080106a0 	.word	0x080106a0
 800bf10:	2002cd74 	.word	0x2002cd74

0800bf14 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800bf1a:	f3ef 8311 	mrs	r3, BASEPRI
 800bf1e:	f04f 0120 	mov.w	r1, #32
 800bf22:	f381 8811 	msr	BASEPRI, r1
 800bf26:	607b      	str	r3, [r7, #4]
 800bf28:	480b      	ldr	r0, [pc, #44]	; (800bf58 <SEGGER_SYSVIEW_Stop+0x44>)
 800bf2a:	f7ff fb55 	bl	800b5d8 <_PreparePacket>
 800bf2e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800bf30:	4b0a      	ldr	r3, [pc, #40]	; (800bf5c <SEGGER_SYSVIEW_Stop+0x48>)
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d007      	beq.n	800bf48 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800bf38:	220b      	movs	r2, #11
 800bf3a:	6839      	ldr	r1, [r7, #0]
 800bf3c:	6838      	ldr	r0, [r7, #0]
 800bf3e:	f7ff fc39 	bl	800b7b4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800bf42:	4b06      	ldr	r3, [pc, #24]	; (800bf5c <SEGGER_SYSVIEW_Stop+0x48>)
 800bf44:	2200      	movs	r2, #0
 800bf46:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f383 8811 	msr	BASEPRI, r3
}
 800bf4e:	bf00      	nop
 800bf50:	3708      	adds	r7, #8
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	2002cd74 	.word	0x2002cd74
 800bf5c:	2002cd44 	.word	0x2002cd44

0800bf60 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b08c      	sub	sp, #48	; 0x30
 800bf64:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800bf66:	f3ef 8311 	mrs	r3, BASEPRI
 800bf6a:	f04f 0120 	mov.w	r1, #32
 800bf6e:	f381 8811 	msr	BASEPRI, r1
 800bf72:	60fb      	str	r3, [r7, #12]
 800bf74:	4845      	ldr	r0, [pc, #276]	; (800c08c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800bf76:	f7ff fb2f 	bl	800b5d8 <_PreparePacket>
 800bf7a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf84:	4b42      	ldr	r3, [pc, #264]	; (800c090 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf8a:	e00b      	b.n	800bfa4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800bf8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8e:	b2da      	uxtb	r2, r3
 800bf90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf92:	1c59      	adds	r1, r3, #1
 800bf94:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bf96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bf9a:	b2d2      	uxtb	r2, r2
 800bf9c:	701a      	strb	r2, [r3, #0]
 800bf9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa0:	09db      	lsrs	r3, r3, #7
 800bfa2:	62bb      	str	r3, [r7, #40]	; 0x28
 800bfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa6:	2b7f      	cmp	r3, #127	; 0x7f
 800bfa8:	d8f0      	bhi.n	800bf8c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800bfaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfac:	1c5a      	adds	r2, r3, #1
 800bfae:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bfb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfb2:	b2d2      	uxtb	r2, r2
 800bfb4:	701a      	strb	r2, [r3, #0]
 800bfb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	627b      	str	r3, [r7, #36]	; 0x24
 800bfbe:	4b34      	ldr	r3, [pc, #208]	; (800c090 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800bfc0:	689b      	ldr	r3, [r3, #8]
 800bfc2:	623b      	str	r3, [r7, #32]
 800bfc4:	e00b      	b.n	800bfde <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800bfc6:	6a3b      	ldr	r3, [r7, #32]
 800bfc8:	b2da      	uxtb	r2, r3
 800bfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfcc:	1c59      	adds	r1, r3, #1
 800bfce:	6279      	str	r1, [r7, #36]	; 0x24
 800bfd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bfd4:	b2d2      	uxtb	r2, r2
 800bfd6:	701a      	strb	r2, [r3, #0]
 800bfd8:	6a3b      	ldr	r3, [r7, #32]
 800bfda:	09db      	lsrs	r3, r3, #7
 800bfdc:	623b      	str	r3, [r7, #32]
 800bfde:	6a3b      	ldr	r3, [r7, #32]
 800bfe0:	2b7f      	cmp	r3, #127	; 0x7f
 800bfe2:	d8f0      	bhi.n	800bfc6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800bfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe6:	1c5a      	adds	r2, r3, #1
 800bfe8:	627a      	str	r2, [r7, #36]	; 0x24
 800bfea:	6a3a      	ldr	r2, [r7, #32]
 800bfec:	b2d2      	uxtb	r2, r2
 800bfee:	701a      	strb	r2, [r3, #0]
 800bff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	61fb      	str	r3, [r7, #28]
 800bff8:	4b25      	ldr	r3, [pc, #148]	; (800c090 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800bffa:	691b      	ldr	r3, [r3, #16]
 800bffc:	61bb      	str	r3, [r7, #24]
 800bffe:	e00b      	b.n	800c018 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800c000:	69bb      	ldr	r3, [r7, #24]
 800c002:	b2da      	uxtb	r2, r3
 800c004:	69fb      	ldr	r3, [r7, #28]
 800c006:	1c59      	adds	r1, r3, #1
 800c008:	61f9      	str	r1, [r7, #28]
 800c00a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c00e:	b2d2      	uxtb	r2, r2
 800c010:	701a      	strb	r2, [r3, #0]
 800c012:	69bb      	ldr	r3, [r7, #24]
 800c014:	09db      	lsrs	r3, r3, #7
 800c016:	61bb      	str	r3, [r7, #24]
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	2b7f      	cmp	r3, #127	; 0x7f
 800c01c:	d8f0      	bhi.n	800c000 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800c01e:	69fb      	ldr	r3, [r7, #28]
 800c020:	1c5a      	adds	r2, r3, #1
 800c022:	61fa      	str	r2, [r7, #28]
 800c024:	69ba      	ldr	r2, [r7, #24]
 800c026:	b2d2      	uxtb	r2, r2
 800c028:	701a      	strb	r2, [r3, #0]
 800c02a:	69fb      	ldr	r3, [r7, #28]
 800c02c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	617b      	str	r3, [r7, #20]
 800c032:	2300      	movs	r3, #0
 800c034:	613b      	str	r3, [r7, #16]
 800c036:	e00b      	b.n	800c050 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	b2da      	uxtb	r2, r3
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	1c59      	adds	r1, r3, #1
 800c040:	6179      	str	r1, [r7, #20]
 800c042:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c046:	b2d2      	uxtb	r2, r2
 800c048:	701a      	strb	r2, [r3, #0]
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	09db      	lsrs	r3, r3, #7
 800c04e:	613b      	str	r3, [r7, #16]
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	2b7f      	cmp	r3, #127	; 0x7f
 800c054:	d8f0      	bhi.n	800c038 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	1c5a      	adds	r2, r3, #1
 800c05a:	617a      	str	r2, [r7, #20]
 800c05c:	693a      	ldr	r2, [r7, #16]
 800c05e:	b2d2      	uxtb	r2, r2
 800c060:	701a      	strb	r2, [r3, #0]
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800c066:	2218      	movs	r2, #24
 800c068:	6879      	ldr	r1, [r7, #4]
 800c06a:	68b8      	ldr	r0, [r7, #8]
 800c06c:	f7ff fba2 	bl	800b7b4 <_SendPacket>
  RECORD_END();
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800c076:	4b06      	ldr	r3, [pc, #24]	; (800c090 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d002      	beq.n	800c084 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800c07e:	4b04      	ldr	r3, [pc, #16]	; (800c090 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c082:	4798      	blx	r3
  }
}
 800c084:	bf00      	nop
 800c086:	3730      	adds	r7, #48	; 0x30
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}
 800c08c:	2002cd74 	.word	0x2002cd74
 800c090:	2002cd44 	.word	0x2002cd44

0800c094 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800c094:	b580      	push	{r7, lr}
 800c096:	b092      	sub	sp, #72	; 0x48
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800c09c:	f3ef 8311 	mrs	r3, BASEPRI
 800c0a0:	f04f 0120 	mov.w	r1, #32
 800c0a4:	f381 8811 	msr	BASEPRI, r1
 800c0a8:	617b      	str	r3, [r7, #20]
 800c0aa:	486a      	ldr	r0, [pc, #424]	; (800c254 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800c0ac:	f7ff fa94 	bl	800b5d8 <_PreparePacket>
 800c0b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	647b      	str	r3, [r7, #68]	; 0x44
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681a      	ldr	r2, [r3, #0]
 800c0be:	4b66      	ldr	r3, [pc, #408]	; (800c258 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800c0c0:	691b      	ldr	r3, [r3, #16]
 800c0c2:	1ad3      	subs	r3, r2, r3
 800c0c4:	643b      	str	r3, [r7, #64]	; 0x40
 800c0c6:	e00b      	b.n	800c0e0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800c0c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0ca:	b2da      	uxtb	r2, r3
 800c0cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0ce:	1c59      	adds	r1, r3, #1
 800c0d0:	6479      	str	r1, [r7, #68]	; 0x44
 800c0d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c0d6:	b2d2      	uxtb	r2, r2
 800c0d8:	701a      	strb	r2, [r3, #0]
 800c0da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0dc:	09db      	lsrs	r3, r3, #7
 800c0de:	643b      	str	r3, [r7, #64]	; 0x40
 800c0e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0e2:	2b7f      	cmp	r3, #127	; 0x7f
 800c0e4:	d8f0      	bhi.n	800c0c8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800c0e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0e8:	1c5a      	adds	r2, r3, #1
 800c0ea:	647a      	str	r2, [r7, #68]	; 0x44
 800c0ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c0ee:	b2d2      	uxtb	r2, r2
 800c0f0:	701a      	strb	r2, [r3, #0]
 800c0f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	689b      	ldr	r3, [r3, #8]
 800c0fe:	63bb      	str	r3, [r7, #56]	; 0x38
 800c100:	e00b      	b.n	800c11a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800c102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c104:	b2da      	uxtb	r2, r3
 800c106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c108:	1c59      	adds	r1, r3, #1
 800c10a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800c10c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c110:	b2d2      	uxtb	r2, r2
 800c112:	701a      	strb	r2, [r3, #0]
 800c114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c116:	09db      	lsrs	r3, r3, #7
 800c118:	63bb      	str	r3, [r7, #56]	; 0x38
 800c11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11c:	2b7f      	cmp	r3, #127	; 0x7f
 800c11e:	d8f0      	bhi.n	800c102 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800c120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c122:	1c5a      	adds	r2, r3, #1
 800c124:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c128:	b2d2      	uxtb	r2, r2
 800c12a:	701a      	strb	r2, [r3, #0]
 800c12c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c12e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	2220      	movs	r2, #32
 800c136:	4619      	mov	r1, r3
 800c138:	68f8      	ldr	r0, [r7, #12]
 800c13a:	f7ff f9fd 	bl	800b538 <_EncodeStr>
 800c13e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800c140:	2209      	movs	r2, #9
 800c142:	68f9      	ldr	r1, [r7, #12]
 800c144:	6938      	ldr	r0, [r7, #16]
 800c146:	f7ff fb35 	bl	800b7b4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	637b      	str	r3, [r7, #52]	; 0x34
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681a      	ldr	r2, [r3, #0]
 800c156:	4b40      	ldr	r3, [pc, #256]	; (800c258 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800c158:	691b      	ldr	r3, [r3, #16]
 800c15a:	1ad3      	subs	r3, r2, r3
 800c15c:	633b      	str	r3, [r7, #48]	; 0x30
 800c15e:	e00b      	b.n	800c178 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800c160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c162:	b2da      	uxtb	r2, r3
 800c164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c166:	1c59      	adds	r1, r3, #1
 800c168:	6379      	str	r1, [r7, #52]	; 0x34
 800c16a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c16e:	b2d2      	uxtb	r2, r2
 800c170:	701a      	strb	r2, [r3, #0]
 800c172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c174:	09db      	lsrs	r3, r3, #7
 800c176:	633b      	str	r3, [r7, #48]	; 0x30
 800c178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17a:	2b7f      	cmp	r3, #127	; 0x7f
 800c17c:	d8f0      	bhi.n	800c160 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800c17e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c180:	1c5a      	adds	r2, r3, #1
 800c182:	637a      	str	r2, [r7, #52]	; 0x34
 800c184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c186:	b2d2      	uxtb	r2, r2
 800c188:	701a      	strb	r2, [r3, #0]
 800c18a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c18c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	68db      	ldr	r3, [r3, #12]
 800c196:	62bb      	str	r3, [r7, #40]	; 0x28
 800c198:	e00b      	b.n	800c1b2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800c19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c19c:	b2da      	uxtb	r2, r3
 800c19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a0:	1c59      	adds	r1, r3, #1
 800c1a2:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c1a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c1a8:	b2d2      	uxtb	r2, r2
 800c1aa:	701a      	strb	r2, [r3, #0]
 800c1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ae:	09db      	lsrs	r3, r3, #7
 800c1b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b4:	2b7f      	cmp	r3, #127	; 0x7f
 800c1b6:	d8f0      	bhi.n	800c19a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800c1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ba:	1c5a      	adds	r2, r3, #1
 800c1bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c1be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1c0:	b2d2      	uxtb	r2, r2
 800c1c2:	701a      	strb	r2, [r3, #0]
 800c1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	627b      	str	r3, [r7, #36]	; 0x24
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	691b      	ldr	r3, [r3, #16]
 800c1d0:	623b      	str	r3, [r7, #32]
 800c1d2:	e00b      	b.n	800c1ec <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800c1d4:	6a3b      	ldr	r3, [r7, #32]
 800c1d6:	b2da      	uxtb	r2, r3
 800c1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1da:	1c59      	adds	r1, r3, #1
 800c1dc:	6279      	str	r1, [r7, #36]	; 0x24
 800c1de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c1e2:	b2d2      	uxtb	r2, r2
 800c1e4:	701a      	strb	r2, [r3, #0]
 800c1e6:	6a3b      	ldr	r3, [r7, #32]
 800c1e8:	09db      	lsrs	r3, r3, #7
 800c1ea:	623b      	str	r3, [r7, #32]
 800c1ec:	6a3b      	ldr	r3, [r7, #32]
 800c1ee:	2b7f      	cmp	r3, #127	; 0x7f
 800c1f0:	d8f0      	bhi.n	800c1d4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800c1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f4:	1c5a      	adds	r2, r3, #1
 800c1f6:	627a      	str	r2, [r7, #36]	; 0x24
 800c1f8:	6a3a      	ldr	r2, [r7, #32]
 800c1fa:	b2d2      	uxtb	r2, r2
 800c1fc:	701a      	strb	r2, [r3, #0]
 800c1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c200:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	61fb      	str	r3, [r7, #28]
 800c206:	2300      	movs	r3, #0
 800c208:	61bb      	str	r3, [r7, #24]
 800c20a:	e00b      	b.n	800c224 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	b2da      	uxtb	r2, r3
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	1c59      	adds	r1, r3, #1
 800c214:	61f9      	str	r1, [r7, #28]
 800c216:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c21a:	b2d2      	uxtb	r2, r2
 800c21c:	701a      	strb	r2, [r3, #0]
 800c21e:	69bb      	ldr	r3, [r7, #24]
 800c220:	09db      	lsrs	r3, r3, #7
 800c222:	61bb      	str	r3, [r7, #24]
 800c224:	69bb      	ldr	r3, [r7, #24]
 800c226:	2b7f      	cmp	r3, #127	; 0x7f
 800c228:	d8f0      	bhi.n	800c20c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800c22a:	69fb      	ldr	r3, [r7, #28]
 800c22c:	1c5a      	adds	r2, r3, #1
 800c22e:	61fa      	str	r2, [r7, #28]
 800c230:	69ba      	ldr	r2, [r7, #24]
 800c232:	b2d2      	uxtb	r2, r2
 800c234:	701a      	strb	r2, [r3, #0]
 800c236:	69fb      	ldr	r3, [r7, #28]
 800c238:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800c23a:	2215      	movs	r2, #21
 800c23c:	68f9      	ldr	r1, [r7, #12]
 800c23e:	6938      	ldr	r0, [r7, #16]
 800c240:	f7ff fab8 	bl	800b7b4 <_SendPacket>
  RECORD_END();
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	f383 8811 	msr	BASEPRI, r3
}
 800c24a:	bf00      	nop
 800c24c:	3748      	adds	r7, #72	; 0x48
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop
 800c254:	2002cd74 	.word	0x2002cd74
 800c258:	2002cd44 	.word	0x2002cd44

0800c25c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800c25c:	b580      	push	{r7, lr}
 800c25e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800c260:	4b07      	ldr	r3, [pc, #28]	; (800c280 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c262:	6a1b      	ldr	r3, [r3, #32]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d008      	beq.n	800c27a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800c268:	4b05      	ldr	r3, [pc, #20]	; (800c280 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c26a:	6a1b      	ldr	r3, [r3, #32]
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d003      	beq.n	800c27a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800c272:	4b03      	ldr	r3, [pc, #12]	; (800c280 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c274:	6a1b      	ldr	r3, [r3, #32]
 800c276:	685b      	ldr	r3, [r3, #4]
 800c278:	4798      	blx	r3
  }
}
 800c27a:	bf00      	nop
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	2002cd44 	.word	0x2002cd44

0800c284 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800c284:	b580      	push	{r7, lr}
 800c286:	b086      	sub	sp, #24
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c28c:	f3ef 8311 	mrs	r3, BASEPRI
 800c290:	f04f 0120 	mov.w	r1, #32
 800c294:	f381 8811 	msr	BASEPRI, r1
 800c298:	617b      	str	r3, [r7, #20]
 800c29a:	480b      	ldr	r0, [pc, #44]	; (800c2c8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800c29c:	f7ff f99c 	bl	800b5d8 <_PreparePacket>
 800c2a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c2a2:	2280      	movs	r2, #128	; 0x80
 800c2a4:	6879      	ldr	r1, [r7, #4]
 800c2a6:	6938      	ldr	r0, [r7, #16]
 800c2a8:	f7ff f946 	bl	800b538 <_EncodeStr>
 800c2ac:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800c2ae:	220e      	movs	r2, #14
 800c2b0:	68f9      	ldr	r1, [r7, #12]
 800c2b2:	6938      	ldr	r0, [r7, #16]
 800c2b4:	f7ff fa7e 	bl	800b7b4 <_SendPacket>
  RECORD_END();
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	f383 8811 	msr	BASEPRI, r3
}
 800c2be:	bf00      	nop
 800c2c0:	3718      	adds	r7, #24
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	2002cd74 	.word	0x2002cd74

0800c2cc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800c2cc:	b590      	push	{r4, r7, lr}
 800c2ce:	b083      	sub	sp, #12
 800c2d0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800c2d2:	4b15      	ldr	r3, [pc, #84]	; (800c328 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c2d4:	6a1b      	ldr	r3, [r3, #32]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d01a      	beq.n	800c310 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800c2da:	4b13      	ldr	r3, [pc, #76]	; (800c328 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c2dc:	6a1b      	ldr	r3, [r3, #32]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d015      	beq.n	800c310 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800c2e4:	4b10      	ldr	r3, [pc, #64]	; (800c328 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c2e6:	6a1b      	ldr	r3, [r3, #32]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4798      	blx	r3
 800c2ec:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800c2f0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800c2f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c2f6:	f04f 0200 	mov.w	r2, #0
 800c2fa:	f04f 0300 	mov.w	r3, #0
 800c2fe:	000a      	movs	r2, r1
 800c300:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800c302:	4613      	mov	r3, r2
 800c304:	461a      	mov	r2, r3
 800c306:	4621      	mov	r1, r4
 800c308:	200d      	movs	r0, #13
 800c30a:	f7ff fbe7 	bl	800badc <SEGGER_SYSVIEW_RecordU32x2>
 800c30e:	e006      	b.n	800c31e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800c310:	4b06      	ldr	r3, [pc, #24]	; (800c32c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	4619      	mov	r1, r3
 800c316:	200c      	movs	r0, #12
 800c318:	f7ff fba4 	bl	800ba64 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800c31c:	bf00      	nop
 800c31e:	bf00      	nop
 800c320:	370c      	adds	r7, #12
 800c322:	46bd      	mov	sp, r7
 800c324:	bd90      	pop	{r4, r7, pc}
 800c326:	bf00      	nop
 800c328:	2002cd44 	.word	0x2002cd44
 800c32c:	e0001004 	.word	0xe0001004

0800c330 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800c330:	b580      	push	{r7, lr}
 800c332:	b082      	sub	sp, #8
 800c334:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c336:	f3ef 8311 	mrs	r3, BASEPRI
 800c33a:	f04f 0120 	mov.w	r1, #32
 800c33e:	f381 8811 	msr	BASEPRI, r1
 800c342:	607b      	str	r3, [r7, #4]
 800c344:	4807      	ldr	r0, [pc, #28]	; (800c364 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800c346:	f7ff f947 	bl	800b5d8 <_PreparePacket>
 800c34a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800c34c:	2211      	movs	r2, #17
 800c34e:	6839      	ldr	r1, [r7, #0]
 800c350:	6838      	ldr	r0, [r7, #0]
 800c352:	f7ff fa2f 	bl	800b7b4 <_SendPacket>
  RECORD_END();
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f383 8811 	msr	BASEPRI, r3
}
 800c35c:	bf00      	nop
 800c35e:	3708      	adds	r7, #8
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	2002cd74 	.word	0x2002cd74

0800c368 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800c368:	b580      	push	{r7, lr}
 800c36a:	b088      	sub	sp, #32
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c370:	f3ef 8311 	mrs	r3, BASEPRI
 800c374:	f04f 0120 	mov.w	r1, #32
 800c378:	f381 8811 	msr	BASEPRI, r1
 800c37c:	617b      	str	r3, [r7, #20]
 800c37e:	4819      	ldr	r0, [pc, #100]	; (800c3e4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800c380:	f7ff f92a 	bl	800b5d8 <_PreparePacket>
 800c384:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c38a:	4b17      	ldr	r3, [pc, #92]	; (800c3e8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800c38c:	691b      	ldr	r3, [r3, #16]
 800c38e:	687a      	ldr	r2, [r7, #4]
 800c390:	1ad3      	subs	r3, r2, r3
 800c392:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	61fb      	str	r3, [r7, #28]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	61bb      	str	r3, [r7, #24]
 800c39c:	e00b      	b.n	800c3b6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800c39e:	69bb      	ldr	r3, [r7, #24]
 800c3a0:	b2da      	uxtb	r2, r3
 800c3a2:	69fb      	ldr	r3, [r7, #28]
 800c3a4:	1c59      	adds	r1, r3, #1
 800c3a6:	61f9      	str	r1, [r7, #28]
 800c3a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c3ac:	b2d2      	uxtb	r2, r2
 800c3ae:	701a      	strb	r2, [r3, #0]
 800c3b0:	69bb      	ldr	r3, [r7, #24]
 800c3b2:	09db      	lsrs	r3, r3, #7
 800c3b4:	61bb      	str	r3, [r7, #24]
 800c3b6:	69bb      	ldr	r3, [r7, #24]
 800c3b8:	2b7f      	cmp	r3, #127	; 0x7f
 800c3ba:	d8f0      	bhi.n	800c39e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800c3bc:	69fb      	ldr	r3, [r7, #28]
 800c3be:	1c5a      	adds	r2, r3, #1
 800c3c0:	61fa      	str	r2, [r7, #28]
 800c3c2:	69ba      	ldr	r2, [r7, #24]
 800c3c4:	b2d2      	uxtb	r2, r2
 800c3c6:	701a      	strb	r2, [r3, #0]
 800c3c8:	69fb      	ldr	r3, [r7, #28]
 800c3ca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800c3cc:	2208      	movs	r2, #8
 800c3ce:	68f9      	ldr	r1, [r7, #12]
 800c3d0:	6938      	ldr	r0, [r7, #16]
 800c3d2:	f7ff f9ef 	bl	800b7b4 <_SendPacket>
  RECORD_END();
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	f383 8811 	msr	BASEPRI, r3
}
 800c3dc:	bf00      	nop
 800c3de:	3720      	adds	r7, #32
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}
 800c3e4:	2002cd74 	.word	0x2002cd74
 800c3e8:	2002cd44 	.word	0x2002cd44

0800c3ec <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b088      	sub	sp, #32
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c3f4:	f3ef 8311 	mrs	r3, BASEPRI
 800c3f8:	f04f 0120 	mov.w	r1, #32
 800c3fc:	f381 8811 	msr	BASEPRI, r1
 800c400:	617b      	str	r3, [r7, #20]
 800c402:	4819      	ldr	r0, [pc, #100]	; (800c468 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800c404:	f7ff f8e8 	bl	800b5d8 <_PreparePacket>
 800c408:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c40e:	4b17      	ldr	r3, [pc, #92]	; (800c46c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800c410:	691b      	ldr	r3, [r3, #16]
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	1ad3      	subs	r3, r2, r3
 800c416:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	61fb      	str	r3, [r7, #28]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	61bb      	str	r3, [r7, #24]
 800c420:	e00b      	b.n	800c43a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800c422:	69bb      	ldr	r3, [r7, #24]
 800c424:	b2da      	uxtb	r2, r3
 800c426:	69fb      	ldr	r3, [r7, #28]
 800c428:	1c59      	adds	r1, r3, #1
 800c42a:	61f9      	str	r1, [r7, #28]
 800c42c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c430:	b2d2      	uxtb	r2, r2
 800c432:	701a      	strb	r2, [r3, #0]
 800c434:	69bb      	ldr	r3, [r7, #24]
 800c436:	09db      	lsrs	r3, r3, #7
 800c438:	61bb      	str	r3, [r7, #24]
 800c43a:	69bb      	ldr	r3, [r7, #24]
 800c43c:	2b7f      	cmp	r3, #127	; 0x7f
 800c43e:	d8f0      	bhi.n	800c422 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800c440:	69fb      	ldr	r3, [r7, #28]
 800c442:	1c5a      	adds	r2, r3, #1
 800c444:	61fa      	str	r2, [r7, #28]
 800c446:	69ba      	ldr	r2, [r7, #24]
 800c448:	b2d2      	uxtb	r2, r2
 800c44a:	701a      	strb	r2, [r3, #0]
 800c44c:	69fb      	ldr	r3, [r7, #28]
 800c44e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800c450:	2204      	movs	r2, #4
 800c452:	68f9      	ldr	r1, [r7, #12]
 800c454:	6938      	ldr	r0, [r7, #16]
 800c456:	f7ff f9ad 	bl	800b7b4 <_SendPacket>
  RECORD_END();
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	f383 8811 	msr	BASEPRI, r3
}
 800c460:	bf00      	nop
 800c462:	3720      	adds	r7, #32
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}
 800c468:	2002cd74 	.word	0x2002cd74
 800c46c:	2002cd44 	.word	0x2002cd44

0800c470 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800c470:	b580      	push	{r7, lr}
 800c472:	b088      	sub	sp, #32
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c478:	f3ef 8311 	mrs	r3, BASEPRI
 800c47c:	f04f 0120 	mov.w	r1, #32
 800c480:	f381 8811 	msr	BASEPRI, r1
 800c484:	617b      	str	r3, [r7, #20]
 800c486:	4819      	ldr	r0, [pc, #100]	; (800c4ec <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800c488:	f7ff f8a6 	bl	800b5d8 <_PreparePacket>
 800c48c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c492:	4b17      	ldr	r3, [pc, #92]	; (800c4f0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800c494:	691b      	ldr	r3, [r3, #16]
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	1ad3      	subs	r3, r2, r3
 800c49a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	61fb      	str	r3, [r7, #28]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	61bb      	str	r3, [r7, #24]
 800c4a4:	e00b      	b.n	800c4be <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800c4a6:	69bb      	ldr	r3, [r7, #24]
 800c4a8:	b2da      	uxtb	r2, r3
 800c4aa:	69fb      	ldr	r3, [r7, #28]
 800c4ac:	1c59      	adds	r1, r3, #1
 800c4ae:	61f9      	str	r1, [r7, #28]
 800c4b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c4b4:	b2d2      	uxtb	r2, r2
 800c4b6:	701a      	strb	r2, [r3, #0]
 800c4b8:	69bb      	ldr	r3, [r7, #24]
 800c4ba:	09db      	lsrs	r3, r3, #7
 800c4bc:	61bb      	str	r3, [r7, #24]
 800c4be:	69bb      	ldr	r3, [r7, #24]
 800c4c0:	2b7f      	cmp	r3, #127	; 0x7f
 800c4c2:	d8f0      	bhi.n	800c4a6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800c4c4:	69fb      	ldr	r3, [r7, #28]
 800c4c6:	1c5a      	adds	r2, r3, #1
 800c4c8:	61fa      	str	r2, [r7, #28]
 800c4ca:	69ba      	ldr	r2, [r7, #24]
 800c4cc:	b2d2      	uxtb	r2, r2
 800c4ce:	701a      	strb	r2, [r3, #0]
 800c4d0:	69fb      	ldr	r3, [r7, #28]
 800c4d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800c4d4:	2206      	movs	r2, #6
 800c4d6:	68f9      	ldr	r1, [r7, #12]
 800c4d8:	6938      	ldr	r0, [r7, #16]
 800c4da:	f7ff f96b 	bl	800b7b4 <_SendPacket>
  RECORD_END();
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	f383 8811 	msr	BASEPRI, r3
}
 800c4e4:	bf00      	nop
 800c4e6:	3720      	adds	r7, #32
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}
 800c4ec:	2002cd74 	.word	0x2002cd74
 800c4f0:	2002cd44 	.word	0x2002cd44

0800c4f4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800c4f4:	b480      	push	{r7}
 800c4f6:	b083      	sub	sp, #12
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800c4fc:	4b04      	ldr	r3, [pc, #16]	; (800c510 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800c4fe:	691b      	ldr	r3, [r3, #16]
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	1ad3      	subs	r3, r2, r3
}
 800c504:	4618      	mov	r0, r3
 800c506:	370c      	adds	r7, #12
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr
 800c510:	2002cd44 	.word	0x2002cd44

0800c514 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800c514:	b580      	push	{r7, lr}
 800c516:	b08c      	sub	sp, #48	; 0x30
 800c518:	af00      	add	r7, sp, #0
 800c51a:	4603      	mov	r3, r0
 800c51c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800c51e:	4b3b      	ldr	r3, [pc, #236]	; (800c60c <SEGGER_SYSVIEW_SendModule+0xf8>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d06d      	beq.n	800c602 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800c526:	4b39      	ldr	r3, [pc, #228]	; (800c60c <SEGGER_SYSVIEW_SendModule+0xf8>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800c52c:	2300      	movs	r3, #0
 800c52e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c530:	e008      	b.n	800c544 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800c532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c534:	691b      	ldr	r3, [r3, #16]
 800c536:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800c538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d007      	beq.n	800c54e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800c53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c540:	3301      	adds	r3, #1
 800c542:	62bb      	str	r3, [r7, #40]	; 0x28
 800c544:	79fb      	ldrb	r3, [r7, #7]
 800c546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c548:	429a      	cmp	r2, r3
 800c54a:	d3f2      	bcc.n	800c532 <SEGGER_SYSVIEW_SendModule+0x1e>
 800c54c:	e000      	b.n	800c550 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800c54e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800c550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c552:	2b00      	cmp	r3, #0
 800c554:	d055      	beq.n	800c602 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c556:	f3ef 8311 	mrs	r3, BASEPRI
 800c55a:	f04f 0120 	mov.w	r1, #32
 800c55e:	f381 8811 	msr	BASEPRI, r1
 800c562:	617b      	str	r3, [r7, #20]
 800c564:	482a      	ldr	r0, [pc, #168]	; (800c610 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800c566:	f7ff f837 	bl	800b5d8 <_PreparePacket>
 800c56a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	627b      	str	r3, [r7, #36]	; 0x24
 800c574:	79fb      	ldrb	r3, [r7, #7]
 800c576:	623b      	str	r3, [r7, #32]
 800c578:	e00b      	b.n	800c592 <SEGGER_SYSVIEW_SendModule+0x7e>
 800c57a:	6a3b      	ldr	r3, [r7, #32]
 800c57c:	b2da      	uxtb	r2, r3
 800c57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c580:	1c59      	adds	r1, r3, #1
 800c582:	6279      	str	r1, [r7, #36]	; 0x24
 800c584:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c588:	b2d2      	uxtb	r2, r2
 800c58a:	701a      	strb	r2, [r3, #0]
 800c58c:	6a3b      	ldr	r3, [r7, #32]
 800c58e:	09db      	lsrs	r3, r3, #7
 800c590:	623b      	str	r3, [r7, #32]
 800c592:	6a3b      	ldr	r3, [r7, #32]
 800c594:	2b7f      	cmp	r3, #127	; 0x7f
 800c596:	d8f0      	bhi.n	800c57a <SEGGER_SYSVIEW_SendModule+0x66>
 800c598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59a:	1c5a      	adds	r2, r3, #1
 800c59c:	627a      	str	r2, [r7, #36]	; 0x24
 800c59e:	6a3a      	ldr	r2, [r7, #32]
 800c5a0:	b2d2      	uxtb	r2, r2
 800c5a2:	701a      	strb	r2, [r3, #0]
 800c5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	61fb      	str	r3, [r7, #28]
 800c5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ae:	689b      	ldr	r3, [r3, #8]
 800c5b0:	61bb      	str	r3, [r7, #24]
 800c5b2:	e00b      	b.n	800c5cc <SEGGER_SYSVIEW_SendModule+0xb8>
 800c5b4:	69bb      	ldr	r3, [r7, #24]
 800c5b6:	b2da      	uxtb	r2, r3
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	1c59      	adds	r1, r3, #1
 800c5bc:	61f9      	str	r1, [r7, #28]
 800c5be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c5c2:	b2d2      	uxtb	r2, r2
 800c5c4:	701a      	strb	r2, [r3, #0]
 800c5c6:	69bb      	ldr	r3, [r7, #24]
 800c5c8:	09db      	lsrs	r3, r3, #7
 800c5ca:	61bb      	str	r3, [r7, #24]
 800c5cc:	69bb      	ldr	r3, [r7, #24]
 800c5ce:	2b7f      	cmp	r3, #127	; 0x7f
 800c5d0:	d8f0      	bhi.n	800c5b4 <SEGGER_SYSVIEW_SendModule+0xa0>
 800c5d2:	69fb      	ldr	r3, [r7, #28]
 800c5d4:	1c5a      	adds	r2, r3, #1
 800c5d6:	61fa      	str	r2, [r7, #28]
 800c5d8:	69ba      	ldr	r2, [r7, #24]
 800c5da:	b2d2      	uxtb	r2, r2
 800c5dc:	701a      	strb	r2, [r3, #0]
 800c5de:	69fb      	ldr	r3, [r7, #28]
 800c5e0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	2280      	movs	r2, #128	; 0x80
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	68f8      	ldr	r0, [r7, #12]
 800c5ec:	f7fe ffa4 	bl	800b538 <_EncodeStr>
 800c5f0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800c5f2:	2216      	movs	r2, #22
 800c5f4:	68f9      	ldr	r1, [r7, #12]
 800c5f6:	6938      	ldr	r0, [r7, #16]
 800c5f8:	f7ff f8dc 	bl	800b7b4 <_SendPacket>
      RECORD_END();
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800c602:	bf00      	nop
 800c604:	3730      	adds	r7, #48	; 0x30
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}
 800c60a:	bf00      	nop
 800c60c:	2002cd6c 	.word	0x2002cd6c
 800c610:	2002cd74 	.word	0x2002cd74

0800c614 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800c61a:	4b0c      	ldr	r3, [pc, #48]	; (800c64c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d00f      	beq.n	800c642 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800c622:	4b0a      	ldr	r3, [pc, #40]	; (800c64c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	68db      	ldr	r3, [r3, #12]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d002      	beq.n	800c636 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	68db      	ldr	r3, [r3, #12]
 800c634:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	691b      	ldr	r3, [r3, #16]
 800c63a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d1f2      	bne.n	800c628 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800c642:	bf00      	nop
 800c644:	3708      	adds	r7, #8
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	2002cd6c 	.word	0x2002cd6c

0800c650 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800c650:	b580      	push	{r7, lr}
 800c652:	b086      	sub	sp, #24
 800c654:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800c656:	f3ef 8311 	mrs	r3, BASEPRI
 800c65a:	f04f 0120 	mov.w	r1, #32
 800c65e:	f381 8811 	msr	BASEPRI, r1
 800c662:	60fb      	str	r3, [r7, #12]
 800c664:	4817      	ldr	r0, [pc, #92]	; (800c6c4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800c666:	f7fe ffb7 	bl	800b5d8 <_PreparePacket>
 800c66a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	617b      	str	r3, [r7, #20]
 800c674:	4b14      	ldr	r3, [pc, #80]	; (800c6c8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	613b      	str	r3, [r7, #16]
 800c67a:	e00b      	b.n	800c694 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	b2da      	uxtb	r2, r3
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	1c59      	adds	r1, r3, #1
 800c684:	6179      	str	r1, [r7, #20]
 800c686:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c68a:	b2d2      	uxtb	r2, r2
 800c68c:	701a      	strb	r2, [r3, #0]
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	09db      	lsrs	r3, r3, #7
 800c692:	613b      	str	r3, [r7, #16]
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	2b7f      	cmp	r3, #127	; 0x7f
 800c698:	d8f0      	bhi.n	800c67c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	1c5a      	adds	r2, r3, #1
 800c69e:	617a      	str	r2, [r7, #20]
 800c6a0:	693a      	ldr	r2, [r7, #16]
 800c6a2:	b2d2      	uxtb	r2, r2
 800c6a4:	701a      	strb	r2, [r3, #0]
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800c6aa:	221b      	movs	r2, #27
 800c6ac:	6879      	ldr	r1, [r7, #4]
 800c6ae:	68b8      	ldr	r0, [r7, #8]
 800c6b0:	f7ff f880 	bl	800b7b4 <_SendPacket>
  RECORD_END();
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	f383 8811 	msr	BASEPRI, r3
}
 800c6ba:	bf00      	nop
 800c6bc:	3718      	adds	r7, #24
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	2002cd74 	.word	0x2002cd74
 800c6c8:	2002cd70 	.word	0x2002cd70

0800c6cc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b08a      	sub	sp, #40	; 0x28
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c6d4:	f3ef 8311 	mrs	r3, BASEPRI
 800c6d8:	f04f 0120 	mov.w	r1, #32
 800c6dc:	f381 8811 	msr	BASEPRI, r1
 800c6e0:	617b      	str	r3, [r7, #20]
 800c6e2:	4827      	ldr	r0, [pc, #156]	; (800c780 <SEGGER_SYSVIEW_Warn+0xb4>)
 800c6e4:	f7fe ff78 	bl	800b5d8 <_PreparePacket>
 800c6e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c6ea:	2280      	movs	r2, #128	; 0x80
 800c6ec:	6879      	ldr	r1, [r7, #4]
 800c6ee:	6938      	ldr	r0, [r7, #16]
 800c6f0:	f7fe ff22 	bl	800b538 <_EncodeStr>
 800c6f4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	627b      	str	r3, [r7, #36]	; 0x24
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	623b      	str	r3, [r7, #32]
 800c6fe:	e00b      	b.n	800c718 <SEGGER_SYSVIEW_Warn+0x4c>
 800c700:	6a3b      	ldr	r3, [r7, #32]
 800c702:	b2da      	uxtb	r2, r3
 800c704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c706:	1c59      	adds	r1, r3, #1
 800c708:	6279      	str	r1, [r7, #36]	; 0x24
 800c70a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c70e:	b2d2      	uxtb	r2, r2
 800c710:	701a      	strb	r2, [r3, #0]
 800c712:	6a3b      	ldr	r3, [r7, #32]
 800c714:	09db      	lsrs	r3, r3, #7
 800c716:	623b      	str	r3, [r7, #32]
 800c718:	6a3b      	ldr	r3, [r7, #32]
 800c71a:	2b7f      	cmp	r3, #127	; 0x7f
 800c71c:	d8f0      	bhi.n	800c700 <SEGGER_SYSVIEW_Warn+0x34>
 800c71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c720:	1c5a      	adds	r2, r3, #1
 800c722:	627a      	str	r2, [r7, #36]	; 0x24
 800c724:	6a3a      	ldr	r2, [r7, #32]
 800c726:	b2d2      	uxtb	r2, r2
 800c728:	701a      	strb	r2, [r3, #0]
 800c72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	61fb      	str	r3, [r7, #28]
 800c732:	2300      	movs	r3, #0
 800c734:	61bb      	str	r3, [r7, #24]
 800c736:	e00b      	b.n	800c750 <SEGGER_SYSVIEW_Warn+0x84>
 800c738:	69bb      	ldr	r3, [r7, #24]
 800c73a:	b2da      	uxtb	r2, r3
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	1c59      	adds	r1, r3, #1
 800c740:	61f9      	str	r1, [r7, #28]
 800c742:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c746:	b2d2      	uxtb	r2, r2
 800c748:	701a      	strb	r2, [r3, #0]
 800c74a:	69bb      	ldr	r3, [r7, #24]
 800c74c:	09db      	lsrs	r3, r3, #7
 800c74e:	61bb      	str	r3, [r7, #24]
 800c750:	69bb      	ldr	r3, [r7, #24]
 800c752:	2b7f      	cmp	r3, #127	; 0x7f
 800c754:	d8f0      	bhi.n	800c738 <SEGGER_SYSVIEW_Warn+0x6c>
 800c756:	69fb      	ldr	r3, [r7, #28]
 800c758:	1c5a      	adds	r2, r3, #1
 800c75a:	61fa      	str	r2, [r7, #28]
 800c75c:	69ba      	ldr	r2, [r7, #24]
 800c75e:	b2d2      	uxtb	r2, r2
 800c760:	701a      	strb	r2, [r3, #0]
 800c762:	69fb      	ldr	r3, [r7, #28]
 800c764:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800c766:	221a      	movs	r2, #26
 800c768:	68f9      	ldr	r1, [r7, #12]
 800c76a:	6938      	ldr	r0, [r7, #16]
 800c76c:	f7ff f822 	bl	800b7b4 <_SendPacket>
  RECORD_END();
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	f383 8811 	msr	BASEPRI, r3
}
 800c776:	bf00      	nop
 800c778:	3728      	adds	r7, #40	; 0x28
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
 800c77e:	bf00      	nop
 800c780:	2002cd74 	.word	0x2002cd74

0800c784 <__NVIC_EnableIRQ>:
{
 800c784:	b480      	push	{r7}
 800c786:	b083      	sub	sp, #12
 800c788:	af00      	add	r7, sp, #0
 800c78a:	4603      	mov	r3, r0
 800c78c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c78e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c792:	2b00      	cmp	r3, #0
 800c794:	db0b      	blt.n	800c7ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c796:	79fb      	ldrb	r3, [r7, #7]
 800c798:	f003 021f 	and.w	r2, r3, #31
 800c79c:	4907      	ldr	r1, [pc, #28]	; (800c7bc <__NVIC_EnableIRQ+0x38>)
 800c79e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7a2:	095b      	lsrs	r3, r3, #5
 800c7a4:	2001      	movs	r0, #1
 800c7a6:	fa00 f202 	lsl.w	r2, r0, r2
 800c7aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c7ae:	bf00      	nop
 800c7b0:	370c      	adds	r7, #12
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b8:	4770      	bx	lr
 800c7ba:	bf00      	nop
 800c7bc:	e000e100 	.word	0xe000e100

0800c7c0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b085      	sub	sp, #20
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800c7c8:	4b08      	ldr	r3, [pc, #32]	; (800c7ec <LL_APB1_GRP1_EnableClock+0x2c>)
 800c7ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c7cc:	4907      	ldr	r1, [pc, #28]	; (800c7ec <LL_APB1_GRP1_EnableClock+0x2c>)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800c7d4:	4b05      	ldr	r3, [pc, #20]	; (800c7ec <LL_APB1_GRP1_EnableClock+0x2c>)
 800c7d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	4013      	ands	r3, r2
 800c7dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c7de:	68fb      	ldr	r3, [r7, #12]
}
 800c7e0:	bf00      	nop
 800c7e2:	3714      	adds	r7, #20
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr
 800c7ec:	40023800 	.word	0x40023800

0800c7f0 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b083      	sub	sp, #12
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f043 0201 	orr.w	r2, r3, #1
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	601a      	str	r2, [r3, #0]
}
 800c804:	bf00      	nop
 800c806:	370c      	adds	r7, #12
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr

0800c810 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 800c810:	b480      	push	{r7}
 800c812:	b083      	sub	sp, #12
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	683a      	ldr	r2, [r7, #0]
 800c81e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c820:	bf00      	nop
 800c822:	370c      	adds	r7, #12
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr

0800c82c <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800c82c:	b480      	push	{r7}
 800c82e:	b083      	sub	sp, #12
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f06f 0201 	mvn.w	r2, #1
 800c83a:	611a      	str	r2, [r3, #16]
}
 800c83c:	bf00      	nop
 800c83e:	370c      	adds	r7, #12
 800c840:	46bd      	mov	sp, r7
 800c842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c846:	4770      	bx	lr

0800c848 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800c848:	b480      	push	{r7}
 800c84a:	b083      	sub	sp, #12
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	691b      	ldr	r3, [r3, #16]
 800c854:	f003 0301 	and.w	r3, r3, #1
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d101      	bne.n	800c860 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800c85c:	2301      	movs	r3, #1
 800c85e:	e000      	b.n	800c862 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800c860:	2300      	movs	r3, #0
}
 800c862:	4618      	mov	r0, r3
 800c864:	370c      	adds	r7, #12
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr

0800c86e <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800c86e:	b480      	push	{r7}
 800c870:	b083      	sub	sp, #12
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	68db      	ldr	r3, [r3, #12]
 800c87a:	f043 0201 	orr.w	r2, r3, #1
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	60da      	str	r2, [r3, #12]
}
 800c882:	bf00      	nop
 800c884:	370c      	adds	r7, #12
 800c886:	46bd      	mov	sp, r7
 800c888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88c:	4770      	bx	lr
	...

0800c890 <_cbSendSystemDesc>:
 *       _cbSendSystemDesc()
 *
 *  Function description
 *    Sends SystemView description strings.
 */
static void _cbSendSystemDesc(void) {
 800c890:	b580      	push	{r7, lr}
 800c892:	af00      	add	r7, sp, #0
	SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800c894:	4802      	ldr	r0, [pc, #8]	; (800c8a0 <_cbSendSystemDesc+0x10>)
 800c896:	f7ff fcf5 	bl	800c284 <SEGGER_SYSVIEW_SendSysDesc>
//	SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
//	SEGGER_SYSVIEW_SendSysDesc("I#23=EXTI[0]");
}
 800c89a:	bf00      	nop
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	bf00      	nop
 800c8a0:	0800f320 	.word	0x0800f320

0800c8a4 <TIM7_IRQHandler>:

/// [SYSVIEW_TIMESTAMP]
void TIM7_IRQHandler(void)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	af00      	add	r7, sp, #0
	// Interrupt flag set?
	if(LL_TIM_IsActiveFlag_UPDATE(TIM7))
 800c8a8:	4807      	ldr	r0, [pc, #28]	; (800c8c8 <TIM7_IRQHandler+0x24>)
 800c8aa:	f7ff ffcd 	bl	800c848 <LL_TIM_IsActiveFlag_UPDATE>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d007      	beq.n	800c8c4 <TIM7_IRQHandler+0x20>
	{
		// Clear flag
		LL_TIM_ClearFlag_UPDATE(TIM7);
 800c8b4:	4804      	ldr	r0, [pc, #16]	; (800c8c8 <TIM7_IRQHandler+0x24>)
 800c8b6:	f7ff ffb9 	bl	800c82c <LL_TIM_ClearFlag_UPDATE>
		// Increment counter
		SEGGER_SYSVIEW_TickCnt++;
 800c8ba:	4b04      	ldr	r3, [pc, #16]	; (800c8cc <TIM7_IRQHandler+0x28>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	3301      	adds	r3, #1
 800c8c0:	4a02      	ldr	r2, [pc, #8]	; (800c8cc <TIM7_IRQHandler+0x28>)
 800c8c2:	6013      	str	r3, [r2, #0]
	}
}
 800c8c4:	bf00      	nop
 800c8c6:	bd80      	pop	{r7, pc}
 800c8c8:	40001400 	.word	0x40001400
 800c8cc:	2002c938 	.word	0x2002c938

0800c8d0 <SEGGER_SYSVIEW_TimeStampInit>:
static void SEGGER_SYSVIEW_TimeStampInit(void)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	af00      	add	r7, sp, #0
//#warning "DO NOT TAKE POINTS OFF, SEGGER PROVIDED WARNING: TIM7 peripheral is used for Segger SysView timestamping"
	// Enable TIM7 peripheral clock
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 800c8d4:	2020      	movs	r0, #32
 800c8d6:	f7ff ff73 	bl	800c7c0 <LL_APB1_GRP1_EnableClock>
	// Set prescaler to match timestamp frequency
	LL_TIM_SetPrescaler(TIM7, __LL_TIM_CALC_PSC(SYSVIEW_CPU_FREQ, SYSVIEW_TIMESTAMP_FREQ));
 800c8da:	4b0d      	ldr	r3, [pc, #52]	; (800c910 <SEGGER_SYSVIEW_TimeStampInit+0x40>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	085a      	lsrs	r2, r3, #1
 800c8e0:	4b0b      	ldr	r3, [pc, #44]	; (800c910 <SEGGER_SYSVIEW_TimeStampInit+0x40>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	441a      	add	r2, r3
 800c8e6:	4b0a      	ldr	r3, [pc, #40]	; (800c910 <SEGGER_SYSVIEW_TimeStampInit+0x40>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8ee:	3b01      	subs	r3, #1
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	4808      	ldr	r0, [pc, #32]	; (800c914 <SEGGER_SYSVIEW_TimeStampInit+0x44>)
 800c8f4:	f7ff ff8c 	bl	800c810 <LL_TIM_SetPrescaler>
	// Enable timer interrupt
	NVIC_EnableIRQ(TIM7_IRQn);
 800c8f8:	2037      	movs	r0, #55	; 0x37
 800c8fa:	f7ff ff43 	bl	800c784 <__NVIC_EnableIRQ>
	LL_TIM_EnableIT_UPDATE(TIM7);
 800c8fe:	4805      	ldr	r0, [pc, #20]	; (800c914 <SEGGER_SYSVIEW_TimeStampInit+0x44>)
 800c900:	f7ff ffb5 	bl	800c86e <LL_TIM_EnableIT_UPDATE>
	// Enable counter
	LL_TIM_EnableCounter(TIM7);
 800c904:	4803      	ldr	r0, [pc, #12]	; (800c914 <SEGGER_SYSVIEW_TimeStampInit+0x44>)
 800c906:	f7ff ff73 	bl	800c7f0 <LL_TIM_EnableCounter>
}
 800c90a:	bf00      	nop
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	20000018 	.word	0x20000018
 800c914:	40001400 	.word	0x40001400

0800c918 <SEGGER_SYSVIEW_Conf>:
 *
 *       Global functions
 *
 **********************************************************************
 */
void SEGGER_SYSVIEW_Conf(void) {
 800c918:	b580      	push	{r7, lr}
 800c91a:	af00      	add	r7, sp, #0
	SEGGER_SYSVIEW_TimeStampInit();
 800c91c:	f7ff ffd8 	bl	800c8d0 <SEGGER_SYSVIEW_TimeStampInit>
	SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ,
 800c920:	4b06      	ldr	r3, [pc, #24]	; (800c93c <SEGGER_SYSVIEW_Conf+0x24>)
 800c922:	6818      	ldr	r0, [r3, #0]
 800c924:	4b05      	ldr	r3, [pc, #20]	; (800c93c <SEGGER_SYSVIEW_Conf+0x24>)
 800c926:	6819      	ldr	r1, [r3, #0]
 800c928:	4b05      	ldr	r3, [pc, #20]	; (800c940 <SEGGER_SYSVIEW_Conf+0x28>)
 800c92a:	4a06      	ldr	r2, [pc, #24]	; (800c944 <SEGGER_SYSVIEW_Conf+0x2c>)
 800c92c:	f7ff f828 	bl	800b980 <SEGGER_SYSVIEW_Init>
			&SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
	SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800c930:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800c934:	f7ff f868 	bl	800ba08 <SEGGER_SYSVIEW_SetRAMBase>
}
 800c938:	bf00      	nop
 800c93a:	bd80      	pop	{r7, pc}
 800c93c:	20000018 	.word	0x20000018
 800c940:	0800c891 	.word	0x0800c891
 800c944:	080106ac 	.word	0x080106ac

0800c948 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800c948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c94a:	b085      	sub	sp, #20
 800c94c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800c94e:	2300      	movs	r3, #0
 800c950:	607b      	str	r3, [r7, #4]
 800c952:	e048      	b.n	800c9e6 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 800c954:	4929      	ldr	r1, [pc, #164]	; (800c9fc <_cbSendTaskList+0xb4>)
 800c956:	687a      	ldr	r2, [r7, #4]
 800c958:	4613      	mov	r3, r2
 800c95a:	009b      	lsls	r3, r3, #2
 800c95c:	4413      	add	r3, r2
 800c95e:	009b      	lsls	r3, r3, #2
 800c960:	440b      	add	r3, r1
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4618      	mov	r0, r3
 800c966:	f7fd f965 	bl	8009c34 <uxTaskGetStackHighWaterMark>
 800c96a:	4601      	mov	r1, r0
 800c96c:	4823      	ldr	r0, [pc, #140]	; (800c9fc <_cbSendTaskList+0xb4>)
 800c96e:	687a      	ldr	r2, [r7, #4]
 800c970:	4613      	mov	r3, r2
 800c972:	009b      	lsls	r3, r3, #2
 800c974:	4413      	add	r3, r2
 800c976:	009b      	lsls	r3, r3, #2
 800c978:	4403      	add	r3, r0
 800c97a:	3310      	adds	r3, #16
 800c97c:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800c97e:	491f      	ldr	r1, [pc, #124]	; (800c9fc <_cbSendTaskList+0xb4>)
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	4613      	mov	r3, r2
 800c984:	009b      	lsls	r3, r3, #2
 800c986:	4413      	add	r3, r2
 800c988:	009b      	lsls	r3, r3, #2
 800c98a:	440b      	add	r3, r1
 800c98c:	6818      	ldr	r0, [r3, #0]
 800c98e:	491b      	ldr	r1, [pc, #108]	; (800c9fc <_cbSendTaskList+0xb4>)
 800c990:	687a      	ldr	r2, [r7, #4]
 800c992:	4613      	mov	r3, r2
 800c994:	009b      	lsls	r3, r3, #2
 800c996:	4413      	add	r3, r2
 800c998:	009b      	lsls	r3, r3, #2
 800c99a:	440b      	add	r3, r1
 800c99c:	3304      	adds	r3, #4
 800c99e:	6819      	ldr	r1, [r3, #0]
 800c9a0:	4c16      	ldr	r4, [pc, #88]	; (800c9fc <_cbSendTaskList+0xb4>)
 800c9a2:	687a      	ldr	r2, [r7, #4]
 800c9a4:	4613      	mov	r3, r2
 800c9a6:	009b      	lsls	r3, r3, #2
 800c9a8:	4413      	add	r3, r2
 800c9aa:	009b      	lsls	r3, r3, #2
 800c9ac:	4423      	add	r3, r4
 800c9ae:	3308      	adds	r3, #8
 800c9b0:	681c      	ldr	r4, [r3, #0]
 800c9b2:	4d12      	ldr	r5, [pc, #72]	; (800c9fc <_cbSendTaskList+0xb4>)
 800c9b4:	687a      	ldr	r2, [r7, #4]
 800c9b6:	4613      	mov	r3, r2
 800c9b8:	009b      	lsls	r3, r3, #2
 800c9ba:	4413      	add	r3, r2
 800c9bc:	009b      	lsls	r3, r3, #2
 800c9be:	442b      	add	r3, r5
 800c9c0:	330c      	adds	r3, #12
 800c9c2:	681d      	ldr	r5, [r3, #0]
 800c9c4:	4e0d      	ldr	r6, [pc, #52]	; (800c9fc <_cbSendTaskList+0xb4>)
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	4613      	mov	r3, r2
 800c9ca:	009b      	lsls	r3, r3, #2
 800c9cc:	4413      	add	r3, r2
 800c9ce:	009b      	lsls	r3, r3, #2
 800c9d0:	4433      	add	r3, r6
 800c9d2:	3310      	adds	r3, #16
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	9300      	str	r3, [sp, #0]
 800c9d8:	462b      	mov	r3, r5
 800c9da:	4622      	mov	r2, r4
 800c9dc:	f000 f8be 	bl	800cb5c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	607b      	str	r3, [r7, #4]
 800c9e6:	4b06      	ldr	r3, [pc, #24]	; (800ca00 <_cbSendTaskList+0xb8>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	687a      	ldr	r2, [r7, #4]
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d3b1      	bcc.n	800c954 <_cbSendTaskList+0xc>
  }
}
 800c9f0:	bf00      	nop
 800c9f2:	bf00      	nop
 800c9f4:	370c      	adds	r7, #12
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9fa:	bf00      	nop
 800c9fc:	2002ce58 	.word	0x2002ce58
 800ca00:	2002cef8 	.word	0x2002cef8

0800ca04 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800ca04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ca08:	b082      	sub	sp, #8
 800ca0a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800ca0c:	f7fc fdea 	bl	80095e4 <xTaskGetTickCountFromISR>
 800ca10:	4603      	mov	r3, r0
 800ca12:	2200      	movs	r2, #0
 800ca14:	469a      	mov	sl, r3
 800ca16:	4693      	mov	fp, r2
 800ca18:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800ca1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca20:	4602      	mov	r2, r0
 800ca22:	460b      	mov	r3, r1
 800ca24:	f04f 0a00 	mov.w	sl, #0
 800ca28:	f04f 0b00 	mov.w	fp, #0
 800ca2c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800ca30:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800ca34:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800ca38:	4652      	mov	r2, sl
 800ca3a:	465b      	mov	r3, fp
 800ca3c:	1a14      	subs	r4, r2, r0
 800ca3e:	eb63 0501 	sbc.w	r5, r3, r1
 800ca42:	f04f 0200 	mov.w	r2, #0
 800ca46:	f04f 0300 	mov.w	r3, #0
 800ca4a:	00ab      	lsls	r3, r5, #2
 800ca4c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800ca50:	00a2      	lsls	r2, r4, #2
 800ca52:	4614      	mov	r4, r2
 800ca54:	461d      	mov	r5, r3
 800ca56:	eb14 0800 	adds.w	r8, r4, r0
 800ca5a:	eb45 0901 	adc.w	r9, r5, r1
 800ca5e:	f04f 0200 	mov.w	r2, #0
 800ca62:	f04f 0300 	mov.w	r3, #0
 800ca66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ca6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ca6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ca72:	4690      	mov	r8, r2
 800ca74:	4699      	mov	r9, r3
 800ca76:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800ca7a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800ca7e:	4610      	mov	r0, r2
 800ca80:	4619      	mov	r1, r3
 800ca82:	3708      	adds	r7, #8
 800ca84:	46bd      	mov	sp, r7
 800ca86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800ca8c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b086      	sub	sp, #24
 800ca90:	af02      	add	r7, sp, #8
 800ca92:	60f8      	str	r0, [r7, #12]
 800ca94:	60b9      	str	r1, [r7, #8]
 800ca96:	607a      	str	r2, [r7, #4]
 800ca98:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800ca9a:	2205      	movs	r2, #5
 800ca9c:	492b      	ldr	r1, [pc, #172]	; (800cb4c <SYSVIEW_AddTask+0xc0>)
 800ca9e:	68b8      	ldr	r0, [r7, #8]
 800caa0:	f000 fa0f 	bl	800cec2 <memcmp>
 800caa4:	4603      	mov	r3, r0
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d04b      	beq.n	800cb42 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800caaa:	4b29      	ldr	r3, [pc, #164]	; (800cb50 <SYSVIEW_AddTask+0xc4>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	2b07      	cmp	r3, #7
 800cab0:	d903      	bls.n	800caba <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800cab2:	4828      	ldr	r0, [pc, #160]	; (800cb54 <SYSVIEW_AddTask+0xc8>)
 800cab4:	f7ff fe0a 	bl	800c6cc <SEGGER_SYSVIEW_Warn>
    return;
 800cab8:	e044      	b.n	800cb44 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800caba:	4b25      	ldr	r3, [pc, #148]	; (800cb50 <SYSVIEW_AddTask+0xc4>)
 800cabc:	681a      	ldr	r2, [r3, #0]
 800cabe:	4926      	ldr	r1, [pc, #152]	; (800cb58 <SYSVIEW_AddTask+0xcc>)
 800cac0:	4613      	mov	r3, r2
 800cac2:	009b      	lsls	r3, r3, #2
 800cac4:	4413      	add	r3, r2
 800cac6:	009b      	lsls	r3, r3, #2
 800cac8:	440b      	add	r3, r1
 800caca:	68fa      	ldr	r2, [r7, #12]
 800cacc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800cace:	4b20      	ldr	r3, [pc, #128]	; (800cb50 <SYSVIEW_AddTask+0xc4>)
 800cad0:	681a      	ldr	r2, [r3, #0]
 800cad2:	4921      	ldr	r1, [pc, #132]	; (800cb58 <SYSVIEW_AddTask+0xcc>)
 800cad4:	4613      	mov	r3, r2
 800cad6:	009b      	lsls	r3, r3, #2
 800cad8:	4413      	add	r3, r2
 800cada:	009b      	lsls	r3, r3, #2
 800cadc:	440b      	add	r3, r1
 800cade:	3304      	adds	r3, #4
 800cae0:	68ba      	ldr	r2, [r7, #8]
 800cae2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800cae4:	4b1a      	ldr	r3, [pc, #104]	; (800cb50 <SYSVIEW_AddTask+0xc4>)
 800cae6:	681a      	ldr	r2, [r3, #0]
 800cae8:	491b      	ldr	r1, [pc, #108]	; (800cb58 <SYSVIEW_AddTask+0xcc>)
 800caea:	4613      	mov	r3, r2
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	4413      	add	r3, r2
 800caf0:	009b      	lsls	r3, r3, #2
 800caf2:	440b      	add	r3, r1
 800caf4:	3308      	adds	r3, #8
 800caf6:	687a      	ldr	r2, [r7, #4]
 800caf8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800cafa:	4b15      	ldr	r3, [pc, #84]	; (800cb50 <SYSVIEW_AddTask+0xc4>)
 800cafc:	681a      	ldr	r2, [r3, #0]
 800cafe:	4916      	ldr	r1, [pc, #88]	; (800cb58 <SYSVIEW_AddTask+0xcc>)
 800cb00:	4613      	mov	r3, r2
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	4413      	add	r3, r2
 800cb06:	009b      	lsls	r3, r3, #2
 800cb08:	440b      	add	r3, r1
 800cb0a:	330c      	adds	r3, #12
 800cb0c:	683a      	ldr	r2, [r7, #0]
 800cb0e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800cb10:	4b0f      	ldr	r3, [pc, #60]	; (800cb50 <SYSVIEW_AddTask+0xc4>)
 800cb12:	681a      	ldr	r2, [r3, #0]
 800cb14:	4910      	ldr	r1, [pc, #64]	; (800cb58 <SYSVIEW_AddTask+0xcc>)
 800cb16:	4613      	mov	r3, r2
 800cb18:	009b      	lsls	r3, r3, #2
 800cb1a:	4413      	add	r3, r2
 800cb1c:	009b      	lsls	r3, r3, #2
 800cb1e:	440b      	add	r3, r1
 800cb20:	3310      	adds	r3, #16
 800cb22:	69ba      	ldr	r2, [r7, #24]
 800cb24:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800cb26:	4b0a      	ldr	r3, [pc, #40]	; (800cb50 <SYSVIEW_AddTask+0xc4>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	4a08      	ldr	r2, [pc, #32]	; (800cb50 <SYSVIEW_AddTask+0xc4>)
 800cb2e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800cb30:	69bb      	ldr	r3, [r7, #24]
 800cb32:	9300      	str	r3, [sp, #0]
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	687a      	ldr	r2, [r7, #4]
 800cb38:	68b9      	ldr	r1, [r7, #8]
 800cb3a:	68f8      	ldr	r0, [r7, #12]
 800cb3c:	f000 f80e 	bl	800cb5c <SYSVIEW_SendTaskInfo>
 800cb40:	e000      	b.n	800cb44 <SYSVIEW_AddTask+0xb8>
    return;
 800cb42:	bf00      	nop

}
 800cb44:	3710      	adds	r7, #16
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}
 800cb4a:	bf00      	nop
 800cb4c:	0800f354 	.word	0x0800f354
 800cb50:	2002cef8 	.word	0x2002cef8
 800cb54:	0800f35c 	.word	0x0800f35c
 800cb58:	2002ce58 	.word	0x2002ce58

0800cb5c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b08a      	sub	sp, #40	; 0x28
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	60f8      	str	r0, [r7, #12]
 800cb64:	60b9      	str	r1, [r7, #8]
 800cb66:	607a      	str	r2, [r7, #4]
 800cb68:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800cb6a:	f107 0314 	add.w	r3, r7, #20
 800cb6e:	2214      	movs	r2, #20
 800cb70:	2100      	movs	r1, #0
 800cb72:	4618      	mov	r0, r3
 800cb74:	f000 f9b5 	bl	800cee2 <memset>
  TaskInfo.TaskID     = TaskID;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800cb88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800cb8c:	f107 0314 	add.w	r3, r7, #20
 800cb90:	4618      	mov	r0, r3
 800cb92:	f7ff fa7f 	bl	800c094 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800cb96:	bf00      	nop
 800cb98:	3728      	adds	r7, #40	; 0x28
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
	...

0800cba0 <srand>:
 800cba0:	b538      	push	{r3, r4, r5, lr}
 800cba2:	4b10      	ldr	r3, [pc, #64]	; (800cbe4 <srand+0x44>)
 800cba4:	681d      	ldr	r5, [r3, #0]
 800cba6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800cba8:	4604      	mov	r4, r0
 800cbaa:	b9b3      	cbnz	r3, 800cbda <srand+0x3a>
 800cbac:	2018      	movs	r0, #24
 800cbae:	f000 fb0f 	bl	800d1d0 <malloc>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	6328      	str	r0, [r5, #48]	; 0x30
 800cbb6:	b920      	cbnz	r0, 800cbc2 <srand+0x22>
 800cbb8:	4b0b      	ldr	r3, [pc, #44]	; (800cbe8 <srand+0x48>)
 800cbba:	480c      	ldr	r0, [pc, #48]	; (800cbec <srand+0x4c>)
 800cbbc:	2146      	movs	r1, #70	; 0x46
 800cbbe:	f000 fa9d 	bl	800d0fc <__assert_func>
 800cbc2:	490b      	ldr	r1, [pc, #44]	; (800cbf0 <srand+0x50>)
 800cbc4:	4b0b      	ldr	r3, [pc, #44]	; (800cbf4 <srand+0x54>)
 800cbc6:	e9c0 1300 	strd	r1, r3, [r0]
 800cbca:	4b0b      	ldr	r3, [pc, #44]	; (800cbf8 <srand+0x58>)
 800cbcc:	6083      	str	r3, [r0, #8]
 800cbce:	230b      	movs	r3, #11
 800cbd0:	8183      	strh	r3, [r0, #12]
 800cbd2:	2100      	movs	r1, #0
 800cbd4:	2001      	movs	r0, #1
 800cbd6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800cbda:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800cbdc:	2200      	movs	r2, #0
 800cbde:	611c      	str	r4, [r3, #16]
 800cbe0:	615a      	str	r2, [r3, #20]
 800cbe2:	bd38      	pop	{r3, r4, r5, pc}
 800cbe4:	20000080 	.word	0x20000080
 800cbe8:	080106b4 	.word	0x080106b4
 800cbec:	080106cb 	.word	0x080106cb
 800cbf0:	abcd330e 	.word	0xabcd330e
 800cbf4:	e66d1234 	.word	0xe66d1234
 800cbf8:	0005deec 	.word	0x0005deec

0800cbfc <rand>:
 800cbfc:	4b16      	ldr	r3, [pc, #88]	; (800cc58 <rand+0x5c>)
 800cbfe:	b510      	push	{r4, lr}
 800cc00:	681c      	ldr	r4, [r3, #0]
 800cc02:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cc04:	b9b3      	cbnz	r3, 800cc34 <rand+0x38>
 800cc06:	2018      	movs	r0, #24
 800cc08:	f000 fae2 	bl	800d1d0 <malloc>
 800cc0c:	4602      	mov	r2, r0
 800cc0e:	6320      	str	r0, [r4, #48]	; 0x30
 800cc10:	b920      	cbnz	r0, 800cc1c <rand+0x20>
 800cc12:	4b12      	ldr	r3, [pc, #72]	; (800cc5c <rand+0x60>)
 800cc14:	4812      	ldr	r0, [pc, #72]	; (800cc60 <rand+0x64>)
 800cc16:	2152      	movs	r1, #82	; 0x52
 800cc18:	f000 fa70 	bl	800d0fc <__assert_func>
 800cc1c:	4911      	ldr	r1, [pc, #68]	; (800cc64 <rand+0x68>)
 800cc1e:	4b12      	ldr	r3, [pc, #72]	; (800cc68 <rand+0x6c>)
 800cc20:	e9c0 1300 	strd	r1, r3, [r0]
 800cc24:	4b11      	ldr	r3, [pc, #68]	; (800cc6c <rand+0x70>)
 800cc26:	6083      	str	r3, [r0, #8]
 800cc28:	230b      	movs	r3, #11
 800cc2a:	8183      	strh	r3, [r0, #12]
 800cc2c:	2100      	movs	r1, #0
 800cc2e:	2001      	movs	r0, #1
 800cc30:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800cc34:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800cc36:	480e      	ldr	r0, [pc, #56]	; (800cc70 <rand+0x74>)
 800cc38:	690b      	ldr	r3, [r1, #16]
 800cc3a:	694c      	ldr	r4, [r1, #20]
 800cc3c:	4a0d      	ldr	r2, [pc, #52]	; (800cc74 <rand+0x78>)
 800cc3e:	4358      	muls	r0, r3
 800cc40:	fb02 0004 	mla	r0, r2, r4, r0
 800cc44:	fba3 3202 	umull	r3, r2, r3, r2
 800cc48:	3301      	adds	r3, #1
 800cc4a:	eb40 0002 	adc.w	r0, r0, r2
 800cc4e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800cc52:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800cc56:	bd10      	pop	{r4, pc}
 800cc58:	20000080 	.word	0x20000080
 800cc5c:	080106b4 	.word	0x080106b4
 800cc60:	080106cb 	.word	0x080106cb
 800cc64:	abcd330e 	.word	0xabcd330e
 800cc68:	e66d1234 	.word	0xe66d1234
 800cc6c:	0005deec 	.word	0x0005deec
 800cc70:	5851f42d 	.word	0x5851f42d
 800cc74:	4c957f2d 	.word	0x4c957f2d

0800cc78 <std>:
 800cc78:	2300      	movs	r3, #0
 800cc7a:	b510      	push	{r4, lr}
 800cc7c:	4604      	mov	r4, r0
 800cc7e:	e9c0 3300 	strd	r3, r3, [r0]
 800cc82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc86:	6083      	str	r3, [r0, #8]
 800cc88:	8181      	strh	r1, [r0, #12]
 800cc8a:	6643      	str	r3, [r0, #100]	; 0x64
 800cc8c:	81c2      	strh	r2, [r0, #14]
 800cc8e:	6183      	str	r3, [r0, #24]
 800cc90:	4619      	mov	r1, r3
 800cc92:	2208      	movs	r2, #8
 800cc94:	305c      	adds	r0, #92	; 0x5c
 800cc96:	f000 f924 	bl	800cee2 <memset>
 800cc9a:	4b0d      	ldr	r3, [pc, #52]	; (800ccd0 <std+0x58>)
 800cc9c:	6263      	str	r3, [r4, #36]	; 0x24
 800cc9e:	4b0d      	ldr	r3, [pc, #52]	; (800ccd4 <std+0x5c>)
 800cca0:	62a3      	str	r3, [r4, #40]	; 0x28
 800cca2:	4b0d      	ldr	r3, [pc, #52]	; (800ccd8 <std+0x60>)
 800cca4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cca6:	4b0d      	ldr	r3, [pc, #52]	; (800ccdc <std+0x64>)
 800cca8:	6323      	str	r3, [r4, #48]	; 0x30
 800ccaa:	4b0d      	ldr	r3, [pc, #52]	; (800cce0 <std+0x68>)
 800ccac:	6224      	str	r4, [r4, #32]
 800ccae:	429c      	cmp	r4, r3
 800ccb0:	d006      	beq.n	800ccc0 <std+0x48>
 800ccb2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ccb6:	4294      	cmp	r4, r2
 800ccb8:	d002      	beq.n	800ccc0 <std+0x48>
 800ccba:	33d0      	adds	r3, #208	; 0xd0
 800ccbc:	429c      	cmp	r4, r3
 800ccbe:	d105      	bne.n	800cccc <std+0x54>
 800ccc0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ccc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccc8:	f000 ba06 	b.w	800d0d8 <__retarget_lock_init_recursive>
 800cccc:	bd10      	pop	{r4, pc}
 800ccce:	bf00      	nop
 800ccd0:	0800ce3d 	.word	0x0800ce3d
 800ccd4:	0800ce5f 	.word	0x0800ce5f
 800ccd8:	0800ce97 	.word	0x0800ce97
 800ccdc:	0800cebb 	.word	0x0800cebb
 800cce0:	2002cefc 	.word	0x2002cefc

0800cce4 <stdio_exit_handler>:
 800cce4:	4a02      	ldr	r2, [pc, #8]	; (800ccf0 <stdio_exit_handler+0xc>)
 800cce6:	4903      	ldr	r1, [pc, #12]	; (800ccf4 <stdio_exit_handler+0x10>)
 800cce8:	4803      	ldr	r0, [pc, #12]	; (800ccf8 <stdio_exit_handler+0x14>)
 800ccea:	f000 b869 	b.w	800cdc0 <_fwalk_sglue>
 800ccee:	bf00      	nop
 800ccf0:	20000028 	.word	0x20000028
 800ccf4:	0800da15 	.word	0x0800da15
 800ccf8:	20000034 	.word	0x20000034

0800ccfc <cleanup_stdio>:
 800ccfc:	6841      	ldr	r1, [r0, #4]
 800ccfe:	4b0c      	ldr	r3, [pc, #48]	; (800cd30 <cleanup_stdio+0x34>)
 800cd00:	4299      	cmp	r1, r3
 800cd02:	b510      	push	{r4, lr}
 800cd04:	4604      	mov	r4, r0
 800cd06:	d001      	beq.n	800cd0c <cleanup_stdio+0x10>
 800cd08:	f000 fe84 	bl	800da14 <_fflush_r>
 800cd0c:	68a1      	ldr	r1, [r4, #8]
 800cd0e:	4b09      	ldr	r3, [pc, #36]	; (800cd34 <cleanup_stdio+0x38>)
 800cd10:	4299      	cmp	r1, r3
 800cd12:	d002      	beq.n	800cd1a <cleanup_stdio+0x1e>
 800cd14:	4620      	mov	r0, r4
 800cd16:	f000 fe7d 	bl	800da14 <_fflush_r>
 800cd1a:	68e1      	ldr	r1, [r4, #12]
 800cd1c:	4b06      	ldr	r3, [pc, #24]	; (800cd38 <cleanup_stdio+0x3c>)
 800cd1e:	4299      	cmp	r1, r3
 800cd20:	d004      	beq.n	800cd2c <cleanup_stdio+0x30>
 800cd22:	4620      	mov	r0, r4
 800cd24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd28:	f000 be74 	b.w	800da14 <_fflush_r>
 800cd2c:	bd10      	pop	{r4, pc}
 800cd2e:	bf00      	nop
 800cd30:	2002cefc 	.word	0x2002cefc
 800cd34:	2002cf64 	.word	0x2002cf64
 800cd38:	2002cfcc 	.word	0x2002cfcc

0800cd3c <global_stdio_init.part.0>:
 800cd3c:	b510      	push	{r4, lr}
 800cd3e:	4b0b      	ldr	r3, [pc, #44]	; (800cd6c <global_stdio_init.part.0+0x30>)
 800cd40:	4c0b      	ldr	r4, [pc, #44]	; (800cd70 <global_stdio_init.part.0+0x34>)
 800cd42:	4a0c      	ldr	r2, [pc, #48]	; (800cd74 <global_stdio_init.part.0+0x38>)
 800cd44:	601a      	str	r2, [r3, #0]
 800cd46:	4620      	mov	r0, r4
 800cd48:	2200      	movs	r2, #0
 800cd4a:	2104      	movs	r1, #4
 800cd4c:	f7ff ff94 	bl	800cc78 <std>
 800cd50:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cd54:	2201      	movs	r2, #1
 800cd56:	2109      	movs	r1, #9
 800cd58:	f7ff ff8e 	bl	800cc78 <std>
 800cd5c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cd60:	2202      	movs	r2, #2
 800cd62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd66:	2112      	movs	r1, #18
 800cd68:	f7ff bf86 	b.w	800cc78 <std>
 800cd6c:	2002d034 	.word	0x2002d034
 800cd70:	2002cefc 	.word	0x2002cefc
 800cd74:	0800cce5 	.word	0x0800cce5

0800cd78 <__sfp_lock_acquire>:
 800cd78:	4801      	ldr	r0, [pc, #4]	; (800cd80 <__sfp_lock_acquire+0x8>)
 800cd7a:	f000 b9ae 	b.w	800d0da <__retarget_lock_acquire_recursive>
 800cd7e:	bf00      	nop
 800cd80:	2002d03d 	.word	0x2002d03d

0800cd84 <__sfp_lock_release>:
 800cd84:	4801      	ldr	r0, [pc, #4]	; (800cd8c <__sfp_lock_release+0x8>)
 800cd86:	f000 b9a9 	b.w	800d0dc <__retarget_lock_release_recursive>
 800cd8a:	bf00      	nop
 800cd8c:	2002d03d 	.word	0x2002d03d

0800cd90 <__sinit>:
 800cd90:	b510      	push	{r4, lr}
 800cd92:	4604      	mov	r4, r0
 800cd94:	f7ff fff0 	bl	800cd78 <__sfp_lock_acquire>
 800cd98:	6a23      	ldr	r3, [r4, #32]
 800cd9a:	b11b      	cbz	r3, 800cda4 <__sinit+0x14>
 800cd9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cda0:	f7ff bff0 	b.w	800cd84 <__sfp_lock_release>
 800cda4:	4b04      	ldr	r3, [pc, #16]	; (800cdb8 <__sinit+0x28>)
 800cda6:	6223      	str	r3, [r4, #32]
 800cda8:	4b04      	ldr	r3, [pc, #16]	; (800cdbc <__sinit+0x2c>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d1f5      	bne.n	800cd9c <__sinit+0xc>
 800cdb0:	f7ff ffc4 	bl	800cd3c <global_stdio_init.part.0>
 800cdb4:	e7f2      	b.n	800cd9c <__sinit+0xc>
 800cdb6:	bf00      	nop
 800cdb8:	0800ccfd 	.word	0x0800ccfd
 800cdbc:	2002d034 	.word	0x2002d034

0800cdc0 <_fwalk_sglue>:
 800cdc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdc4:	4607      	mov	r7, r0
 800cdc6:	4688      	mov	r8, r1
 800cdc8:	4614      	mov	r4, r2
 800cdca:	2600      	movs	r6, #0
 800cdcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cdd0:	f1b9 0901 	subs.w	r9, r9, #1
 800cdd4:	d505      	bpl.n	800cde2 <_fwalk_sglue+0x22>
 800cdd6:	6824      	ldr	r4, [r4, #0]
 800cdd8:	2c00      	cmp	r4, #0
 800cdda:	d1f7      	bne.n	800cdcc <_fwalk_sglue+0xc>
 800cddc:	4630      	mov	r0, r6
 800cdde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cde2:	89ab      	ldrh	r3, [r5, #12]
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d907      	bls.n	800cdf8 <_fwalk_sglue+0x38>
 800cde8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cdec:	3301      	adds	r3, #1
 800cdee:	d003      	beq.n	800cdf8 <_fwalk_sglue+0x38>
 800cdf0:	4629      	mov	r1, r5
 800cdf2:	4638      	mov	r0, r7
 800cdf4:	47c0      	blx	r8
 800cdf6:	4306      	orrs	r6, r0
 800cdf8:	3568      	adds	r5, #104	; 0x68
 800cdfa:	e7e9      	b.n	800cdd0 <_fwalk_sglue+0x10>

0800cdfc <siprintf>:
 800cdfc:	b40e      	push	{r1, r2, r3}
 800cdfe:	b500      	push	{lr}
 800ce00:	b09c      	sub	sp, #112	; 0x70
 800ce02:	ab1d      	add	r3, sp, #116	; 0x74
 800ce04:	9002      	str	r0, [sp, #8]
 800ce06:	9006      	str	r0, [sp, #24]
 800ce08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ce0c:	4809      	ldr	r0, [pc, #36]	; (800ce34 <siprintf+0x38>)
 800ce0e:	9107      	str	r1, [sp, #28]
 800ce10:	9104      	str	r1, [sp, #16]
 800ce12:	4909      	ldr	r1, [pc, #36]	; (800ce38 <siprintf+0x3c>)
 800ce14:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce18:	9105      	str	r1, [sp, #20]
 800ce1a:	6800      	ldr	r0, [r0, #0]
 800ce1c:	9301      	str	r3, [sp, #4]
 800ce1e:	a902      	add	r1, sp, #8
 800ce20:	f000 fae4 	bl	800d3ec <_svfiprintf_r>
 800ce24:	9b02      	ldr	r3, [sp, #8]
 800ce26:	2200      	movs	r2, #0
 800ce28:	701a      	strb	r2, [r3, #0]
 800ce2a:	b01c      	add	sp, #112	; 0x70
 800ce2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce30:	b003      	add	sp, #12
 800ce32:	4770      	bx	lr
 800ce34:	20000080 	.word	0x20000080
 800ce38:	ffff0208 	.word	0xffff0208

0800ce3c <__sread>:
 800ce3c:	b510      	push	{r4, lr}
 800ce3e:	460c      	mov	r4, r1
 800ce40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce44:	f000 f8fa 	bl	800d03c <_read_r>
 800ce48:	2800      	cmp	r0, #0
 800ce4a:	bfab      	itete	ge
 800ce4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ce4e:	89a3      	ldrhlt	r3, [r4, #12]
 800ce50:	181b      	addge	r3, r3, r0
 800ce52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ce56:	bfac      	ite	ge
 800ce58:	6563      	strge	r3, [r4, #84]	; 0x54
 800ce5a:	81a3      	strhlt	r3, [r4, #12]
 800ce5c:	bd10      	pop	{r4, pc}

0800ce5e <__swrite>:
 800ce5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce62:	461f      	mov	r7, r3
 800ce64:	898b      	ldrh	r3, [r1, #12]
 800ce66:	05db      	lsls	r3, r3, #23
 800ce68:	4605      	mov	r5, r0
 800ce6a:	460c      	mov	r4, r1
 800ce6c:	4616      	mov	r6, r2
 800ce6e:	d505      	bpl.n	800ce7c <__swrite+0x1e>
 800ce70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce74:	2302      	movs	r3, #2
 800ce76:	2200      	movs	r2, #0
 800ce78:	f000 f8ce 	bl	800d018 <_lseek_r>
 800ce7c:	89a3      	ldrh	r3, [r4, #12]
 800ce7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce86:	81a3      	strh	r3, [r4, #12]
 800ce88:	4632      	mov	r2, r6
 800ce8a:	463b      	mov	r3, r7
 800ce8c:	4628      	mov	r0, r5
 800ce8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce92:	f000 b8e5 	b.w	800d060 <_write_r>

0800ce96 <__sseek>:
 800ce96:	b510      	push	{r4, lr}
 800ce98:	460c      	mov	r4, r1
 800ce9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce9e:	f000 f8bb 	bl	800d018 <_lseek_r>
 800cea2:	1c43      	adds	r3, r0, #1
 800cea4:	89a3      	ldrh	r3, [r4, #12]
 800cea6:	bf15      	itete	ne
 800cea8:	6560      	strne	r0, [r4, #84]	; 0x54
 800ceaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ceae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ceb2:	81a3      	strheq	r3, [r4, #12]
 800ceb4:	bf18      	it	ne
 800ceb6:	81a3      	strhne	r3, [r4, #12]
 800ceb8:	bd10      	pop	{r4, pc}

0800ceba <__sclose>:
 800ceba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cebe:	f000 b833 	b.w	800cf28 <_close_r>

0800cec2 <memcmp>:
 800cec2:	b510      	push	{r4, lr}
 800cec4:	3901      	subs	r1, #1
 800cec6:	4402      	add	r2, r0
 800cec8:	4290      	cmp	r0, r2
 800ceca:	d101      	bne.n	800ced0 <memcmp+0xe>
 800cecc:	2000      	movs	r0, #0
 800cece:	e005      	b.n	800cedc <memcmp+0x1a>
 800ced0:	7803      	ldrb	r3, [r0, #0]
 800ced2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ced6:	42a3      	cmp	r3, r4
 800ced8:	d001      	beq.n	800cede <memcmp+0x1c>
 800ceda:	1b18      	subs	r0, r3, r4
 800cedc:	bd10      	pop	{r4, pc}
 800cede:	3001      	adds	r0, #1
 800cee0:	e7f2      	b.n	800cec8 <memcmp+0x6>

0800cee2 <memset>:
 800cee2:	4402      	add	r2, r0
 800cee4:	4603      	mov	r3, r0
 800cee6:	4293      	cmp	r3, r2
 800cee8:	d100      	bne.n	800ceec <memset+0xa>
 800ceea:	4770      	bx	lr
 800ceec:	f803 1b01 	strb.w	r1, [r3], #1
 800cef0:	e7f9      	b.n	800cee6 <memset+0x4>
	...

0800cef4 <time>:
 800cef4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cef6:	4b0b      	ldr	r3, [pc, #44]	; (800cf24 <time+0x30>)
 800cef8:	2200      	movs	r2, #0
 800cefa:	4669      	mov	r1, sp
 800cefc:	4604      	mov	r4, r0
 800cefe:	6818      	ldr	r0, [r3, #0]
 800cf00:	f000 f878 	bl	800cff4 <_gettimeofday_r>
 800cf04:	2800      	cmp	r0, #0
 800cf06:	bfbe      	ittt	lt
 800cf08:	f04f 32ff 	movlt.w	r2, #4294967295
 800cf0c:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf10:	e9cd 2300 	strdlt	r2, r3, [sp]
 800cf14:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf18:	b10c      	cbz	r4, 800cf1e <time+0x2a>
 800cf1a:	e9c4 0100 	strd	r0, r1, [r4]
 800cf1e:	b004      	add	sp, #16
 800cf20:	bd10      	pop	{r4, pc}
 800cf22:	bf00      	nop
 800cf24:	20000080 	.word	0x20000080

0800cf28 <_close_r>:
 800cf28:	b538      	push	{r3, r4, r5, lr}
 800cf2a:	4d06      	ldr	r5, [pc, #24]	; (800cf44 <_close_r+0x1c>)
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	4604      	mov	r4, r0
 800cf30:	4608      	mov	r0, r1
 800cf32:	602b      	str	r3, [r5, #0]
 800cf34:	f7f7 fc99 	bl	800486a <_close>
 800cf38:	1c43      	adds	r3, r0, #1
 800cf3a:	d102      	bne.n	800cf42 <_close_r+0x1a>
 800cf3c:	682b      	ldr	r3, [r5, #0]
 800cf3e:	b103      	cbz	r3, 800cf42 <_close_r+0x1a>
 800cf40:	6023      	str	r3, [r4, #0]
 800cf42:	bd38      	pop	{r3, r4, r5, pc}
 800cf44:	2002d038 	.word	0x2002d038

0800cf48 <_reclaim_reent>:
 800cf48:	4b29      	ldr	r3, [pc, #164]	; (800cff0 <_reclaim_reent+0xa8>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	4283      	cmp	r3, r0
 800cf4e:	b570      	push	{r4, r5, r6, lr}
 800cf50:	4604      	mov	r4, r0
 800cf52:	d04b      	beq.n	800cfec <_reclaim_reent+0xa4>
 800cf54:	69c3      	ldr	r3, [r0, #28]
 800cf56:	b143      	cbz	r3, 800cf6a <_reclaim_reent+0x22>
 800cf58:	68db      	ldr	r3, [r3, #12]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d144      	bne.n	800cfe8 <_reclaim_reent+0xa0>
 800cf5e:	69e3      	ldr	r3, [r4, #28]
 800cf60:	6819      	ldr	r1, [r3, #0]
 800cf62:	b111      	cbz	r1, 800cf6a <_reclaim_reent+0x22>
 800cf64:	4620      	mov	r0, r4
 800cf66:	f000 f8e7 	bl	800d138 <_free_r>
 800cf6a:	6961      	ldr	r1, [r4, #20]
 800cf6c:	b111      	cbz	r1, 800cf74 <_reclaim_reent+0x2c>
 800cf6e:	4620      	mov	r0, r4
 800cf70:	f000 f8e2 	bl	800d138 <_free_r>
 800cf74:	69e1      	ldr	r1, [r4, #28]
 800cf76:	b111      	cbz	r1, 800cf7e <_reclaim_reent+0x36>
 800cf78:	4620      	mov	r0, r4
 800cf7a:	f000 f8dd 	bl	800d138 <_free_r>
 800cf7e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800cf80:	b111      	cbz	r1, 800cf88 <_reclaim_reent+0x40>
 800cf82:	4620      	mov	r0, r4
 800cf84:	f000 f8d8 	bl	800d138 <_free_r>
 800cf88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf8a:	b111      	cbz	r1, 800cf92 <_reclaim_reent+0x4a>
 800cf8c:	4620      	mov	r0, r4
 800cf8e:	f000 f8d3 	bl	800d138 <_free_r>
 800cf92:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cf94:	b111      	cbz	r1, 800cf9c <_reclaim_reent+0x54>
 800cf96:	4620      	mov	r0, r4
 800cf98:	f000 f8ce 	bl	800d138 <_free_r>
 800cf9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cf9e:	b111      	cbz	r1, 800cfa6 <_reclaim_reent+0x5e>
 800cfa0:	4620      	mov	r0, r4
 800cfa2:	f000 f8c9 	bl	800d138 <_free_r>
 800cfa6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800cfa8:	b111      	cbz	r1, 800cfb0 <_reclaim_reent+0x68>
 800cfaa:	4620      	mov	r0, r4
 800cfac:	f000 f8c4 	bl	800d138 <_free_r>
 800cfb0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800cfb2:	b111      	cbz	r1, 800cfba <_reclaim_reent+0x72>
 800cfb4:	4620      	mov	r0, r4
 800cfb6:	f000 f8bf 	bl	800d138 <_free_r>
 800cfba:	6a23      	ldr	r3, [r4, #32]
 800cfbc:	b1b3      	cbz	r3, 800cfec <_reclaim_reent+0xa4>
 800cfbe:	4620      	mov	r0, r4
 800cfc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cfc4:	4718      	bx	r3
 800cfc6:	5949      	ldr	r1, [r1, r5]
 800cfc8:	b941      	cbnz	r1, 800cfdc <_reclaim_reent+0x94>
 800cfca:	3504      	adds	r5, #4
 800cfcc:	69e3      	ldr	r3, [r4, #28]
 800cfce:	2d80      	cmp	r5, #128	; 0x80
 800cfd0:	68d9      	ldr	r1, [r3, #12]
 800cfd2:	d1f8      	bne.n	800cfc6 <_reclaim_reent+0x7e>
 800cfd4:	4620      	mov	r0, r4
 800cfd6:	f000 f8af 	bl	800d138 <_free_r>
 800cfda:	e7c0      	b.n	800cf5e <_reclaim_reent+0x16>
 800cfdc:	680e      	ldr	r6, [r1, #0]
 800cfde:	4620      	mov	r0, r4
 800cfe0:	f000 f8aa 	bl	800d138 <_free_r>
 800cfe4:	4631      	mov	r1, r6
 800cfe6:	e7ef      	b.n	800cfc8 <_reclaim_reent+0x80>
 800cfe8:	2500      	movs	r5, #0
 800cfea:	e7ef      	b.n	800cfcc <_reclaim_reent+0x84>
 800cfec:	bd70      	pop	{r4, r5, r6, pc}
 800cfee:	bf00      	nop
 800cff0:	20000080 	.word	0x20000080

0800cff4 <_gettimeofday_r>:
 800cff4:	b538      	push	{r3, r4, r5, lr}
 800cff6:	4d07      	ldr	r5, [pc, #28]	; (800d014 <_gettimeofday_r+0x20>)
 800cff8:	2300      	movs	r3, #0
 800cffa:	4604      	mov	r4, r0
 800cffc:	4608      	mov	r0, r1
 800cffe:	4611      	mov	r1, r2
 800d000:	602b      	str	r3, [r5, #0]
 800d002:	f002 f88d 	bl	800f120 <_gettimeofday>
 800d006:	1c43      	adds	r3, r0, #1
 800d008:	d102      	bne.n	800d010 <_gettimeofday_r+0x1c>
 800d00a:	682b      	ldr	r3, [r5, #0]
 800d00c:	b103      	cbz	r3, 800d010 <_gettimeofday_r+0x1c>
 800d00e:	6023      	str	r3, [r4, #0]
 800d010:	bd38      	pop	{r3, r4, r5, pc}
 800d012:	bf00      	nop
 800d014:	2002d038 	.word	0x2002d038

0800d018 <_lseek_r>:
 800d018:	b538      	push	{r3, r4, r5, lr}
 800d01a:	4d07      	ldr	r5, [pc, #28]	; (800d038 <_lseek_r+0x20>)
 800d01c:	4604      	mov	r4, r0
 800d01e:	4608      	mov	r0, r1
 800d020:	4611      	mov	r1, r2
 800d022:	2200      	movs	r2, #0
 800d024:	602a      	str	r2, [r5, #0]
 800d026:	461a      	mov	r2, r3
 800d028:	f7f7 fc46 	bl	80048b8 <_lseek>
 800d02c:	1c43      	adds	r3, r0, #1
 800d02e:	d102      	bne.n	800d036 <_lseek_r+0x1e>
 800d030:	682b      	ldr	r3, [r5, #0]
 800d032:	b103      	cbz	r3, 800d036 <_lseek_r+0x1e>
 800d034:	6023      	str	r3, [r4, #0]
 800d036:	bd38      	pop	{r3, r4, r5, pc}
 800d038:	2002d038 	.word	0x2002d038

0800d03c <_read_r>:
 800d03c:	b538      	push	{r3, r4, r5, lr}
 800d03e:	4d07      	ldr	r5, [pc, #28]	; (800d05c <_read_r+0x20>)
 800d040:	4604      	mov	r4, r0
 800d042:	4608      	mov	r0, r1
 800d044:	4611      	mov	r1, r2
 800d046:	2200      	movs	r2, #0
 800d048:	602a      	str	r2, [r5, #0]
 800d04a:	461a      	mov	r2, r3
 800d04c:	f7f7 fbd4 	bl	80047f8 <_read>
 800d050:	1c43      	adds	r3, r0, #1
 800d052:	d102      	bne.n	800d05a <_read_r+0x1e>
 800d054:	682b      	ldr	r3, [r5, #0]
 800d056:	b103      	cbz	r3, 800d05a <_read_r+0x1e>
 800d058:	6023      	str	r3, [r4, #0]
 800d05a:	bd38      	pop	{r3, r4, r5, pc}
 800d05c:	2002d038 	.word	0x2002d038

0800d060 <_write_r>:
 800d060:	b538      	push	{r3, r4, r5, lr}
 800d062:	4d07      	ldr	r5, [pc, #28]	; (800d080 <_write_r+0x20>)
 800d064:	4604      	mov	r4, r0
 800d066:	4608      	mov	r0, r1
 800d068:	4611      	mov	r1, r2
 800d06a:	2200      	movs	r2, #0
 800d06c:	602a      	str	r2, [r5, #0]
 800d06e:	461a      	mov	r2, r3
 800d070:	f7f7 fbdf 	bl	8004832 <_write>
 800d074:	1c43      	adds	r3, r0, #1
 800d076:	d102      	bne.n	800d07e <_write_r+0x1e>
 800d078:	682b      	ldr	r3, [r5, #0]
 800d07a:	b103      	cbz	r3, 800d07e <_write_r+0x1e>
 800d07c:	6023      	str	r3, [r4, #0]
 800d07e:	bd38      	pop	{r3, r4, r5, pc}
 800d080:	2002d038 	.word	0x2002d038

0800d084 <__errno>:
 800d084:	4b01      	ldr	r3, [pc, #4]	; (800d08c <__errno+0x8>)
 800d086:	6818      	ldr	r0, [r3, #0]
 800d088:	4770      	bx	lr
 800d08a:	bf00      	nop
 800d08c:	20000080 	.word	0x20000080

0800d090 <__libc_init_array>:
 800d090:	b570      	push	{r4, r5, r6, lr}
 800d092:	4d0d      	ldr	r5, [pc, #52]	; (800d0c8 <__libc_init_array+0x38>)
 800d094:	4c0d      	ldr	r4, [pc, #52]	; (800d0cc <__libc_init_array+0x3c>)
 800d096:	1b64      	subs	r4, r4, r5
 800d098:	10a4      	asrs	r4, r4, #2
 800d09a:	2600      	movs	r6, #0
 800d09c:	42a6      	cmp	r6, r4
 800d09e:	d109      	bne.n	800d0b4 <__libc_init_array+0x24>
 800d0a0:	4d0b      	ldr	r5, [pc, #44]	; (800d0d0 <__libc_init_array+0x40>)
 800d0a2:	4c0c      	ldr	r4, [pc, #48]	; (800d0d4 <__libc_init_array+0x44>)
 800d0a4:	f002 f844 	bl	800f130 <_init>
 800d0a8:	1b64      	subs	r4, r4, r5
 800d0aa:	10a4      	asrs	r4, r4, #2
 800d0ac:	2600      	movs	r6, #0
 800d0ae:	42a6      	cmp	r6, r4
 800d0b0:	d105      	bne.n	800d0be <__libc_init_array+0x2e>
 800d0b2:	bd70      	pop	{r4, r5, r6, pc}
 800d0b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0b8:	4798      	blx	r3
 800d0ba:	3601      	adds	r6, #1
 800d0bc:	e7ee      	b.n	800d09c <__libc_init_array+0xc>
 800d0be:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0c2:	4798      	blx	r3
 800d0c4:	3601      	adds	r6, #1
 800d0c6:	e7f2      	b.n	800d0ae <__libc_init_array+0x1e>
 800d0c8:	08010978 	.word	0x08010978
 800d0cc:	08010978 	.word	0x08010978
 800d0d0:	08010978 	.word	0x08010978
 800d0d4:	0801097c 	.word	0x0801097c

0800d0d8 <__retarget_lock_init_recursive>:
 800d0d8:	4770      	bx	lr

0800d0da <__retarget_lock_acquire_recursive>:
 800d0da:	4770      	bx	lr

0800d0dc <__retarget_lock_release_recursive>:
 800d0dc:	4770      	bx	lr

0800d0de <memcpy>:
 800d0de:	440a      	add	r2, r1
 800d0e0:	4291      	cmp	r1, r2
 800d0e2:	f100 33ff 	add.w	r3, r0, #4294967295
 800d0e6:	d100      	bne.n	800d0ea <memcpy+0xc>
 800d0e8:	4770      	bx	lr
 800d0ea:	b510      	push	{r4, lr}
 800d0ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0f4:	4291      	cmp	r1, r2
 800d0f6:	d1f9      	bne.n	800d0ec <memcpy+0xe>
 800d0f8:	bd10      	pop	{r4, pc}
	...

0800d0fc <__assert_func>:
 800d0fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d0fe:	4614      	mov	r4, r2
 800d100:	461a      	mov	r2, r3
 800d102:	4b09      	ldr	r3, [pc, #36]	; (800d128 <__assert_func+0x2c>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	4605      	mov	r5, r0
 800d108:	68d8      	ldr	r0, [r3, #12]
 800d10a:	b14c      	cbz	r4, 800d120 <__assert_func+0x24>
 800d10c:	4b07      	ldr	r3, [pc, #28]	; (800d12c <__assert_func+0x30>)
 800d10e:	9100      	str	r1, [sp, #0]
 800d110:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d114:	4906      	ldr	r1, [pc, #24]	; (800d130 <__assert_func+0x34>)
 800d116:	462b      	mov	r3, r5
 800d118:	f000 fca4 	bl	800da64 <fiprintf>
 800d11c:	f000 fcde 	bl	800dadc <abort>
 800d120:	4b04      	ldr	r3, [pc, #16]	; (800d134 <__assert_func+0x38>)
 800d122:	461c      	mov	r4, r3
 800d124:	e7f3      	b.n	800d10e <__assert_func+0x12>
 800d126:	bf00      	nop
 800d128:	20000080 	.word	0x20000080
 800d12c:	08010723 	.word	0x08010723
 800d130:	08010730 	.word	0x08010730
 800d134:	0801075e 	.word	0x0801075e

0800d138 <_free_r>:
 800d138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d13a:	2900      	cmp	r1, #0
 800d13c:	d044      	beq.n	800d1c8 <_free_r+0x90>
 800d13e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d142:	9001      	str	r0, [sp, #4]
 800d144:	2b00      	cmp	r3, #0
 800d146:	f1a1 0404 	sub.w	r4, r1, #4
 800d14a:	bfb8      	it	lt
 800d14c:	18e4      	addlt	r4, r4, r3
 800d14e:	f000 f8e7 	bl	800d320 <__malloc_lock>
 800d152:	4a1e      	ldr	r2, [pc, #120]	; (800d1cc <_free_r+0x94>)
 800d154:	9801      	ldr	r0, [sp, #4]
 800d156:	6813      	ldr	r3, [r2, #0]
 800d158:	b933      	cbnz	r3, 800d168 <_free_r+0x30>
 800d15a:	6063      	str	r3, [r4, #4]
 800d15c:	6014      	str	r4, [r2, #0]
 800d15e:	b003      	add	sp, #12
 800d160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d164:	f000 b8e2 	b.w	800d32c <__malloc_unlock>
 800d168:	42a3      	cmp	r3, r4
 800d16a:	d908      	bls.n	800d17e <_free_r+0x46>
 800d16c:	6825      	ldr	r5, [r4, #0]
 800d16e:	1961      	adds	r1, r4, r5
 800d170:	428b      	cmp	r3, r1
 800d172:	bf01      	itttt	eq
 800d174:	6819      	ldreq	r1, [r3, #0]
 800d176:	685b      	ldreq	r3, [r3, #4]
 800d178:	1949      	addeq	r1, r1, r5
 800d17a:	6021      	streq	r1, [r4, #0]
 800d17c:	e7ed      	b.n	800d15a <_free_r+0x22>
 800d17e:	461a      	mov	r2, r3
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	b10b      	cbz	r3, 800d188 <_free_r+0x50>
 800d184:	42a3      	cmp	r3, r4
 800d186:	d9fa      	bls.n	800d17e <_free_r+0x46>
 800d188:	6811      	ldr	r1, [r2, #0]
 800d18a:	1855      	adds	r5, r2, r1
 800d18c:	42a5      	cmp	r5, r4
 800d18e:	d10b      	bne.n	800d1a8 <_free_r+0x70>
 800d190:	6824      	ldr	r4, [r4, #0]
 800d192:	4421      	add	r1, r4
 800d194:	1854      	adds	r4, r2, r1
 800d196:	42a3      	cmp	r3, r4
 800d198:	6011      	str	r1, [r2, #0]
 800d19a:	d1e0      	bne.n	800d15e <_free_r+0x26>
 800d19c:	681c      	ldr	r4, [r3, #0]
 800d19e:	685b      	ldr	r3, [r3, #4]
 800d1a0:	6053      	str	r3, [r2, #4]
 800d1a2:	440c      	add	r4, r1
 800d1a4:	6014      	str	r4, [r2, #0]
 800d1a6:	e7da      	b.n	800d15e <_free_r+0x26>
 800d1a8:	d902      	bls.n	800d1b0 <_free_r+0x78>
 800d1aa:	230c      	movs	r3, #12
 800d1ac:	6003      	str	r3, [r0, #0]
 800d1ae:	e7d6      	b.n	800d15e <_free_r+0x26>
 800d1b0:	6825      	ldr	r5, [r4, #0]
 800d1b2:	1961      	adds	r1, r4, r5
 800d1b4:	428b      	cmp	r3, r1
 800d1b6:	bf04      	itt	eq
 800d1b8:	6819      	ldreq	r1, [r3, #0]
 800d1ba:	685b      	ldreq	r3, [r3, #4]
 800d1bc:	6063      	str	r3, [r4, #4]
 800d1be:	bf04      	itt	eq
 800d1c0:	1949      	addeq	r1, r1, r5
 800d1c2:	6021      	streq	r1, [r4, #0]
 800d1c4:	6054      	str	r4, [r2, #4]
 800d1c6:	e7ca      	b.n	800d15e <_free_r+0x26>
 800d1c8:	b003      	add	sp, #12
 800d1ca:	bd30      	pop	{r4, r5, pc}
 800d1cc:	2002d040 	.word	0x2002d040

0800d1d0 <malloc>:
 800d1d0:	4b02      	ldr	r3, [pc, #8]	; (800d1dc <malloc+0xc>)
 800d1d2:	4601      	mov	r1, r0
 800d1d4:	6818      	ldr	r0, [r3, #0]
 800d1d6:	f000 b823 	b.w	800d220 <_malloc_r>
 800d1da:	bf00      	nop
 800d1dc:	20000080 	.word	0x20000080

0800d1e0 <sbrk_aligned>:
 800d1e0:	b570      	push	{r4, r5, r6, lr}
 800d1e2:	4e0e      	ldr	r6, [pc, #56]	; (800d21c <sbrk_aligned+0x3c>)
 800d1e4:	460c      	mov	r4, r1
 800d1e6:	6831      	ldr	r1, [r6, #0]
 800d1e8:	4605      	mov	r5, r0
 800d1ea:	b911      	cbnz	r1, 800d1f2 <sbrk_aligned+0x12>
 800d1ec:	f000 fc66 	bl	800dabc <_sbrk_r>
 800d1f0:	6030      	str	r0, [r6, #0]
 800d1f2:	4621      	mov	r1, r4
 800d1f4:	4628      	mov	r0, r5
 800d1f6:	f000 fc61 	bl	800dabc <_sbrk_r>
 800d1fa:	1c43      	adds	r3, r0, #1
 800d1fc:	d00a      	beq.n	800d214 <sbrk_aligned+0x34>
 800d1fe:	1cc4      	adds	r4, r0, #3
 800d200:	f024 0403 	bic.w	r4, r4, #3
 800d204:	42a0      	cmp	r0, r4
 800d206:	d007      	beq.n	800d218 <sbrk_aligned+0x38>
 800d208:	1a21      	subs	r1, r4, r0
 800d20a:	4628      	mov	r0, r5
 800d20c:	f000 fc56 	bl	800dabc <_sbrk_r>
 800d210:	3001      	adds	r0, #1
 800d212:	d101      	bne.n	800d218 <sbrk_aligned+0x38>
 800d214:	f04f 34ff 	mov.w	r4, #4294967295
 800d218:	4620      	mov	r0, r4
 800d21a:	bd70      	pop	{r4, r5, r6, pc}
 800d21c:	2002d044 	.word	0x2002d044

0800d220 <_malloc_r>:
 800d220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d224:	1ccd      	adds	r5, r1, #3
 800d226:	f025 0503 	bic.w	r5, r5, #3
 800d22a:	3508      	adds	r5, #8
 800d22c:	2d0c      	cmp	r5, #12
 800d22e:	bf38      	it	cc
 800d230:	250c      	movcc	r5, #12
 800d232:	2d00      	cmp	r5, #0
 800d234:	4607      	mov	r7, r0
 800d236:	db01      	blt.n	800d23c <_malloc_r+0x1c>
 800d238:	42a9      	cmp	r1, r5
 800d23a:	d905      	bls.n	800d248 <_malloc_r+0x28>
 800d23c:	230c      	movs	r3, #12
 800d23e:	603b      	str	r3, [r7, #0]
 800d240:	2600      	movs	r6, #0
 800d242:	4630      	mov	r0, r6
 800d244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d248:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d31c <_malloc_r+0xfc>
 800d24c:	f000 f868 	bl	800d320 <__malloc_lock>
 800d250:	f8d8 3000 	ldr.w	r3, [r8]
 800d254:	461c      	mov	r4, r3
 800d256:	bb5c      	cbnz	r4, 800d2b0 <_malloc_r+0x90>
 800d258:	4629      	mov	r1, r5
 800d25a:	4638      	mov	r0, r7
 800d25c:	f7ff ffc0 	bl	800d1e0 <sbrk_aligned>
 800d260:	1c43      	adds	r3, r0, #1
 800d262:	4604      	mov	r4, r0
 800d264:	d155      	bne.n	800d312 <_malloc_r+0xf2>
 800d266:	f8d8 4000 	ldr.w	r4, [r8]
 800d26a:	4626      	mov	r6, r4
 800d26c:	2e00      	cmp	r6, #0
 800d26e:	d145      	bne.n	800d2fc <_malloc_r+0xdc>
 800d270:	2c00      	cmp	r4, #0
 800d272:	d048      	beq.n	800d306 <_malloc_r+0xe6>
 800d274:	6823      	ldr	r3, [r4, #0]
 800d276:	4631      	mov	r1, r6
 800d278:	4638      	mov	r0, r7
 800d27a:	eb04 0903 	add.w	r9, r4, r3
 800d27e:	f000 fc1d 	bl	800dabc <_sbrk_r>
 800d282:	4581      	cmp	r9, r0
 800d284:	d13f      	bne.n	800d306 <_malloc_r+0xe6>
 800d286:	6821      	ldr	r1, [r4, #0]
 800d288:	1a6d      	subs	r5, r5, r1
 800d28a:	4629      	mov	r1, r5
 800d28c:	4638      	mov	r0, r7
 800d28e:	f7ff ffa7 	bl	800d1e0 <sbrk_aligned>
 800d292:	3001      	adds	r0, #1
 800d294:	d037      	beq.n	800d306 <_malloc_r+0xe6>
 800d296:	6823      	ldr	r3, [r4, #0]
 800d298:	442b      	add	r3, r5
 800d29a:	6023      	str	r3, [r4, #0]
 800d29c:	f8d8 3000 	ldr.w	r3, [r8]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d038      	beq.n	800d316 <_malloc_r+0xf6>
 800d2a4:	685a      	ldr	r2, [r3, #4]
 800d2a6:	42a2      	cmp	r2, r4
 800d2a8:	d12b      	bne.n	800d302 <_malloc_r+0xe2>
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	605a      	str	r2, [r3, #4]
 800d2ae:	e00f      	b.n	800d2d0 <_malloc_r+0xb0>
 800d2b0:	6822      	ldr	r2, [r4, #0]
 800d2b2:	1b52      	subs	r2, r2, r5
 800d2b4:	d41f      	bmi.n	800d2f6 <_malloc_r+0xd6>
 800d2b6:	2a0b      	cmp	r2, #11
 800d2b8:	d917      	bls.n	800d2ea <_malloc_r+0xca>
 800d2ba:	1961      	adds	r1, r4, r5
 800d2bc:	42a3      	cmp	r3, r4
 800d2be:	6025      	str	r5, [r4, #0]
 800d2c0:	bf18      	it	ne
 800d2c2:	6059      	strne	r1, [r3, #4]
 800d2c4:	6863      	ldr	r3, [r4, #4]
 800d2c6:	bf08      	it	eq
 800d2c8:	f8c8 1000 	streq.w	r1, [r8]
 800d2cc:	5162      	str	r2, [r4, r5]
 800d2ce:	604b      	str	r3, [r1, #4]
 800d2d0:	4638      	mov	r0, r7
 800d2d2:	f104 060b 	add.w	r6, r4, #11
 800d2d6:	f000 f829 	bl	800d32c <__malloc_unlock>
 800d2da:	f026 0607 	bic.w	r6, r6, #7
 800d2de:	1d23      	adds	r3, r4, #4
 800d2e0:	1af2      	subs	r2, r6, r3
 800d2e2:	d0ae      	beq.n	800d242 <_malloc_r+0x22>
 800d2e4:	1b9b      	subs	r3, r3, r6
 800d2e6:	50a3      	str	r3, [r4, r2]
 800d2e8:	e7ab      	b.n	800d242 <_malloc_r+0x22>
 800d2ea:	42a3      	cmp	r3, r4
 800d2ec:	6862      	ldr	r2, [r4, #4]
 800d2ee:	d1dd      	bne.n	800d2ac <_malloc_r+0x8c>
 800d2f0:	f8c8 2000 	str.w	r2, [r8]
 800d2f4:	e7ec      	b.n	800d2d0 <_malloc_r+0xb0>
 800d2f6:	4623      	mov	r3, r4
 800d2f8:	6864      	ldr	r4, [r4, #4]
 800d2fa:	e7ac      	b.n	800d256 <_malloc_r+0x36>
 800d2fc:	4634      	mov	r4, r6
 800d2fe:	6876      	ldr	r6, [r6, #4]
 800d300:	e7b4      	b.n	800d26c <_malloc_r+0x4c>
 800d302:	4613      	mov	r3, r2
 800d304:	e7cc      	b.n	800d2a0 <_malloc_r+0x80>
 800d306:	230c      	movs	r3, #12
 800d308:	603b      	str	r3, [r7, #0]
 800d30a:	4638      	mov	r0, r7
 800d30c:	f000 f80e 	bl	800d32c <__malloc_unlock>
 800d310:	e797      	b.n	800d242 <_malloc_r+0x22>
 800d312:	6025      	str	r5, [r4, #0]
 800d314:	e7dc      	b.n	800d2d0 <_malloc_r+0xb0>
 800d316:	605b      	str	r3, [r3, #4]
 800d318:	deff      	udf	#255	; 0xff
 800d31a:	bf00      	nop
 800d31c:	2002d040 	.word	0x2002d040

0800d320 <__malloc_lock>:
 800d320:	4801      	ldr	r0, [pc, #4]	; (800d328 <__malloc_lock+0x8>)
 800d322:	f7ff beda 	b.w	800d0da <__retarget_lock_acquire_recursive>
 800d326:	bf00      	nop
 800d328:	2002d03c 	.word	0x2002d03c

0800d32c <__malloc_unlock>:
 800d32c:	4801      	ldr	r0, [pc, #4]	; (800d334 <__malloc_unlock+0x8>)
 800d32e:	f7ff bed5 	b.w	800d0dc <__retarget_lock_release_recursive>
 800d332:	bf00      	nop
 800d334:	2002d03c 	.word	0x2002d03c

0800d338 <__ssputs_r>:
 800d338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d33c:	688e      	ldr	r6, [r1, #8]
 800d33e:	461f      	mov	r7, r3
 800d340:	42be      	cmp	r6, r7
 800d342:	680b      	ldr	r3, [r1, #0]
 800d344:	4682      	mov	sl, r0
 800d346:	460c      	mov	r4, r1
 800d348:	4690      	mov	r8, r2
 800d34a:	d82c      	bhi.n	800d3a6 <__ssputs_r+0x6e>
 800d34c:	898a      	ldrh	r2, [r1, #12]
 800d34e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d352:	d026      	beq.n	800d3a2 <__ssputs_r+0x6a>
 800d354:	6965      	ldr	r5, [r4, #20]
 800d356:	6909      	ldr	r1, [r1, #16]
 800d358:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d35c:	eba3 0901 	sub.w	r9, r3, r1
 800d360:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d364:	1c7b      	adds	r3, r7, #1
 800d366:	444b      	add	r3, r9
 800d368:	106d      	asrs	r5, r5, #1
 800d36a:	429d      	cmp	r5, r3
 800d36c:	bf38      	it	cc
 800d36e:	461d      	movcc	r5, r3
 800d370:	0553      	lsls	r3, r2, #21
 800d372:	d527      	bpl.n	800d3c4 <__ssputs_r+0x8c>
 800d374:	4629      	mov	r1, r5
 800d376:	f7ff ff53 	bl	800d220 <_malloc_r>
 800d37a:	4606      	mov	r6, r0
 800d37c:	b360      	cbz	r0, 800d3d8 <__ssputs_r+0xa0>
 800d37e:	6921      	ldr	r1, [r4, #16]
 800d380:	464a      	mov	r2, r9
 800d382:	f7ff feac 	bl	800d0de <memcpy>
 800d386:	89a3      	ldrh	r3, [r4, #12]
 800d388:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d38c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d390:	81a3      	strh	r3, [r4, #12]
 800d392:	6126      	str	r6, [r4, #16]
 800d394:	6165      	str	r5, [r4, #20]
 800d396:	444e      	add	r6, r9
 800d398:	eba5 0509 	sub.w	r5, r5, r9
 800d39c:	6026      	str	r6, [r4, #0]
 800d39e:	60a5      	str	r5, [r4, #8]
 800d3a0:	463e      	mov	r6, r7
 800d3a2:	42be      	cmp	r6, r7
 800d3a4:	d900      	bls.n	800d3a8 <__ssputs_r+0x70>
 800d3a6:	463e      	mov	r6, r7
 800d3a8:	6820      	ldr	r0, [r4, #0]
 800d3aa:	4632      	mov	r2, r6
 800d3ac:	4641      	mov	r1, r8
 800d3ae:	f000 fb6b 	bl	800da88 <memmove>
 800d3b2:	68a3      	ldr	r3, [r4, #8]
 800d3b4:	1b9b      	subs	r3, r3, r6
 800d3b6:	60a3      	str	r3, [r4, #8]
 800d3b8:	6823      	ldr	r3, [r4, #0]
 800d3ba:	4433      	add	r3, r6
 800d3bc:	6023      	str	r3, [r4, #0]
 800d3be:	2000      	movs	r0, #0
 800d3c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3c4:	462a      	mov	r2, r5
 800d3c6:	f000 fb90 	bl	800daea <_realloc_r>
 800d3ca:	4606      	mov	r6, r0
 800d3cc:	2800      	cmp	r0, #0
 800d3ce:	d1e0      	bne.n	800d392 <__ssputs_r+0x5a>
 800d3d0:	6921      	ldr	r1, [r4, #16]
 800d3d2:	4650      	mov	r0, sl
 800d3d4:	f7ff feb0 	bl	800d138 <_free_r>
 800d3d8:	230c      	movs	r3, #12
 800d3da:	f8ca 3000 	str.w	r3, [sl]
 800d3de:	89a3      	ldrh	r3, [r4, #12]
 800d3e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3e4:	81a3      	strh	r3, [r4, #12]
 800d3e6:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ea:	e7e9      	b.n	800d3c0 <__ssputs_r+0x88>

0800d3ec <_svfiprintf_r>:
 800d3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3f0:	4698      	mov	r8, r3
 800d3f2:	898b      	ldrh	r3, [r1, #12]
 800d3f4:	061b      	lsls	r3, r3, #24
 800d3f6:	b09d      	sub	sp, #116	; 0x74
 800d3f8:	4607      	mov	r7, r0
 800d3fa:	460d      	mov	r5, r1
 800d3fc:	4614      	mov	r4, r2
 800d3fe:	d50e      	bpl.n	800d41e <_svfiprintf_r+0x32>
 800d400:	690b      	ldr	r3, [r1, #16]
 800d402:	b963      	cbnz	r3, 800d41e <_svfiprintf_r+0x32>
 800d404:	2140      	movs	r1, #64	; 0x40
 800d406:	f7ff ff0b 	bl	800d220 <_malloc_r>
 800d40a:	6028      	str	r0, [r5, #0]
 800d40c:	6128      	str	r0, [r5, #16]
 800d40e:	b920      	cbnz	r0, 800d41a <_svfiprintf_r+0x2e>
 800d410:	230c      	movs	r3, #12
 800d412:	603b      	str	r3, [r7, #0]
 800d414:	f04f 30ff 	mov.w	r0, #4294967295
 800d418:	e0d0      	b.n	800d5bc <_svfiprintf_r+0x1d0>
 800d41a:	2340      	movs	r3, #64	; 0x40
 800d41c:	616b      	str	r3, [r5, #20]
 800d41e:	2300      	movs	r3, #0
 800d420:	9309      	str	r3, [sp, #36]	; 0x24
 800d422:	2320      	movs	r3, #32
 800d424:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d428:	f8cd 800c 	str.w	r8, [sp, #12]
 800d42c:	2330      	movs	r3, #48	; 0x30
 800d42e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d5d4 <_svfiprintf_r+0x1e8>
 800d432:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d436:	f04f 0901 	mov.w	r9, #1
 800d43a:	4623      	mov	r3, r4
 800d43c:	469a      	mov	sl, r3
 800d43e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d442:	b10a      	cbz	r2, 800d448 <_svfiprintf_r+0x5c>
 800d444:	2a25      	cmp	r2, #37	; 0x25
 800d446:	d1f9      	bne.n	800d43c <_svfiprintf_r+0x50>
 800d448:	ebba 0b04 	subs.w	fp, sl, r4
 800d44c:	d00b      	beq.n	800d466 <_svfiprintf_r+0x7a>
 800d44e:	465b      	mov	r3, fp
 800d450:	4622      	mov	r2, r4
 800d452:	4629      	mov	r1, r5
 800d454:	4638      	mov	r0, r7
 800d456:	f7ff ff6f 	bl	800d338 <__ssputs_r>
 800d45a:	3001      	adds	r0, #1
 800d45c:	f000 80a9 	beq.w	800d5b2 <_svfiprintf_r+0x1c6>
 800d460:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d462:	445a      	add	r2, fp
 800d464:	9209      	str	r2, [sp, #36]	; 0x24
 800d466:	f89a 3000 	ldrb.w	r3, [sl]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	f000 80a1 	beq.w	800d5b2 <_svfiprintf_r+0x1c6>
 800d470:	2300      	movs	r3, #0
 800d472:	f04f 32ff 	mov.w	r2, #4294967295
 800d476:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d47a:	f10a 0a01 	add.w	sl, sl, #1
 800d47e:	9304      	str	r3, [sp, #16]
 800d480:	9307      	str	r3, [sp, #28]
 800d482:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d486:	931a      	str	r3, [sp, #104]	; 0x68
 800d488:	4654      	mov	r4, sl
 800d48a:	2205      	movs	r2, #5
 800d48c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d490:	4850      	ldr	r0, [pc, #320]	; (800d5d4 <_svfiprintf_r+0x1e8>)
 800d492:	f7f2 fefd 	bl	8000290 <memchr>
 800d496:	9a04      	ldr	r2, [sp, #16]
 800d498:	b9d8      	cbnz	r0, 800d4d2 <_svfiprintf_r+0xe6>
 800d49a:	06d0      	lsls	r0, r2, #27
 800d49c:	bf44      	itt	mi
 800d49e:	2320      	movmi	r3, #32
 800d4a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4a4:	0711      	lsls	r1, r2, #28
 800d4a6:	bf44      	itt	mi
 800d4a8:	232b      	movmi	r3, #43	; 0x2b
 800d4aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4ae:	f89a 3000 	ldrb.w	r3, [sl]
 800d4b2:	2b2a      	cmp	r3, #42	; 0x2a
 800d4b4:	d015      	beq.n	800d4e2 <_svfiprintf_r+0xf6>
 800d4b6:	9a07      	ldr	r2, [sp, #28]
 800d4b8:	4654      	mov	r4, sl
 800d4ba:	2000      	movs	r0, #0
 800d4bc:	f04f 0c0a 	mov.w	ip, #10
 800d4c0:	4621      	mov	r1, r4
 800d4c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4c6:	3b30      	subs	r3, #48	; 0x30
 800d4c8:	2b09      	cmp	r3, #9
 800d4ca:	d94d      	bls.n	800d568 <_svfiprintf_r+0x17c>
 800d4cc:	b1b0      	cbz	r0, 800d4fc <_svfiprintf_r+0x110>
 800d4ce:	9207      	str	r2, [sp, #28]
 800d4d0:	e014      	b.n	800d4fc <_svfiprintf_r+0x110>
 800d4d2:	eba0 0308 	sub.w	r3, r0, r8
 800d4d6:	fa09 f303 	lsl.w	r3, r9, r3
 800d4da:	4313      	orrs	r3, r2
 800d4dc:	9304      	str	r3, [sp, #16]
 800d4de:	46a2      	mov	sl, r4
 800d4e0:	e7d2      	b.n	800d488 <_svfiprintf_r+0x9c>
 800d4e2:	9b03      	ldr	r3, [sp, #12]
 800d4e4:	1d19      	adds	r1, r3, #4
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	9103      	str	r1, [sp, #12]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	bfbb      	ittet	lt
 800d4ee:	425b      	neglt	r3, r3
 800d4f0:	f042 0202 	orrlt.w	r2, r2, #2
 800d4f4:	9307      	strge	r3, [sp, #28]
 800d4f6:	9307      	strlt	r3, [sp, #28]
 800d4f8:	bfb8      	it	lt
 800d4fa:	9204      	strlt	r2, [sp, #16]
 800d4fc:	7823      	ldrb	r3, [r4, #0]
 800d4fe:	2b2e      	cmp	r3, #46	; 0x2e
 800d500:	d10c      	bne.n	800d51c <_svfiprintf_r+0x130>
 800d502:	7863      	ldrb	r3, [r4, #1]
 800d504:	2b2a      	cmp	r3, #42	; 0x2a
 800d506:	d134      	bne.n	800d572 <_svfiprintf_r+0x186>
 800d508:	9b03      	ldr	r3, [sp, #12]
 800d50a:	1d1a      	adds	r2, r3, #4
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	9203      	str	r2, [sp, #12]
 800d510:	2b00      	cmp	r3, #0
 800d512:	bfb8      	it	lt
 800d514:	f04f 33ff 	movlt.w	r3, #4294967295
 800d518:	3402      	adds	r4, #2
 800d51a:	9305      	str	r3, [sp, #20]
 800d51c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d5e4 <_svfiprintf_r+0x1f8>
 800d520:	7821      	ldrb	r1, [r4, #0]
 800d522:	2203      	movs	r2, #3
 800d524:	4650      	mov	r0, sl
 800d526:	f7f2 feb3 	bl	8000290 <memchr>
 800d52a:	b138      	cbz	r0, 800d53c <_svfiprintf_r+0x150>
 800d52c:	9b04      	ldr	r3, [sp, #16]
 800d52e:	eba0 000a 	sub.w	r0, r0, sl
 800d532:	2240      	movs	r2, #64	; 0x40
 800d534:	4082      	lsls	r2, r0
 800d536:	4313      	orrs	r3, r2
 800d538:	3401      	adds	r4, #1
 800d53a:	9304      	str	r3, [sp, #16]
 800d53c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d540:	4825      	ldr	r0, [pc, #148]	; (800d5d8 <_svfiprintf_r+0x1ec>)
 800d542:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d546:	2206      	movs	r2, #6
 800d548:	f7f2 fea2 	bl	8000290 <memchr>
 800d54c:	2800      	cmp	r0, #0
 800d54e:	d038      	beq.n	800d5c2 <_svfiprintf_r+0x1d6>
 800d550:	4b22      	ldr	r3, [pc, #136]	; (800d5dc <_svfiprintf_r+0x1f0>)
 800d552:	bb1b      	cbnz	r3, 800d59c <_svfiprintf_r+0x1b0>
 800d554:	9b03      	ldr	r3, [sp, #12]
 800d556:	3307      	adds	r3, #7
 800d558:	f023 0307 	bic.w	r3, r3, #7
 800d55c:	3308      	adds	r3, #8
 800d55e:	9303      	str	r3, [sp, #12]
 800d560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d562:	4433      	add	r3, r6
 800d564:	9309      	str	r3, [sp, #36]	; 0x24
 800d566:	e768      	b.n	800d43a <_svfiprintf_r+0x4e>
 800d568:	fb0c 3202 	mla	r2, ip, r2, r3
 800d56c:	460c      	mov	r4, r1
 800d56e:	2001      	movs	r0, #1
 800d570:	e7a6      	b.n	800d4c0 <_svfiprintf_r+0xd4>
 800d572:	2300      	movs	r3, #0
 800d574:	3401      	adds	r4, #1
 800d576:	9305      	str	r3, [sp, #20]
 800d578:	4619      	mov	r1, r3
 800d57a:	f04f 0c0a 	mov.w	ip, #10
 800d57e:	4620      	mov	r0, r4
 800d580:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d584:	3a30      	subs	r2, #48	; 0x30
 800d586:	2a09      	cmp	r2, #9
 800d588:	d903      	bls.n	800d592 <_svfiprintf_r+0x1a6>
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d0c6      	beq.n	800d51c <_svfiprintf_r+0x130>
 800d58e:	9105      	str	r1, [sp, #20]
 800d590:	e7c4      	b.n	800d51c <_svfiprintf_r+0x130>
 800d592:	fb0c 2101 	mla	r1, ip, r1, r2
 800d596:	4604      	mov	r4, r0
 800d598:	2301      	movs	r3, #1
 800d59a:	e7f0      	b.n	800d57e <_svfiprintf_r+0x192>
 800d59c:	ab03      	add	r3, sp, #12
 800d59e:	9300      	str	r3, [sp, #0]
 800d5a0:	462a      	mov	r2, r5
 800d5a2:	4b0f      	ldr	r3, [pc, #60]	; (800d5e0 <_svfiprintf_r+0x1f4>)
 800d5a4:	a904      	add	r1, sp, #16
 800d5a6:	4638      	mov	r0, r7
 800d5a8:	f3af 8000 	nop.w
 800d5ac:	1c42      	adds	r2, r0, #1
 800d5ae:	4606      	mov	r6, r0
 800d5b0:	d1d6      	bne.n	800d560 <_svfiprintf_r+0x174>
 800d5b2:	89ab      	ldrh	r3, [r5, #12]
 800d5b4:	065b      	lsls	r3, r3, #25
 800d5b6:	f53f af2d 	bmi.w	800d414 <_svfiprintf_r+0x28>
 800d5ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5bc:	b01d      	add	sp, #116	; 0x74
 800d5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5c2:	ab03      	add	r3, sp, #12
 800d5c4:	9300      	str	r3, [sp, #0]
 800d5c6:	462a      	mov	r2, r5
 800d5c8:	4b05      	ldr	r3, [pc, #20]	; (800d5e0 <_svfiprintf_r+0x1f4>)
 800d5ca:	a904      	add	r1, sp, #16
 800d5cc:	4638      	mov	r0, r7
 800d5ce:	f000 f879 	bl	800d6c4 <_printf_i>
 800d5d2:	e7eb      	b.n	800d5ac <_svfiprintf_r+0x1c0>
 800d5d4:	0801075f 	.word	0x0801075f
 800d5d8:	08010769 	.word	0x08010769
 800d5dc:	00000000 	.word	0x00000000
 800d5e0:	0800d339 	.word	0x0800d339
 800d5e4:	08010765 	.word	0x08010765

0800d5e8 <_printf_common>:
 800d5e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5ec:	4616      	mov	r6, r2
 800d5ee:	4699      	mov	r9, r3
 800d5f0:	688a      	ldr	r2, [r1, #8]
 800d5f2:	690b      	ldr	r3, [r1, #16]
 800d5f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d5f8:	4293      	cmp	r3, r2
 800d5fa:	bfb8      	it	lt
 800d5fc:	4613      	movlt	r3, r2
 800d5fe:	6033      	str	r3, [r6, #0]
 800d600:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d604:	4607      	mov	r7, r0
 800d606:	460c      	mov	r4, r1
 800d608:	b10a      	cbz	r2, 800d60e <_printf_common+0x26>
 800d60a:	3301      	adds	r3, #1
 800d60c:	6033      	str	r3, [r6, #0]
 800d60e:	6823      	ldr	r3, [r4, #0]
 800d610:	0699      	lsls	r1, r3, #26
 800d612:	bf42      	ittt	mi
 800d614:	6833      	ldrmi	r3, [r6, #0]
 800d616:	3302      	addmi	r3, #2
 800d618:	6033      	strmi	r3, [r6, #0]
 800d61a:	6825      	ldr	r5, [r4, #0]
 800d61c:	f015 0506 	ands.w	r5, r5, #6
 800d620:	d106      	bne.n	800d630 <_printf_common+0x48>
 800d622:	f104 0a19 	add.w	sl, r4, #25
 800d626:	68e3      	ldr	r3, [r4, #12]
 800d628:	6832      	ldr	r2, [r6, #0]
 800d62a:	1a9b      	subs	r3, r3, r2
 800d62c:	42ab      	cmp	r3, r5
 800d62e:	dc26      	bgt.n	800d67e <_printf_common+0x96>
 800d630:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d634:	1e13      	subs	r3, r2, #0
 800d636:	6822      	ldr	r2, [r4, #0]
 800d638:	bf18      	it	ne
 800d63a:	2301      	movne	r3, #1
 800d63c:	0692      	lsls	r2, r2, #26
 800d63e:	d42b      	bmi.n	800d698 <_printf_common+0xb0>
 800d640:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d644:	4649      	mov	r1, r9
 800d646:	4638      	mov	r0, r7
 800d648:	47c0      	blx	r8
 800d64a:	3001      	adds	r0, #1
 800d64c:	d01e      	beq.n	800d68c <_printf_common+0xa4>
 800d64e:	6823      	ldr	r3, [r4, #0]
 800d650:	6922      	ldr	r2, [r4, #16]
 800d652:	f003 0306 	and.w	r3, r3, #6
 800d656:	2b04      	cmp	r3, #4
 800d658:	bf02      	ittt	eq
 800d65a:	68e5      	ldreq	r5, [r4, #12]
 800d65c:	6833      	ldreq	r3, [r6, #0]
 800d65e:	1aed      	subeq	r5, r5, r3
 800d660:	68a3      	ldr	r3, [r4, #8]
 800d662:	bf0c      	ite	eq
 800d664:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d668:	2500      	movne	r5, #0
 800d66a:	4293      	cmp	r3, r2
 800d66c:	bfc4      	itt	gt
 800d66e:	1a9b      	subgt	r3, r3, r2
 800d670:	18ed      	addgt	r5, r5, r3
 800d672:	2600      	movs	r6, #0
 800d674:	341a      	adds	r4, #26
 800d676:	42b5      	cmp	r5, r6
 800d678:	d11a      	bne.n	800d6b0 <_printf_common+0xc8>
 800d67a:	2000      	movs	r0, #0
 800d67c:	e008      	b.n	800d690 <_printf_common+0xa8>
 800d67e:	2301      	movs	r3, #1
 800d680:	4652      	mov	r2, sl
 800d682:	4649      	mov	r1, r9
 800d684:	4638      	mov	r0, r7
 800d686:	47c0      	blx	r8
 800d688:	3001      	adds	r0, #1
 800d68a:	d103      	bne.n	800d694 <_printf_common+0xac>
 800d68c:	f04f 30ff 	mov.w	r0, #4294967295
 800d690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d694:	3501      	adds	r5, #1
 800d696:	e7c6      	b.n	800d626 <_printf_common+0x3e>
 800d698:	18e1      	adds	r1, r4, r3
 800d69a:	1c5a      	adds	r2, r3, #1
 800d69c:	2030      	movs	r0, #48	; 0x30
 800d69e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d6a2:	4422      	add	r2, r4
 800d6a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d6a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d6ac:	3302      	adds	r3, #2
 800d6ae:	e7c7      	b.n	800d640 <_printf_common+0x58>
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	4622      	mov	r2, r4
 800d6b4:	4649      	mov	r1, r9
 800d6b6:	4638      	mov	r0, r7
 800d6b8:	47c0      	blx	r8
 800d6ba:	3001      	adds	r0, #1
 800d6bc:	d0e6      	beq.n	800d68c <_printf_common+0xa4>
 800d6be:	3601      	adds	r6, #1
 800d6c0:	e7d9      	b.n	800d676 <_printf_common+0x8e>
	...

0800d6c4 <_printf_i>:
 800d6c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d6c8:	7e0f      	ldrb	r7, [r1, #24]
 800d6ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d6cc:	2f78      	cmp	r7, #120	; 0x78
 800d6ce:	4691      	mov	r9, r2
 800d6d0:	4680      	mov	r8, r0
 800d6d2:	460c      	mov	r4, r1
 800d6d4:	469a      	mov	sl, r3
 800d6d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d6da:	d807      	bhi.n	800d6ec <_printf_i+0x28>
 800d6dc:	2f62      	cmp	r7, #98	; 0x62
 800d6de:	d80a      	bhi.n	800d6f6 <_printf_i+0x32>
 800d6e0:	2f00      	cmp	r7, #0
 800d6e2:	f000 80d4 	beq.w	800d88e <_printf_i+0x1ca>
 800d6e6:	2f58      	cmp	r7, #88	; 0x58
 800d6e8:	f000 80c0 	beq.w	800d86c <_printf_i+0x1a8>
 800d6ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d6f4:	e03a      	b.n	800d76c <_printf_i+0xa8>
 800d6f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d6fa:	2b15      	cmp	r3, #21
 800d6fc:	d8f6      	bhi.n	800d6ec <_printf_i+0x28>
 800d6fe:	a101      	add	r1, pc, #4	; (adr r1, 800d704 <_printf_i+0x40>)
 800d700:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d704:	0800d75d 	.word	0x0800d75d
 800d708:	0800d771 	.word	0x0800d771
 800d70c:	0800d6ed 	.word	0x0800d6ed
 800d710:	0800d6ed 	.word	0x0800d6ed
 800d714:	0800d6ed 	.word	0x0800d6ed
 800d718:	0800d6ed 	.word	0x0800d6ed
 800d71c:	0800d771 	.word	0x0800d771
 800d720:	0800d6ed 	.word	0x0800d6ed
 800d724:	0800d6ed 	.word	0x0800d6ed
 800d728:	0800d6ed 	.word	0x0800d6ed
 800d72c:	0800d6ed 	.word	0x0800d6ed
 800d730:	0800d875 	.word	0x0800d875
 800d734:	0800d79d 	.word	0x0800d79d
 800d738:	0800d82f 	.word	0x0800d82f
 800d73c:	0800d6ed 	.word	0x0800d6ed
 800d740:	0800d6ed 	.word	0x0800d6ed
 800d744:	0800d897 	.word	0x0800d897
 800d748:	0800d6ed 	.word	0x0800d6ed
 800d74c:	0800d79d 	.word	0x0800d79d
 800d750:	0800d6ed 	.word	0x0800d6ed
 800d754:	0800d6ed 	.word	0x0800d6ed
 800d758:	0800d837 	.word	0x0800d837
 800d75c:	682b      	ldr	r3, [r5, #0]
 800d75e:	1d1a      	adds	r2, r3, #4
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	602a      	str	r2, [r5, #0]
 800d764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d768:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d76c:	2301      	movs	r3, #1
 800d76e:	e09f      	b.n	800d8b0 <_printf_i+0x1ec>
 800d770:	6820      	ldr	r0, [r4, #0]
 800d772:	682b      	ldr	r3, [r5, #0]
 800d774:	0607      	lsls	r7, r0, #24
 800d776:	f103 0104 	add.w	r1, r3, #4
 800d77a:	6029      	str	r1, [r5, #0]
 800d77c:	d501      	bpl.n	800d782 <_printf_i+0xbe>
 800d77e:	681e      	ldr	r6, [r3, #0]
 800d780:	e003      	b.n	800d78a <_printf_i+0xc6>
 800d782:	0646      	lsls	r6, r0, #25
 800d784:	d5fb      	bpl.n	800d77e <_printf_i+0xba>
 800d786:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d78a:	2e00      	cmp	r6, #0
 800d78c:	da03      	bge.n	800d796 <_printf_i+0xd2>
 800d78e:	232d      	movs	r3, #45	; 0x2d
 800d790:	4276      	negs	r6, r6
 800d792:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d796:	485a      	ldr	r0, [pc, #360]	; (800d900 <_printf_i+0x23c>)
 800d798:	230a      	movs	r3, #10
 800d79a:	e012      	b.n	800d7c2 <_printf_i+0xfe>
 800d79c:	682b      	ldr	r3, [r5, #0]
 800d79e:	6820      	ldr	r0, [r4, #0]
 800d7a0:	1d19      	adds	r1, r3, #4
 800d7a2:	6029      	str	r1, [r5, #0]
 800d7a4:	0605      	lsls	r5, r0, #24
 800d7a6:	d501      	bpl.n	800d7ac <_printf_i+0xe8>
 800d7a8:	681e      	ldr	r6, [r3, #0]
 800d7aa:	e002      	b.n	800d7b2 <_printf_i+0xee>
 800d7ac:	0641      	lsls	r1, r0, #25
 800d7ae:	d5fb      	bpl.n	800d7a8 <_printf_i+0xe4>
 800d7b0:	881e      	ldrh	r6, [r3, #0]
 800d7b2:	4853      	ldr	r0, [pc, #332]	; (800d900 <_printf_i+0x23c>)
 800d7b4:	2f6f      	cmp	r7, #111	; 0x6f
 800d7b6:	bf0c      	ite	eq
 800d7b8:	2308      	moveq	r3, #8
 800d7ba:	230a      	movne	r3, #10
 800d7bc:	2100      	movs	r1, #0
 800d7be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d7c2:	6865      	ldr	r5, [r4, #4]
 800d7c4:	60a5      	str	r5, [r4, #8]
 800d7c6:	2d00      	cmp	r5, #0
 800d7c8:	bfa2      	ittt	ge
 800d7ca:	6821      	ldrge	r1, [r4, #0]
 800d7cc:	f021 0104 	bicge.w	r1, r1, #4
 800d7d0:	6021      	strge	r1, [r4, #0]
 800d7d2:	b90e      	cbnz	r6, 800d7d8 <_printf_i+0x114>
 800d7d4:	2d00      	cmp	r5, #0
 800d7d6:	d04b      	beq.n	800d870 <_printf_i+0x1ac>
 800d7d8:	4615      	mov	r5, r2
 800d7da:	fbb6 f1f3 	udiv	r1, r6, r3
 800d7de:	fb03 6711 	mls	r7, r3, r1, r6
 800d7e2:	5dc7      	ldrb	r7, [r0, r7]
 800d7e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d7e8:	4637      	mov	r7, r6
 800d7ea:	42bb      	cmp	r3, r7
 800d7ec:	460e      	mov	r6, r1
 800d7ee:	d9f4      	bls.n	800d7da <_printf_i+0x116>
 800d7f0:	2b08      	cmp	r3, #8
 800d7f2:	d10b      	bne.n	800d80c <_printf_i+0x148>
 800d7f4:	6823      	ldr	r3, [r4, #0]
 800d7f6:	07de      	lsls	r6, r3, #31
 800d7f8:	d508      	bpl.n	800d80c <_printf_i+0x148>
 800d7fa:	6923      	ldr	r3, [r4, #16]
 800d7fc:	6861      	ldr	r1, [r4, #4]
 800d7fe:	4299      	cmp	r1, r3
 800d800:	bfde      	ittt	le
 800d802:	2330      	movle	r3, #48	; 0x30
 800d804:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d808:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d80c:	1b52      	subs	r2, r2, r5
 800d80e:	6122      	str	r2, [r4, #16]
 800d810:	f8cd a000 	str.w	sl, [sp]
 800d814:	464b      	mov	r3, r9
 800d816:	aa03      	add	r2, sp, #12
 800d818:	4621      	mov	r1, r4
 800d81a:	4640      	mov	r0, r8
 800d81c:	f7ff fee4 	bl	800d5e8 <_printf_common>
 800d820:	3001      	adds	r0, #1
 800d822:	d14a      	bne.n	800d8ba <_printf_i+0x1f6>
 800d824:	f04f 30ff 	mov.w	r0, #4294967295
 800d828:	b004      	add	sp, #16
 800d82a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d82e:	6823      	ldr	r3, [r4, #0]
 800d830:	f043 0320 	orr.w	r3, r3, #32
 800d834:	6023      	str	r3, [r4, #0]
 800d836:	4833      	ldr	r0, [pc, #204]	; (800d904 <_printf_i+0x240>)
 800d838:	2778      	movs	r7, #120	; 0x78
 800d83a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d83e:	6823      	ldr	r3, [r4, #0]
 800d840:	6829      	ldr	r1, [r5, #0]
 800d842:	061f      	lsls	r7, r3, #24
 800d844:	f851 6b04 	ldr.w	r6, [r1], #4
 800d848:	d402      	bmi.n	800d850 <_printf_i+0x18c>
 800d84a:	065f      	lsls	r7, r3, #25
 800d84c:	bf48      	it	mi
 800d84e:	b2b6      	uxthmi	r6, r6
 800d850:	07df      	lsls	r7, r3, #31
 800d852:	bf48      	it	mi
 800d854:	f043 0320 	orrmi.w	r3, r3, #32
 800d858:	6029      	str	r1, [r5, #0]
 800d85a:	bf48      	it	mi
 800d85c:	6023      	strmi	r3, [r4, #0]
 800d85e:	b91e      	cbnz	r6, 800d868 <_printf_i+0x1a4>
 800d860:	6823      	ldr	r3, [r4, #0]
 800d862:	f023 0320 	bic.w	r3, r3, #32
 800d866:	6023      	str	r3, [r4, #0]
 800d868:	2310      	movs	r3, #16
 800d86a:	e7a7      	b.n	800d7bc <_printf_i+0xf8>
 800d86c:	4824      	ldr	r0, [pc, #144]	; (800d900 <_printf_i+0x23c>)
 800d86e:	e7e4      	b.n	800d83a <_printf_i+0x176>
 800d870:	4615      	mov	r5, r2
 800d872:	e7bd      	b.n	800d7f0 <_printf_i+0x12c>
 800d874:	682b      	ldr	r3, [r5, #0]
 800d876:	6826      	ldr	r6, [r4, #0]
 800d878:	6961      	ldr	r1, [r4, #20]
 800d87a:	1d18      	adds	r0, r3, #4
 800d87c:	6028      	str	r0, [r5, #0]
 800d87e:	0635      	lsls	r5, r6, #24
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	d501      	bpl.n	800d888 <_printf_i+0x1c4>
 800d884:	6019      	str	r1, [r3, #0]
 800d886:	e002      	b.n	800d88e <_printf_i+0x1ca>
 800d888:	0670      	lsls	r0, r6, #25
 800d88a:	d5fb      	bpl.n	800d884 <_printf_i+0x1c0>
 800d88c:	8019      	strh	r1, [r3, #0]
 800d88e:	2300      	movs	r3, #0
 800d890:	6123      	str	r3, [r4, #16]
 800d892:	4615      	mov	r5, r2
 800d894:	e7bc      	b.n	800d810 <_printf_i+0x14c>
 800d896:	682b      	ldr	r3, [r5, #0]
 800d898:	1d1a      	adds	r2, r3, #4
 800d89a:	602a      	str	r2, [r5, #0]
 800d89c:	681d      	ldr	r5, [r3, #0]
 800d89e:	6862      	ldr	r2, [r4, #4]
 800d8a0:	2100      	movs	r1, #0
 800d8a2:	4628      	mov	r0, r5
 800d8a4:	f7f2 fcf4 	bl	8000290 <memchr>
 800d8a8:	b108      	cbz	r0, 800d8ae <_printf_i+0x1ea>
 800d8aa:	1b40      	subs	r0, r0, r5
 800d8ac:	6060      	str	r0, [r4, #4]
 800d8ae:	6863      	ldr	r3, [r4, #4]
 800d8b0:	6123      	str	r3, [r4, #16]
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8b8:	e7aa      	b.n	800d810 <_printf_i+0x14c>
 800d8ba:	6923      	ldr	r3, [r4, #16]
 800d8bc:	462a      	mov	r2, r5
 800d8be:	4649      	mov	r1, r9
 800d8c0:	4640      	mov	r0, r8
 800d8c2:	47d0      	blx	sl
 800d8c4:	3001      	adds	r0, #1
 800d8c6:	d0ad      	beq.n	800d824 <_printf_i+0x160>
 800d8c8:	6823      	ldr	r3, [r4, #0]
 800d8ca:	079b      	lsls	r3, r3, #30
 800d8cc:	d413      	bmi.n	800d8f6 <_printf_i+0x232>
 800d8ce:	68e0      	ldr	r0, [r4, #12]
 800d8d0:	9b03      	ldr	r3, [sp, #12]
 800d8d2:	4298      	cmp	r0, r3
 800d8d4:	bfb8      	it	lt
 800d8d6:	4618      	movlt	r0, r3
 800d8d8:	e7a6      	b.n	800d828 <_printf_i+0x164>
 800d8da:	2301      	movs	r3, #1
 800d8dc:	4632      	mov	r2, r6
 800d8de:	4649      	mov	r1, r9
 800d8e0:	4640      	mov	r0, r8
 800d8e2:	47d0      	blx	sl
 800d8e4:	3001      	adds	r0, #1
 800d8e6:	d09d      	beq.n	800d824 <_printf_i+0x160>
 800d8e8:	3501      	adds	r5, #1
 800d8ea:	68e3      	ldr	r3, [r4, #12]
 800d8ec:	9903      	ldr	r1, [sp, #12]
 800d8ee:	1a5b      	subs	r3, r3, r1
 800d8f0:	42ab      	cmp	r3, r5
 800d8f2:	dcf2      	bgt.n	800d8da <_printf_i+0x216>
 800d8f4:	e7eb      	b.n	800d8ce <_printf_i+0x20a>
 800d8f6:	2500      	movs	r5, #0
 800d8f8:	f104 0619 	add.w	r6, r4, #25
 800d8fc:	e7f5      	b.n	800d8ea <_printf_i+0x226>
 800d8fe:	bf00      	nop
 800d900:	08010770 	.word	0x08010770
 800d904:	08010781 	.word	0x08010781

0800d908 <__sflush_r>:
 800d908:	898a      	ldrh	r2, [r1, #12]
 800d90a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d90e:	4605      	mov	r5, r0
 800d910:	0710      	lsls	r0, r2, #28
 800d912:	460c      	mov	r4, r1
 800d914:	d458      	bmi.n	800d9c8 <__sflush_r+0xc0>
 800d916:	684b      	ldr	r3, [r1, #4]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	dc05      	bgt.n	800d928 <__sflush_r+0x20>
 800d91c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d91e:	2b00      	cmp	r3, #0
 800d920:	dc02      	bgt.n	800d928 <__sflush_r+0x20>
 800d922:	2000      	movs	r0, #0
 800d924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d928:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d92a:	2e00      	cmp	r6, #0
 800d92c:	d0f9      	beq.n	800d922 <__sflush_r+0x1a>
 800d92e:	2300      	movs	r3, #0
 800d930:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d934:	682f      	ldr	r7, [r5, #0]
 800d936:	6a21      	ldr	r1, [r4, #32]
 800d938:	602b      	str	r3, [r5, #0]
 800d93a:	d032      	beq.n	800d9a2 <__sflush_r+0x9a>
 800d93c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d93e:	89a3      	ldrh	r3, [r4, #12]
 800d940:	075a      	lsls	r2, r3, #29
 800d942:	d505      	bpl.n	800d950 <__sflush_r+0x48>
 800d944:	6863      	ldr	r3, [r4, #4]
 800d946:	1ac0      	subs	r0, r0, r3
 800d948:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d94a:	b10b      	cbz	r3, 800d950 <__sflush_r+0x48>
 800d94c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d94e:	1ac0      	subs	r0, r0, r3
 800d950:	2300      	movs	r3, #0
 800d952:	4602      	mov	r2, r0
 800d954:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d956:	6a21      	ldr	r1, [r4, #32]
 800d958:	4628      	mov	r0, r5
 800d95a:	47b0      	blx	r6
 800d95c:	1c43      	adds	r3, r0, #1
 800d95e:	89a3      	ldrh	r3, [r4, #12]
 800d960:	d106      	bne.n	800d970 <__sflush_r+0x68>
 800d962:	6829      	ldr	r1, [r5, #0]
 800d964:	291d      	cmp	r1, #29
 800d966:	d82b      	bhi.n	800d9c0 <__sflush_r+0xb8>
 800d968:	4a29      	ldr	r2, [pc, #164]	; (800da10 <__sflush_r+0x108>)
 800d96a:	410a      	asrs	r2, r1
 800d96c:	07d6      	lsls	r6, r2, #31
 800d96e:	d427      	bmi.n	800d9c0 <__sflush_r+0xb8>
 800d970:	2200      	movs	r2, #0
 800d972:	6062      	str	r2, [r4, #4]
 800d974:	04d9      	lsls	r1, r3, #19
 800d976:	6922      	ldr	r2, [r4, #16]
 800d978:	6022      	str	r2, [r4, #0]
 800d97a:	d504      	bpl.n	800d986 <__sflush_r+0x7e>
 800d97c:	1c42      	adds	r2, r0, #1
 800d97e:	d101      	bne.n	800d984 <__sflush_r+0x7c>
 800d980:	682b      	ldr	r3, [r5, #0]
 800d982:	b903      	cbnz	r3, 800d986 <__sflush_r+0x7e>
 800d984:	6560      	str	r0, [r4, #84]	; 0x54
 800d986:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d988:	602f      	str	r7, [r5, #0]
 800d98a:	2900      	cmp	r1, #0
 800d98c:	d0c9      	beq.n	800d922 <__sflush_r+0x1a>
 800d98e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d992:	4299      	cmp	r1, r3
 800d994:	d002      	beq.n	800d99c <__sflush_r+0x94>
 800d996:	4628      	mov	r0, r5
 800d998:	f7ff fbce 	bl	800d138 <_free_r>
 800d99c:	2000      	movs	r0, #0
 800d99e:	6360      	str	r0, [r4, #52]	; 0x34
 800d9a0:	e7c0      	b.n	800d924 <__sflush_r+0x1c>
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	4628      	mov	r0, r5
 800d9a6:	47b0      	blx	r6
 800d9a8:	1c41      	adds	r1, r0, #1
 800d9aa:	d1c8      	bne.n	800d93e <__sflush_r+0x36>
 800d9ac:	682b      	ldr	r3, [r5, #0]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d0c5      	beq.n	800d93e <__sflush_r+0x36>
 800d9b2:	2b1d      	cmp	r3, #29
 800d9b4:	d001      	beq.n	800d9ba <__sflush_r+0xb2>
 800d9b6:	2b16      	cmp	r3, #22
 800d9b8:	d101      	bne.n	800d9be <__sflush_r+0xb6>
 800d9ba:	602f      	str	r7, [r5, #0]
 800d9bc:	e7b1      	b.n	800d922 <__sflush_r+0x1a>
 800d9be:	89a3      	ldrh	r3, [r4, #12]
 800d9c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9c4:	81a3      	strh	r3, [r4, #12]
 800d9c6:	e7ad      	b.n	800d924 <__sflush_r+0x1c>
 800d9c8:	690f      	ldr	r7, [r1, #16]
 800d9ca:	2f00      	cmp	r7, #0
 800d9cc:	d0a9      	beq.n	800d922 <__sflush_r+0x1a>
 800d9ce:	0793      	lsls	r3, r2, #30
 800d9d0:	680e      	ldr	r6, [r1, #0]
 800d9d2:	bf08      	it	eq
 800d9d4:	694b      	ldreq	r3, [r1, #20]
 800d9d6:	600f      	str	r7, [r1, #0]
 800d9d8:	bf18      	it	ne
 800d9da:	2300      	movne	r3, #0
 800d9dc:	eba6 0807 	sub.w	r8, r6, r7
 800d9e0:	608b      	str	r3, [r1, #8]
 800d9e2:	f1b8 0f00 	cmp.w	r8, #0
 800d9e6:	dd9c      	ble.n	800d922 <__sflush_r+0x1a>
 800d9e8:	6a21      	ldr	r1, [r4, #32]
 800d9ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d9ec:	4643      	mov	r3, r8
 800d9ee:	463a      	mov	r2, r7
 800d9f0:	4628      	mov	r0, r5
 800d9f2:	47b0      	blx	r6
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	dc06      	bgt.n	800da06 <__sflush_r+0xfe>
 800d9f8:	89a3      	ldrh	r3, [r4, #12]
 800d9fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9fe:	81a3      	strh	r3, [r4, #12]
 800da00:	f04f 30ff 	mov.w	r0, #4294967295
 800da04:	e78e      	b.n	800d924 <__sflush_r+0x1c>
 800da06:	4407      	add	r7, r0
 800da08:	eba8 0800 	sub.w	r8, r8, r0
 800da0c:	e7e9      	b.n	800d9e2 <__sflush_r+0xda>
 800da0e:	bf00      	nop
 800da10:	dfbffffe 	.word	0xdfbffffe

0800da14 <_fflush_r>:
 800da14:	b538      	push	{r3, r4, r5, lr}
 800da16:	690b      	ldr	r3, [r1, #16]
 800da18:	4605      	mov	r5, r0
 800da1a:	460c      	mov	r4, r1
 800da1c:	b913      	cbnz	r3, 800da24 <_fflush_r+0x10>
 800da1e:	2500      	movs	r5, #0
 800da20:	4628      	mov	r0, r5
 800da22:	bd38      	pop	{r3, r4, r5, pc}
 800da24:	b118      	cbz	r0, 800da2e <_fflush_r+0x1a>
 800da26:	6a03      	ldr	r3, [r0, #32]
 800da28:	b90b      	cbnz	r3, 800da2e <_fflush_r+0x1a>
 800da2a:	f7ff f9b1 	bl	800cd90 <__sinit>
 800da2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d0f3      	beq.n	800da1e <_fflush_r+0xa>
 800da36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800da38:	07d0      	lsls	r0, r2, #31
 800da3a:	d404      	bmi.n	800da46 <_fflush_r+0x32>
 800da3c:	0599      	lsls	r1, r3, #22
 800da3e:	d402      	bmi.n	800da46 <_fflush_r+0x32>
 800da40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da42:	f7ff fb4a 	bl	800d0da <__retarget_lock_acquire_recursive>
 800da46:	4628      	mov	r0, r5
 800da48:	4621      	mov	r1, r4
 800da4a:	f7ff ff5d 	bl	800d908 <__sflush_r>
 800da4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da50:	07da      	lsls	r2, r3, #31
 800da52:	4605      	mov	r5, r0
 800da54:	d4e4      	bmi.n	800da20 <_fflush_r+0xc>
 800da56:	89a3      	ldrh	r3, [r4, #12]
 800da58:	059b      	lsls	r3, r3, #22
 800da5a:	d4e1      	bmi.n	800da20 <_fflush_r+0xc>
 800da5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da5e:	f7ff fb3d 	bl	800d0dc <__retarget_lock_release_recursive>
 800da62:	e7dd      	b.n	800da20 <_fflush_r+0xc>

0800da64 <fiprintf>:
 800da64:	b40e      	push	{r1, r2, r3}
 800da66:	b503      	push	{r0, r1, lr}
 800da68:	4601      	mov	r1, r0
 800da6a:	ab03      	add	r3, sp, #12
 800da6c:	4805      	ldr	r0, [pc, #20]	; (800da84 <fiprintf+0x20>)
 800da6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800da72:	6800      	ldr	r0, [r0, #0]
 800da74:	9301      	str	r3, [sp, #4]
 800da76:	f000 f891 	bl	800db9c <_vfiprintf_r>
 800da7a:	b002      	add	sp, #8
 800da7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800da80:	b003      	add	sp, #12
 800da82:	4770      	bx	lr
 800da84:	20000080 	.word	0x20000080

0800da88 <memmove>:
 800da88:	4288      	cmp	r0, r1
 800da8a:	b510      	push	{r4, lr}
 800da8c:	eb01 0402 	add.w	r4, r1, r2
 800da90:	d902      	bls.n	800da98 <memmove+0x10>
 800da92:	4284      	cmp	r4, r0
 800da94:	4623      	mov	r3, r4
 800da96:	d807      	bhi.n	800daa8 <memmove+0x20>
 800da98:	1e43      	subs	r3, r0, #1
 800da9a:	42a1      	cmp	r1, r4
 800da9c:	d008      	beq.n	800dab0 <memmove+0x28>
 800da9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800daa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800daa6:	e7f8      	b.n	800da9a <memmove+0x12>
 800daa8:	4402      	add	r2, r0
 800daaa:	4601      	mov	r1, r0
 800daac:	428a      	cmp	r2, r1
 800daae:	d100      	bne.n	800dab2 <memmove+0x2a>
 800dab0:	bd10      	pop	{r4, pc}
 800dab2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dab6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800daba:	e7f7      	b.n	800daac <memmove+0x24>

0800dabc <_sbrk_r>:
 800dabc:	b538      	push	{r3, r4, r5, lr}
 800dabe:	4d06      	ldr	r5, [pc, #24]	; (800dad8 <_sbrk_r+0x1c>)
 800dac0:	2300      	movs	r3, #0
 800dac2:	4604      	mov	r4, r0
 800dac4:	4608      	mov	r0, r1
 800dac6:	602b      	str	r3, [r5, #0]
 800dac8:	f7f6 ff04 	bl	80048d4 <_sbrk>
 800dacc:	1c43      	adds	r3, r0, #1
 800dace:	d102      	bne.n	800dad6 <_sbrk_r+0x1a>
 800dad0:	682b      	ldr	r3, [r5, #0]
 800dad2:	b103      	cbz	r3, 800dad6 <_sbrk_r+0x1a>
 800dad4:	6023      	str	r3, [r4, #0]
 800dad6:	bd38      	pop	{r3, r4, r5, pc}
 800dad8:	2002d038 	.word	0x2002d038

0800dadc <abort>:
 800dadc:	b508      	push	{r3, lr}
 800dade:	2006      	movs	r0, #6
 800dae0:	f000 fa34 	bl	800df4c <raise>
 800dae4:	2001      	movs	r0, #1
 800dae6:	f7f6 fe7d 	bl	80047e4 <_exit>

0800daea <_realloc_r>:
 800daea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daee:	4680      	mov	r8, r0
 800daf0:	4614      	mov	r4, r2
 800daf2:	460e      	mov	r6, r1
 800daf4:	b921      	cbnz	r1, 800db00 <_realloc_r+0x16>
 800daf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dafa:	4611      	mov	r1, r2
 800dafc:	f7ff bb90 	b.w	800d220 <_malloc_r>
 800db00:	b92a      	cbnz	r2, 800db0e <_realloc_r+0x24>
 800db02:	f7ff fb19 	bl	800d138 <_free_r>
 800db06:	4625      	mov	r5, r4
 800db08:	4628      	mov	r0, r5
 800db0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db0e:	f000 fa39 	bl	800df84 <_malloc_usable_size_r>
 800db12:	4284      	cmp	r4, r0
 800db14:	4607      	mov	r7, r0
 800db16:	d802      	bhi.n	800db1e <_realloc_r+0x34>
 800db18:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800db1c:	d812      	bhi.n	800db44 <_realloc_r+0x5a>
 800db1e:	4621      	mov	r1, r4
 800db20:	4640      	mov	r0, r8
 800db22:	f7ff fb7d 	bl	800d220 <_malloc_r>
 800db26:	4605      	mov	r5, r0
 800db28:	2800      	cmp	r0, #0
 800db2a:	d0ed      	beq.n	800db08 <_realloc_r+0x1e>
 800db2c:	42bc      	cmp	r4, r7
 800db2e:	4622      	mov	r2, r4
 800db30:	4631      	mov	r1, r6
 800db32:	bf28      	it	cs
 800db34:	463a      	movcs	r2, r7
 800db36:	f7ff fad2 	bl	800d0de <memcpy>
 800db3a:	4631      	mov	r1, r6
 800db3c:	4640      	mov	r0, r8
 800db3e:	f7ff fafb 	bl	800d138 <_free_r>
 800db42:	e7e1      	b.n	800db08 <_realloc_r+0x1e>
 800db44:	4635      	mov	r5, r6
 800db46:	e7df      	b.n	800db08 <_realloc_r+0x1e>

0800db48 <__sfputc_r>:
 800db48:	6893      	ldr	r3, [r2, #8]
 800db4a:	3b01      	subs	r3, #1
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	b410      	push	{r4}
 800db50:	6093      	str	r3, [r2, #8]
 800db52:	da08      	bge.n	800db66 <__sfputc_r+0x1e>
 800db54:	6994      	ldr	r4, [r2, #24]
 800db56:	42a3      	cmp	r3, r4
 800db58:	db01      	blt.n	800db5e <__sfputc_r+0x16>
 800db5a:	290a      	cmp	r1, #10
 800db5c:	d103      	bne.n	800db66 <__sfputc_r+0x1e>
 800db5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db62:	f000 b935 	b.w	800ddd0 <__swbuf_r>
 800db66:	6813      	ldr	r3, [r2, #0]
 800db68:	1c58      	adds	r0, r3, #1
 800db6a:	6010      	str	r0, [r2, #0]
 800db6c:	7019      	strb	r1, [r3, #0]
 800db6e:	4608      	mov	r0, r1
 800db70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db74:	4770      	bx	lr

0800db76 <__sfputs_r>:
 800db76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db78:	4606      	mov	r6, r0
 800db7a:	460f      	mov	r7, r1
 800db7c:	4614      	mov	r4, r2
 800db7e:	18d5      	adds	r5, r2, r3
 800db80:	42ac      	cmp	r4, r5
 800db82:	d101      	bne.n	800db88 <__sfputs_r+0x12>
 800db84:	2000      	movs	r0, #0
 800db86:	e007      	b.n	800db98 <__sfputs_r+0x22>
 800db88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db8c:	463a      	mov	r2, r7
 800db8e:	4630      	mov	r0, r6
 800db90:	f7ff ffda 	bl	800db48 <__sfputc_r>
 800db94:	1c43      	adds	r3, r0, #1
 800db96:	d1f3      	bne.n	800db80 <__sfputs_r+0xa>
 800db98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800db9c <_vfiprintf_r>:
 800db9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dba0:	460d      	mov	r5, r1
 800dba2:	b09d      	sub	sp, #116	; 0x74
 800dba4:	4614      	mov	r4, r2
 800dba6:	4698      	mov	r8, r3
 800dba8:	4606      	mov	r6, r0
 800dbaa:	b118      	cbz	r0, 800dbb4 <_vfiprintf_r+0x18>
 800dbac:	6a03      	ldr	r3, [r0, #32]
 800dbae:	b90b      	cbnz	r3, 800dbb4 <_vfiprintf_r+0x18>
 800dbb0:	f7ff f8ee 	bl	800cd90 <__sinit>
 800dbb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dbb6:	07d9      	lsls	r1, r3, #31
 800dbb8:	d405      	bmi.n	800dbc6 <_vfiprintf_r+0x2a>
 800dbba:	89ab      	ldrh	r3, [r5, #12]
 800dbbc:	059a      	lsls	r2, r3, #22
 800dbbe:	d402      	bmi.n	800dbc6 <_vfiprintf_r+0x2a>
 800dbc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dbc2:	f7ff fa8a 	bl	800d0da <__retarget_lock_acquire_recursive>
 800dbc6:	89ab      	ldrh	r3, [r5, #12]
 800dbc8:	071b      	lsls	r3, r3, #28
 800dbca:	d501      	bpl.n	800dbd0 <_vfiprintf_r+0x34>
 800dbcc:	692b      	ldr	r3, [r5, #16]
 800dbce:	b99b      	cbnz	r3, 800dbf8 <_vfiprintf_r+0x5c>
 800dbd0:	4629      	mov	r1, r5
 800dbd2:	4630      	mov	r0, r6
 800dbd4:	f000 f93a 	bl	800de4c <__swsetup_r>
 800dbd8:	b170      	cbz	r0, 800dbf8 <_vfiprintf_r+0x5c>
 800dbda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dbdc:	07dc      	lsls	r4, r3, #31
 800dbde:	d504      	bpl.n	800dbea <_vfiprintf_r+0x4e>
 800dbe0:	f04f 30ff 	mov.w	r0, #4294967295
 800dbe4:	b01d      	add	sp, #116	; 0x74
 800dbe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbea:	89ab      	ldrh	r3, [r5, #12]
 800dbec:	0598      	lsls	r0, r3, #22
 800dbee:	d4f7      	bmi.n	800dbe0 <_vfiprintf_r+0x44>
 800dbf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dbf2:	f7ff fa73 	bl	800d0dc <__retarget_lock_release_recursive>
 800dbf6:	e7f3      	b.n	800dbe0 <_vfiprintf_r+0x44>
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	9309      	str	r3, [sp, #36]	; 0x24
 800dbfc:	2320      	movs	r3, #32
 800dbfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc02:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc06:	2330      	movs	r3, #48	; 0x30
 800dc08:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ddbc <_vfiprintf_r+0x220>
 800dc0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc10:	f04f 0901 	mov.w	r9, #1
 800dc14:	4623      	mov	r3, r4
 800dc16:	469a      	mov	sl, r3
 800dc18:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc1c:	b10a      	cbz	r2, 800dc22 <_vfiprintf_r+0x86>
 800dc1e:	2a25      	cmp	r2, #37	; 0x25
 800dc20:	d1f9      	bne.n	800dc16 <_vfiprintf_r+0x7a>
 800dc22:	ebba 0b04 	subs.w	fp, sl, r4
 800dc26:	d00b      	beq.n	800dc40 <_vfiprintf_r+0xa4>
 800dc28:	465b      	mov	r3, fp
 800dc2a:	4622      	mov	r2, r4
 800dc2c:	4629      	mov	r1, r5
 800dc2e:	4630      	mov	r0, r6
 800dc30:	f7ff ffa1 	bl	800db76 <__sfputs_r>
 800dc34:	3001      	adds	r0, #1
 800dc36:	f000 80a9 	beq.w	800dd8c <_vfiprintf_r+0x1f0>
 800dc3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc3c:	445a      	add	r2, fp
 800dc3e:	9209      	str	r2, [sp, #36]	; 0x24
 800dc40:	f89a 3000 	ldrb.w	r3, [sl]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	f000 80a1 	beq.w	800dd8c <_vfiprintf_r+0x1f0>
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	f04f 32ff 	mov.w	r2, #4294967295
 800dc50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc54:	f10a 0a01 	add.w	sl, sl, #1
 800dc58:	9304      	str	r3, [sp, #16]
 800dc5a:	9307      	str	r3, [sp, #28]
 800dc5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc60:	931a      	str	r3, [sp, #104]	; 0x68
 800dc62:	4654      	mov	r4, sl
 800dc64:	2205      	movs	r2, #5
 800dc66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc6a:	4854      	ldr	r0, [pc, #336]	; (800ddbc <_vfiprintf_r+0x220>)
 800dc6c:	f7f2 fb10 	bl	8000290 <memchr>
 800dc70:	9a04      	ldr	r2, [sp, #16]
 800dc72:	b9d8      	cbnz	r0, 800dcac <_vfiprintf_r+0x110>
 800dc74:	06d1      	lsls	r1, r2, #27
 800dc76:	bf44      	itt	mi
 800dc78:	2320      	movmi	r3, #32
 800dc7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc7e:	0713      	lsls	r3, r2, #28
 800dc80:	bf44      	itt	mi
 800dc82:	232b      	movmi	r3, #43	; 0x2b
 800dc84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc88:	f89a 3000 	ldrb.w	r3, [sl]
 800dc8c:	2b2a      	cmp	r3, #42	; 0x2a
 800dc8e:	d015      	beq.n	800dcbc <_vfiprintf_r+0x120>
 800dc90:	9a07      	ldr	r2, [sp, #28]
 800dc92:	4654      	mov	r4, sl
 800dc94:	2000      	movs	r0, #0
 800dc96:	f04f 0c0a 	mov.w	ip, #10
 800dc9a:	4621      	mov	r1, r4
 800dc9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dca0:	3b30      	subs	r3, #48	; 0x30
 800dca2:	2b09      	cmp	r3, #9
 800dca4:	d94d      	bls.n	800dd42 <_vfiprintf_r+0x1a6>
 800dca6:	b1b0      	cbz	r0, 800dcd6 <_vfiprintf_r+0x13a>
 800dca8:	9207      	str	r2, [sp, #28]
 800dcaa:	e014      	b.n	800dcd6 <_vfiprintf_r+0x13a>
 800dcac:	eba0 0308 	sub.w	r3, r0, r8
 800dcb0:	fa09 f303 	lsl.w	r3, r9, r3
 800dcb4:	4313      	orrs	r3, r2
 800dcb6:	9304      	str	r3, [sp, #16]
 800dcb8:	46a2      	mov	sl, r4
 800dcba:	e7d2      	b.n	800dc62 <_vfiprintf_r+0xc6>
 800dcbc:	9b03      	ldr	r3, [sp, #12]
 800dcbe:	1d19      	adds	r1, r3, #4
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	9103      	str	r1, [sp, #12]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	bfbb      	ittet	lt
 800dcc8:	425b      	neglt	r3, r3
 800dcca:	f042 0202 	orrlt.w	r2, r2, #2
 800dcce:	9307      	strge	r3, [sp, #28]
 800dcd0:	9307      	strlt	r3, [sp, #28]
 800dcd2:	bfb8      	it	lt
 800dcd4:	9204      	strlt	r2, [sp, #16]
 800dcd6:	7823      	ldrb	r3, [r4, #0]
 800dcd8:	2b2e      	cmp	r3, #46	; 0x2e
 800dcda:	d10c      	bne.n	800dcf6 <_vfiprintf_r+0x15a>
 800dcdc:	7863      	ldrb	r3, [r4, #1]
 800dcde:	2b2a      	cmp	r3, #42	; 0x2a
 800dce0:	d134      	bne.n	800dd4c <_vfiprintf_r+0x1b0>
 800dce2:	9b03      	ldr	r3, [sp, #12]
 800dce4:	1d1a      	adds	r2, r3, #4
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	9203      	str	r2, [sp, #12]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	bfb8      	it	lt
 800dcee:	f04f 33ff 	movlt.w	r3, #4294967295
 800dcf2:	3402      	adds	r4, #2
 800dcf4:	9305      	str	r3, [sp, #20]
 800dcf6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ddcc <_vfiprintf_r+0x230>
 800dcfa:	7821      	ldrb	r1, [r4, #0]
 800dcfc:	2203      	movs	r2, #3
 800dcfe:	4650      	mov	r0, sl
 800dd00:	f7f2 fac6 	bl	8000290 <memchr>
 800dd04:	b138      	cbz	r0, 800dd16 <_vfiprintf_r+0x17a>
 800dd06:	9b04      	ldr	r3, [sp, #16]
 800dd08:	eba0 000a 	sub.w	r0, r0, sl
 800dd0c:	2240      	movs	r2, #64	; 0x40
 800dd0e:	4082      	lsls	r2, r0
 800dd10:	4313      	orrs	r3, r2
 800dd12:	3401      	adds	r4, #1
 800dd14:	9304      	str	r3, [sp, #16]
 800dd16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd1a:	4829      	ldr	r0, [pc, #164]	; (800ddc0 <_vfiprintf_r+0x224>)
 800dd1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd20:	2206      	movs	r2, #6
 800dd22:	f7f2 fab5 	bl	8000290 <memchr>
 800dd26:	2800      	cmp	r0, #0
 800dd28:	d03f      	beq.n	800ddaa <_vfiprintf_r+0x20e>
 800dd2a:	4b26      	ldr	r3, [pc, #152]	; (800ddc4 <_vfiprintf_r+0x228>)
 800dd2c:	bb1b      	cbnz	r3, 800dd76 <_vfiprintf_r+0x1da>
 800dd2e:	9b03      	ldr	r3, [sp, #12]
 800dd30:	3307      	adds	r3, #7
 800dd32:	f023 0307 	bic.w	r3, r3, #7
 800dd36:	3308      	adds	r3, #8
 800dd38:	9303      	str	r3, [sp, #12]
 800dd3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd3c:	443b      	add	r3, r7
 800dd3e:	9309      	str	r3, [sp, #36]	; 0x24
 800dd40:	e768      	b.n	800dc14 <_vfiprintf_r+0x78>
 800dd42:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd46:	460c      	mov	r4, r1
 800dd48:	2001      	movs	r0, #1
 800dd4a:	e7a6      	b.n	800dc9a <_vfiprintf_r+0xfe>
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	3401      	adds	r4, #1
 800dd50:	9305      	str	r3, [sp, #20]
 800dd52:	4619      	mov	r1, r3
 800dd54:	f04f 0c0a 	mov.w	ip, #10
 800dd58:	4620      	mov	r0, r4
 800dd5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd5e:	3a30      	subs	r2, #48	; 0x30
 800dd60:	2a09      	cmp	r2, #9
 800dd62:	d903      	bls.n	800dd6c <_vfiprintf_r+0x1d0>
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d0c6      	beq.n	800dcf6 <_vfiprintf_r+0x15a>
 800dd68:	9105      	str	r1, [sp, #20]
 800dd6a:	e7c4      	b.n	800dcf6 <_vfiprintf_r+0x15a>
 800dd6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd70:	4604      	mov	r4, r0
 800dd72:	2301      	movs	r3, #1
 800dd74:	e7f0      	b.n	800dd58 <_vfiprintf_r+0x1bc>
 800dd76:	ab03      	add	r3, sp, #12
 800dd78:	9300      	str	r3, [sp, #0]
 800dd7a:	462a      	mov	r2, r5
 800dd7c:	4b12      	ldr	r3, [pc, #72]	; (800ddc8 <_vfiprintf_r+0x22c>)
 800dd7e:	a904      	add	r1, sp, #16
 800dd80:	4630      	mov	r0, r6
 800dd82:	f3af 8000 	nop.w
 800dd86:	4607      	mov	r7, r0
 800dd88:	1c78      	adds	r0, r7, #1
 800dd8a:	d1d6      	bne.n	800dd3a <_vfiprintf_r+0x19e>
 800dd8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd8e:	07d9      	lsls	r1, r3, #31
 800dd90:	d405      	bmi.n	800dd9e <_vfiprintf_r+0x202>
 800dd92:	89ab      	ldrh	r3, [r5, #12]
 800dd94:	059a      	lsls	r2, r3, #22
 800dd96:	d402      	bmi.n	800dd9e <_vfiprintf_r+0x202>
 800dd98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd9a:	f7ff f99f 	bl	800d0dc <__retarget_lock_release_recursive>
 800dd9e:	89ab      	ldrh	r3, [r5, #12]
 800dda0:	065b      	lsls	r3, r3, #25
 800dda2:	f53f af1d 	bmi.w	800dbe0 <_vfiprintf_r+0x44>
 800dda6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dda8:	e71c      	b.n	800dbe4 <_vfiprintf_r+0x48>
 800ddaa:	ab03      	add	r3, sp, #12
 800ddac:	9300      	str	r3, [sp, #0]
 800ddae:	462a      	mov	r2, r5
 800ddb0:	4b05      	ldr	r3, [pc, #20]	; (800ddc8 <_vfiprintf_r+0x22c>)
 800ddb2:	a904      	add	r1, sp, #16
 800ddb4:	4630      	mov	r0, r6
 800ddb6:	f7ff fc85 	bl	800d6c4 <_printf_i>
 800ddba:	e7e4      	b.n	800dd86 <_vfiprintf_r+0x1ea>
 800ddbc:	0801075f 	.word	0x0801075f
 800ddc0:	08010769 	.word	0x08010769
 800ddc4:	00000000 	.word	0x00000000
 800ddc8:	0800db77 	.word	0x0800db77
 800ddcc:	08010765 	.word	0x08010765

0800ddd0 <__swbuf_r>:
 800ddd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddd2:	460e      	mov	r6, r1
 800ddd4:	4614      	mov	r4, r2
 800ddd6:	4605      	mov	r5, r0
 800ddd8:	b118      	cbz	r0, 800dde2 <__swbuf_r+0x12>
 800ddda:	6a03      	ldr	r3, [r0, #32]
 800dddc:	b90b      	cbnz	r3, 800dde2 <__swbuf_r+0x12>
 800ddde:	f7fe ffd7 	bl	800cd90 <__sinit>
 800dde2:	69a3      	ldr	r3, [r4, #24]
 800dde4:	60a3      	str	r3, [r4, #8]
 800dde6:	89a3      	ldrh	r3, [r4, #12]
 800dde8:	071a      	lsls	r2, r3, #28
 800ddea:	d525      	bpl.n	800de38 <__swbuf_r+0x68>
 800ddec:	6923      	ldr	r3, [r4, #16]
 800ddee:	b31b      	cbz	r3, 800de38 <__swbuf_r+0x68>
 800ddf0:	6823      	ldr	r3, [r4, #0]
 800ddf2:	6922      	ldr	r2, [r4, #16]
 800ddf4:	1a98      	subs	r0, r3, r2
 800ddf6:	6963      	ldr	r3, [r4, #20]
 800ddf8:	b2f6      	uxtb	r6, r6
 800ddfa:	4283      	cmp	r3, r0
 800ddfc:	4637      	mov	r7, r6
 800ddfe:	dc04      	bgt.n	800de0a <__swbuf_r+0x3a>
 800de00:	4621      	mov	r1, r4
 800de02:	4628      	mov	r0, r5
 800de04:	f7ff fe06 	bl	800da14 <_fflush_r>
 800de08:	b9e0      	cbnz	r0, 800de44 <__swbuf_r+0x74>
 800de0a:	68a3      	ldr	r3, [r4, #8]
 800de0c:	3b01      	subs	r3, #1
 800de0e:	60a3      	str	r3, [r4, #8]
 800de10:	6823      	ldr	r3, [r4, #0]
 800de12:	1c5a      	adds	r2, r3, #1
 800de14:	6022      	str	r2, [r4, #0]
 800de16:	701e      	strb	r6, [r3, #0]
 800de18:	6962      	ldr	r2, [r4, #20]
 800de1a:	1c43      	adds	r3, r0, #1
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d004      	beq.n	800de2a <__swbuf_r+0x5a>
 800de20:	89a3      	ldrh	r3, [r4, #12]
 800de22:	07db      	lsls	r3, r3, #31
 800de24:	d506      	bpl.n	800de34 <__swbuf_r+0x64>
 800de26:	2e0a      	cmp	r6, #10
 800de28:	d104      	bne.n	800de34 <__swbuf_r+0x64>
 800de2a:	4621      	mov	r1, r4
 800de2c:	4628      	mov	r0, r5
 800de2e:	f7ff fdf1 	bl	800da14 <_fflush_r>
 800de32:	b938      	cbnz	r0, 800de44 <__swbuf_r+0x74>
 800de34:	4638      	mov	r0, r7
 800de36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de38:	4621      	mov	r1, r4
 800de3a:	4628      	mov	r0, r5
 800de3c:	f000 f806 	bl	800de4c <__swsetup_r>
 800de40:	2800      	cmp	r0, #0
 800de42:	d0d5      	beq.n	800ddf0 <__swbuf_r+0x20>
 800de44:	f04f 37ff 	mov.w	r7, #4294967295
 800de48:	e7f4      	b.n	800de34 <__swbuf_r+0x64>
	...

0800de4c <__swsetup_r>:
 800de4c:	b538      	push	{r3, r4, r5, lr}
 800de4e:	4b2a      	ldr	r3, [pc, #168]	; (800def8 <__swsetup_r+0xac>)
 800de50:	4605      	mov	r5, r0
 800de52:	6818      	ldr	r0, [r3, #0]
 800de54:	460c      	mov	r4, r1
 800de56:	b118      	cbz	r0, 800de60 <__swsetup_r+0x14>
 800de58:	6a03      	ldr	r3, [r0, #32]
 800de5a:	b90b      	cbnz	r3, 800de60 <__swsetup_r+0x14>
 800de5c:	f7fe ff98 	bl	800cd90 <__sinit>
 800de60:	89a3      	ldrh	r3, [r4, #12]
 800de62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de66:	0718      	lsls	r0, r3, #28
 800de68:	d422      	bmi.n	800deb0 <__swsetup_r+0x64>
 800de6a:	06d9      	lsls	r1, r3, #27
 800de6c:	d407      	bmi.n	800de7e <__swsetup_r+0x32>
 800de6e:	2309      	movs	r3, #9
 800de70:	602b      	str	r3, [r5, #0]
 800de72:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800de76:	81a3      	strh	r3, [r4, #12]
 800de78:	f04f 30ff 	mov.w	r0, #4294967295
 800de7c:	e034      	b.n	800dee8 <__swsetup_r+0x9c>
 800de7e:	0758      	lsls	r0, r3, #29
 800de80:	d512      	bpl.n	800dea8 <__swsetup_r+0x5c>
 800de82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de84:	b141      	cbz	r1, 800de98 <__swsetup_r+0x4c>
 800de86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de8a:	4299      	cmp	r1, r3
 800de8c:	d002      	beq.n	800de94 <__swsetup_r+0x48>
 800de8e:	4628      	mov	r0, r5
 800de90:	f7ff f952 	bl	800d138 <_free_r>
 800de94:	2300      	movs	r3, #0
 800de96:	6363      	str	r3, [r4, #52]	; 0x34
 800de98:	89a3      	ldrh	r3, [r4, #12]
 800de9a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800de9e:	81a3      	strh	r3, [r4, #12]
 800dea0:	2300      	movs	r3, #0
 800dea2:	6063      	str	r3, [r4, #4]
 800dea4:	6923      	ldr	r3, [r4, #16]
 800dea6:	6023      	str	r3, [r4, #0]
 800dea8:	89a3      	ldrh	r3, [r4, #12]
 800deaa:	f043 0308 	orr.w	r3, r3, #8
 800deae:	81a3      	strh	r3, [r4, #12]
 800deb0:	6923      	ldr	r3, [r4, #16]
 800deb2:	b94b      	cbnz	r3, 800dec8 <__swsetup_r+0x7c>
 800deb4:	89a3      	ldrh	r3, [r4, #12]
 800deb6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800deba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800debe:	d003      	beq.n	800dec8 <__swsetup_r+0x7c>
 800dec0:	4621      	mov	r1, r4
 800dec2:	4628      	mov	r0, r5
 800dec4:	f000 f88c 	bl	800dfe0 <__smakebuf_r>
 800dec8:	89a0      	ldrh	r0, [r4, #12]
 800deca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dece:	f010 0301 	ands.w	r3, r0, #1
 800ded2:	d00a      	beq.n	800deea <__swsetup_r+0x9e>
 800ded4:	2300      	movs	r3, #0
 800ded6:	60a3      	str	r3, [r4, #8]
 800ded8:	6963      	ldr	r3, [r4, #20]
 800deda:	425b      	negs	r3, r3
 800dedc:	61a3      	str	r3, [r4, #24]
 800dede:	6923      	ldr	r3, [r4, #16]
 800dee0:	b943      	cbnz	r3, 800def4 <__swsetup_r+0xa8>
 800dee2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dee6:	d1c4      	bne.n	800de72 <__swsetup_r+0x26>
 800dee8:	bd38      	pop	{r3, r4, r5, pc}
 800deea:	0781      	lsls	r1, r0, #30
 800deec:	bf58      	it	pl
 800deee:	6963      	ldrpl	r3, [r4, #20]
 800def0:	60a3      	str	r3, [r4, #8]
 800def2:	e7f4      	b.n	800dede <__swsetup_r+0x92>
 800def4:	2000      	movs	r0, #0
 800def6:	e7f7      	b.n	800dee8 <__swsetup_r+0x9c>
 800def8:	20000080 	.word	0x20000080

0800defc <_raise_r>:
 800defc:	291f      	cmp	r1, #31
 800defe:	b538      	push	{r3, r4, r5, lr}
 800df00:	4604      	mov	r4, r0
 800df02:	460d      	mov	r5, r1
 800df04:	d904      	bls.n	800df10 <_raise_r+0x14>
 800df06:	2316      	movs	r3, #22
 800df08:	6003      	str	r3, [r0, #0]
 800df0a:	f04f 30ff 	mov.w	r0, #4294967295
 800df0e:	bd38      	pop	{r3, r4, r5, pc}
 800df10:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800df12:	b112      	cbz	r2, 800df1a <_raise_r+0x1e>
 800df14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800df18:	b94b      	cbnz	r3, 800df2e <_raise_r+0x32>
 800df1a:	4620      	mov	r0, r4
 800df1c:	f000 f830 	bl	800df80 <_getpid_r>
 800df20:	462a      	mov	r2, r5
 800df22:	4601      	mov	r1, r0
 800df24:	4620      	mov	r0, r4
 800df26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df2a:	f000 b817 	b.w	800df5c <_kill_r>
 800df2e:	2b01      	cmp	r3, #1
 800df30:	d00a      	beq.n	800df48 <_raise_r+0x4c>
 800df32:	1c59      	adds	r1, r3, #1
 800df34:	d103      	bne.n	800df3e <_raise_r+0x42>
 800df36:	2316      	movs	r3, #22
 800df38:	6003      	str	r3, [r0, #0]
 800df3a:	2001      	movs	r0, #1
 800df3c:	e7e7      	b.n	800df0e <_raise_r+0x12>
 800df3e:	2400      	movs	r4, #0
 800df40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800df44:	4628      	mov	r0, r5
 800df46:	4798      	blx	r3
 800df48:	2000      	movs	r0, #0
 800df4a:	e7e0      	b.n	800df0e <_raise_r+0x12>

0800df4c <raise>:
 800df4c:	4b02      	ldr	r3, [pc, #8]	; (800df58 <raise+0xc>)
 800df4e:	4601      	mov	r1, r0
 800df50:	6818      	ldr	r0, [r3, #0]
 800df52:	f7ff bfd3 	b.w	800defc <_raise_r>
 800df56:	bf00      	nop
 800df58:	20000080 	.word	0x20000080

0800df5c <_kill_r>:
 800df5c:	b538      	push	{r3, r4, r5, lr}
 800df5e:	4d07      	ldr	r5, [pc, #28]	; (800df7c <_kill_r+0x20>)
 800df60:	2300      	movs	r3, #0
 800df62:	4604      	mov	r4, r0
 800df64:	4608      	mov	r0, r1
 800df66:	4611      	mov	r1, r2
 800df68:	602b      	str	r3, [r5, #0]
 800df6a:	f7f6 fc2b 	bl	80047c4 <_kill>
 800df6e:	1c43      	adds	r3, r0, #1
 800df70:	d102      	bne.n	800df78 <_kill_r+0x1c>
 800df72:	682b      	ldr	r3, [r5, #0]
 800df74:	b103      	cbz	r3, 800df78 <_kill_r+0x1c>
 800df76:	6023      	str	r3, [r4, #0]
 800df78:	bd38      	pop	{r3, r4, r5, pc}
 800df7a:	bf00      	nop
 800df7c:	2002d038 	.word	0x2002d038

0800df80 <_getpid_r>:
 800df80:	f7f6 bc18 	b.w	80047b4 <_getpid>

0800df84 <_malloc_usable_size_r>:
 800df84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df88:	1f18      	subs	r0, r3, #4
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	bfbc      	itt	lt
 800df8e:	580b      	ldrlt	r3, [r1, r0]
 800df90:	18c0      	addlt	r0, r0, r3
 800df92:	4770      	bx	lr

0800df94 <__swhatbuf_r>:
 800df94:	b570      	push	{r4, r5, r6, lr}
 800df96:	460c      	mov	r4, r1
 800df98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df9c:	2900      	cmp	r1, #0
 800df9e:	b096      	sub	sp, #88	; 0x58
 800dfa0:	4615      	mov	r5, r2
 800dfa2:	461e      	mov	r6, r3
 800dfa4:	da0d      	bge.n	800dfc2 <__swhatbuf_r+0x2e>
 800dfa6:	89a3      	ldrh	r3, [r4, #12]
 800dfa8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dfac:	f04f 0100 	mov.w	r1, #0
 800dfb0:	bf0c      	ite	eq
 800dfb2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dfb6:	2340      	movne	r3, #64	; 0x40
 800dfb8:	2000      	movs	r0, #0
 800dfba:	6031      	str	r1, [r6, #0]
 800dfbc:	602b      	str	r3, [r5, #0]
 800dfbe:	b016      	add	sp, #88	; 0x58
 800dfc0:	bd70      	pop	{r4, r5, r6, pc}
 800dfc2:	466a      	mov	r2, sp
 800dfc4:	f000 f848 	bl	800e058 <_fstat_r>
 800dfc8:	2800      	cmp	r0, #0
 800dfca:	dbec      	blt.n	800dfa6 <__swhatbuf_r+0x12>
 800dfcc:	9901      	ldr	r1, [sp, #4]
 800dfce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dfd2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dfd6:	4259      	negs	r1, r3
 800dfd8:	4159      	adcs	r1, r3
 800dfda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfde:	e7eb      	b.n	800dfb8 <__swhatbuf_r+0x24>

0800dfe0 <__smakebuf_r>:
 800dfe0:	898b      	ldrh	r3, [r1, #12]
 800dfe2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dfe4:	079d      	lsls	r5, r3, #30
 800dfe6:	4606      	mov	r6, r0
 800dfe8:	460c      	mov	r4, r1
 800dfea:	d507      	bpl.n	800dffc <__smakebuf_r+0x1c>
 800dfec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dff0:	6023      	str	r3, [r4, #0]
 800dff2:	6123      	str	r3, [r4, #16]
 800dff4:	2301      	movs	r3, #1
 800dff6:	6163      	str	r3, [r4, #20]
 800dff8:	b002      	add	sp, #8
 800dffa:	bd70      	pop	{r4, r5, r6, pc}
 800dffc:	ab01      	add	r3, sp, #4
 800dffe:	466a      	mov	r2, sp
 800e000:	f7ff ffc8 	bl	800df94 <__swhatbuf_r>
 800e004:	9900      	ldr	r1, [sp, #0]
 800e006:	4605      	mov	r5, r0
 800e008:	4630      	mov	r0, r6
 800e00a:	f7ff f909 	bl	800d220 <_malloc_r>
 800e00e:	b948      	cbnz	r0, 800e024 <__smakebuf_r+0x44>
 800e010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e014:	059a      	lsls	r2, r3, #22
 800e016:	d4ef      	bmi.n	800dff8 <__smakebuf_r+0x18>
 800e018:	f023 0303 	bic.w	r3, r3, #3
 800e01c:	f043 0302 	orr.w	r3, r3, #2
 800e020:	81a3      	strh	r3, [r4, #12]
 800e022:	e7e3      	b.n	800dfec <__smakebuf_r+0xc>
 800e024:	89a3      	ldrh	r3, [r4, #12]
 800e026:	6020      	str	r0, [r4, #0]
 800e028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e02c:	81a3      	strh	r3, [r4, #12]
 800e02e:	9b00      	ldr	r3, [sp, #0]
 800e030:	6163      	str	r3, [r4, #20]
 800e032:	9b01      	ldr	r3, [sp, #4]
 800e034:	6120      	str	r0, [r4, #16]
 800e036:	b15b      	cbz	r3, 800e050 <__smakebuf_r+0x70>
 800e038:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e03c:	4630      	mov	r0, r6
 800e03e:	f000 f81d 	bl	800e07c <_isatty_r>
 800e042:	b128      	cbz	r0, 800e050 <__smakebuf_r+0x70>
 800e044:	89a3      	ldrh	r3, [r4, #12]
 800e046:	f023 0303 	bic.w	r3, r3, #3
 800e04a:	f043 0301 	orr.w	r3, r3, #1
 800e04e:	81a3      	strh	r3, [r4, #12]
 800e050:	89a3      	ldrh	r3, [r4, #12]
 800e052:	431d      	orrs	r5, r3
 800e054:	81a5      	strh	r5, [r4, #12]
 800e056:	e7cf      	b.n	800dff8 <__smakebuf_r+0x18>

0800e058 <_fstat_r>:
 800e058:	b538      	push	{r3, r4, r5, lr}
 800e05a:	4d07      	ldr	r5, [pc, #28]	; (800e078 <_fstat_r+0x20>)
 800e05c:	2300      	movs	r3, #0
 800e05e:	4604      	mov	r4, r0
 800e060:	4608      	mov	r0, r1
 800e062:	4611      	mov	r1, r2
 800e064:	602b      	str	r3, [r5, #0]
 800e066:	f7f6 fc0c 	bl	8004882 <_fstat>
 800e06a:	1c43      	adds	r3, r0, #1
 800e06c:	d102      	bne.n	800e074 <_fstat_r+0x1c>
 800e06e:	682b      	ldr	r3, [r5, #0]
 800e070:	b103      	cbz	r3, 800e074 <_fstat_r+0x1c>
 800e072:	6023      	str	r3, [r4, #0]
 800e074:	bd38      	pop	{r3, r4, r5, pc}
 800e076:	bf00      	nop
 800e078:	2002d038 	.word	0x2002d038

0800e07c <_isatty_r>:
 800e07c:	b538      	push	{r3, r4, r5, lr}
 800e07e:	4d06      	ldr	r5, [pc, #24]	; (800e098 <_isatty_r+0x1c>)
 800e080:	2300      	movs	r3, #0
 800e082:	4604      	mov	r4, r0
 800e084:	4608      	mov	r0, r1
 800e086:	602b      	str	r3, [r5, #0]
 800e088:	f7f6 fc0b 	bl	80048a2 <_isatty>
 800e08c:	1c43      	adds	r3, r0, #1
 800e08e:	d102      	bne.n	800e096 <_isatty_r+0x1a>
 800e090:	682b      	ldr	r3, [r5, #0]
 800e092:	b103      	cbz	r3, 800e096 <_isatty_r+0x1a>
 800e094:	6023      	str	r3, [r4, #0]
 800e096:	bd38      	pop	{r3, r4, r5, pc}
 800e098:	2002d038 	.word	0x2002d038
 800e09c:	00000000 	.word	0x00000000

0800e0a0 <sin>:
 800e0a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e0a2:	ec53 2b10 	vmov	r2, r3, d0
 800e0a6:	4828      	ldr	r0, [pc, #160]	; (800e148 <sin+0xa8>)
 800e0a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e0ac:	4281      	cmp	r1, r0
 800e0ae:	dc07      	bgt.n	800e0c0 <sin+0x20>
 800e0b0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800e140 <sin+0xa0>
 800e0b4:	2000      	movs	r0, #0
 800e0b6:	b005      	add	sp, #20
 800e0b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0bc:	f000 b910 	b.w	800e2e0 <__kernel_sin>
 800e0c0:	4822      	ldr	r0, [pc, #136]	; (800e14c <sin+0xac>)
 800e0c2:	4281      	cmp	r1, r0
 800e0c4:	dd09      	ble.n	800e0da <sin+0x3a>
 800e0c6:	ee10 0a10 	vmov	r0, s0
 800e0ca:	4619      	mov	r1, r3
 800e0cc:	f7f2 f934 	bl	8000338 <__aeabi_dsub>
 800e0d0:	ec41 0b10 	vmov	d0, r0, r1
 800e0d4:	b005      	add	sp, #20
 800e0d6:	f85d fb04 	ldr.w	pc, [sp], #4
 800e0da:	4668      	mov	r0, sp
 800e0dc:	f000 f9c0 	bl	800e460 <__ieee754_rem_pio2>
 800e0e0:	f000 0003 	and.w	r0, r0, #3
 800e0e4:	2801      	cmp	r0, #1
 800e0e6:	d00c      	beq.n	800e102 <sin+0x62>
 800e0e8:	2802      	cmp	r0, #2
 800e0ea:	d011      	beq.n	800e110 <sin+0x70>
 800e0ec:	b9f0      	cbnz	r0, 800e12c <sin+0x8c>
 800e0ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e0f2:	ed9d 0b00 	vldr	d0, [sp]
 800e0f6:	2001      	movs	r0, #1
 800e0f8:	f000 f8f2 	bl	800e2e0 <__kernel_sin>
 800e0fc:	ec51 0b10 	vmov	r0, r1, d0
 800e100:	e7e6      	b.n	800e0d0 <sin+0x30>
 800e102:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e106:	ed9d 0b00 	vldr	d0, [sp]
 800e10a:	f000 f821 	bl	800e150 <__kernel_cos>
 800e10e:	e7f5      	b.n	800e0fc <sin+0x5c>
 800e110:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e114:	ed9d 0b00 	vldr	d0, [sp]
 800e118:	2001      	movs	r0, #1
 800e11a:	f000 f8e1 	bl	800e2e0 <__kernel_sin>
 800e11e:	ec53 2b10 	vmov	r2, r3, d0
 800e122:	ee10 0a10 	vmov	r0, s0
 800e126:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e12a:	e7d1      	b.n	800e0d0 <sin+0x30>
 800e12c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e130:	ed9d 0b00 	vldr	d0, [sp]
 800e134:	f000 f80c 	bl	800e150 <__kernel_cos>
 800e138:	e7f1      	b.n	800e11e <sin+0x7e>
 800e13a:	bf00      	nop
 800e13c:	f3af 8000 	nop.w
	...
 800e148:	3fe921fb 	.word	0x3fe921fb
 800e14c:	7fefffff 	.word	0x7fefffff

0800e150 <__kernel_cos>:
 800e150:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e154:	ec57 6b10 	vmov	r6, r7, d0
 800e158:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e15c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e160:	ed8d 1b00 	vstr	d1, [sp]
 800e164:	da07      	bge.n	800e176 <__kernel_cos+0x26>
 800e166:	ee10 0a10 	vmov	r0, s0
 800e16a:	4639      	mov	r1, r7
 800e16c:	f7f2 fd36 	bl	8000bdc <__aeabi_d2iz>
 800e170:	2800      	cmp	r0, #0
 800e172:	f000 8088 	beq.w	800e286 <__kernel_cos+0x136>
 800e176:	4632      	mov	r2, r6
 800e178:	463b      	mov	r3, r7
 800e17a:	4630      	mov	r0, r6
 800e17c:	4639      	mov	r1, r7
 800e17e:	f7f2 fa93 	bl	80006a8 <__aeabi_dmul>
 800e182:	4b51      	ldr	r3, [pc, #324]	; (800e2c8 <__kernel_cos+0x178>)
 800e184:	2200      	movs	r2, #0
 800e186:	4604      	mov	r4, r0
 800e188:	460d      	mov	r5, r1
 800e18a:	f7f2 fa8d 	bl	80006a8 <__aeabi_dmul>
 800e18e:	a340      	add	r3, pc, #256	; (adr r3, 800e290 <__kernel_cos+0x140>)
 800e190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e194:	4682      	mov	sl, r0
 800e196:	468b      	mov	fp, r1
 800e198:	4620      	mov	r0, r4
 800e19a:	4629      	mov	r1, r5
 800e19c:	f7f2 fa84 	bl	80006a8 <__aeabi_dmul>
 800e1a0:	a33d      	add	r3, pc, #244	; (adr r3, 800e298 <__kernel_cos+0x148>)
 800e1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a6:	f7f2 f8c9 	bl	800033c <__adddf3>
 800e1aa:	4622      	mov	r2, r4
 800e1ac:	462b      	mov	r3, r5
 800e1ae:	f7f2 fa7b 	bl	80006a8 <__aeabi_dmul>
 800e1b2:	a33b      	add	r3, pc, #236	; (adr r3, 800e2a0 <__kernel_cos+0x150>)
 800e1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b8:	f7f2 f8be 	bl	8000338 <__aeabi_dsub>
 800e1bc:	4622      	mov	r2, r4
 800e1be:	462b      	mov	r3, r5
 800e1c0:	f7f2 fa72 	bl	80006a8 <__aeabi_dmul>
 800e1c4:	a338      	add	r3, pc, #224	; (adr r3, 800e2a8 <__kernel_cos+0x158>)
 800e1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ca:	f7f2 f8b7 	bl	800033c <__adddf3>
 800e1ce:	4622      	mov	r2, r4
 800e1d0:	462b      	mov	r3, r5
 800e1d2:	f7f2 fa69 	bl	80006a8 <__aeabi_dmul>
 800e1d6:	a336      	add	r3, pc, #216	; (adr r3, 800e2b0 <__kernel_cos+0x160>)
 800e1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1dc:	f7f2 f8ac 	bl	8000338 <__aeabi_dsub>
 800e1e0:	4622      	mov	r2, r4
 800e1e2:	462b      	mov	r3, r5
 800e1e4:	f7f2 fa60 	bl	80006a8 <__aeabi_dmul>
 800e1e8:	a333      	add	r3, pc, #204	; (adr r3, 800e2b8 <__kernel_cos+0x168>)
 800e1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ee:	f7f2 f8a5 	bl	800033c <__adddf3>
 800e1f2:	4622      	mov	r2, r4
 800e1f4:	462b      	mov	r3, r5
 800e1f6:	f7f2 fa57 	bl	80006a8 <__aeabi_dmul>
 800e1fa:	4622      	mov	r2, r4
 800e1fc:	462b      	mov	r3, r5
 800e1fe:	f7f2 fa53 	bl	80006a8 <__aeabi_dmul>
 800e202:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e206:	4604      	mov	r4, r0
 800e208:	460d      	mov	r5, r1
 800e20a:	4630      	mov	r0, r6
 800e20c:	4639      	mov	r1, r7
 800e20e:	f7f2 fa4b 	bl	80006a8 <__aeabi_dmul>
 800e212:	460b      	mov	r3, r1
 800e214:	4602      	mov	r2, r0
 800e216:	4629      	mov	r1, r5
 800e218:	4620      	mov	r0, r4
 800e21a:	f7f2 f88d 	bl	8000338 <__aeabi_dsub>
 800e21e:	4b2b      	ldr	r3, [pc, #172]	; (800e2cc <__kernel_cos+0x17c>)
 800e220:	4598      	cmp	r8, r3
 800e222:	4606      	mov	r6, r0
 800e224:	460f      	mov	r7, r1
 800e226:	dc10      	bgt.n	800e24a <__kernel_cos+0xfa>
 800e228:	4602      	mov	r2, r0
 800e22a:	460b      	mov	r3, r1
 800e22c:	4650      	mov	r0, sl
 800e22e:	4659      	mov	r1, fp
 800e230:	f7f2 f882 	bl	8000338 <__aeabi_dsub>
 800e234:	460b      	mov	r3, r1
 800e236:	4926      	ldr	r1, [pc, #152]	; (800e2d0 <__kernel_cos+0x180>)
 800e238:	4602      	mov	r2, r0
 800e23a:	2000      	movs	r0, #0
 800e23c:	f7f2 f87c 	bl	8000338 <__aeabi_dsub>
 800e240:	ec41 0b10 	vmov	d0, r0, r1
 800e244:	b003      	add	sp, #12
 800e246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e24a:	4b22      	ldr	r3, [pc, #136]	; (800e2d4 <__kernel_cos+0x184>)
 800e24c:	4920      	ldr	r1, [pc, #128]	; (800e2d0 <__kernel_cos+0x180>)
 800e24e:	4598      	cmp	r8, r3
 800e250:	bfcc      	ite	gt
 800e252:	4d21      	ldrgt	r5, [pc, #132]	; (800e2d8 <__kernel_cos+0x188>)
 800e254:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e258:	2400      	movs	r4, #0
 800e25a:	4622      	mov	r2, r4
 800e25c:	462b      	mov	r3, r5
 800e25e:	2000      	movs	r0, #0
 800e260:	f7f2 f86a 	bl	8000338 <__aeabi_dsub>
 800e264:	4622      	mov	r2, r4
 800e266:	4680      	mov	r8, r0
 800e268:	4689      	mov	r9, r1
 800e26a:	462b      	mov	r3, r5
 800e26c:	4650      	mov	r0, sl
 800e26e:	4659      	mov	r1, fp
 800e270:	f7f2 f862 	bl	8000338 <__aeabi_dsub>
 800e274:	4632      	mov	r2, r6
 800e276:	463b      	mov	r3, r7
 800e278:	f7f2 f85e 	bl	8000338 <__aeabi_dsub>
 800e27c:	4602      	mov	r2, r0
 800e27e:	460b      	mov	r3, r1
 800e280:	4640      	mov	r0, r8
 800e282:	4649      	mov	r1, r9
 800e284:	e7da      	b.n	800e23c <__kernel_cos+0xec>
 800e286:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e2c0 <__kernel_cos+0x170>
 800e28a:	e7db      	b.n	800e244 <__kernel_cos+0xf4>
 800e28c:	f3af 8000 	nop.w
 800e290:	be8838d4 	.word	0xbe8838d4
 800e294:	bda8fae9 	.word	0xbda8fae9
 800e298:	bdb4b1c4 	.word	0xbdb4b1c4
 800e29c:	3e21ee9e 	.word	0x3e21ee9e
 800e2a0:	809c52ad 	.word	0x809c52ad
 800e2a4:	3e927e4f 	.word	0x3e927e4f
 800e2a8:	19cb1590 	.word	0x19cb1590
 800e2ac:	3efa01a0 	.word	0x3efa01a0
 800e2b0:	16c15177 	.word	0x16c15177
 800e2b4:	3f56c16c 	.word	0x3f56c16c
 800e2b8:	5555554c 	.word	0x5555554c
 800e2bc:	3fa55555 	.word	0x3fa55555
 800e2c0:	00000000 	.word	0x00000000
 800e2c4:	3ff00000 	.word	0x3ff00000
 800e2c8:	3fe00000 	.word	0x3fe00000
 800e2cc:	3fd33332 	.word	0x3fd33332
 800e2d0:	3ff00000 	.word	0x3ff00000
 800e2d4:	3fe90000 	.word	0x3fe90000
 800e2d8:	3fd20000 	.word	0x3fd20000
 800e2dc:	00000000 	.word	0x00000000

0800e2e0 <__kernel_sin>:
 800e2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e4:	ed2d 8b04 	vpush	{d8-d9}
 800e2e8:	eeb0 8a41 	vmov.f32	s16, s2
 800e2ec:	eef0 8a61 	vmov.f32	s17, s3
 800e2f0:	ec55 4b10 	vmov	r4, r5, d0
 800e2f4:	b083      	sub	sp, #12
 800e2f6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e2fa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e2fe:	9001      	str	r0, [sp, #4]
 800e300:	da06      	bge.n	800e310 <__kernel_sin+0x30>
 800e302:	ee10 0a10 	vmov	r0, s0
 800e306:	4629      	mov	r1, r5
 800e308:	f7f2 fc68 	bl	8000bdc <__aeabi_d2iz>
 800e30c:	2800      	cmp	r0, #0
 800e30e:	d051      	beq.n	800e3b4 <__kernel_sin+0xd4>
 800e310:	4622      	mov	r2, r4
 800e312:	462b      	mov	r3, r5
 800e314:	4620      	mov	r0, r4
 800e316:	4629      	mov	r1, r5
 800e318:	f7f2 f9c6 	bl	80006a8 <__aeabi_dmul>
 800e31c:	4682      	mov	sl, r0
 800e31e:	468b      	mov	fp, r1
 800e320:	4602      	mov	r2, r0
 800e322:	460b      	mov	r3, r1
 800e324:	4620      	mov	r0, r4
 800e326:	4629      	mov	r1, r5
 800e328:	f7f2 f9be 	bl	80006a8 <__aeabi_dmul>
 800e32c:	a341      	add	r3, pc, #260	; (adr r3, 800e434 <__kernel_sin+0x154>)
 800e32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e332:	4680      	mov	r8, r0
 800e334:	4689      	mov	r9, r1
 800e336:	4650      	mov	r0, sl
 800e338:	4659      	mov	r1, fp
 800e33a:	f7f2 f9b5 	bl	80006a8 <__aeabi_dmul>
 800e33e:	a33f      	add	r3, pc, #252	; (adr r3, 800e43c <__kernel_sin+0x15c>)
 800e340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e344:	f7f1 fff8 	bl	8000338 <__aeabi_dsub>
 800e348:	4652      	mov	r2, sl
 800e34a:	465b      	mov	r3, fp
 800e34c:	f7f2 f9ac 	bl	80006a8 <__aeabi_dmul>
 800e350:	a33c      	add	r3, pc, #240	; (adr r3, 800e444 <__kernel_sin+0x164>)
 800e352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e356:	f7f1 fff1 	bl	800033c <__adddf3>
 800e35a:	4652      	mov	r2, sl
 800e35c:	465b      	mov	r3, fp
 800e35e:	f7f2 f9a3 	bl	80006a8 <__aeabi_dmul>
 800e362:	a33a      	add	r3, pc, #232	; (adr r3, 800e44c <__kernel_sin+0x16c>)
 800e364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e368:	f7f1 ffe6 	bl	8000338 <__aeabi_dsub>
 800e36c:	4652      	mov	r2, sl
 800e36e:	465b      	mov	r3, fp
 800e370:	f7f2 f99a 	bl	80006a8 <__aeabi_dmul>
 800e374:	a337      	add	r3, pc, #220	; (adr r3, 800e454 <__kernel_sin+0x174>)
 800e376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e37a:	f7f1 ffdf 	bl	800033c <__adddf3>
 800e37e:	9b01      	ldr	r3, [sp, #4]
 800e380:	4606      	mov	r6, r0
 800e382:	460f      	mov	r7, r1
 800e384:	b9eb      	cbnz	r3, 800e3c2 <__kernel_sin+0xe2>
 800e386:	4602      	mov	r2, r0
 800e388:	460b      	mov	r3, r1
 800e38a:	4650      	mov	r0, sl
 800e38c:	4659      	mov	r1, fp
 800e38e:	f7f2 f98b 	bl	80006a8 <__aeabi_dmul>
 800e392:	a325      	add	r3, pc, #148	; (adr r3, 800e428 <__kernel_sin+0x148>)
 800e394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e398:	f7f1 ffce 	bl	8000338 <__aeabi_dsub>
 800e39c:	4642      	mov	r2, r8
 800e39e:	464b      	mov	r3, r9
 800e3a0:	f7f2 f982 	bl	80006a8 <__aeabi_dmul>
 800e3a4:	4602      	mov	r2, r0
 800e3a6:	460b      	mov	r3, r1
 800e3a8:	4620      	mov	r0, r4
 800e3aa:	4629      	mov	r1, r5
 800e3ac:	f7f1 ffc6 	bl	800033c <__adddf3>
 800e3b0:	4604      	mov	r4, r0
 800e3b2:	460d      	mov	r5, r1
 800e3b4:	ec45 4b10 	vmov	d0, r4, r5
 800e3b8:	b003      	add	sp, #12
 800e3ba:	ecbd 8b04 	vpop	{d8-d9}
 800e3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3c2:	4b1b      	ldr	r3, [pc, #108]	; (800e430 <__kernel_sin+0x150>)
 800e3c4:	ec51 0b18 	vmov	r0, r1, d8
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	f7f2 f96d 	bl	80006a8 <__aeabi_dmul>
 800e3ce:	4632      	mov	r2, r6
 800e3d0:	ec41 0b19 	vmov	d9, r0, r1
 800e3d4:	463b      	mov	r3, r7
 800e3d6:	4640      	mov	r0, r8
 800e3d8:	4649      	mov	r1, r9
 800e3da:	f7f2 f965 	bl	80006a8 <__aeabi_dmul>
 800e3de:	4602      	mov	r2, r0
 800e3e0:	460b      	mov	r3, r1
 800e3e2:	ec51 0b19 	vmov	r0, r1, d9
 800e3e6:	f7f1 ffa7 	bl	8000338 <__aeabi_dsub>
 800e3ea:	4652      	mov	r2, sl
 800e3ec:	465b      	mov	r3, fp
 800e3ee:	f7f2 f95b 	bl	80006a8 <__aeabi_dmul>
 800e3f2:	ec53 2b18 	vmov	r2, r3, d8
 800e3f6:	f7f1 ff9f 	bl	8000338 <__aeabi_dsub>
 800e3fa:	a30b      	add	r3, pc, #44	; (adr r3, 800e428 <__kernel_sin+0x148>)
 800e3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e400:	4606      	mov	r6, r0
 800e402:	460f      	mov	r7, r1
 800e404:	4640      	mov	r0, r8
 800e406:	4649      	mov	r1, r9
 800e408:	f7f2 f94e 	bl	80006a8 <__aeabi_dmul>
 800e40c:	4602      	mov	r2, r0
 800e40e:	460b      	mov	r3, r1
 800e410:	4630      	mov	r0, r6
 800e412:	4639      	mov	r1, r7
 800e414:	f7f1 ff92 	bl	800033c <__adddf3>
 800e418:	4602      	mov	r2, r0
 800e41a:	460b      	mov	r3, r1
 800e41c:	4620      	mov	r0, r4
 800e41e:	4629      	mov	r1, r5
 800e420:	f7f1 ff8a 	bl	8000338 <__aeabi_dsub>
 800e424:	e7c4      	b.n	800e3b0 <__kernel_sin+0xd0>
 800e426:	bf00      	nop
 800e428:	55555549 	.word	0x55555549
 800e42c:	3fc55555 	.word	0x3fc55555
 800e430:	3fe00000 	.word	0x3fe00000
 800e434:	5acfd57c 	.word	0x5acfd57c
 800e438:	3de5d93a 	.word	0x3de5d93a
 800e43c:	8a2b9ceb 	.word	0x8a2b9ceb
 800e440:	3e5ae5e6 	.word	0x3e5ae5e6
 800e444:	57b1fe7d 	.word	0x57b1fe7d
 800e448:	3ec71de3 	.word	0x3ec71de3
 800e44c:	19c161d5 	.word	0x19c161d5
 800e450:	3f2a01a0 	.word	0x3f2a01a0
 800e454:	1110f8a6 	.word	0x1110f8a6
 800e458:	3f811111 	.word	0x3f811111
 800e45c:	00000000 	.word	0x00000000

0800e460 <__ieee754_rem_pio2>:
 800e460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e464:	ed2d 8b02 	vpush	{d8}
 800e468:	ec55 4b10 	vmov	r4, r5, d0
 800e46c:	4bca      	ldr	r3, [pc, #808]	; (800e798 <__ieee754_rem_pio2+0x338>)
 800e46e:	b08b      	sub	sp, #44	; 0x2c
 800e470:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e474:	4598      	cmp	r8, r3
 800e476:	4682      	mov	sl, r0
 800e478:	9502      	str	r5, [sp, #8]
 800e47a:	dc08      	bgt.n	800e48e <__ieee754_rem_pio2+0x2e>
 800e47c:	2200      	movs	r2, #0
 800e47e:	2300      	movs	r3, #0
 800e480:	ed80 0b00 	vstr	d0, [r0]
 800e484:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e488:	f04f 0b00 	mov.w	fp, #0
 800e48c:	e028      	b.n	800e4e0 <__ieee754_rem_pio2+0x80>
 800e48e:	4bc3      	ldr	r3, [pc, #780]	; (800e79c <__ieee754_rem_pio2+0x33c>)
 800e490:	4598      	cmp	r8, r3
 800e492:	dc78      	bgt.n	800e586 <__ieee754_rem_pio2+0x126>
 800e494:	9b02      	ldr	r3, [sp, #8]
 800e496:	4ec2      	ldr	r6, [pc, #776]	; (800e7a0 <__ieee754_rem_pio2+0x340>)
 800e498:	2b00      	cmp	r3, #0
 800e49a:	ee10 0a10 	vmov	r0, s0
 800e49e:	a3b0      	add	r3, pc, #704	; (adr r3, 800e760 <__ieee754_rem_pio2+0x300>)
 800e4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a4:	4629      	mov	r1, r5
 800e4a6:	dd39      	ble.n	800e51c <__ieee754_rem_pio2+0xbc>
 800e4a8:	f7f1 ff46 	bl	8000338 <__aeabi_dsub>
 800e4ac:	45b0      	cmp	r8, r6
 800e4ae:	4604      	mov	r4, r0
 800e4b0:	460d      	mov	r5, r1
 800e4b2:	d01b      	beq.n	800e4ec <__ieee754_rem_pio2+0x8c>
 800e4b4:	a3ac      	add	r3, pc, #688	; (adr r3, 800e768 <__ieee754_rem_pio2+0x308>)
 800e4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ba:	f7f1 ff3d 	bl	8000338 <__aeabi_dsub>
 800e4be:	4602      	mov	r2, r0
 800e4c0:	460b      	mov	r3, r1
 800e4c2:	e9ca 2300 	strd	r2, r3, [sl]
 800e4c6:	4620      	mov	r0, r4
 800e4c8:	4629      	mov	r1, r5
 800e4ca:	f7f1 ff35 	bl	8000338 <__aeabi_dsub>
 800e4ce:	a3a6      	add	r3, pc, #664	; (adr r3, 800e768 <__ieee754_rem_pio2+0x308>)
 800e4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d4:	f7f1 ff30 	bl	8000338 <__aeabi_dsub>
 800e4d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e4dc:	f04f 0b01 	mov.w	fp, #1
 800e4e0:	4658      	mov	r0, fp
 800e4e2:	b00b      	add	sp, #44	; 0x2c
 800e4e4:	ecbd 8b02 	vpop	{d8}
 800e4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4ec:	a3a0      	add	r3, pc, #640	; (adr r3, 800e770 <__ieee754_rem_pio2+0x310>)
 800e4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4f2:	f7f1 ff21 	bl	8000338 <__aeabi_dsub>
 800e4f6:	a3a0      	add	r3, pc, #640	; (adr r3, 800e778 <__ieee754_rem_pio2+0x318>)
 800e4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4fc:	4604      	mov	r4, r0
 800e4fe:	460d      	mov	r5, r1
 800e500:	f7f1 ff1a 	bl	8000338 <__aeabi_dsub>
 800e504:	4602      	mov	r2, r0
 800e506:	460b      	mov	r3, r1
 800e508:	e9ca 2300 	strd	r2, r3, [sl]
 800e50c:	4620      	mov	r0, r4
 800e50e:	4629      	mov	r1, r5
 800e510:	f7f1 ff12 	bl	8000338 <__aeabi_dsub>
 800e514:	a398      	add	r3, pc, #608	; (adr r3, 800e778 <__ieee754_rem_pio2+0x318>)
 800e516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e51a:	e7db      	b.n	800e4d4 <__ieee754_rem_pio2+0x74>
 800e51c:	f7f1 ff0e 	bl	800033c <__adddf3>
 800e520:	45b0      	cmp	r8, r6
 800e522:	4604      	mov	r4, r0
 800e524:	460d      	mov	r5, r1
 800e526:	d016      	beq.n	800e556 <__ieee754_rem_pio2+0xf6>
 800e528:	a38f      	add	r3, pc, #572	; (adr r3, 800e768 <__ieee754_rem_pio2+0x308>)
 800e52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e52e:	f7f1 ff05 	bl	800033c <__adddf3>
 800e532:	4602      	mov	r2, r0
 800e534:	460b      	mov	r3, r1
 800e536:	e9ca 2300 	strd	r2, r3, [sl]
 800e53a:	4620      	mov	r0, r4
 800e53c:	4629      	mov	r1, r5
 800e53e:	f7f1 fefb 	bl	8000338 <__aeabi_dsub>
 800e542:	a389      	add	r3, pc, #548	; (adr r3, 800e768 <__ieee754_rem_pio2+0x308>)
 800e544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e548:	f7f1 fef8 	bl	800033c <__adddf3>
 800e54c:	f04f 3bff 	mov.w	fp, #4294967295
 800e550:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e554:	e7c4      	b.n	800e4e0 <__ieee754_rem_pio2+0x80>
 800e556:	a386      	add	r3, pc, #536	; (adr r3, 800e770 <__ieee754_rem_pio2+0x310>)
 800e558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55c:	f7f1 feee 	bl	800033c <__adddf3>
 800e560:	a385      	add	r3, pc, #532	; (adr r3, 800e778 <__ieee754_rem_pio2+0x318>)
 800e562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e566:	4604      	mov	r4, r0
 800e568:	460d      	mov	r5, r1
 800e56a:	f7f1 fee7 	bl	800033c <__adddf3>
 800e56e:	4602      	mov	r2, r0
 800e570:	460b      	mov	r3, r1
 800e572:	e9ca 2300 	strd	r2, r3, [sl]
 800e576:	4620      	mov	r0, r4
 800e578:	4629      	mov	r1, r5
 800e57a:	f7f1 fedd 	bl	8000338 <__aeabi_dsub>
 800e57e:	a37e      	add	r3, pc, #504	; (adr r3, 800e778 <__ieee754_rem_pio2+0x318>)
 800e580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e584:	e7e0      	b.n	800e548 <__ieee754_rem_pio2+0xe8>
 800e586:	4b87      	ldr	r3, [pc, #540]	; (800e7a4 <__ieee754_rem_pio2+0x344>)
 800e588:	4598      	cmp	r8, r3
 800e58a:	f300 80d8 	bgt.w	800e73e <__ieee754_rem_pio2+0x2de>
 800e58e:	f000 f96d 	bl	800e86c <fabs>
 800e592:	ec55 4b10 	vmov	r4, r5, d0
 800e596:	ee10 0a10 	vmov	r0, s0
 800e59a:	a379      	add	r3, pc, #484	; (adr r3, 800e780 <__ieee754_rem_pio2+0x320>)
 800e59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a0:	4629      	mov	r1, r5
 800e5a2:	f7f2 f881 	bl	80006a8 <__aeabi_dmul>
 800e5a6:	4b80      	ldr	r3, [pc, #512]	; (800e7a8 <__ieee754_rem_pio2+0x348>)
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	f7f1 fec7 	bl	800033c <__adddf3>
 800e5ae:	f7f2 fb15 	bl	8000bdc <__aeabi_d2iz>
 800e5b2:	4683      	mov	fp, r0
 800e5b4:	f7f2 f80e 	bl	80005d4 <__aeabi_i2d>
 800e5b8:	4602      	mov	r2, r0
 800e5ba:	460b      	mov	r3, r1
 800e5bc:	ec43 2b18 	vmov	d8, r2, r3
 800e5c0:	a367      	add	r3, pc, #412	; (adr r3, 800e760 <__ieee754_rem_pio2+0x300>)
 800e5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c6:	f7f2 f86f 	bl	80006a8 <__aeabi_dmul>
 800e5ca:	4602      	mov	r2, r0
 800e5cc:	460b      	mov	r3, r1
 800e5ce:	4620      	mov	r0, r4
 800e5d0:	4629      	mov	r1, r5
 800e5d2:	f7f1 feb1 	bl	8000338 <__aeabi_dsub>
 800e5d6:	a364      	add	r3, pc, #400	; (adr r3, 800e768 <__ieee754_rem_pio2+0x308>)
 800e5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5dc:	4606      	mov	r6, r0
 800e5de:	460f      	mov	r7, r1
 800e5e0:	ec51 0b18 	vmov	r0, r1, d8
 800e5e4:	f7f2 f860 	bl	80006a8 <__aeabi_dmul>
 800e5e8:	f1bb 0f1f 	cmp.w	fp, #31
 800e5ec:	4604      	mov	r4, r0
 800e5ee:	460d      	mov	r5, r1
 800e5f0:	dc0d      	bgt.n	800e60e <__ieee754_rem_pio2+0x1ae>
 800e5f2:	4b6e      	ldr	r3, [pc, #440]	; (800e7ac <__ieee754_rem_pio2+0x34c>)
 800e5f4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e5f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5fc:	4543      	cmp	r3, r8
 800e5fe:	d006      	beq.n	800e60e <__ieee754_rem_pio2+0x1ae>
 800e600:	4622      	mov	r2, r4
 800e602:	462b      	mov	r3, r5
 800e604:	4630      	mov	r0, r6
 800e606:	4639      	mov	r1, r7
 800e608:	f7f1 fe96 	bl	8000338 <__aeabi_dsub>
 800e60c:	e00e      	b.n	800e62c <__ieee754_rem_pio2+0x1cc>
 800e60e:	462b      	mov	r3, r5
 800e610:	4622      	mov	r2, r4
 800e612:	4630      	mov	r0, r6
 800e614:	4639      	mov	r1, r7
 800e616:	f7f1 fe8f 	bl	8000338 <__aeabi_dsub>
 800e61a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e61e:	9303      	str	r3, [sp, #12]
 800e620:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e624:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800e628:	2b10      	cmp	r3, #16
 800e62a:	dc02      	bgt.n	800e632 <__ieee754_rem_pio2+0x1d2>
 800e62c:	e9ca 0100 	strd	r0, r1, [sl]
 800e630:	e039      	b.n	800e6a6 <__ieee754_rem_pio2+0x246>
 800e632:	a34f      	add	r3, pc, #316	; (adr r3, 800e770 <__ieee754_rem_pio2+0x310>)
 800e634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e638:	ec51 0b18 	vmov	r0, r1, d8
 800e63c:	f7f2 f834 	bl	80006a8 <__aeabi_dmul>
 800e640:	4604      	mov	r4, r0
 800e642:	460d      	mov	r5, r1
 800e644:	4602      	mov	r2, r0
 800e646:	460b      	mov	r3, r1
 800e648:	4630      	mov	r0, r6
 800e64a:	4639      	mov	r1, r7
 800e64c:	f7f1 fe74 	bl	8000338 <__aeabi_dsub>
 800e650:	4602      	mov	r2, r0
 800e652:	460b      	mov	r3, r1
 800e654:	4680      	mov	r8, r0
 800e656:	4689      	mov	r9, r1
 800e658:	4630      	mov	r0, r6
 800e65a:	4639      	mov	r1, r7
 800e65c:	f7f1 fe6c 	bl	8000338 <__aeabi_dsub>
 800e660:	4622      	mov	r2, r4
 800e662:	462b      	mov	r3, r5
 800e664:	f7f1 fe68 	bl	8000338 <__aeabi_dsub>
 800e668:	a343      	add	r3, pc, #268	; (adr r3, 800e778 <__ieee754_rem_pio2+0x318>)
 800e66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e66e:	4604      	mov	r4, r0
 800e670:	460d      	mov	r5, r1
 800e672:	ec51 0b18 	vmov	r0, r1, d8
 800e676:	f7f2 f817 	bl	80006a8 <__aeabi_dmul>
 800e67a:	4622      	mov	r2, r4
 800e67c:	462b      	mov	r3, r5
 800e67e:	f7f1 fe5b 	bl	8000338 <__aeabi_dsub>
 800e682:	4602      	mov	r2, r0
 800e684:	460b      	mov	r3, r1
 800e686:	4604      	mov	r4, r0
 800e688:	460d      	mov	r5, r1
 800e68a:	4640      	mov	r0, r8
 800e68c:	4649      	mov	r1, r9
 800e68e:	f7f1 fe53 	bl	8000338 <__aeabi_dsub>
 800e692:	9a03      	ldr	r2, [sp, #12]
 800e694:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e698:	1ad3      	subs	r3, r2, r3
 800e69a:	2b31      	cmp	r3, #49	; 0x31
 800e69c:	dc24      	bgt.n	800e6e8 <__ieee754_rem_pio2+0x288>
 800e69e:	e9ca 0100 	strd	r0, r1, [sl]
 800e6a2:	4646      	mov	r6, r8
 800e6a4:	464f      	mov	r7, r9
 800e6a6:	e9da 8900 	ldrd	r8, r9, [sl]
 800e6aa:	4630      	mov	r0, r6
 800e6ac:	4642      	mov	r2, r8
 800e6ae:	464b      	mov	r3, r9
 800e6b0:	4639      	mov	r1, r7
 800e6b2:	f7f1 fe41 	bl	8000338 <__aeabi_dsub>
 800e6b6:	462b      	mov	r3, r5
 800e6b8:	4622      	mov	r2, r4
 800e6ba:	f7f1 fe3d 	bl	8000338 <__aeabi_dsub>
 800e6be:	9b02      	ldr	r3, [sp, #8]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e6c6:	f6bf af0b 	bge.w	800e4e0 <__ieee754_rem_pio2+0x80>
 800e6ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e6ce:	f8ca 3004 	str.w	r3, [sl, #4]
 800e6d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e6d6:	f8ca 8000 	str.w	r8, [sl]
 800e6da:	f8ca 0008 	str.w	r0, [sl, #8]
 800e6de:	f8ca 300c 	str.w	r3, [sl, #12]
 800e6e2:	f1cb 0b00 	rsb	fp, fp, #0
 800e6e6:	e6fb      	b.n	800e4e0 <__ieee754_rem_pio2+0x80>
 800e6e8:	a327      	add	r3, pc, #156	; (adr r3, 800e788 <__ieee754_rem_pio2+0x328>)
 800e6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ee:	ec51 0b18 	vmov	r0, r1, d8
 800e6f2:	f7f1 ffd9 	bl	80006a8 <__aeabi_dmul>
 800e6f6:	4604      	mov	r4, r0
 800e6f8:	460d      	mov	r5, r1
 800e6fa:	4602      	mov	r2, r0
 800e6fc:	460b      	mov	r3, r1
 800e6fe:	4640      	mov	r0, r8
 800e700:	4649      	mov	r1, r9
 800e702:	f7f1 fe19 	bl	8000338 <__aeabi_dsub>
 800e706:	4602      	mov	r2, r0
 800e708:	460b      	mov	r3, r1
 800e70a:	4606      	mov	r6, r0
 800e70c:	460f      	mov	r7, r1
 800e70e:	4640      	mov	r0, r8
 800e710:	4649      	mov	r1, r9
 800e712:	f7f1 fe11 	bl	8000338 <__aeabi_dsub>
 800e716:	4622      	mov	r2, r4
 800e718:	462b      	mov	r3, r5
 800e71a:	f7f1 fe0d 	bl	8000338 <__aeabi_dsub>
 800e71e:	a31c      	add	r3, pc, #112	; (adr r3, 800e790 <__ieee754_rem_pio2+0x330>)
 800e720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e724:	4604      	mov	r4, r0
 800e726:	460d      	mov	r5, r1
 800e728:	ec51 0b18 	vmov	r0, r1, d8
 800e72c:	f7f1 ffbc 	bl	80006a8 <__aeabi_dmul>
 800e730:	4622      	mov	r2, r4
 800e732:	462b      	mov	r3, r5
 800e734:	f7f1 fe00 	bl	8000338 <__aeabi_dsub>
 800e738:	4604      	mov	r4, r0
 800e73a:	460d      	mov	r5, r1
 800e73c:	e760      	b.n	800e600 <__ieee754_rem_pio2+0x1a0>
 800e73e:	4b1c      	ldr	r3, [pc, #112]	; (800e7b0 <__ieee754_rem_pio2+0x350>)
 800e740:	4598      	cmp	r8, r3
 800e742:	dd37      	ble.n	800e7b4 <__ieee754_rem_pio2+0x354>
 800e744:	ee10 2a10 	vmov	r2, s0
 800e748:	462b      	mov	r3, r5
 800e74a:	4620      	mov	r0, r4
 800e74c:	4629      	mov	r1, r5
 800e74e:	f7f1 fdf3 	bl	8000338 <__aeabi_dsub>
 800e752:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e756:	e9ca 0100 	strd	r0, r1, [sl]
 800e75a:	e695      	b.n	800e488 <__ieee754_rem_pio2+0x28>
 800e75c:	f3af 8000 	nop.w
 800e760:	54400000 	.word	0x54400000
 800e764:	3ff921fb 	.word	0x3ff921fb
 800e768:	1a626331 	.word	0x1a626331
 800e76c:	3dd0b461 	.word	0x3dd0b461
 800e770:	1a600000 	.word	0x1a600000
 800e774:	3dd0b461 	.word	0x3dd0b461
 800e778:	2e037073 	.word	0x2e037073
 800e77c:	3ba3198a 	.word	0x3ba3198a
 800e780:	6dc9c883 	.word	0x6dc9c883
 800e784:	3fe45f30 	.word	0x3fe45f30
 800e788:	2e000000 	.word	0x2e000000
 800e78c:	3ba3198a 	.word	0x3ba3198a
 800e790:	252049c1 	.word	0x252049c1
 800e794:	397b839a 	.word	0x397b839a
 800e798:	3fe921fb 	.word	0x3fe921fb
 800e79c:	4002d97b 	.word	0x4002d97b
 800e7a0:	3ff921fb 	.word	0x3ff921fb
 800e7a4:	413921fb 	.word	0x413921fb
 800e7a8:	3fe00000 	.word	0x3fe00000
 800e7ac:	08010794 	.word	0x08010794
 800e7b0:	7fefffff 	.word	0x7fefffff
 800e7b4:	ea4f 5628 	mov.w	r6, r8, asr #20
 800e7b8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800e7bc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800e7c0:	4620      	mov	r0, r4
 800e7c2:	460d      	mov	r5, r1
 800e7c4:	f7f2 fa0a 	bl	8000bdc <__aeabi_d2iz>
 800e7c8:	f7f1 ff04 	bl	80005d4 <__aeabi_i2d>
 800e7cc:	4602      	mov	r2, r0
 800e7ce:	460b      	mov	r3, r1
 800e7d0:	4620      	mov	r0, r4
 800e7d2:	4629      	mov	r1, r5
 800e7d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e7d8:	f7f1 fdae 	bl	8000338 <__aeabi_dsub>
 800e7dc:	4b21      	ldr	r3, [pc, #132]	; (800e864 <__ieee754_rem_pio2+0x404>)
 800e7de:	2200      	movs	r2, #0
 800e7e0:	f7f1 ff62 	bl	80006a8 <__aeabi_dmul>
 800e7e4:	460d      	mov	r5, r1
 800e7e6:	4604      	mov	r4, r0
 800e7e8:	f7f2 f9f8 	bl	8000bdc <__aeabi_d2iz>
 800e7ec:	f7f1 fef2 	bl	80005d4 <__aeabi_i2d>
 800e7f0:	4602      	mov	r2, r0
 800e7f2:	460b      	mov	r3, r1
 800e7f4:	4620      	mov	r0, r4
 800e7f6:	4629      	mov	r1, r5
 800e7f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e7fc:	f7f1 fd9c 	bl	8000338 <__aeabi_dsub>
 800e800:	4b18      	ldr	r3, [pc, #96]	; (800e864 <__ieee754_rem_pio2+0x404>)
 800e802:	2200      	movs	r2, #0
 800e804:	f7f1 ff50 	bl	80006a8 <__aeabi_dmul>
 800e808:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e80c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800e810:	2703      	movs	r7, #3
 800e812:	2400      	movs	r4, #0
 800e814:	2500      	movs	r5, #0
 800e816:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800e81a:	4622      	mov	r2, r4
 800e81c:	462b      	mov	r3, r5
 800e81e:	46b9      	mov	r9, r7
 800e820:	3f01      	subs	r7, #1
 800e822:	f7f2 f9a9 	bl	8000b78 <__aeabi_dcmpeq>
 800e826:	2800      	cmp	r0, #0
 800e828:	d1f5      	bne.n	800e816 <__ieee754_rem_pio2+0x3b6>
 800e82a:	4b0f      	ldr	r3, [pc, #60]	; (800e868 <__ieee754_rem_pio2+0x408>)
 800e82c:	9301      	str	r3, [sp, #4]
 800e82e:	2302      	movs	r3, #2
 800e830:	9300      	str	r3, [sp, #0]
 800e832:	4632      	mov	r2, r6
 800e834:	464b      	mov	r3, r9
 800e836:	4651      	mov	r1, sl
 800e838:	a804      	add	r0, sp, #16
 800e83a:	f000 f821 	bl	800e880 <__kernel_rem_pio2>
 800e83e:	9b02      	ldr	r3, [sp, #8]
 800e840:	2b00      	cmp	r3, #0
 800e842:	4683      	mov	fp, r0
 800e844:	f6bf ae4c 	bge.w	800e4e0 <__ieee754_rem_pio2+0x80>
 800e848:	e9da 2100 	ldrd	r2, r1, [sl]
 800e84c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e850:	e9ca 2300 	strd	r2, r3, [sl]
 800e854:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e858:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e85c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e860:	e73f      	b.n	800e6e2 <__ieee754_rem_pio2+0x282>
 800e862:	bf00      	nop
 800e864:	41700000 	.word	0x41700000
 800e868:	08010814 	.word	0x08010814

0800e86c <fabs>:
 800e86c:	ec51 0b10 	vmov	r0, r1, d0
 800e870:	ee10 2a10 	vmov	r2, s0
 800e874:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e878:	ec43 2b10 	vmov	d0, r2, r3
 800e87c:	4770      	bx	lr
	...

0800e880 <__kernel_rem_pio2>:
 800e880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e884:	ed2d 8b02 	vpush	{d8}
 800e888:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e88c:	f112 0f14 	cmn.w	r2, #20
 800e890:	9306      	str	r3, [sp, #24]
 800e892:	9104      	str	r1, [sp, #16]
 800e894:	4bc2      	ldr	r3, [pc, #776]	; (800eba0 <__kernel_rem_pio2+0x320>)
 800e896:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e898:	9009      	str	r0, [sp, #36]	; 0x24
 800e89a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e89e:	9300      	str	r3, [sp, #0]
 800e8a0:	9b06      	ldr	r3, [sp, #24]
 800e8a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800e8a6:	bfa8      	it	ge
 800e8a8:	1ed4      	subge	r4, r2, #3
 800e8aa:	9305      	str	r3, [sp, #20]
 800e8ac:	bfb2      	itee	lt
 800e8ae:	2400      	movlt	r4, #0
 800e8b0:	2318      	movge	r3, #24
 800e8b2:	fb94 f4f3 	sdivge	r4, r4, r3
 800e8b6:	f06f 0317 	mvn.w	r3, #23
 800e8ba:	fb04 3303 	mla	r3, r4, r3, r3
 800e8be:	eb03 0a02 	add.w	sl, r3, r2
 800e8c2:	9b00      	ldr	r3, [sp, #0]
 800e8c4:	9a05      	ldr	r2, [sp, #20]
 800e8c6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800eb90 <__kernel_rem_pio2+0x310>
 800e8ca:	eb03 0802 	add.w	r8, r3, r2
 800e8ce:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e8d0:	1aa7      	subs	r7, r4, r2
 800e8d2:	ae20      	add	r6, sp, #128	; 0x80
 800e8d4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e8d8:	2500      	movs	r5, #0
 800e8da:	4545      	cmp	r5, r8
 800e8dc:	dd13      	ble.n	800e906 <__kernel_rem_pio2+0x86>
 800e8de:	9b06      	ldr	r3, [sp, #24]
 800e8e0:	aa20      	add	r2, sp, #128	; 0x80
 800e8e2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e8e6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e8ea:	f04f 0800 	mov.w	r8, #0
 800e8ee:	9b00      	ldr	r3, [sp, #0]
 800e8f0:	4598      	cmp	r8, r3
 800e8f2:	dc31      	bgt.n	800e958 <__kernel_rem_pio2+0xd8>
 800e8f4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800eb90 <__kernel_rem_pio2+0x310>
 800e8f8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e8fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e900:	462f      	mov	r7, r5
 800e902:	2600      	movs	r6, #0
 800e904:	e01b      	b.n	800e93e <__kernel_rem_pio2+0xbe>
 800e906:	42ef      	cmn	r7, r5
 800e908:	d407      	bmi.n	800e91a <__kernel_rem_pio2+0x9a>
 800e90a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e90e:	f7f1 fe61 	bl	80005d4 <__aeabi_i2d>
 800e912:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e916:	3501      	adds	r5, #1
 800e918:	e7df      	b.n	800e8da <__kernel_rem_pio2+0x5a>
 800e91a:	ec51 0b18 	vmov	r0, r1, d8
 800e91e:	e7f8      	b.n	800e912 <__kernel_rem_pio2+0x92>
 800e920:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e924:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e928:	f7f1 febe 	bl	80006a8 <__aeabi_dmul>
 800e92c:	4602      	mov	r2, r0
 800e92e:	460b      	mov	r3, r1
 800e930:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e934:	f7f1 fd02 	bl	800033c <__adddf3>
 800e938:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e93c:	3601      	adds	r6, #1
 800e93e:	9b05      	ldr	r3, [sp, #20]
 800e940:	429e      	cmp	r6, r3
 800e942:	f1a7 0708 	sub.w	r7, r7, #8
 800e946:	ddeb      	ble.n	800e920 <__kernel_rem_pio2+0xa0>
 800e948:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e94c:	f108 0801 	add.w	r8, r8, #1
 800e950:	ecab 7b02 	vstmia	fp!, {d7}
 800e954:	3508      	adds	r5, #8
 800e956:	e7ca      	b.n	800e8ee <__kernel_rem_pio2+0x6e>
 800e958:	9b00      	ldr	r3, [sp, #0]
 800e95a:	aa0c      	add	r2, sp, #48	; 0x30
 800e95c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e960:	930b      	str	r3, [sp, #44]	; 0x2c
 800e962:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e964:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e968:	9c00      	ldr	r4, [sp, #0]
 800e96a:	930a      	str	r3, [sp, #40]	; 0x28
 800e96c:	00e3      	lsls	r3, r4, #3
 800e96e:	9308      	str	r3, [sp, #32]
 800e970:	ab98      	add	r3, sp, #608	; 0x260
 800e972:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e976:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e97a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800e97e:	ab70      	add	r3, sp, #448	; 0x1c0
 800e980:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e984:	46c3      	mov	fp, r8
 800e986:	46a1      	mov	r9, r4
 800e988:	f1b9 0f00 	cmp.w	r9, #0
 800e98c:	f1a5 0508 	sub.w	r5, r5, #8
 800e990:	dc77      	bgt.n	800ea82 <__kernel_rem_pio2+0x202>
 800e992:	ec47 6b10 	vmov	d0, r6, r7
 800e996:	4650      	mov	r0, sl
 800e998:	f000 fac2 	bl	800ef20 <scalbn>
 800e99c:	ec57 6b10 	vmov	r6, r7, d0
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e9a6:	ee10 0a10 	vmov	r0, s0
 800e9aa:	4639      	mov	r1, r7
 800e9ac:	f7f1 fe7c 	bl	80006a8 <__aeabi_dmul>
 800e9b0:	ec41 0b10 	vmov	d0, r0, r1
 800e9b4:	f000 fb34 	bl	800f020 <floor>
 800e9b8:	4b7a      	ldr	r3, [pc, #488]	; (800eba4 <__kernel_rem_pio2+0x324>)
 800e9ba:	ec51 0b10 	vmov	r0, r1, d0
 800e9be:	2200      	movs	r2, #0
 800e9c0:	f7f1 fe72 	bl	80006a8 <__aeabi_dmul>
 800e9c4:	4602      	mov	r2, r0
 800e9c6:	460b      	mov	r3, r1
 800e9c8:	4630      	mov	r0, r6
 800e9ca:	4639      	mov	r1, r7
 800e9cc:	f7f1 fcb4 	bl	8000338 <__aeabi_dsub>
 800e9d0:	460f      	mov	r7, r1
 800e9d2:	4606      	mov	r6, r0
 800e9d4:	f7f2 f902 	bl	8000bdc <__aeabi_d2iz>
 800e9d8:	9002      	str	r0, [sp, #8]
 800e9da:	f7f1 fdfb 	bl	80005d4 <__aeabi_i2d>
 800e9de:	4602      	mov	r2, r0
 800e9e0:	460b      	mov	r3, r1
 800e9e2:	4630      	mov	r0, r6
 800e9e4:	4639      	mov	r1, r7
 800e9e6:	f7f1 fca7 	bl	8000338 <__aeabi_dsub>
 800e9ea:	f1ba 0f00 	cmp.w	sl, #0
 800e9ee:	4606      	mov	r6, r0
 800e9f0:	460f      	mov	r7, r1
 800e9f2:	dd6d      	ble.n	800ead0 <__kernel_rem_pio2+0x250>
 800e9f4:	1e61      	subs	r1, r4, #1
 800e9f6:	ab0c      	add	r3, sp, #48	; 0x30
 800e9f8:	9d02      	ldr	r5, [sp, #8]
 800e9fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e9fe:	f1ca 0018 	rsb	r0, sl, #24
 800ea02:	fa43 f200 	asr.w	r2, r3, r0
 800ea06:	4415      	add	r5, r2
 800ea08:	4082      	lsls	r2, r0
 800ea0a:	1a9b      	subs	r3, r3, r2
 800ea0c:	aa0c      	add	r2, sp, #48	; 0x30
 800ea0e:	9502      	str	r5, [sp, #8]
 800ea10:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ea14:	f1ca 0217 	rsb	r2, sl, #23
 800ea18:	fa43 fb02 	asr.w	fp, r3, r2
 800ea1c:	f1bb 0f00 	cmp.w	fp, #0
 800ea20:	dd65      	ble.n	800eaee <__kernel_rem_pio2+0x26e>
 800ea22:	9b02      	ldr	r3, [sp, #8]
 800ea24:	2200      	movs	r2, #0
 800ea26:	3301      	adds	r3, #1
 800ea28:	9302      	str	r3, [sp, #8]
 800ea2a:	4615      	mov	r5, r2
 800ea2c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ea30:	4294      	cmp	r4, r2
 800ea32:	f300 809f 	bgt.w	800eb74 <__kernel_rem_pio2+0x2f4>
 800ea36:	f1ba 0f00 	cmp.w	sl, #0
 800ea3a:	dd07      	ble.n	800ea4c <__kernel_rem_pio2+0x1cc>
 800ea3c:	f1ba 0f01 	cmp.w	sl, #1
 800ea40:	f000 80c1 	beq.w	800ebc6 <__kernel_rem_pio2+0x346>
 800ea44:	f1ba 0f02 	cmp.w	sl, #2
 800ea48:	f000 80c7 	beq.w	800ebda <__kernel_rem_pio2+0x35a>
 800ea4c:	f1bb 0f02 	cmp.w	fp, #2
 800ea50:	d14d      	bne.n	800eaee <__kernel_rem_pio2+0x26e>
 800ea52:	4632      	mov	r2, r6
 800ea54:	463b      	mov	r3, r7
 800ea56:	4954      	ldr	r1, [pc, #336]	; (800eba8 <__kernel_rem_pio2+0x328>)
 800ea58:	2000      	movs	r0, #0
 800ea5a:	f7f1 fc6d 	bl	8000338 <__aeabi_dsub>
 800ea5e:	4606      	mov	r6, r0
 800ea60:	460f      	mov	r7, r1
 800ea62:	2d00      	cmp	r5, #0
 800ea64:	d043      	beq.n	800eaee <__kernel_rem_pio2+0x26e>
 800ea66:	4650      	mov	r0, sl
 800ea68:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800eb98 <__kernel_rem_pio2+0x318>
 800ea6c:	f000 fa58 	bl	800ef20 <scalbn>
 800ea70:	4630      	mov	r0, r6
 800ea72:	4639      	mov	r1, r7
 800ea74:	ec53 2b10 	vmov	r2, r3, d0
 800ea78:	f7f1 fc5e 	bl	8000338 <__aeabi_dsub>
 800ea7c:	4606      	mov	r6, r0
 800ea7e:	460f      	mov	r7, r1
 800ea80:	e035      	b.n	800eaee <__kernel_rem_pio2+0x26e>
 800ea82:	4b4a      	ldr	r3, [pc, #296]	; (800ebac <__kernel_rem_pio2+0x32c>)
 800ea84:	2200      	movs	r2, #0
 800ea86:	4630      	mov	r0, r6
 800ea88:	4639      	mov	r1, r7
 800ea8a:	f7f1 fe0d 	bl	80006a8 <__aeabi_dmul>
 800ea8e:	f7f2 f8a5 	bl	8000bdc <__aeabi_d2iz>
 800ea92:	f7f1 fd9f 	bl	80005d4 <__aeabi_i2d>
 800ea96:	4602      	mov	r2, r0
 800ea98:	460b      	mov	r3, r1
 800ea9a:	ec43 2b18 	vmov	d8, r2, r3
 800ea9e:	4b44      	ldr	r3, [pc, #272]	; (800ebb0 <__kernel_rem_pio2+0x330>)
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	f7f1 fe01 	bl	80006a8 <__aeabi_dmul>
 800eaa6:	4602      	mov	r2, r0
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	4630      	mov	r0, r6
 800eaac:	4639      	mov	r1, r7
 800eaae:	f7f1 fc43 	bl	8000338 <__aeabi_dsub>
 800eab2:	f7f2 f893 	bl	8000bdc <__aeabi_d2iz>
 800eab6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eaba:	f84b 0b04 	str.w	r0, [fp], #4
 800eabe:	ec51 0b18 	vmov	r0, r1, d8
 800eac2:	f7f1 fc3b 	bl	800033c <__adddf3>
 800eac6:	f109 39ff 	add.w	r9, r9, #4294967295
 800eaca:	4606      	mov	r6, r0
 800eacc:	460f      	mov	r7, r1
 800eace:	e75b      	b.n	800e988 <__kernel_rem_pio2+0x108>
 800ead0:	d106      	bne.n	800eae0 <__kernel_rem_pio2+0x260>
 800ead2:	1e63      	subs	r3, r4, #1
 800ead4:	aa0c      	add	r2, sp, #48	; 0x30
 800ead6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eada:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800eade:	e79d      	b.n	800ea1c <__kernel_rem_pio2+0x19c>
 800eae0:	4b34      	ldr	r3, [pc, #208]	; (800ebb4 <__kernel_rem_pio2+0x334>)
 800eae2:	2200      	movs	r2, #0
 800eae4:	f7f2 f866 	bl	8000bb4 <__aeabi_dcmpge>
 800eae8:	2800      	cmp	r0, #0
 800eaea:	d140      	bne.n	800eb6e <__kernel_rem_pio2+0x2ee>
 800eaec:	4683      	mov	fp, r0
 800eaee:	2200      	movs	r2, #0
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	4630      	mov	r0, r6
 800eaf4:	4639      	mov	r1, r7
 800eaf6:	f7f2 f83f 	bl	8000b78 <__aeabi_dcmpeq>
 800eafa:	2800      	cmp	r0, #0
 800eafc:	f000 80c1 	beq.w	800ec82 <__kernel_rem_pio2+0x402>
 800eb00:	1e65      	subs	r5, r4, #1
 800eb02:	462b      	mov	r3, r5
 800eb04:	2200      	movs	r2, #0
 800eb06:	9900      	ldr	r1, [sp, #0]
 800eb08:	428b      	cmp	r3, r1
 800eb0a:	da6d      	bge.n	800ebe8 <__kernel_rem_pio2+0x368>
 800eb0c:	2a00      	cmp	r2, #0
 800eb0e:	f000 808a 	beq.w	800ec26 <__kernel_rem_pio2+0x3a6>
 800eb12:	ab0c      	add	r3, sp, #48	; 0x30
 800eb14:	f1aa 0a18 	sub.w	sl, sl, #24
 800eb18:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	f000 80ae 	beq.w	800ec7e <__kernel_rem_pio2+0x3fe>
 800eb22:	4650      	mov	r0, sl
 800eb24:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800eb98 <__kernel_rem_pio2+0x318>
 800eb28:	f000 f9fa 	bl	800ef20 <scalbn>
 800eb2c:	1c6b      	adds	r3, r5, #1
 800eb2e:	00da      	lsls	r2, r3, #3
 800eb30:	9205      	str	r2, [sp, #20]
 800eb32:	ec57 6b10 	vmov	r6, r7, d0
 800eb36:	aa70      	add	r2, sp, #448	; 0x1c0
 800eb38:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800ebac <__kernel_rem_pio2+0x32c>
 800eb3c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800eb40:	462c      	mov	r4, r5
 800eb42:	f04f 0800 	mov.w	r8, #0
 800eb46:	2c00      	cmp	r4, #0
 800eb48:	f280 80d4 	bge.w	800ecf4 <__kernel_rem_pio2+0x474>
 800eb4c:	462c      	mov	r4, r5
 800eb4e:	2c00      	cmp	r4, #0
 800eb50:	f2c0 8102 	blt.w	800ed58 <__kernel_rem_pio2+0x4d8>
 800eb54:	4b18      	ldr	r3, [pc, #96]	; (800ebb8 <__kernel_rem_pio2+0x338>)
 800eb56:	461e      	mov	r6, r3
 800eb58:	ab70      	add	r3, sp, #448	; 0x1c0
 800eb5a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800eb5e:	1b2b      	subs	r3, r5, r4
 800eb60:	f04f 0900 	mov.w	r9, #0
 800eb64:	f04f 0a00 	mov.w	sl, #0
 800eb68:	2700      	movs	r7, #0
 800eb6a:	9306      	str	r3, [sp, #24]
 800eb6c:	e0e6      	b.n	800ed3c <__kernel_rem_pio2+0x4bc>
 800eb6e:	f04f 0b02 	mov.w	fp, #2
 800eb72:	e756      	b.n	800ea22 <__kernel_rem_pio2+0x1a2>
 800eb74:	f8d8 3000 	ldr.w	r3, [r8]
 800eb78:	bb05      	cbnz	r5, 800ebbc <__kernel_rem_pio2+0x33c>
 800eb7a:	b123      	cbz	r3, 800eb86 <__kernel_rem_pio2+0x306>
 800eb7c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800eb80:	f8c8 3000 	str.w	r3, [r8]
 800eb84:	2301      	movs	r3, #1
 800eb86:	3201      	adds	r2, #1
 800eb88:	f108 0804 	add.w	r8, r8, #4
 800eb8c:	461d      	mov	r5, r3
 800eb8e:	e74f      	b.n	800ea30 <__kernel_rem_pio2+0x1b0>
	...
 800eb9c:	3ff00000 	.word	0x3ff00000
 800eba0:	08010960 	.word	0x08010960
 800eba4:	40200000 	.word	0x40200000
 800eba8:	3ff00000 	.word	0x3ff00000
 800ebac:	3e700000 	.word	0x3e700000
 800ebb0:	41700000 	.word	0x41700000
 800ebb4:	3fe00000 	.word	0x3fe00000
 800ebb8:	08010920 	.word	0x08010920
 800ebbc:	1acb      	subs	r3, r1, r3
 800ebbe:	f8c8 3000 	str.w	r3, [r8]
 800ebc2:	462b      	mov	r3, r5
 800ebc4:	e7df      	b.n	800eb86 <__kernel_rem_pio2+0x306>
 800ebc6:	1e62      	subs	r2, r4, #1
 800ebc8:	ab0c      	add	r3, sp, #48	; 0x30
 800ebca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebce:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ebd2:	a90c      	add	r1, sp, #48	; 0x30
 800ebd4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ebd8:	e738      	b.n	800ea4c <__kernel_rem_pio2+0x1cc>
 800ebda:	1e62      	subs	r2, r4, #1
 800ebdc:	ab0c      	add	r3, sp, #48	; 0x30
 800ebde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebe2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ebe6:	e7f4      	b.n	800ebd2 <__kernel_rem_pio2+0x352>
 800ebe8:	a90c      	add	r1, sp, #48	; 0x30
 800ebea:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ebee:	3b01      	subs	r3, #1
 800ebf0:	430a      	orrs	r2, r1
 800ebf2:	e788      	b.n	800eb06 <__kernel_rem_pio2+0x286>
 800ebf4:	3301      	adds	r3, #1
 800ebf6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ebfa:	2900      	cmp	r1, #0
 800ebfc:	d0fa      	beq.n	800ebf4 <__kernel_rem_pio2+0x374>
 800ebfe:	9a08      	ldr	r2, [sp, #32]
 800ec00:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800ec04:	446a      	add	r2, sp
 800ec06:	3a98      	subs	r2, #152	; 0x98
 800ec08:	9208      	str	r2, [sp, #32]
 800ec0a:	9a06      	ldr	r2, [sp, #24]
 800ec0c:	a920      	add	r1, sp, #128	; 0x80
 800ec0e:	18a2      	adds	r2, r4, r2
 800ec10:	18e3      	adds	r3, r4, r3
 800ec12:	f104 0801 	add.w	r8, r4, #1
 800ec16:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800ec1a:	9302      	str	r3, [sp, #8]
 800ec1c:	9b02      	ldr	r3, [sp, #8]
 800ec1e:	4543      	cmp	r3, r8
 800ec20:	da04      	bge.n	800ec2c <__kernel_rem_pio2+0x3ac>
 800ec22:	461c      	mov	r4, r3
 800ec24:	e6a2      	b.n	800e96c <__kernel_rem_pio2+0xec>
 800ec26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ec28:	2301      	movs	r3, #1
 800ec2a:	e7e4      	b.n	800ebf6 <__kernel_rem_pio2+0x376>
 800ec2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec2e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ec32:	f7f1 fccf 	bl	80005d4 <__aeabi_i2d>
 800ec36:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ec3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec3c:	46ab      	mov	fp, r5
 800ec3e:	461c      	mov	r4, r3
 800ec40:	f04f 0900 	mov.w	r9, #0
 800ec44:	2600      	movs	r6, #0
 800ec46:	2700      	movs	r7, #0
 800ec48:	9b05      	ldr	r3, [sp, #20]
 800ec4a:	4599      	cmp	r9, r3
 800ec4c:	dd06      	ble.n	800ec5c <__kernel_rem_pio2+0x3dc>
 800ec4e:	9b08      	ldr	r3, [sp, #32]
 800ec50:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ec54:	f108 0801 	add.w	r8, r8, #1
 800ec58:	9308      	str	r3, [sp, #32]
 800ec5a:	e7df      	b.n	800ec1c <__kernel_rem_pio2+0x39c>
 800ec5c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ec60:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ec64:	f7f1 fd20 	bl	80006a8 <__aeabi_dmul>
 800ec68:	4602      	mov	r2, r0
 800ec6a:	460b      	mov	r3, r1
 800ec6c:	4630      	mov	r0, r6
 800ec6e:	4639      	mov	r1, r7
 800ec70:	f7f1 fb64 	bl	800033c <__adddf3>
 800ec74:	f109 0901 	add.w	r9, r9, #1
 800ec78:	4606      	mov	r6, r0
 800ec7a:	460f      	mov	r7, r1
 800ec7c:	e7e4      	b.n	800ec48 <__kernel_rem_pio2+0x3c8>
 800ec7e:	3d01      	subs	r5, #1
 800ec80:	e747      	b.n	800eb12 <__kernel_rem_pio2+0x292>
 800ec82:	ec47 6b10 	vmov	d0, r6, r7
 800ec86:	f1ca 0000 	rsb	r0, sl, #0
 800ec8a:	f000 f949 	bl	800ef20 <scalbn>
 800ec8e:	ec57 6b10 	vmov	r6, r7, d0
 800ec92:	4ba0      	ldr	r3, [pc, #640]	; (800ef14 <__kernel_rem_pio2+0x694>)
 800ec94:	ee10 0a10 	vmov	r0, s0
 800ec98:	2200      	movs	r2, #0
 800ec9a:	4639      	mov	r1, r7
 800ec9c:	f7f1 ff8a 	bl	8000bb4 <__aeabi_dcmpge>
 800eca0:	b1f8      	cbz	r0, 800ece2 <__kernel_rem_pio2+0x462>
 800eca2:	4b9d      	ldr	r3, [pc, #628]	; (800ef18 <__kernel_rem_pio2+0x698>)
 800eca4:	2200      	movs	r2, #0
 800eca6:	4630      	mov	r0, r6
 800eca8:	4639      	mov	r1, r7
 800ecaa:	f7f1 fcfd 	bl	80006a8 <__aeabi_dmul>
 800ecae:	f7f1 ff95 	bl	8000bdc <__aeabi_d2iz>
 800ecb2:	4680      	mov	r8, r0
 800ecb4:	f7f1 fc8e 	bl	80005d4 <__aeabi_i2d>
 800ecb8:	4b96      	ldr	r3, [pc, #600]	; (800ef14 <__kernel_rem_pio2+0x694>)
 800ecba:	2200      	movs	r2, #0
 800ecbc:	f7f1 fcf4 	bl	80006a8 <__aeabi_dmul>
 800ecc0:	460b      	mov	r3, r1
 800ecc2:	4602      	mov	r2, r0
 800ecc4:	4639      	mov	r1, r7
 800ecc6:	4630      	mov	r0, r6
 800ecc8:	f7f1 fb36 	bl	8000338 <__aeabi_dsub>
 800eccc:	f7f1 ff86 	bl	8000bdc <__aeabi_d2iz>
 800ecd0:	1c65      	adds	r5, r4, #1
 800ecd2:	ab0c      	add	r3, sp, #48	; 0x30
 800ecd4:	f10a 0a18 	add.w	sl, sl, #24
 800ecd8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ecdc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ece0:	e71f      	b.n	800eb22 <__kernel_rem_pio2+0x2a2>
 800ece2:	4630      	mov	r0, r6
 800ece4:	4639      	mov	r1, r7
 800ece6:	f7f1 ff79 	bl	8000bdc <__aeabi_d2iz>
 800ecea:	ab0c      	add	r3, sp, #48	; 0x30
 800ecec:	4625      	mov	r5, r4
 800ecee:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ecf2:	e716      	b.n	800eb22 <__kernel_rem_pio2+0x2a2>
 800ecf4:	ab0c      	add	r3, sp, #48	; 0x30
 800ecf6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ecfa:	f7f1 fc6b 	bl	80005d4 <__aeabi_i2d>
 800ecfe:	4632      	mov	r2, r6
 800ed00:	463b      	mov	r3, r7
 800ed02:	f7f1 fcd1 	bl	80006a8 <__aeabi_dmul>
 800ed06:	4642      	mov	r2, r8
 800ed08:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800ed0c:	464b      	mov	r3, r9
 800ed0e:	4630      	mov	r0, r6
 800ed10:	4639      	mov	r1, r7
 800ed12:	f7f1 fcc9 	bl	80006a8 <__aeabi_dmul>
 800ed16:	3c01      	subs	r4, #1
 800ed18:	4606      	mov	r6, r0
 800ed1a:	460f      	mov	r7, r1
 800ed1c:	e713      	b.n	800eb46 <__kernel_rem_pio2+0x2c6>
 800ed1e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800ed22:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800ed26:	f7f1 fcbf 	bl	80006a8 <__aeabi_dmul>
 800ed2a:	4602      	mov	r2, r0
 800ed2c:	460b      	mov	r3, r1
 800ed2e:	4648      	mov	r0, r9
 800ed30:	4651      	mov	r1, sl
 800ed32:	f7f1 fb03 	bl	800033c <__adddf3>
 800ed36:	3701      	adds	r7, #1
 800ed38:	4681      	mov	r9, r0
 800ed3a:	468a      	mov	sl, r1
 800ed3c:	9b00      	ldr	r3, [sp, #0]
 800ed3e:	429f      	cmp	r7, r3
 800ed40:	dc02      	bgt.n	800ed48 <__kernel_rem_pio2+0x4c8>
 800ed42:	9b06      	ldr	r3, [sp, #24]
 800ed44:	429f      	cmp	r7, r3
 800ed46:	ddea      	ble.n	800ed1e <__kernel_rem_pio2+0x49e>
 800ed48:	9a06      	ldr	r2, [sp, #24]
 800ed4a:	ab48      	add	r3, sp, #288	; 0x120
 800ed4c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800ed50:	e9c6 9a00 	strd	r9, sl, [r6]
 800ed54:	3c01      	subs	r4, #1
 800ed56:	e6fa      	b.n	800eb4e <__kernel_rem_pio2+0x2ce>
 800ed58:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ed5a:	2b02      	cmp	r3, #2
 800ed5c:	dc0b      	bgt.n	800ed76 <__kernel_rem_pio2+0x4f6>
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	dc39      	bgt.n	800edd6 <__kernel_rem_pio2+0x556>
 800ed62:	d05d      	beq.n	800ee20 <__kernel_rem_pio2+0x5a0>
 800ed64:	9b02      	ldr	r3, [sp, #8]
 800ed66:	f003 0007 	and.w	r0, r3, #7
 800ed6a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800ed6e:	ecbd 8b02 	vpop	{d8}
 800ed72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed76:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ed78:	2b03      	cmp	r3, #3
 800ed7a:	d1f3      	bne.n	800ed64 <__kernel_rem_pio2+0x4e4>
 800ed7c:	9b05      	ldr	r3, [sp, #20]
 800ed7e:	9500      	str	r5, [sp, #0]
 800ed80:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800ed84:	eb0d 0403 	add.w	r4, sp, r3
 800ed88:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800ed8c:	46a2      	mov	sl, r4
 800ed8e:	9b00      	ldr	r3, [sp, #0]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	f1aa 0a08 	sub.w	sl, sl, #8
 800ed96:	dc69      	bgt.n	800ee6c <__kernel_rem_pio2+0x5ec>
 800ed98:	46aa      	mov	sl, r5
 800ed9a:	f1ba 0f01 	cmp.w	sl, #1
 800ed9e:	f1a4 0408 	sub.w	r4, r4, #8
 800eda2:	f300 8083 	bgt.w	800eeac <__kernel_rem_pio2+0x62c>
 800eda6:	9c05      	ldr	r4, [sp, #20]
 800eda8:	ab48      	add	r3, sp, #288	; 0x120
 800edaa:	441c      	add	r4, r3
 800edac:	2000      	movs	r0, #0
 800edae:	2100      	movs	r1, #0
 800edb0:	2d01      	cmp	r5, #1
 800edb2:	f300 809a 	bgt.w	800eeea <__kernel_rem_pio2+0x66a>
 800edb6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800edba:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800edbe:	f1bb 0f00 	cmp.w	fp, #0
 800edc2:	f040 8098 	bne.w	800eef6 <__kernel_rem_pio2+0x676>
 800edc6:	9b04      	ldr	r3, [sp, #16]
 800edc8:	e9c3 7800 	strd	r7, r8, [r3]
 800edcc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800edd0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800edd4:	e7c6      	b.n	800ed64 <__kernel_rem_pio2+0x4e4>
 800edd6:	9e05      	ldr	r6, [sp, #20]
 800edd8:	ab48      	add	r3, sp, #288	; 0x120
 800edda:	441e      	add	r6, r3
 800eddc:	462c      	mov	r4, r5
 800edde:	2000      	movs	r0, #0
 800ede0:	2100      	movs	r1, #0
 800ede2:	2c00      	cmp	r4, #0
 800ede4:	da33      	bge.n	800ee4e <__kernel_rem_pio2+0x5ce>
 800ede6:	f1bb 0f00 	cmp.w	fp, #0
 800edea:	d036      	beq.n	800ee5a <__kernel_rem_pio2+0x5da>
 800edec:	4602      	mov	r2, r0
 800edee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800edf2:	9c04      	ldr	r4, [sp, #16]
 800edf4:	e9c4 2300 	strd	r2, r3, [r4]
 800edf8:	4602      	mov	r2, r0
 800edfa:	460b      	mov	r3, r1
 800edfc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800ee00:	f7f1 fa9a 	bl	8000338 <__aeabi_dsub>
 800ee04:	ae4a      	add	r6, sp, #296	; 0x128
 800ee06:	2401      	movs	r4, #1
 800ee08:	42a5      	cmp	r5, r4
 800ee0a:	da29      	bge.n	800ee60 <__kernel_rem_pio2+0x5e0>
 800ee0c:	f1bb 0f00 	cmp.w	fp, #0
 800ee10:	d002      	beq.n	800ee18 <__kernel_rem_pio2+0x598>
 800ee12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee16:	4619      	mov	r1, r3
 800ee18:	9b04      	ldr	r3, [sp, #16]
 800ee1a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ee1e:	e7a1      	b.n	800ed64 <__kernel_rem_pio2+0x4e4>
 800ee20:	9c05      	ldr	r4, [sp, #20]
 800ee22:	ab48      	add	r3, sp, #288	; 0x120
 800ee24:	441c      	add	r4, r3
 800ee26:	2000      	movs	r0, #0
 800ee28:	2100      	movs	r1, #0
 800ee2a:	2d00      	cmp	r5, #0
 800ee2c:	da09      	bge.n	800ee42 <__kernel_rem_pio2+0x5c2>
 800ee2e:	f1bb 0f00 	cmp.w	fp, #0
 800ee32:	d002      	beq.n	800ee3a <__kernel_rem_pio2+0x5ba>
 800ee34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee38:	4619      	mov	r1, r3
 800ee3a:	9b04      	ldr	r3, [sp, #16]
 800ee3c:	e9c3 0100 	strd	r0, r1, [r3]
 800ee40:	e790      	b.n	800ed64 <__kernel_rem_pio2+0x4e4>
 800ee42:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ee46:	f7f1 fa79 	bl	800033c <__adddf3>
 800ee4a:	3d01      	subs	r5, #1
 800ee4c:	e7ed      	b.n	800ee2a <__kernel_rem_pio2+0x5aa>
 800ee4e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800ee52:	f7f1 fa73 	bl	800033c <__adddf3>
 800ee56:	3c01      	subs	r4, #1
 800ee58:	e7c3      	b.n	800ede2 <__kernel_rem_pio2+0x562>
 800ee5a:	4602      	mov	r2, r0
 800ee5c:	460b      	mov	r3, r1
 800ee5e:	e7c8      	b.n	800edf2 <__kernel_rem_pio2+0x572>
 800ee60:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ee64:	f7f1 fa6a 	bl	800033c <__adddf3>
 800ee68:	3401      	adds	r4, #1
 800ee6a:	e7cd      	b.n	800ee08 <__kernel_rem_pio2+0x588>
 800ee6c:	e9da 8900 	ldrd	r8, r9, [sl]
 800ee70:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ee74:	9b00      	ldr	r3, [sp, #0]
 800ee76:	3b01      	subs	r3, #1
 800ee78:	9300      	str	r3, [sp, #0]
 800ee7a:	4632      	mov	r2, r6
 800ee7c:	463b      	mov	r3, r7
 800ee7e:	4640      	mov	r0, r8
 800ee80:	4649      	mov	r1, r9
 800ee82:	f7f1 fa5b 	bl	800033c <__adddf3>
 800ee86:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ee8a:	4602      	mov	r2, r0
 800ee8c:	460b      	mov	r3, r1
 800ee8e:	4640      	mov	r0, r8
 800ee90:	4649      	mov	r1, r9
 800ee92:	f7f1 fa51 	bl	8000338 <__aeabi_dsub>
 800ee96:	4632      	mov	r2, r6
 800ee98:	463b      	mov	r3, r7
 800ee9a:	f7f1 fa4f 	bl	800033c <__adddf3>
 800ee9e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800eea2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800eea6:	ed8a 7b00 	vstr	d7, [sl]
 800eeaa:	e770      	b.n	800ed8e <__kernel_rem_pio2+0x50e>
 800eeac:	e9d4 8900 	ldrd	r8, r9, [r4]
 800eeb0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800eeb4:	4640      	mov	r0, r8
 800eeb6:	4632      	mov	r2, r6
 800eeb8:	463b      	mov	r3, r7
 800eeba:	4649      	mov	r1, r9
 800eebc:	f7f1 fa3e 	bl	800033c <__adddf3>
 800eec0:	e9cd 0100 	strd	r0, r1, [sp]
 800eec4:	4602      	mov	r2, r0
 800eec6:	460b      	mov	r3, r1
 800eec8:	4640      	mov	r0, r8
 800eeca:	4649      	mov	r1, r9
 800eecc:	f7f1 fa34 	bl	8000338 <__aeabi_dsub>
 800eed0:	4632      	mov	r2, r6
 800eed2:	463b      	mov	r3, r7
 800eed4:	f7f1 fa32 	bl	800033c <__adddf3>
 800eed8:	ed9d 7b00 	vldr	d7, [sp]
 800eedc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800eee0:	ed84 7b00 	vstr	d7, [r4]
 800eee4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eee8:	e757      	b.n	800ed9a <__kernel_rem_pio2+0x51a>
 800eeea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800eeee:	f7f1 fa25 	bl	800033c <__adddf3>
 800eef2:	3d01      	subs	r5, #1
 800eef4:	e75c      	b.n	800edb0 <__kernel_rem_pio2+0x530>
 800eef6:	9b04      	ldr	r3, [sp, #16]
 800eef8:	9a04      	ldr	r2, [sp, #16]
 800eefa:	601f      	str	r7, [r3, #0]
 800eefc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800ef00:	605c      	str	r4, [r3, #4]
 800ef02:	609d      	str	r5, [r3, #8]
 800ef04:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ef08:	60d3      	str	r3, [r2, #12]
 800ef0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef0e:	6110      	str	r0, [r2, #16]
 800ef10:	6153      	str	r3, [r2, #20]
 800ef12:	e727      	b.n	800ed64 <__kernel_rem_pio2+0x4e4>
 800ef14:	41700000 	.word	0x41700000
 800ef18:	3e700000 	.word	0x3e700000
 800ef1c:	00000000 	.word	0x00000000

0800ef20 <scalbn>:
 800ef20:	b570      	push	{r4, r5, r6, lr}
 800ef22:	ec55 4b10 	vmov	r4, r5, d0
 800ef26:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ef2a:	4606      	mov	r6, r0
 800ef2c:	462b      	mov	r3, r5
 800ef2e:	b999      	cbnz	r1, 800ef58 <scalbn+0x38>
 800ef30:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ef34:	4323      	orrs	r3, r4
 800ef36:	d03f      	beq.n	800efb8 <scalbn+0x98>
 800ef38:	4b35      	ldr	r3, [pc, #212]	; (800f010 <scalbn+0xf0>)
 800ef3a:	4629      	mov	r1, r5
 800ef3c:	ee10 0a10 	vmov	r0, s0
 800ef40:	2200      	movs	r2, #0
 800ef42:	f7f1 fbb1 	bl	80006a8 <__aeabi_dmul>
 800ef46:	4b33      	ldr	r3, [pc, #204]	; (800f014 <scalbn+0xf4>)
 800ef48:	429e      	cmp	r6, r3
 800ef4a:	4604      	mov	r4, r0
 800ef4c:	460d      	mov	r5, r1
 800ef4e:	da10      	bge.n	800ef72 <scalbn+0x52>
 800ef50:	a327      	add	r3, pc, #156	; (adr r3, 800eff0 <scalbn+0xd0>)
 800ef52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef56:	e01f      	b.n	800ef98 <scalbn+0x78>
 800ef58:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ef5c:	4291      	cmp	r1, r2
 800ef5e:	d10c      	bne.n	800ef7a <scalbn+0x5a>
 800ef60:	ee10 2a10 	vmov	r2, s0
 800ef64:	4620      	mov	r0, r4
 800ef66:	4629      	mov	r1, r5
 800ef68:	f7f1 f9e8 	bl	800033c <__adddf3>
 800ef6c:	4604      	mov	r4, r0
 800ef6e:	460d      	mov	r5, r1
 800ef70:	e022      	b.n	800efb8 <scalbn+0x98>
 800ef72:	460b      	mov	r3, r1
 800ef74:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ef78:	3936      	subs	r1, #54	; 0x36
 800ef7a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800ef7e:	4296      	cmp	r6, r2
 800ef80:	dd0d      	ble.n	800ef9e <scalbn+0x7e>
 800ef82:	2d00      	cmp	r5, #0
 800ef84:	a11c      	add	r1, pc, #112	; (adr r1, 800eff8 <scalbn+0xd8>)
 800ef86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef8a:	da02      	bge.n	800ef92 <scalbn+0x72>
 800ef8c:	a11c      	add	r1, pc, #112	; (adr r1, 800f000 <scalbn+0xe0>)
 800ef8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef92:	a319      	add	r3, pc, #100	; (adr r3, 800eff8 <scalbn+0xd8>)
 800ef94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef98:	f7f1 fb86 	bl	80006a8 <__aeabi_dmul>
 800ef9c:	e7e6      	b.n	800ef6c <scalbn+0x4c>
 800ef9e:	1872      	adds	r2, r6, r1
 800efa0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800efa4:	428a      	cmp	r2, r1
 800efa6:	dcec      	bgt.n	800ef82 <scalbn+0x62>
 800efa8:	2a00      	cmp	r2, #0
 800efaa:	dd08      	ble.n	800efbe <scalbn+0x9e>
 800efac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800efb0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800efb4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800efb8:	ec45 4b10 	vmov	d0, r4, r5
 800efbc:	bd70      	pop	{r4, r5, r6, pc}
 800efbe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800efc2:	da08      	bge.n	800efd6 <scalbn+0xb6>
 800efc4:	2d00      	cmp	r5, #0
 800efc6:	a10a      	add	r1, pc, #40	; (adr r1, 800eff0 <scalbn+0xd0>)
 800efc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800efcc:	dac0      	bge.n	800ef50 <scalbn+0x30>
 800efce:	a10e      	add	r1, pc, #56	; (adr r1, 800f008 <scalbn+0xe8>)
 800efd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800efd4:	e7bc      	b.n	800ef50 <scalbn+0x30>
 800efd6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800efda:	3236      	adds	r2, #54	; 0x36
 800efdc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800efe0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800efe4:	4620      	mov	r0, r4
 800efe6:	4b0c      	ldr	r3, [pc, #48]	; (800f018 <scalbn+0xf8>)
 800efe8:	2200      	movs	r2, #0
 800efea:	e7d5      	b.n	800ef98 <scalbn+0x78>
 800efec:	f3af 8000 	nop.w
 800eff0:	c2f8f359 	.word	0xc2f8f359
 800eff4:	01a56e1f 	.word	0x01a56e1f
 800eff8:	8800759c 	.word	0x8800759c
 800effc:	7e37e43c 	.word	0x7e37e43c
 800f000:	8800759c 	.word	0x8800759c
 800f004:	fe37e43c 	.word	0xfe37e43c
 800f008:	c2f8f359 	.word	0xc2f8f359
 800f00c:	81a56e1f 	.word	0x81a56e1f
 800f010:	43500000 	.word	0x43500000
 800f014:	ffff3cb0 	.word	0xffff3cb0
 800f018:	3c900000 	.word	0x3c900000
 800f01c:	00000000 	.word	0x00000000

0800f020 <floor>:
 800f020:	ec51 0b10 	vmov	r0, r1, d0
 800f024:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f02c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800f030:	2e13      	cmp	r6, #19
 800f032:	ee10 5a10 	vmov	r5, s0
 800f036:	ee10 8a10 	vmov	r8, s0
 800f03a:	460c      	mov	r4, r1
 800f03c:	dc31      	bgt.n	800f0a2 <floor+0x82>
 800f03e:	2e00      	cmp	r6, #0
 800f040:	da14      	bge.n	800f06c <floor+0x4c>
 800f042:	a333      	add	r3, pc, #204	; (adr r3, 800f110 <floor+0xf0>)
 800f044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f048:	f7f1 f978 	bl	800033c <__adddf3>
 800f04c:	2200      	movs	r2, #0
 800f04e:	2300      	movs	r3, #0
 800f050:	f7f1 fdba 	bl	8000bc8 <__aeabi_dcmpgt>
 800f054:	b138      	cbz	r0, 800f066 <floor+0x46>
 800f056:	2c00      	cmp	r4, #0
 800f058:	da53      	bge.n	800f102 <floor+0xe2>
 800f05a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800f05e:	4325      	orrs	r5, r4
 800f060:	d052      	beq.n	800f108 <floor+0xe8>
 800f062:	4c2d      	ldr	r4, [pc, #180]	; (800f118 <floor+0xf8>)
 800f064:	2500      	movs	r5, #0
 800f066:	4621      	mov	r1, r4
 800f068:	4628      	mov	r0, r5
 800f06a:	e024      	b.n	800f0b6 <floor+0x96>
 800f06c:	4f2b      	ldr	r7, [pc, #172]	; (800f11c <floor+0xfc>)
 800f06e:	4137      	asrs	r7, r6
 800f070:	ea01 0307 	and.w	r3, r1, r7
 800f074:	4303      	orrs	r3, r0
 800f076:	d01e      	beq.n	800f0b6 <floor+0x96>
 800f078:	a325      	add	r3, pc, #148	; (adr r3, 800f110 <floor+0xf0>)
 800f07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f07e:	f7f1 f95d 	bl	800033c <__adddf3>
 800f082:	2200      	movs	r2, #0
 800f084:	2300      	movs	r3, #0
 800f086:	f7f1 fd9f 	bl	8000bc8 <__aeabi_dcmpgt>
 800f08a:	2800      	cmp	r0, #0
 800f08c:	d0eb      	beq.n	800f066 <floor+0x46>
 800f08e:	2c00      	cmp	r4, #0
 800f090:	bfbe      	ittt	lt
 800f092:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f096:	4133      	asrlt	r3, r6
 800f098:	18e4      	addlt	r4, r4, r3
 800f09a:	ea24 0407 	bic.w	r4, r4, r7
 800f09e:	2500      	movs	r5, #0
 800f0a0:	e7e1      	b.n	800f066 <floor+0x46>
 800f0a2:	2e33      	cmp	r6, #51	; 0x33
 800f0a4:	dd0b      	ble.n	800f0be <floor+0x9e>
 800f0a6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f0aa:	d104      	bne.n	800f0b6 <floor+0x96>
 800f0ac:	ee10 2a10 	vmov	r2, s0
 800f0b0:	460b      	mov	r3, r1
 800f0b2:	f7f1 f943 	bl	800033c <__adddf3>
 800f0b6:	ec41 0b10 	vmov	d0, r0, r1
 800f0ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0be:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800f0c2:	f04f 37ff 	mov.w	r7, #4294967295
 800f0c6:	40df      	lsrs	r7, r3
 800f0c8:	4238      	tst	r0, r7
 800f0ca:	d0f4      	beq.n	800f0b6 <floor+0x96>
 800f0cc:	a310      	add	r3, pc, #64	; (adr r3, 800f110 <floor+0xf0>)
 800f0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d2:	f7f1 f933 	bl	800033c <__adddf3>
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	2300      	movs	r3, #0
 800f0da:	f7f1 fd75 	bl	8000bc8 <__aeabi_dcmpgt>
 800f0de:	2800      	cmp	r0, #0
 800f0e0:	d0c1      	beq.n	800f066 <floor+0x46>
 800f0e2:	2c00      	cmp	r4, #0
 800f0e4:	da0a      	bge.n	800f0fc <floor+0xdc>
 800f0e6:	2e14      	cmp	r6, #20
 800f0e8:	d101      	bne.n	800f0ee <floor+0xce>
 800f0ea:	3401      	adds	r4, #1
 800f0ec:	e006      	b.n	800f0fc <floor+0xdc>
 800f0ee:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f0f2:	2301      	movs	r3, #1
 800f0f4:	40b3      	lsls	r3, r6
 800f0f6:	441d      	add	r5, r3
 800f0f8:	45a8      	cmp	r8, r5
 800f0fa:	d8f6      	bhi.n	800f0ea <floor+0xca>
 800f0fc:	ea25 0507 	bic.w	r5, r5, r7
 800f100:	e7b1      	b.n	800f066 <floor+0x46>
 800f102:	2500      	movs	r5, #0
 800f104:	462c      	mov	r4, r5
 800f106:	e7ae      	b.n	800f066 <floor+0x46>
 800f108:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800f10c:	e7ab      	b.n	800f066 <floor+0x46>
 800f10e:	bf00      	nop
 800f110:	8800759c 	.word	0x8800759c
 800f114:	7e37e43c 	.word	0x7e37e43c
 800f118:	bff00000 	.word	0xbff00000
 800f11c:	000fffff 	.word	0x000fffff

0800f120 <_gettimeofday>:
 800f120:	4b02      	ldr	r3, [pc, #8]	; (800f12c <_gettimeofday+0xc>)
 800f122:	2258      	movs	r2, #88	; 0x58
 800f124:	601a      	str	r2, [r3, #0]
 800f126:	f04f 30ff 	mov.w	r0, #4294967295
 800f12a:	4770      	bx	lr
 800f12c:	2002d038 	.word	0x2002d038

0800f130 <_init>:
 800f130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f132:	bf00      	nop
 800f134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f136:	bc08      	pop	{r3}
 800f138:	469e      	mov	lr, r3
 800f13a:	4770      	bx	lr

0800f13c <_fini>:
 800f13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f13e:	bf00      	nop
 800f140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f142:	bc08      	pop	{r3}
 800f144:	469e      	mov	lr, r3
 800f146:	4770      	bx	lr
