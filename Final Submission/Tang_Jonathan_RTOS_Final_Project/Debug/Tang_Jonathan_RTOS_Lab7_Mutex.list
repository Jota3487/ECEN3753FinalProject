
Tang_Jonathan_RTOS_Lab7_Mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b14c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001528  0800b2fc  0800b2fc  0001b2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c824  0800c824  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800c824  0800c824  0001c824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c82c  0800c82c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c82c  0800c82c  0001c82c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c830  0800c830  0001c830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800c834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0002c830  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2002c8a0  2002c8a0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000209ec  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000467e  00000000  00000000  00040acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001af8  00000000  00000000  00045150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000149e  00000000  00000000  00046c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000293a8  00000000  00000000  000480e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e392  00000000  00000000  0007148e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f1943  00000000  00000000  0008f820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007450  00000000  00000000  00181164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000eb  00000000  00000000  001885b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b2e4 	.word	0x0800b2e4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	0800b2e4 	.word	0x0800b2e4

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	2002bce4 	.word	0x2002bce4

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b970 	b.w	800057c <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9e08      	ldr	r6, [sp, #32]
 80002ba:	460d      	mov	r5, r1
 80002bc:	4604      	mov	r4, r0
 80002be:	460f      	mov	r7, r1
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d14a      	bne.n	800035a <__udivmoddi4+0xa6>
 80002c4:	428a      	cmp	r2, r1
 80002c6:	4694      	mov	ip, r2
 80002c8:	d965      	bls.n	8000396 <__udivmoddi4+0xe2>
 80002ca:	fab2 f382 	clz	r3, r2
 80002ce:	b143      	cbz	r3, 80002e2 <__udivmoddi4+0x2e>
 80002d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d4:	f1c3 0220 	rsb	r2, r3, #32
 80002d8:	409f      	lsls	r7, r3
 80002da:	fa20 f202 	lsr.w	r2, r0, r2
 80002de:	4317      	orrs	r7, r2
 80002e0:	409c      	lsls	r4, r3
 80002e2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e6:	fa1f f58c 	uxth.w	r5, ip
 80002ea:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ee:	0c22      	lsrs	r2, r4, #16
 80002f0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f8:	fb01 f005 	mul.w	r0, r1, r5
 80002fc:	4290      	cmp	r0, r2
 80002fe:	d90a      	bls.n	8000316 <__udivmoddi4+0x62>
 8000300:	eb1c 0202 	adds.w	r2, ip, r2
 8000304:	f101 37ff 	add.w	r7, r1, #4294967295
 8000308:	f080 811c 	bcs.w	8000544 <__udivmoddi4+0x290>
 800030c:	4290      	cmp	r0, r2
 800030e:	f240 8119 	bls.w	8000544 <__udivmoddi4+0x290>
 8000312:	3902      	subs	r1, #2
 8000314:	4462      	add	r2, ip
 8000316:	1a12      	subs	r2, r2, r0
 8000318:	b2a4      	uxth	r4, r4
 800031a:	fbb2 f0fe 	udiv	r0, r2, lr
 800031e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000322:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000326:	fb00 f505 	mul.w	r5, r0, r5
 800032a:	42a5      	cmp	r5, r4
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x90>
 800032e:	eb1c 0404 	adds.w	r4, ip, r4
 8000332:	f100 32ff 	add.w	r2, r0, #4294967295
 8000336:	f080 8107 	bcs.w	8000548 <__udivmoddi4+0x294>
 800033a:	42a5      	cmp	r5, r4
 800033c:	f240 8104 	bls.w	8000548 <__udivmoddi4+0x294>
 8000340:	4464      	add	r4, ip
 8000342:	3802      	subs	r0, #2
 8000344:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	2100      	movs	r1, #0
 800034c:	b11e      	cbz	r6, 8000356 <__udivmoddi4+0xa2>
 800034e:	40dc      	lsrs	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	e9c6 4300 	strd	r4, r3, [r6]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0xbc>
 800035e:	2e00      	cmp	r6, #0
 8000360:	f000 80ed 	beq.w	800053e <__udivmoddi4+0x28a>
 8000364:	2100      	movs	r1, #0
 8000366:	e9c6 0500 	strd	r0, r5, [r6]
 800036a:	4608      	mov	r0, r1
 800036c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000370:	fab3 f183 	clz	r1, r3
 8000374:	2900      	cmp	r1, #0
 8000376:	d149      	bne.n	800040c <__udivmoddi4+0x158>
 8000378:	42ab      	cmp	r3, r5
 800037a:	d302      	bcc.n	8000382 <__udivmoddi4+0xce>
 800037c:	4282      	cmp	r2, r0
 800037e:	f200 80f8 	bhi.w	8000572 <__udivmoddi4+0x2be>
 8000382:	1a84      	subs	r4, r0, r2
 8000384:	eb65 0203 	sbc.w	r2, r5, r3
 8000388:	2001      	movs	r0, #1
 800038a:	4617      	mov	r7, r2
 800038c:	2e00      	cmp	r6, #0
 800038e:	d0e2      	beq.n	8000356 <__udivmoddi4+0xa2>
 8000390:	e9c6 4700 	strd	r4, r7, [r6]
 8000394:	e7df      	b.n	8000356 <__udivmoddi4+0xa2>
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xe6>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f382 	clz	r3, r2
 800039e:	2b00      	cmp	r3, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x210>
 80003a4:	1a8a      	subs	r2, r1, r2
 80003a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003aa:	fa1f fe8c 	uxth.w	lr, ip
 80003ae:	2101      	movs	r1, #1
 80003b0:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b4:	fb07 2015 	mls	r0, r7, r5, r2
 80003b8:	0c22      	lsrs	r2, r4, #16
 80003ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003be:	fb0e f005 	mul.w	r0, lr, r5
 80003c2:	4290      	cmp	r0, r2
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0x124>
 80003c6:	eb1c 0202 	adds.w	r2, ip, r2
 80003ca:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ce:	d202      	bcs.n	80003d6 <__udivmoddi4+0x122>
 80003d0:	4290      	cmp	r0, r2
 80003d2:	f200 80cb 	bhi.w	800056c <__udivmoddi4+0x2b8>
 80003d6:	4645      	mov	r5, r8
 80003d8:	1a12      	subs	r2, r2, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb2 f0f7 	udiv	r0, r2, r7
 80003e0:	fb07 2210 	mls	r2, r7, r0, r2
 80003e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e8:	fb0e fe00 	mul.w	lr, lr, r0
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x14e>
 80003f0:	eb1c 0404 	adds.w	r4, ip, r4
 80003f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f8:	d202      	bcs.n	8000400 <__udivmoddi4+0x14c>
 80003fa:	45a6      	cmp	lr, r4
 80003fc:	f200 80bb 	bhi.w	8000576 <__udivmoddi4+0x2c2>
 8000400:	4610      	mov	r0, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800040a:	e79f      	b.n	800034c <__udivmoddi4+0x98>
 800040c:	f1c1 0720 	rsb	r7, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 fc07 	lsr.w	ip, r2, r7
 8000416:	ea4c 0c03 	orr.w	ip, ip, r3
 800041a:	fa05 f401 	lsl.w	r4, r5, r1
 800041e:	fa20 f307 	lsr.w	r3, r0, r7
 8000422:	40fd      	lsrs	r5, r7
 8000424:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fbb5 f8f9 	udiv	r8, r5, r9
 800042e:	fa1f fe8c 	uxth.w	lr, ip
 8000432:	fb09 5518 	mls	r5, r9, r8, r5
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800043c:	fb08 f50e 	mul.w	r5, r8, lr
 8000440:	42a5      	cmp	r5, r4
 8000442:	fa02 f201 	lsl.w	r2, r2, r1
 8000446:	fa00 f001 	lsl.w	r0, r0, r1
 800044a:	d90b      	bls.n	8000464 <__udivmoddi4+0x1b0>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f108 3aff 	add.w	sl, r8, #4294967295
 8000454:	f080 8088 	bcs.w	8000568 <__udivmoddi4+0x2b4>
 8000458:	42a5      	cmp	r5, r4
 800045a:	f240 8085 	bls.w	8000568 <__udivmoddi4+0x2b4>
 800045e:	f1a8 0802 	sub.w	r8, r8, #2
 8000462:	4464      	add	r4, ip
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	b29d      	uxth	r5, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000474:	fb03 fe0e 	mul.w	lr, r3, lr
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1da>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f103 35ff 	add.w	r5, r3, #4294967295
 8000484:	d26c      	bcs.n	8000560 <__udivmoddi4+0x2ac>
 8000486:	45a6      	cmp	lr, r4
 8000488:	d96a      	bls.n	8000560 <__udivmoddi4+0x2ac>
 800048a:	3b02      	subs	r3, #2
 800048c:	4464      	add	r4, ip
 800048e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000492:	fba3 9502 	umull	r9, r5, r3, r2
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	42ac      	cmp	r4, r5
 800049c:	46c8      	mov	r8, r9
 800049e:	46ae      	mov	lr, r5
 80004a0:	d356      	bcc.n	8000550 <__udivmoddi4+0x29c>
 80004a2:	d053      	beq.n	800054c <__udivmoddi4+0x298>
 80004a4:	b156      	cbz	r6, 80004bc <__udivmoddi4+0x208>
 80004a6:	ebb0 0208 	subs.w	r2, r0, r8
 80004aa:	eb64 040e 	sbc.w	r4, r4, lr
 80004ae:	fa04 f707 	lsl.w	r7, r4, r7
 80004b2:	40ca      	lsrs	r2, r1
 80004b4:	40cc      	lsrs	r4, r1
 80004b6:	4317      	orrs	r7, r2
 80004b8:	e9c6 7400 	strd	r7, r4, [r6]
 80004bc:	4618      	mov	r0, r3
 80004be:	2100      	movs	r1, #0
 80004c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c4:	f1c3 0120 	rsb	r1, r3, #32
 80004c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004cc:	fa20 f201 	lsr.w	r2, r0, r1
 80004d0:	fa25 f101 	lsr.w	r1, r5, r1
 80004d4:	409d      	lsls	r5, r3
 80004d6:	432a      	orrs	r2, r5
 80004d8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004dc:	fa1f fe8c 	uxth.w	lr, ip
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1510 	mls	r5, r7, r0, r1
 80004e8:	0c11      	lsrs	r1, r2, #16
 80004ea:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ee:	fb00 f50e 	mul.w	r5, r0, lr
 80004f2:	428d      	cmp	r5, r1
 80004f4:	fa04 f403 	lsl.w	r4, r4, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x258>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	d22f      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000504:	428d      	cmp	r5, r1
 8000506:	d92d      	bls.n	8000564 <__udivmoddi4+0x2b0>
 8000508:	3802      	subs	r0, #2
 800050a:	4461      	add	r1, ip
 800050c:	1b49      	subs	r1, r1, r5
 800050e:	b292      	uxth	r2, r2
 8000510:	fbb1 f5f7 	udiv	r5, r1, r7
 8000514:	fb07 1115 	mls	r1, r7, r5, r1
 8000518:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800051c:	fb05 f10e 	mul.w	r1, r5, lr
 8000520:	4291      	cmp	r1, r2
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x282>
 8000524:	eb1c 0202 	adds.w	r2, ip, r2
 8000528:	f105 38ff 	add.w	r8, r5, #4294967295
 800052c:	d216      	bcs.n	800055c <__udivmoddi4+0x2a8>
 800052e:	4291      	cmp	r1, r2
 8000530:	d914      	bls.n	800055c <__udivmoddi4+0x2a8>
 8000532:	3d02      	subs	r5, #2
 8000534:	4462      	add	r2, ip
 8000536:	1a52      	subs	r2, r2, r1
 8000538:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800053c:	e738      	b.n	80003b0 <__udivmoddi4+0xfc>
 800053e:	4631      	mov	r1, r6
 8000540:	4630      	mov	r0, r6
 8000542:	e708      	b.n	8000356 <__udivmoddi4+0xa2>
 8000544:	4639      	mov	r1, r7
 8000546:	e6e6      	b.n	8000316 <__udivmoddi4+0x62>
 8000548:	4610      	mov	r0, r2
 800054a:	e6fb      	b.n	8000344 <__udivmoddi4+0x90>
 800054c:	4548      	cmp	r0, r9
 800054e:	d2a9      	bcs.n	80004a4 <__udivmoddi4+0x1f0>
 8000550:	ebb9 0802 	subs.w	r8, r9, r2
 8000554:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000558:	3b01      	subs	r3, #1
 800055a:	e7a3      	b.n	80004a4 <__udivmoddi4+0x1f0>
 800055c:	4645      	mov	r5, r8
 800055e:	e7ea      	b.n	8000536 <__udivmoddi4+0x282>
 8000560:	462b      	mov	r3, r5
 8000562:	e794      	b.n	800048e <__udivmoddi4+0x1da>
 8000564:	4640      	mov	r0, r8
 8000566:	e7d1      	b.n	800050c <__udivmoddi4+0x258>
 8000568:	46d0      	mov	r8, sl
 800056a:	e77b      	b.n	8000464 <__udivmoddi4+0x1b0>
 800056c:	3d02      	subs	r5, #2
 800056e:	4462      	add	r2, ip
 8000570:	e732      	b.n	80003d8 <__udivmoddi4+0x124>
 8000572:	4608      	mov	r0, r1
 8000574:	e70a      	b.n	800038c <__udivmoddi4+0xd8>
 8000576:	4464      	add	r4, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e742      	b.n	8000402 <__udivmoddi4+0x14e>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
 * It initializes the LTCD, LCD layer, Gyroscope, GPIO pins for buttons, and the RTOS.
 *
 * @note This function should be called before starting the application.
 */
void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	LTCD__Init();
 8000584:	f000 fe06 	bl	8001194 <LTCD__Init>
    LTCD_Layer_Init(0);
 8000588:	2000      	movs	r0, #0
 800058a:	f000 fe61 	bl	8001250 <LTCD_Layer_Init>
    Gyro_Init();
 800058e:	f000 fbb5 	bl	8000cfc <Gyro_Init>

	HAL_GPIO_WritePin(RED_BUTTON_PORT, RED_BUTTON_PIN, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000598:	4806      	ldr	r0, [pc, #24]	; (80005b4 <ApplicationInit+0x34>)
 800059a:	f002 fd11 	bl	8002fc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_BUTTON_PORT, GREEN_BUTTON_PIN, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <ApplicationInit+0x34>)
 80005a6:	f002 fd0b 	bl	8002fc0 <HAL_GPIO_WritePin>

	Lab7_RTOS_Init();
 80005aa:	f000 f805 	bl	80005b8 <Lab7_RTOS_Init>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40021800 	.word	0x40021800

080005b8 <Lab7_RTOS_Init>:
 * including speed and direction data initialization, event flags, semaphores,
 * timers, mutexes, and task creation.
 *
 * @note This function should be called before starting the Lab 7 application.
 */
void Lab7_RTOS_Init(void) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0

	speedData.speed = 30;
 80005be:	4b51      	ldr	r3, [pc, #324]	; (8000704 <Lab7_RTOS_Init+0x14c>)
 80005c0:	221e      	movs	r2, #30
 80005c2:	701a      	strb	r2, [r3, #0]
	speedData.increment_count = 0;
 80005c4:	4b4f      	ldr	r3, [pc, #316]	; (8000704 <Lab7_RTOS_Init+0x14c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	705a      	strb	r2, [r3, #1]
	speedData.decrement_count = 0;
 80005ca:	4b4e      	ldr	r3, [pc, #312]	; (8000704 <Lab7_RTOS_Init+0x14c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	709a      	strb	r2, [r3, #2]

	directionData.direction = neutral;
 80005d0:	4b4d      	ldr	r3, [pc, #308]	; (8000708 <Lab7_RTOS_Init+0x150>)
 80005d2:	2202      	movs	r2, #2
 80005d4:	601a      	str	r2, [r3, #0]
	directionData.left_count = 0;
 80005d6:	4b4c      	ldr	r3, [pc, #304]	; (8000708 <Lab7_RTOS_Init+0x150>)
 80005d8:	2200      	movs	r2, #0
 80005da:	711a      	strb	r2, [r3, #4]
	directionData.right_count = 0;
 80005dc:	4b4a      	ldr	r3, [pc, #296]	; (8000708 <Lab7_RTOS_Init+0x150>)
 80005de:	2200      	movs	r2, #0
 80005e0:	715a      	strb	r2, [r3, #5]

	Lab7_EventFlagID = osEventFlagsNew(NULL);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f004 fed7 	bl	8005396 <osEventFlagsNew>
 80005e8:	4603      	mov	r3, r0
 80005ea:	4a48      	ldr	r2, [pc, #288]	; (800070c <Lab7_RTOS_Init+0x154>)
 80005ec:	6013      	str	r3, [r2, #0]

	Lab7_Btn_SemaphoreID = osSemaphoreNew(1, 0, NULL);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	2001      	movs	r0, #1
 80005f4:	f005 f8c6 	bl	8005784 <osSemaphoreNew>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a45      	ldr	r2, [pc, #276]	; (8000710 <Lab7_RTOS_Init+0x158>)
 80005fc:	6013      	str	r3, [r2, #0]
	Lab7_Gyro_SemaphoreID = osSemaphoreNew(1, 0, NULL);
 80005fe:	2200      	movs	r2, #0
 8000600:	2100      	movs	r1, #0
 8000602:	2001      	movs	r0, #1
 8000604:	f005 f8be 	bl	8005784 <osSemaphoreNew>
 8000608:	4603      	mov	r3, r0
 800060a:	4a42      	ldr	r2, [pc, #264]	; (8000714 <Lab7_RTOS_Init+0x15c>)
 800060c:	6013      	str	r3, [r2, #0]
	Lab7_LCD_SemaphoreID = osSemaphoreNew(1, 0, NULL);
 800060e:	2200      	movs	r2, #0
 8000610:	2100      	movs	r1, #0
 8000612:	2001      	movs	r0, #1
 8000614:	f005 f8b6 	bl	8005784 <osSemaphoreNew>
 8000618:	4603      	mov	r3, r0
 800061a:	4a3f      	ldr	r2, [pc, #252]	; (8000718 <Lab7_RTOS_Init+0x160>)
 800061c:	6013      	str	r3, [r2, #0]

	Lab7_Btn_Timer_ID = osTimerNew(Change_Acceleration, osTimerOnce, NULL, &Btn_Timer_Attributes);
 800061e:	4b3f      	ldr	r3, [pc, #252]	; (800071c <Lab7_RTOS_Init+0x164>)
 8000620:	2200      	movs	r2, #0
 8000622:	2100      	movs	r1, #0
 8000624:	483e      	ldr	r0, [pc, #248]	; (8000720 <Lab7_RTOS_Init+0x168>)
 8000626:	f004 fdd5 	bl	80051d4 <osTimerNew>
 800062a:	4603      	mov	r3, r0
 800062c:	4a3d      	ldr	r2, [pc, #244]	; (8000724 <Lab7_RTOS_Init+0x16c>)
 800062e:	6013      	str	r3, [r2, #0]
	Lab7_Gyro_Timer_ID = osTimerNew(Gyro_Direction_Post, osTimerPeriodic, NULL, &Gyro_Timer_Attributes);
 8000630:	4b3d      	ldr	r3, [pc, #244]	; (8000728 <Lab7_RTOS_Init+0x170>)
 8000632:	2200      	movs	r2, #0
 8000634:	2101      	movs	r1, #1
 8000636:	483d      	ldr	r0, [pc, #244]	; (800072c <Lab7_RTOS_Init+0x174>)
 8000638:	f004 fdcc 	bl	80051d4 <osTimerNew>
 800063c:	4603      	mov	r3, r0
 800063e:	4a3c      	ldr	r2, [pc, #240]	; (8000730 <Lab7_RTOS_Init+0x178>)
 8000640:	6013      	str	r3, [r2, #0]
	if (Lab7_Gyro_Timer_ID != NULL)  {
 8000642:	4b3b      	ldr	r3, [pc, #236]	; (8000730 <Lab7_RTOS_Init+0x178>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d00a      	beq.n	8000660 <Lab7_RTOS_Init+0xa8>
	osStatus_t status = osTimerStart(Lab7_Gyro_Timer_ID, 100u);       // start timer
 800064a:	4b39      	ldr	r3, [pc, #228]	; (8000730 <Lab7_RTOS_Init+0x178>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2164      	movs	r1, #100	; 0x64
 8000650:	4618      	mov	r0, r3
 8000652:	f004 fe3b 	bl	80052cc <osTimerStart>
 8000656:	6078      	str	r0, [r7, #4]
		if (status != osOK) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d000      	beq.n	8000660 <Lab7_RTOS_Init+0xa8>
			// Timer could not be started
			while(1){};
 800065e:	e7fe      	b.n	800065e <Lab7_RTOS_Init+0xa6>
		}
	}

	Lab7_Speed_Setpoint_Mutex_ID = osMutexNew(NULL);
 8000660:	2000      	movs	r0, #0
 8000662:	f004 ff81 	bl	8005568 <osMutexNew>
 8000666:	4603      	mov	r3, r0
 8000668:	4a32      	ldr	r2, [pc, #200]	; (8000734 <Lab7_RTOS_Init+0x17c>)
 800066a:	6013      	str	r3, [r2, #0]
	Lab7_Vehicle_Direction_Mutex_ID = osMutexNew(NULL);
 800066c:	2000      	movs	r0, #0
 800066e:	f004 ff7b 	bl	8005568 <osMutexNew>
 8000672:	4603      	mov	r3, r0
 8000674:	4a30      	ldr	r2, [pc, #192]	; (8000738 <Lab7_RTOS_Init+0x180>)
 8000676:	6013      	str	r3, [r2, #0]

	Lab7_SPEED_SETPOINT_TASK_ID = osThreadNew(Speed_Setpoint_Task, NULL, &Speed_Setpoint_Attributes);
 8000678:	4a30      	ldr	r2, [pc, #192]	; (800073c <Lab7_RTOS_Init+0x184>)
 800067a:	2100      	movs	r1, #0
 800067c:	4830      	ldr	r0, [pc, #192]	; (8000740 <Lab7_RTOS_Init+0x188>)
 800067e:	f004 fce7 	bl	8005050 <osThreadNew>
 8000682:	4603      	mov	r3, r0
 8000684:	4a2f      	ldr	r2, [pc, #188]	; (8000744 <Lab7_RTOS_Init+0x18c>)
 8000686:	6013      	str	r3, [r2, #0]
	if (Lab7_SPEED_SETPOINT_TASK_ID == NULL)  {
 8000688:	4b2e      	ldr	r3, [pc, #184]	; (8000744 <Lab7_RTOS_Init+0x18c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d100      	bne.n	8000692 <Lab7_RTOS_Init+0xda>
		while(1){};
 8000690:	e7fe      	b.n	8000690 <Lab7_RTOS_Init+0xd8>
	}

	Lab7_VEHICLE_DIRECTION_TASK_ID = osThreadNew(Vehicle_Direction_Task, NULL, &Vehicle_Direction_Attributes);
 8000692:	4a2d      	ldr	r2, [pc, #180]	; (8000748 <Lab7_RTOS_Init+0x190>)
 8000694:	2100      	movs	r1, #0
 8000696:	482d      	ldr	r0, [pc, #180]	; (800074c <Lab7_RTOS_Init+0x194>)
 8000698:	f004 fcda 	bl	8005050 <osThreadNew>
 800069c:	4603      	mov	r3, r0
 800069e:	4a2c      	ldr	r2, [pc, #176]	; (8000750 <Lab7_RTOS_Init+0x198>)
 80006a0:	6013      	str	r3, [r2, #0]
	if (Lab7_VEHICLE_DIRECTION_TASK_ID == NULL)  {
 80006a2:	4b2b      	ldr	r3, [pc, #172]	; (8000750 <Lab7_RTOS_Init+0x198>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d100      	bne.n	80006ac <Lab7_RTOS_Init+0xf4>
		while(1){};
 80006aa:	e7fe      	b.n	80006aa <Lab7_RTOS_Init+0xf2>
	}

	Lab7_VEHICLE_MONITOR_TASK_ID = osThreadNew(Vehicle_Monitor_Task, NULL, &Vehicle_Monitor_Attributes);
 80006ac:	4a29      	ldr	r2, [pc, #164]	; (8000754 <Lab7_RTOS_Init+0x19c>)
 80006ae:	2100      	movs	r1, #0
 80006b0:	4829      	ldr	r0, [pc, #164]	; (8000758 <Lab7_RTOS_Init+0x1a0>)
 80006b2:	f004 fccd 	bl	8005050 <osThreadNew>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a28      	ldr	r2, [pc, #160]	; (800075c <Lab7_RTOS_Init+0x1a4>)
 80006ba:	6013      	str	r3, [r2, #0]
	if (Lab7_VEHICLE_MONITOR_TASK_ID == NULL)  {
 80006bc:	4b27      	ldr	r3, [pc, #156]	; (800075c <Lab7_RTOS_Init+0x1a4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d100      	bne.n	80006c6 <Lab7_RTOS_Init+0x10e>
		while(1){};
 80006c4:	e7fe      	b.n	80006c4 <Lab7_RTOS_Init+0x10c>
	}
	Lab7_LED_OUTPUT_TASK_ID = osThreadNew(LED_Output_Task, NULL, &LED_output_Attributes);
 80006c6:	4a26      	ldr	r2, [pc, #152]	; (8000760 <Lab7_RTOS_Init+0x1a8>)
 80006c8:	2100      	movs	r1, #0
 80006ca:	4826      	ldr	r0, [pc, #152]	; (8000764 <Lab7_RTOS_Init+0x1ac>)
 80006cc:	f004 fcc0 	bl	8005050 <osThreadNew>
 80006d0:	4603      	mov	r3, r0
 80006d2:	4a25      	ldr	r2, [pc, #148]	; (8000768 <Lab7_RTOS_Init+0x1b0>)
 80006d4:	6013      	str	r3, [r2, #0]
	if (Lab7_LED_OUTPUT_TASK_ID == NULL)  {
 80006d6:	4b24      	ldr	r3, [pc, #144]	; (8000768 <Lab7_RTOS_Init+0x1b0>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d100      	bne.n	80006e0 <Lab7_RTOS_Init+0x128>
		while(1){};
 80006de:	e7fe      	b.n	80006de <Lab7_RTOS_Init+0x126>
	}

	Lab7_LCD_DISPLAY_TASK_ID = osThreadNew(LCD_Display_Task, NULL, &LCD_Display_Attributes);
 80006e0:	4a22      	ldr	r2, [pc, #136]	; (800076c <Lab7_RTOS_Init+0x1b4>)
 80006e2:	2100      	movs	r1, #0
 80006e4:	4822      	ldr	r0, [pc, #136]	; (8000770 <Lab7_RTOS_Init+0x1b8>)
 80006e6:	f004 fcb3 	bl	8005050 <osThreadNew>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4a21      	ldr	r2, [pc, #132]	; (8000774 <Lab7_RTOS_Init+0x1bc>)
 80006ee:	6013      	str	r3, [r2, #0]
	if (Lab7_LCD_DISPLAY_TASK_ID == NULL)  {
 80006f0:	4b20      	ldr	r3, [pc, #128]	; (8000774 <Lab7_RTOS_Init+0x1bc>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d100      	bne.n	80006fa <Lab7_RTOS_Init+0x142>
		while(1){};
 80006f8:	e7fe      	b.n	80006f8 <Lab7_RTOS_Init+0x140>
	}
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200017d8 	.word	0x200017d8
 8000708:	200017dc 	.word	0x200017dc
 800070c:	200017f8 	.word	0x200017f8
 8000710:	200017fc 	.word	0x200017fc
 8000714:	20001800 	.word	0x20001800
 8000718:	20001804 	.word	0x20001804
 800071c:	0800b5ec 	.word	0x0800b5ec
 8000720:	08000779 	.word	0x08000779
 8000724:	20001808 	.word	0x20001808
 8000728:	0800b5fc 	.word	0x0800b5fc
 800072c:	08000799 	.word	0x08000799
 8000730:	2000180c 	.word	0x2000180c
 8000734:	20001868 	.word	0x20001868
 8000738:	2000186c 	.word	0x2000186c
 800073c:	0800b538 	.word	0x0800b538
 8000740:	080008b1 	.word	0x080008b1
 8000744:	200017e4 	.word	0x200017e4
 8000748:	0800b55c 	.word	0x0800b55c
 800074c:	0800099d 	.word	0x0800099d
 8000750:	200017e8 	.word	0x200017e8
 8000754:	0800b580 	.word	0x0800b580
 8000758:	08000a51 	.word	0x08000a51
 800075c:	200017ec 	.word	0x200017ec
 8000760:	0800b5a4 	.word	0x0800b5a4
 8000764:	08000b51 	.word	0x08000b51
 8000768:	200017f0 	.word	0x200017f0
 800076c:	0800b5c8 	.word	0x0800b5c8
 8000770:	08000bcd 	.word	0x08000bcd
 8000774:	200017f4 	.word	0x200017f4

08000778 <Change_Acceleration>:
 * This function is called by a timer and sets a flag indicating a task action
 * should be taken. It is typically called in response to a button press event.
 *
 * @param arg Pointer to additional argument (unused in this function).
 */
void Change_Acceleration(void *arg) {
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	(void)&arg;
	btn_speedup = 1;
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <Change_Acceleration+0x1c>)
 8000782:	2201      	movs	r2, #1
 8000784:	601a      	str	r2, [r3, #0]
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	200017d4 	.word	0x200017d4

08000798 <Gyro_Direction_Post>:
 * allowing other tasks to proceed, particularly tasks related to gyroscope
 * data processing and LCD display updating.
 *
 * @param arg Pointer to additional argument (unused in this function).
 */
void Gyro_Direction_Post(void *arg){
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	(void)&arg;
	osSemaphoreRelease(Lab7_Gyro_SemaphoreID);
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <Gyro_Direction_Post+0x24>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f005 f8c9 	bl	800593c <osSemaphoreRelease>
	osSemaphoreRelease(Lab7_LCD_SemaphoreID);
 80007aa:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <Gyro_Direction_Post+0x28>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f005 f8c4 	bl	800593c <osSemaphoreRelease>
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20001800 	.word	0x20001800
 80007c0:	20001804 	.word	0x20001804

080007c4 <read_user_button_state>:
 * This function reads the state of the user button (typically a push button)
 * connected to a specific GPIO pin and returns the state as an integer.
 *
 * @return 1 if the user button is pressed, 0 otherwise.
 */
int read_user_button_state(void){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(USER_BUTTON_PORT, USER_BUTTON_PIN)){
 80007c8:	2101      	movs	r1, #1
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <read_user_button_state+0x1c>)
 80007cc:	f002 fbe0 	bl	8002f90 <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <read_user_button_state+0x16>
		return 1;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e000      	b.n	80007dc <read_user_button_state+0x18>
	}
	return 0;
 80007da:	2300      	movs	r3, #0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40020000 	.word	0x40020000

080007e4 <get_gyro_rotation_rate>:
 * slow clockwise, zero rotation, slow counterclockwise, and fast counterclockwise.
 *
 * @param gyro_vel The gyro velocity to be categorized.
 * @return The rotation rate based on the gyro velocity.
 */
int get_gyro_rotation_rate(int16_t gyro_vel){
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	80fb      	strh	r3, [r7, #6]
	if(gyro_vel > FAST_CW) {
 80007ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007f2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80007f6:	dd01      	ble.n	80007fc <get_gyro_rotation_rate+0x18>
		return FAST_CLOCKWISE;
 80007f8:	2304      	movs	r3, #4
 80007fa:	e01f      	b.n	800083c <get_gyro_rotation_rate+0x58>
	} else if (gyro_vel > SLOW_CW) {
 80007fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000800:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000804:	dd01      	ble.n	800080a <get_gyro_rotation_rate+0x26>
		return SLOW_CLOCKWISE;
 8000806:	2303      	movs	r3, #3
 8000808:	e018      	b.n	800083c <get_gyro_rotation_rate+0x58>
	} else if(gyro_vel < SLOW_CW && gyro_vel > SLOW_CCW){
 800080a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800080e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000812:	da06      	bge.n	8000822 <get_gyro_rotation_rate+0x3e>
 8000814:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000818:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 800081c:	dd01      	ble.n	8000822 <get_gyro_rotation_rate+0x3e>
		return ZERO_ROTATION;
 800081e:	2302      	movs	r3, #2
 8000820:	e00c      	b.n	800083c <get_gyro_rotation_rate+0x58>
	} else if (gyro_vel < SLOW_CCW && gyro_vel > FAST_CCW){
 8000822:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000826:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 800082a:	da06      	bge.n	800083a <get_gyro_rotation_rate+0x56>
 800082c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000830:	f513 6f7a 	cmn.w	r3, #4000	; 0xfa0
 8000834:	dd01      	ble.n	800083a <get_gyro_rotation_rate+0x56>
		return SLOW_COUNTERCLOCKWISE;
 8000836:	2301      	movs	r3, #1
 8000838:	e000      	b.n	800083c <get_gyro_rotation_rate+0x58>
	} else {
		return FAST_COUNTERCLOCKWISE;
 800083a:	2300      	movs	r3, #0
	}
}
 800083c:	4618      	mov	r0, r3
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <get_gyro_direction>:
 * right, neutral, left, and hard left.
 *
 * @param rotation_rate The gyro rotation rate to be categorized.
 * @return The direction based on the gyro rotation rate.
 */
int get_gyro_direction(int rotation_rate){
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	if (rotation_rate == FAST_CLOCKWISE) {return hard_right;}
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2b04      	cmp	r3, #4
 8000854:	d101      	bne.n	800085a <get_gyro_direction+0x12>
 8000856:	2304      	movs	r3, #4
 8000858:	e014      	b.n	8000884 <get_gyro_direction+0x3c>
	if (rotation_rate == SLOW_CLOCKWISE) {return right;}
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b03      	cmp	r3, #3
 800085e:	d101      	bne.n	8000864 <get_gyro_direction+0x1c>
 8000860:	2303      	movs	r3, #3
 8000862:	e00f      	b.n	8000884 <get_gyro_direction+0x3c>
	if (rotation_rate == ZERO_ROTATION) {return neutral;}
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2b02      	cmp	r3, #2
 8000868:	d101      	bne.n	800086e <get_gyro_direction+0x26>
 800086a:	2302      	movs	r3, #2
 800086c:	e00a      	b.n	8000884 <get_gyro_direction+0x3c>
	if (rotation_rate == SLOW_COUNTERCLOCKWISE) {return left;}
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d101      	bne.n	8000878 <get_gyro_direction+0x30>
 8000874:	2301      	movs	r3, #1
 8000876:	e005      	b.n	8000884 <get_gyro_direction+0x3c>
	if (rotation_rate == FAST_COUNTERCLOCKWISE) {return hard_left;}
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d101      	bne.n	8000882 <get_gyro_direction+0x3a>
 800087e:	2300      	movs	r3, #0
 8000880:	e000      	b.n	8000884 <get_gyro_direction+0x3c>
	return neutral;
 8000882:	2302      	movs	r3, #2
}
 8000884:	4618      	mov	r0, r3
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <HAL_GPIO_EXTI_Callback>:
 * allowing the corresponding task to proceed.
 *
 * @param GPIO_Pin The GPIO pin number that triggered the interrupt.
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	80fb      	strh	r3, [r7, #6]
	osSemaphoreRelease(Lab7_Btn_SemaphoreID);
 800089a:	4b04      	ldr	r3, [pc, #16]	; (80008ac <HAL_GPIO_EXTI_Callback+0x1c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4618      	mov	r0, r3
 80008a0:	f005 f84c 	bl	800593c <osSemaphoreRelease>
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	200017fc 	.word	0x200017fc

080008b0 <Speed_Setpoint_Task>:
 * the button state. It then updates the speed data and signals the event flag for
 * speed update.
 *
 * @param arg Pointer to additional argument (unused in this function).
 */
void Speed_Setpoint_Task(void *arg){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	while(1){
		(void)&arg;
		osStatus_t semaphoreStatus;
		osStatus_t timer_status;
		semaphoreStatus = osSemaphoreAcquire(Lab7_Btn_SemaphoreID, osWaitForever);
 80008b8:	4b32      	ldr	r3, [pc, #200]	; (8000984 <Speed_Setpoint_Task+0xd4>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f04f 31ff 	mov.w	r1, #4294967295
 80008c0:	4618      	mov	r0, r3
 80008c2:	f004 ffe9 	bl	8005898 <osSemaphoreAcquire>
 80008c6:	6178      	str	r0, [r7, #20]
		if (semaphoreStatus == osOK) {
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d1f4      	bne.n	80008b8 <Speed_Setpoint_Task+0x8>
			if(read_user_button_state()) {
 80008ce:	f7ff ff79 	bl	80007c4 <read_user_button_state>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d00b      	beq.n	80008f0 <Speed_Setpoint_Task+0x40>
				btn_speedup = 0;
 80008d8:	4b2b      	ldr	r3, [pc, #172]	; (8000988 <Speed_Setpoint_Task+0xd8>)
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
				timer_status = osTimerStart(Lab7_Btn_Timer_ID, 1000u);
 80008de:	4b2b      	ldr	r3, [pc, #172]	; (800098c <Speed_Setpoint_Task+0xdc>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008e6:	4618      	mov	r0, r3
 80008e8:	f004 fcf0 	bl	80052cc <osTimerStart>
 80008ec:	6138      	str	r0, [r7, #16]
 80008ee:	e7e3      	b.n	80008b8 <Speed_Setpoint_Task+0x8>
			} else {
				timer_status = osTimerStop(Lab7_Btn_Timer_ID);
 80008f0:	4b26      	ldr	r3, [pc, #152]	; (800098c <Speed_Setpoint_Task+0xdc>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f004 fd17 	bl	8005328 <osTimerStop>
 80008fa:	6138      	str	r0, [r7, #16]
				if(!btn_speedup){
 80008fc:	4b22      	ldr	r3, [pc, #136]	; (8000988 <Speed_Setpoint_Task+0xd8>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d11c      	bne.n	800093e <Speed_Setpoint_Task+0x8e>
					//speed up
					osStatus_t mutex_result = osMutexAcquire(Lab7_Speed_Setpoint_Mutex_ID, osWaitForever);  // lock count is incremented, might fail when lock count is depleted
 8000904:	4b22      	ldr	r3, [pc, #136]	; (8000990 <Speed_Setpoint_Task+0xe0>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f04f 31ff 	mov.w	r1, #4294967295
 800090c:	4618      	mov	r0, r3
 800090e:	f004 feb1 	bl	8005674 <osMutexAcquire>
 8000912:	60b8      	str	r0, [r7, #8]
					if (mutex_result == osOK) {
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d10b      	bne.n	8000932 <Speed_Setpoint_Task+0x82>
						speedData.speed += 5;
 800091a:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <Speed_Setpoint_Task+0xe4>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	3305      	adds	r3, #5
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <Speed_Setpoint_Task+0xe4>)
 8000924:	701a      	strb	r2, [r3, #0]
						speedData.increment_count++;
 8000926:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <Speed_Setpoint_Task+0xe4>)
 8000928:	785b      	ldrb	r3, [r3, #1]
 800092a:	3301      	adds	r3, #1
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b19      	ldr	r3, [pc, #100]	; (8000994 <Speed_Setpoint_Task+0xe4>)
 8000930:	705a      	strb	r2, [r3, #1]
					}
					osMutexRelease(Lab7_Speed_Setpoint_Mutex_ID);
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <Speed_Setpoint_Task+0xe0>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4618      	mov	r0, r3
 8000938:	f004 fee7 	bl	800570a <osMutexRelease>
 800093c:	e01b      	b.n	8000976 <Speed_Setpoint_Task+0xc6>
				}else {
					//slow down
					osStatus_t mutex_result = osMutexAcquire(Lab7_Speed_Setpoint_Mutex_ID, osWaitForever);  // lock count is incremented, might fail when lock count is depleted
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <Speed_Setpoint_Task+0xe0>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f04f 31ff 	mov.w	r1, #4294967295
 8000946:	4618      	mov	r0, r3
 8000948:	f004 fe94 	bl	8005674 <osMutexAcquire>
 800094c:	60f8      	str	r0, [r7, #12]
					if (mutex_result == osOK) {
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d10b      	bne.n	800096c <Speed_Setpoint_Task+0xbc>
						speedData.speed -= 5;
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <Speed_Setpoint_Task+0xe4>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	3b05      	subs	r3, #5
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <Speed_Setpoint_Task+0xe4>)
 800095e:	701a      	strb	r2, [r3, #0]
						speedData.decrement_count++;
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <Speed_Setpoint_Task+0xe4>)
 8000962:	789b      	ldrb	r3, [r3, #2]
 8000964:	3301      	adds	r3, #1
 8000966:	b2da      	uxtb	r2, r3
 8000968:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <Speed_Setpoint_Task+0xe4>)
 800096a:	709a      	strb	r2, [r3, #2]
					}
					osMutexRelease(Lab7_Speed_Setpoint_Mutex_ID);
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <Speed_Setpoint_Task+0xe0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4618      	mov	r0, r3
 8000972:	f004 feca 	bl	800570a <osMutexRelease>
				}
				osEventFlagsSet(Lab7_EventFlagID, SPEED_UPDATE_FLAG);
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <Speed_Setpoint_Task+0xe8>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2101      	movs	r1, #1
 800097c:	4618      	mov	r0, r3
 800097e:	f004 fd49 	bl	8005414 <osEventFlagsSet>
	while(1){
 8000982:	e799      	b.n	80008b8 <Speed_Setpoint_Task+0x8>
 8000984:	200017fc 	.word	0x200017fc
 8000988:	200017d4 	.word	0x200017d4
 800098c:	20001808 	.word	0x20001808
 8000990:	20001868 	.word	0x20001868
 8000994:	200017d8 	.word	0x200017d8
 8000998:	200017f8 	.word	0x200017f8

0800099c <Vehicle_Direction_Task>:
 * the vehicle direction based on the rotation rate. It then updates the direction data
 * and signals the event flag for direction update.
 *
 * @param arg Pointer to additional argument (unused in this function).
 */
void Vehicle_Direction_Task(void *arg){
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	while(1){
		(void)&arg;
		osStatus_t semaphoreStatus;
		semaphoreStatus = osSemaphoreAcquire(Lab7_Gyro_SemaphoreID, osWaitForever);
 80009a4:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <Vehicle_Direction_Task+0xa4>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f04f 31ff 	mov.w	r1, #4294967295
 80009ac:	4618      	mov	r0, r3
 80009ae:	f004 ff73 	bl	8005898 <osSemaphoreAcquire>
 80009b2:	6178      	str	r0, [r7, #20]
		if (semaphoreStatus == osOK) {
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d1f4      	bne.n	80009a4 <Vehicle_Direction_Task+0x8>
			int rotation = get_gyro_rotation_rate(Gyro_Get_Velocity());
 80009ba:	f000 fa2d 	bl	8000e18 <Gyro_Get_Velocity>
 80009be:	4603      	mov	r3, r0
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ff0f 	bl	80007e4 <get_gyro_rotation_rate>
 80009c6:	6138      	str	r0, [r7, #16]
			int direction = get_gyro_direction(rotation);
 80009c8:	6938      	ldr	r0, [r7, #16]
 80009ca:	f7ff ff3d 	bl	8000848 <get_gyro_direction>
 80009ce:	60f8      	str	r0, [r7, #12]
			osStatus_t result = osMutexAcquire(Lab7_Vehicle_Direction_Mutex_ID, osWaitForever);
 80009d0:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <Vehicle_Direction_Task+0xa8>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f04f 31ff 	mov.w	r1, #4294967295
 80009d8:	4618      	mov	r0, r3
 80009da:	f004 fe4b 	bl	8005674 <osMutexAcquire>
 80009de:	60b8      	str	r0, [r7, #8]
			directionData.direction = direction;
 80009e0:	4a19      	ldr	r2, [pc, #100]	; (8000a48 <Vehicle_Direction_Task+0xac>)
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	6013      	str	r3, [r2, #0]
			if(direction < neutral) {
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	dc09      	bgt.n	8000a00 <Vehicle_Direction_Task+0x64>
				directionData.left_count++;
 80009ec:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <Vehicle_Direction_Task+0xac>)
 80009ee:	791b      	ldrb	r3, [r3, #4]
 80009f0:	3301      	adds	r3, #1
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <Vehicle_Direction_Task+0xac>)
 80009f6:	711a      	strb	r2, [r3, #4]
				directionData.right_count = 0;
 80009f8:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <Vehicle_Direction_Task+0xac>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	715a      	strb	r2, [r3, #5]
 80009fe:	e012      	b.n	8000a26 <Vehicle_Direction_Task+0x8a>
			} else if(direction > neutral) {
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	dd09      	ble.n	8000a1a <Vehicle_Direction_Task+0x7e>
				directionData.right_count++;
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <Vehicle_Direction_Task+0xac>)
 8000a08:	795b      	ldrb	r3, [r3, #5]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <Vehicle_Direction_Task+0xac>)
 8000a10:	715a      	strb	r2, [r3, #5]
				directionData.left_count = 0;;
 8000a12:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <Vehicle_Direction_Task+0xac>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	711a      	strb	r2, [r3, #4]
 8000a18:	e005      	b.n	8000a26 <Vehicle_Direction_Task+0x8a>
			} else {
				directionData.right_count = 0;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <Vehicle_Direction_Task+0xac>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	715a      	strb	r2, [r3, #5]
				directionData.left_count = 0;;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <Vehicle_Direction_Task+0xac>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	711a      	strb	r2, [r3, #4]
			}
			osMutexRelease(Lab7_Vehicle_Direction_Mutex_ID);
 8000a26:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <Vehicle_Direction_Task+0xa8>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f004 fe6d 	bl	800570a <osMutexRelease>
			osEventFlagsSet(Lab7_EventFlagID, DIRECTION_UPDATE_FLAG);
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <Vehicle_Direction_Task+0xb0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2102      	movs	r1, #2
 8000a36:	4618      	mov	r0, r3
 8000a38:	f004 fcec 	bl	8005414 <osEventFlagsSet>
	while(1){
 8000a3c:	e7b2      	b.n	80009a4 <Vehicle_Direction_Task+0x8>
 8000a3e:	bf00      	nop
 8000a40:	20001800 	.word	0x20001800
 8000a44:	2000186c 	.word	0x2000186c
 8000a48:	200017dc 	.word	0x200017dc
 8000a4c:	200017f8 	.word	0x200017f8

08000a50 <Vehicle_Monitor_Task>:
 * and checks if they exceed certain thresholds. Depending on the thresholds exceeded,
 * it sets corresponding event flags for LED alerts.
 *
 * @param arg Pointer to additional argument (unused in this function).
 */
void Vehicle_Monitor_Task(void *arg){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b088      	sub	sp, #32
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	uint8_t current_speed = 30;
 8000a58:	231e      	movs	r3, #30
 8000a5a:	77fb      	strb	r3, [r7, #31]
	int current_direction = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61bb      	str	r3, [r7, #24]
	uint8_t left_num = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	75fb      	strb	r3, [r7, #23]
	uint8_t right_num = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	75bb      	strb	r3, [r7, #22]

	while(1){
		(void)&arg;
		uint32_t data_flags;
		data_flags = osEventFlagsWait(Lab7_EventFlagID, 0x00000003U, osFlagsWaitAny, osWaitForever);
 8000a68:	4b34      	ldr	r3, [pc, #208]	; (8000b3c <Vehicle_Monitor_Task+0xec>)
 8000a6a:	6818      	ldr	r0, [r3, #0]
 8000a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a70:	2200      	movs	r2, #0
 8000a72:	2103      	movs	r1, #3
 8000a74:	f004 fd12 	bl	800549c <osEventFlagsWait>
 8000a78:	6138      	str	r0, [r7, #16]
		//speed
		if((data_flags & 1) == 1) {
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d012      	beq.n	8000aaa <Vehicle_Monitor_Task+0x5a>
			osStatus_t speed_mutex = osMutexAcquire(Lab7_Speed_Setpoint_Mutex_ID, osWaitForever);  // lock count is incremented, might fail when lock count is depleted
 8000a84:	4b2e      	ldr	r3, [pc, #184]	; (8000b40 <Vehicle_Monitor_Task+0xf0>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f04f 31ff 	mov.w	r1, #4294967295
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f004 fdf1 	bl	8005674 <osMutexAcquire>
 8000a92:	60f8      	str	r0, [r7, #12]
			if (speed_mutex == osOK) {
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d102      	bne.n	8000aa0 <Vehicle_Monitor_Task+0x50>
				current_speed = speedData.speed;
 8000a9a:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <Vehicle_Monitor_Task+0xf4>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	77fb      	strb	r3, [r7, #31]
			}
			osMutexRelease(Lab7_Speed_Setpoint_Mutex_ID);
 8000aa0:	4b27      	ldr	r3, [pc, #156]	; (8000b40 <Vehicle_Monitor_Task+0xf0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f004 fe30 	bl	800570a <osMutexRelease>
		}
		//direction
		if(((data_flags >> 1) & 1) == 1) {
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	f003 0302 	and.w	r3, r3, #2
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d018      	beq.n	8000ae6 <Vehicle_Monitor_Task+0x96>
			osStatus_t direction_mutex = osMutexAcquire(Lab7_Vehicle_Direction_Mutex_ID, osWaitForever);
 8000ab4:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <Vehicle_Monitor_Task+0xf8>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8000abc:	4618      	mov	r0, r3
 8000abe:	f004 fdd9 	bl	8005674 <osMutexAcquire>
 8000ac2:	60b8      	str	r0, [r7, #8]
			if (direction_mutex == osOK) {
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d108      	bne.n	8000adc <Vehicle_Monitor_Task+0x8c>
				current_direction = directionData.direction;
 8000aca:	4b20      	ldr	r3, [pc, #128]	; (8000b4c <Vehicle_Monitor_Task+0xfc>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	61bb      	str	r3, [r7, #24]
				left_num = directionData.left_count;
 8000ad0:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <Vehicle_Monitor_Task+0xfc>)
 8000ad2:	791b      	ldrb	r3, [r3, #4]
 8000ad4:	75fb      	strb	r3, [r7, #23]
				right_num = directionData.right_count;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <Vehicle_Monitor_Task+0xfc>)
 8000ad8:	795b      	ldrb	r3, [r3, #5]
 8000ada:	75bb      	strb	r3, [r7, #22]
			}
			osMutexRelease(Lab7_Vehicle_Direction_Mutex_ID);
 8000adc:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <Vehicle_Monitor_Task+0xf8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f004 fe12 	bl	800570a <osMutexRelease>
		}
		if((current_speed > 75) || (current_speed > 45 && (current_direction != neutral))){
 8000ae6:	7ffb      	ldrb	r3, [r7, #31]
 8000ae8:	2b4b      	cmp	r3, #75	; 0x4b
 8000aea:	d805      	bhi.n	8000af8 <Vehicle_Monitor_Task+0xa8>
 8000aec:	7ffb      	ldrb	r3, [r7, #31]
 8000aee:	2b2d      	cmp	r3, #45	; 0x2d
 8000af0:	d909      	bls.n	8000b06 <Vehicle_Monitor_Task+0xb6>
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	d006      	beq.n	8000b06 <Vehicle_Monitor_Task+0xb6>
			osEventFlagsSet(Lab7_EventFlagID, GREEN_LED_ALERT_FLAG);
 8000af8:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <Vehicle_Monitor_Task+0xec>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2104      	movs	r1, #4
 8000afe:	4618      	mov	r0, r3
 8000b00:	f004 fc88 	bl	8005414 <osEventFlagsSet>
 8000b04:	e005      	b.n	8000b12 <Vehicle_Monitor_Task+0xc2>
		} else {
			osEventFlagsSet(Lab7_EventFlagID, GREEN_LED_SAFE_FLAG);
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <Vehicle_Monitor_Task+0xec>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2108      	movs	r1, #8
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f004 fc81 	bl	8005414 <osEventFlagsSet>
		}
		if(left_num >= 50 || right_num >= 50){
 8000b12:	7dfb      	ldrb	r3, [r7, #23]
 8000b14:	2b31      	cmp	r3, #49	; 0x31
 8000b16:	d802      	bhi.n	8000b1e <Vehicle_Monitor_Task+0xce>
 8000b18:	7dbb      	ldrb	r3, [r7, #22]
 8000b1a:	2b31      	cmp	r3, #49	; 0x31
 8000b1c:	d906      	bls.n	8000b2c <Vehicle_Monitor_Task+0xdc>
			osEventFlagsSet(Lab7_EventFlagID, RED_LED_ALERT_FLAG);
 8000b1e:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <Vehicle_Monitor_Task+0xec>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2110      	movs	r1, #16
 8000b24:	4618      	mov	r0, r3
 8000b26:	f004 fc75 	bl	8005414 <osEventFlagsSet>
 8000b2a:	e005      	b.n	8000b38 <Vehicle_Monitor_Task+0xe8>
		} else {
			osEventFlagsSet(Lab7_EventFlagID, RED_LED_SAFE_FLAG);
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <Vehicle_Monitor_Task+0xec>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2120      	movs	r1, #32
 8000b32:	4618      	mov	r0, r3
 8000b34:	f004 fc6e 	bl	8005414 <osEventFlagsSet>
	while(1){
 8000b38:	e796      	b.n	8000a68 <Vehicle_Monitor_Task+0x18>
 8000b3a:	bf00      	nop
 8000b3c:	200017f8 	.word	0x200017f8
 8000b40:	20001868 	.word	0x20001868
 8000b44:	200017d8 	.word	0x200017d8
 8000b48:	2000186c 	.word	0x2000186c
 8000b4c:	200017dc 	.word	0x200017dc

08000b50 <LED_Output_Task>:
 * Upon receiving these event flags, it adjusts the states of the green and red LEDs
 * based on the flags received.
 *
 * @param arg Pointer to additional argument (unused in this function).
 */
void LED_Output_Task(void *arg){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	while(1){
		(void)&arg;
		uint32_t LED_flags;
		LED_flags = osEventFlagsWait(Lab7_EventFlagID, 0x0000003CU, osFlagsWaitAny, osWaitForever);
 8000b58:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <LED_Output_Task+0x74>)
 8000b5a:	6818      	ldr	r0, [r3, #0]
 8000b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b60:	2200      	movs	r2, #0
 8000b62:	213c      	movs	r1, #60	; 0x3c
 8000b64:	f004 fc9a 	bl	800549c <osEventFlagsWait>
 8000b68:	60f8      	str	r0, [r7, #12]
		if(((LED_flags >> 2) & 1) == 1) {
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d005      	beq.n	8000b80 <LED_Output_Task+0x30>
			HAL_GPIO_WritePin(GREEN_BUTTON_PORT, GREEN_BUTTON_PIN, GPIO_PIN_SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b7a:	4813      	ldr	r0, [pc, #76]	; (8000bc8 <LED_Output_Task+0x78>)
 8000b7c:	f002 fa20 	bl	8002fc0 <HAL_GPIO_WritePin>
		}
		if(((LED_flags >> 3) & 1) == 1) {
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f003 0308 	and.w	r3, r3, #8
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d005      	beq.n	8000b96 <LED_Output_Task+0x46>
			HAL_GPIO_WritePin(GREEN_BUTTON_PORT, GREEN_BUTTON_PIN, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b90:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <LED_Output_Task+0x78>)
 8000b92:	f002 fa15 	bl	8002fc0 <HAL_GPIO_WritePin>
		}
		if(((LED_flags >> 4) & 1) == 1) {
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	f003 0310 	and.w	r3, r3, #16
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d005      	beq.n	8000bac <LED_Output_Task+0x5c>
			HAL_GPIO_WritePin(RED_BUTTON_PORT, RED_BUTTON_PIN, GPIO_PIN_SET);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ba6:	4808      	ldr	r0, [pc, #32]	; (8000bc8 <LED_Output_Task+0x78>)
 8000ba8:	f002 fa0a 	bl	8002fc0 <HAL_GPIO_WritePin>
		}
		if(((LED_flags >> 5) & 1) == 1) {
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f003 0320 	and.w	r3, r3, #32
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d0d0      	beq.n	8000b58 <LED_Output_Task+0x8>
			HAL_GPIO_WritePin(RED_BUTTON_PORT, RED_BUTTON_PIN, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <LED_Output_Task+0x78>)
 8000bbe:	f002 f9ff 	bl	8002fc0 <HAL_GPIO_WritePin>
	while(1){
 8000bc2:	e7c9      	b.n	8000b58 <LED_Output_Task+0x8>
 8000bc4:	200017f8 	.word	0x200017f8
 8000bc8:	40021800 	.word	0x40021800

08000bcc <LCD_Display_Task>:
 * Upon acquiring the semaphore, it retrieves the latest speed and direction data.
 * It then updates the LCD display with the current speed and direction information.
 *
 * @param arg Pointer to additional argument (unused in this function).
 */
void LCD_Display_Task(void *arg){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	uint8_t current_speed = 30;
 8000bd4:	231e      	movs	r3, #30
 8000bd6:	77fb      	strb	r3, [r7, #31]
	int current_direction = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61bb      	str	r3, [r7, #24]
	while(1){
		(void)&arg;
		osStatus_t status;
		status = osSemaphoreAcquire(Lab7_LCD_SemaphoreID, osWaitForever);
 8000bdc:	4b3a      	ldr	r3, [pc, #232]	; (8000cc8 <LCD_Display_Task+0xfc>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f04f 31ff 	mov.w	r1, #4294967295
 8000be4:	4618      	mov	r0, r3
 8000be6:	f004 fe57 	bl	8005898 <osSemaphoreAcquire>
 8000bea:	6178      	str	r0, [r7, #20]
		if (status == osOK) {
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d1f4      	bne.n	8000bdc <LCD_Display_Task+0x10>
			osStatus_t speed_mutex = osMutexAcquire(Lab7_Speed_Setpoint_Mutex_ID, osWaitForever);  // lock count is incremented, might fail when lock count is depleted
 8000bf2:	4b36      	ldr	r3, [pc, #216]	; (8000ccc <LCD_Display_Task+0x100>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f04f 31ff 	mov.w	r1, #4294967295
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f004 fd3a 	bl	8005674 <osMutexAcquire>
 8000c00:	6138      	str	r0, [r7, #16]
			if (speed_mutex == osOK) {
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d102      	bne.n	8000c0e <LCD_Display_Task+0x42>
				current_speed = speedData.speed;
 8000c08:	4b31      	ldr	r3, [pc, #196]	; (8000cd0 <LCD_Display_Task+0x104>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	77fb      	strb	r3, [r7, #31]
			}
			osMutexRelease(Lab7_Speed_Setpoint_Mutex_ID);
 8000c0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ccc <LCD_Display_Task+0x100>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f004 fd79 	bl	800570a <osMutexRelease>

			osStatus_t direction_mutex = osMutexAcquire(Lab7_Vehicle_Direction_Mutex_ID, osWaitForever);
 8000c18:	4b2e      	ldr	r3, [pc, #184]	; (8000cd4 <LCD_Display_Task+0x108>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c20:	4618      	mov	r0, r3
 8000c22:	f004 fd27 	bl	8005674 <osMutexAcquire>
 8000c26:	60f8      	str	r0, [r7, #12]
			if (direction_mutex == osOK) {
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d102      	bne.n	8000c34 <LCD_Display_Task+0x68>
				current_direction = directionData.direction;
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <LCD_Display_Task+0x10c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	61bb      	str	r3, [r7, #24]
			}
			osMutexRelease(Lab7_Vehicle_Direction_Mutex_ID);
 8000c34:	4b27      	ldr	r3, [pc, #156]	; (8000cd4 <LCD_Display_Task+0x108>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f004 fd66 	bl	800570a <osMutexRelease>

			LCD_Clear(0, LCD_COLOR_WHITE);
 8000c3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c42:	2000      	movs	r0, #0
 8000c44:	f000 fcce 	bl	80015e4 <LCD_Clear>

			LCD_SetTextColor(LCD_COLOR_BLACK);
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f000 fcab 	bl	80015a4 <LCD_SetTextColor>
			LCD_SetFont(&Font16x24);
 8000c4e:	4823      	ldr	r0, [pc, #140]	; (8000cdc <LCD_Display_Task+0x110>)
 8000c50:	f000 fcb8 	bl	80015c4 <LCD_SetFont>

			LCD_DisplayString(30,110,"Speed:");
 8000c54:	4a22      	ldr	r2, [pc, #136]	; (8000ce0 <LCD_Display_Task+0x114>)
 8000c56:	216e      	movs	r1, #110	; 0x6e
 8000c58:	201e      	movs	r0, #30
 8000c5a:	f000 fbe7 	bl	800142c <LCD_DisplayString>
			LCD_DisplayString(30,200,"Direction:");
 8000c5e:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <LCD_Display_Task+0x118>)
 8000c60:	21c8      	movs	r1, #200	; 0xc8
 8000c62:	201e      	movs	r0, #30
 8000c64:	f000 fbe2 	bl	800142c <LCD_DisplayString>
			//send number to display
			LCD_DisplayNumber(150,110,current_speed);
 8000c68:	7ffb      	ldrb	r3, [r7, #31]
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	216e      	movs	r1, #110	; 0x6e
 8000c70:	2096      	movs	r0, #150	; 0x96
 8000c72:	f000 fc03 	bl	800147c <LCD_DisplayNumber>

			if (current_direction == 0) {LCD_DisplayString(30,230,"Hard left");}
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d104      	bne.n	8000c86 <LCD_Display_Task+0xba>
 8000c7c:	4a1a      	ldr	r2, [pc, #104]	; (8000ce8 <LCD_Display_Task+0x11c>)
 8000c7e:	21e6      	movs	r1, #230	; 0xe6
 8000c80:	201e      	movs	r0, #30
 8000c82:	f000 fbd3 	bl	800142c <LCD_DisplayString>
			if (current_direction == 1) {LCD_DisplayString(30,230,"left");}
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d104      	bne.n	8000c96 <LCD_Display_Task+0xca>
 8000c8c:	4a17      	ldr	r2, [pc, #92]	; (8000cec <LCD_Display_Task+0x120>)
 8000c8e:	21e6      	movs	r1, #230	; 0xe6
 8000c90:	201e      	movs	r0, #30
 8000c92:	f000 fbcb 	bl	800142c <LCD_DisplayString>
			if (current_direction == 2) {LCD_DisplayString(30,230,"neutral");}
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d104      	bne.n	8000ca6 <LCD_Display_Task+0xda>
 8000c9c:	4a14      	ldr	r2, [pc, #80]	; (8000cf0 <LCD_Display_Task+0x124>)
 8000c9e:	21e6      	movs	r1, #230	; 0xe6
 8000ca0:	201e      	movs	r0, #30
 8000ca2:	f000 fbc3 	bl	800142c <LCD_DisplayString>
			if (current_direction == 3) {LCD_DisplayString(30,230,"right");}
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	2b03      	cmp	r3, #3
 8000caa:	d104      	bne.n	8000cb6 <LCD_Display_Task+0xea>
 8000cac:	4a11      	ldr	r2, [pc, #68]	; (8000cf4 <LCD_Display_Task+0x128>)
 8000cae:	21e6      	movs	r1, #230	; 0xe6
 8000cb0:	201e      	movs	r0, #30
 8000cb2:	f000 fbbb 	bl	800142c <LCD_DisplayString>
			if (current_direction == 4) {LCD_DisplayString(30,230,"Hard right");}
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	2b04      	cmp	r3, #4
 8000cba:	d18f      	bne.n	8000bdc <LCD_Display_Task+0x10>
 8000cbc:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <LCD_Display_Task+0x12c>)
 8000cbe:	21e6      	movs	r1, #230	; 0xe6
 8000cc0:	201e      	movs	r0, #30
 8000cc2:	f000 fbb3 	bl	800142c <LCD_DisplayString>
	while(1){
 8000cc6:	e789      	b.n	8000bdc <LCD_Display_Task+0x10>
 8000cc8:	20001804 	.word	0x20001804
 8000ccc:	20001868 	.word	0x20001868
 8000cd0:	200017d8 	.word	0x200017d8
 8000cd4:	2000186c 	.word	0x2000186c
 8000cd8:	200017dc 	.word	0x200017dc
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	0800b3a0 	.word	0x0800b3a0
 8000ce4:	0800b3a8 	.word	0x0800b3a8
 8000ce8:	0800b3b4 	.word	0x0800b3b4
 8000cec:	0800b3c0 	.word	0x0800b3c0
 8000cf0:	0800b3c8 	.word	0x0800b3c8
 8000cf4:	0800b3d0 	.word	0x0800b3d0
 8000cf8:	0800b3d8 	.word	0x0800b3d8

08000cfc <Gyro_Init>:

/**
  * @brief Initialise the gyro for Lab2
  * @retval None
  */
void Gyro_Init(){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
	Gyro_Power_On();
 8000d00:	f000 f80a 	bl	8000d18 <Gyro_Power_On>
	osDelay(100);
 8000d04:	2064      	movs	r0, #100	; 0x64
 8000d06:	f004 fa35 	bl	8005174 <osDelay>
	Gyro_Config_Regs();
 8000d0a:	f000 f8b7 	bl	8000e7c <Gyro_Config_Regs>
	Gyro_Reboot();
 8000d0e:	f000 f847 	bl	8000da0 <Gyro_Reboot>


}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <Gyro_Power_On>:
/**
  * @brief Power on the Gyro
  * @retval None
  */

void Gyro_Power_On(){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
	//get data from register
	uint8_t cmd = (GYRO_READ | CTRL_REG1);
 8000d1e:	23a0      	movs	r3, #160	; 0xa0
 8000d20:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buff = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 8000d26:	f000 f921 	bl	8000f6c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8000d2a:	bf00      	nop
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	481a      	ldr	r0, [pc, #104]	; (8000d98 <Gyro_Power_On+0x80>)
 8000d30:	f002 f92e 	bl	8002f90 <HAL_GPIO_ReadPin>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1f8      	bne.n	8000d2c <Gyro_Power_On+0x14>
	Gyro_Transmit_Data(&cmd);
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 f947 	bl	8000fd0 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rx_buff);
 8000d42:	1dbb      	adds	r3, r7, #6
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 f929 	bl	8000f9c <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 8000d4a:	f000 f91b 	bl	8000f84 <Gyro_Slave_Disable>
	cmd = (GYRO_WRITE | CTRL_REG1);
 8000d4e:	2320      	movs	r3, #32
 8000d50:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buff = (rx_buff | (1 << 3));
 8000d52:	79bb      	ldrb	r3, [r7, #6]
 8000d54:	f043 0308 	orr.w	r3, r3, #8
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	717b      	strb	r3, [r7, #5]
	Gyro_Slave_Enable();
 8000d5c:	f000 f906 	bl	8000f6c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8000d60:	bf00      	nop
 8000d62:	2102      	movs	r1, #2
 8000d64:	480c      	ldr	r0, [pc, #48]	; (8000d98 <Gyro_Power_On+0x80>)
 8000d66:	f002 f913 	bl	8002f90 <HAL_GPIO_ReadPin>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1f8      	bne.n	8000d62 <Gyro_Power_On+0x4a>
	Gyro_Transmit_Data(&cmd);
 8000d70:	1dfb      	adds	r3, r7, #7
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f92c 	bl	8000fd0 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&tx_buff);
 8000d78:	1d7b      	adds	r3, r7, #5
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f928 	bl	8000fd0 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 8000d80:	f000 f900 	bl	8000f84 <Gyro_Slave_Disable>


	if(HAL_Status != HAL_OK)
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <Gyro_Power_On+0x84>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d000      	beq.n	8000d8e <Gyro_Power_On+0x76>
	{
		while(1);
 8000d8c:	e7fe      	b.n	8000d8c <Gyro_Power_On+0x74>
	}
	}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40020800 	.word	0x40020800
 8000d9c:	20001870 	.word	0x20001870

08000da0 <Gyro_Reboot>:
/**
  * @brief Perform a Reboot on the Gyro
  * @retval None
  */

void Gyro_Reboot(){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
	uint8_t cmd = (GYRO_READ | CTRL_REG5);
 8000da6:	23a4      	movs	r3, #164	; 0xa4
 8000da8:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buff = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 8000dae:	f000 f8dd 	bl	8000f6c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8000db2:	bf00      	nop
 8000db4:	2102      	movs	r1, #2
 8000db6:	4817      	ldr	r0, [pc, #92]	; (8000e14 <Gyro_Reboot+0x74>)
 8000db8:	f002 f8ea 	bl	8002f90 <HAL_GPIO_ReadPin>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1f8      	bne.n	8000db4 <Gyro_Reboot+0x14>
	Gyro_Transmit_Data(&cmd);
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 f903 	bl	8000fd0 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rx_buff);
 8000dca:	1dbb      	adds	r3, r7, #6
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 f8e5 	bl	8000f9c <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 8000dd2:	f000 f8d7 	bl	8000f84 <Gyro_Slave_Disable>
	cmd = (GYRO_WRITE | CTRL_REG5);
 8000dd6:	2324      	movs	r3, #36	; 0x24
 8000dd8:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buff = (rx_buff | (1 << 7));
 8000dda:	79bb      	ldrb	r3, [r7, #6]
 8000ddc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	717b      	strb	r3, [r7, #5]
	Gyro_Slave_Enable();
 8000de4:	f000 f8c2 	bl	8000f6c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8000de8:	bf00      	nop
 8000dea:	2102      	movs	r1, #2
 8000dec:	4809      	ldr	r0, [pc, #36]	; (8000e14 <Gyro_Reboot+0x74>)
 8000dee:	f002 f8cf 	bl	8002f90 <HAL_GPIO_ReadPin>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1f8      	bne.n	8000dea <Gyro_Reboot+0x4a>
	Gyro_Transmit_Data(&cmd);
 8000df8:	1dfb      	adds	r3, r7, #7
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 f8e8 	bl	8000fd0 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&tx_buff);
 8000e00:	1d7b      	adds	r3, r7, #5
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 f8e4 	bl	8000fd0 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 8000e08:	f000 f8bc 	bl	8000f84 <Gyro_Slave_Disable>

}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40020800 	.word	0x40020800

08000e18 <Gyro_Get_Velocity>:
/**
  * @brief Sample the Velocity Rate of the Gyro and return
  * @retval 16 bit integer representing the velocity of the gyro
  */

int16_t Gyro_Get_Velocity(){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
	int16_t yval = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	80fb      	strh	r3, [r7, #6]

	uint8_t cmd = (GYRO_READ| MS_BIT | OUT_Y_L);
 8000e22:	23ea      	movs	r3, #234	; 0xea
 8000e24:	717b      	strb	r3, [r7, #5]
	uint8_t rxbuff_yl = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	713b      	strb	r3, [r7, #4]
	uint8_t rxbuff_yh = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	70fb      	strb	r3, [r7, #3]

	Gyro_Slave_Enable();
 8000e2e:	f000 f89d 	bl	8000f6c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8000e32:	bf00      	nop
 8000e34:	2102      	movs	r1, #2
 8000e36:	4810      	ldr	r0, [pc, #64]	; (8000e78 <Gyro_Get_Velocity+0x60>)
 8000e38:	f002 f8aa 	bl	8002f90 <HAL_GPIO_ReadPin>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f8      	bne.n	8000e34 <Gyro_Get_Velocity+0x1c>
	Gyro_Transmit_Data(&cmd);
 8000e42:	1d7b      	adds	r3, r7, #5
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 f8c3 	bl	8000fd0 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rxbuff_yl);
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 f8a5 	bl	8000f9c <Gyro_Receive_Data>
	Gyro_Receive_Data(&rxbuff_yh);
 8000e52:	1cfb      	adds	r3, r7, #3
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 f8a1 	bl	8000f9c <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 8000e5a:	f000 f893 	bl	8000f84 <Gyro_Slave_Disable>


	yval = (int16_t) ((rxbuff_yh << 8) | rxbuff_yl);
 8000e5e:	78fb      	ldrb	r3, [r7, #3]
 8000e60:	021b      	lsls	r3, r3, #8
 8000e62:	b21a      	sxth	r2, r3
 8000e64:	793b      	ldrb	r3, [r7, #4]
 8000e66:	b21b      	sxth	r3, r3
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	80fb      	strh	r3, [r7, #6]

	return yval;
 8000e6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]



}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40020800 	.word	0x40020800

08000e7c <Gyro_Config_Regs>:

/**
  * @brief Configure the registers for the gyro
  * @retval None
  */
void Gyro_Config_Regs(){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0

	//CR1
	uint8_t addr_cmd = (GYRO_WRITE | CTRL_REG1);
 8000e82:	2320      	movs	r3, #32
 8000e84:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_cmd = 0x1A; // 0001 1010 - Gyro Data rate is 100hz, gyro enabled on y-axis only
 8000e86:	231a      	movs	r3, #26
 8000e88:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 8000e8a:	f000 f86f 	bl	8000f6c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8000e8e:	bf00      	nop
 8000e90:	2102      	movs	r1, #2
 8000e92:	482e      	ldr	r0, [pc, #184]	; (8000f4c <Gyro_Config_Regs+0xd0>)
 8000e94:	f002 f87c 	bl	8002f90 <HAL_GPIO_ReadPin>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d1f8      	bne.n	8000e90 <Gyro_Config_Regs+0x14>
	Gyro_Transmit_Data(&addr_cmd);
 8000e9e:	1dfb      	adds	r3, r7, #7
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 f895 	bl	8000fd0 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8000ea6:	1dbb      	adds	r3, r7, #6
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f891 	bl	8000fd0 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 8000eae:	f000 f869 	bl	8000f84 <Gyro_Slave_Disable>




	//CR4
	addr_cmd = (GYRO_WRITE | CTRL_REG4);
 8000eb2:	2323      	movs	r3, #35	; 0x23
 8000eb4:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0x10; //0001 0000 - Full scale rate of 500dps
 8000eb6:	2310      	movs	r3, #16
 8000eb8:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 8000eba:	f000 f857 	bl	8000f6c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8000ebe:	bf00      	nop
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	4822      	ldr	r0, [pc, #136]	; (8000f4c <Gyro_Config_Regs+0xd0>)
 8000ec4:	f002 f864 	bl	8002f90 <HAL_GPIO_ReadPin>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d1f8      	bne.n	8000ec0 <Gyro_Config_Regs+0x44>
	Gyro_Transmit_Data(&addr_cmd);
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 f87d 	bl	8000fd0 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8000ed6:	1dbb      	adds	r3, r7, #6
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 f879 	bl	8000fd0 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 8000ede:	f000 f851 	bl	8000f84 <Gyro_Slave_Disable>


	//CR5
	addr_cmd = (GYRO_WRITE | CTRL_REG5);
 8000ee2:	2324      	movs	r3, #36	; 0x24
 8000ee4:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0xC0; //1100 0000 - Reboot initially and enable FIFO
 8000ee6:	23c0      	movs	r3, #192	; 0xc0
 8000ee8:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 8000eea:	f000 f83f 	bl	8000f6c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8000eee:	bf00      	nop
 8000ef0:	2102      	movs	r1, #2
 8000ef2:	4816      	ldr	r0, [pc, #88]	; (8000f4c <Gyro_Config_Regs+0xd0>)
 8000ef4:	f002 f84c 	bl	8002f90 <HAL_GPIO_ReadPin>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d1f8      	bne.n	8000ef0 <Gyro_Config_Regs+0x74>
	Gyro_Transmit_Data(&addr_cmd);
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 f865 	bl	8000fd0 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8000f06:	1dbb      	adds	r3, r7, #6
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 f861 	bl	8000fd0 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 8000f0e:	f000 f839 	bl	8000f84 <Gyro_Slave_Disable>


	//FIFO_CTRL
	addr_cmd = (GYRO_WRITE | FIFO_CTRL_REG);
 8000f12:	232e      	movs	r3, #46	; 0x2e
 8000f14:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0x00; //0100 0000 FIFO in stream mode
 8000f16:	2300      	movs	r3, #0
 8000f18:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 8000f1a:	f000 f827 	bl	8000f6c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8000f1e:	bf00      	nop
 8000f20:	2102      	movs	r1, #2
 8000f22:	480a      	ldr	r0, [pc, #40]	; (8000f4c <Gyro_Config_Regs+0xd0>)
 8000f24:	f002 f834 	bl	8002f90 <HAL_GPIO_ReadPin>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1f8      	bne.n	8000f20 <Gyro_Config_Regs+0xa4>
	Gyro_Transmit_Data(&addr_cmd);
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 f84d 	bl	8000fd0 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8000f36:	1dbb      	adds	r3, r7, #6
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 f849 	bl	8000fd0 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 8000f3e:	f000 f821 	bl	8000f84 <Gyro_Slave_Disable>




}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40020800 	.word	0x40020800

08000f50 <Gyro_HAL_Check>:

/**
  * @brief Check the status of the HAL
  * @retval None
  */
void Gyro_HAL_Check(){
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
	if(HAL_Status != HAL_OK){
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <Gyro_HAL_Check+0x18>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d000      	beq.n	8000f5e <Gyro_HAL_Check+0xe>
		while(1);
 8000f5c:	e7fe      	b.n	8000f5c <Gyro_HAL_Check+0xc>
	}
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	20001870 	.word	0x20001870

08000f6c <Gyro_Slave_Enable>:

/**
  * @brief Enable the Chip Select pin
  * @retval None
  */
void Gyro_Slave_Enable(){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT,CS_PIN,GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2102      	movs	r1, #2
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <Gyro_Slave_Enable+0x14>)
 8000f76:	f002 f823 	bl	8002fc0 <HAL_GPIO_WritePin>
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40020800 	.word	0x40020800

08000f84 <Gyro_Slave_Disable>:

/**
  * @brief Disable the Chip Select pin
  * @retval None
  */
void Gyro_Slave_Disable(){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT,CS_PIN,GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2102      	movs	r1, #2
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <Gyro_Slave_Disable+0x14>)
 8000f8e:	f002 f817 	bl	8002fc0 <HAL_GPIO_WritePin>
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40020800 	.word	0x40020800

08000f9c <Gyro_Receive_Data>:
/**
  * @brief Recieve one bit of data from the Gyro
  * @param rx_buff- pointer to a data buffer, recieved data will appear here
  * @retval None
  */
void Gyro_Receive_Data(uint8_t *rx_buff){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

	HAL_Status = HAL_SPI_Receive(&hspi5, rx_buff, 1, TIMEOUT);
 8000fa4:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000fa8:	2201      	movs	r2, #1
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <Gyro_Receive_Data+0x2c>)
 8000fae:	f003 faf0 	bl	8004592 <HAL_SPI_Receive>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <Gyro_Receive_Data+0x30>)
 8000fb8:	701a      	strb	r2, [r3, #0]
	Gyro_HAL_Check();
 8000fba:	f7ff ffc9 	bl	8000f50 <Gyro_HAL_Check>

}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20027254 	.word	0x20027254
 8000fcc:	20001870 	.word	0x20001870

08000fd0 <Gyro_Transmit_Data>:
/**
  * @brief Send one bit of data to the Gyro
  * @param tx_buff- pointer to a data buffer.
  * @retval None
  */
void Gyro_Transmit_Data(uint8_t *tx_buff){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

	HAL_Status = HAL_SPI_Transmit(&hspi5,tx_buff, 1, TIMEOUT);
 8000fd8:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000fdc:	2201      	movs	r2, #1
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	4806      	ldr	r0, [pc, #24]	; (8000ffc <Gyro_Transmit_Data+0x2c>)
 8000fe2:	f003 f99a 	bl	800431a <HAL_SPI_Transmit>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b05      	ldr	r3, [pc, #20]	; (8001000 <Gyro_Transmit_Data+0x30>)
 8000fec:	701a      	strb	r2, [r3, #0]
	Gyro_HAL_Check();
 8000fee:	f7ff ffaf 	bl	8000f50 <Gyro_HAL_Check>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20027254 	.word	0x20027254
 8001000:	20001870 	.word	0x20001870

08001004 <LCD_GPIO_Init>:
static void SPI_Error(void);

/* Provided Functions and API  - MOTIFY ONLY WITH EXTREME CAUTION!!! */

void LCD_GPIO_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08c      	sub	sp, #48	; 0x30
 8001008:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
 800100e:	4b5a      	ldr	r3, [pc, #360]	; (8001178 <LCD_GPIO_Init+0x174>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	4a59      	ldr	r2, [pc, #356]	; (8001178 <LCD_GPIO_Init+0x174>)
 8001014:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001018:	6453      	str	r3, [r2, #68]	; 0x44
 800101a:	4b57      	ldr	r3, [pc, #348]	; (8001178 <LCD_GPIO_Init+0x174>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001022:	61bb      	str	r3, [r7, #24]
 8001024:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	4b53      	ldr	r3, [pc, #332]	; (8001178 <LCD_GPIO_Init+0x174>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a52      	ldr	r2, [pc, #328]	; (8001178 <LCD_GPIO_Init+0x174>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b50      	ldr	r3, [pc, #320]	; (8001178 <LCD_GPIO_Init+0x174>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	4b4c      	ldr	r3, [pc, #304]	; (8001178 <LCD_GPIO_Init+0x174>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a4b      	ldr	r2, [pc, #300]	; (8001178 <LCD_GPIO_Init+0x174>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b49      	ldr	r3, [pc, #292]	; (8001178 <LCD_GPIO_Init+0x174>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b45      	ldr	r3, [pc, #276]	; (8001178 <LCD_GPIO_Init+0x174>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a44      	ldr	r2, [pc, #272]	; (8001178 <LCD_GPIO_Init+0x174>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b42      	ldr	r3, [pc, #264]	; (8001178 <LCD_GPIO_Init+0x174>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	4b3e      	ldr	r3, [pc, #248]	; (8001178 <LCD_GPIO_Init+0x174>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a3d      	ldr	r2, [pc, #244]	; (8001178 <LCD_GPIO_Init+0x174>)
 8001084:	f043 0308 	orr.w	r3, r3, #8
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b3b      	ldr	r3, [pc, #236]	; (8001178 <LCD_GPIO_Init+0x174>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	4b37      	ldr	r3, [pc, #220]	; (8001178 <LCD_GPIO_Init+0x174>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a36      	ldr	r2, [pc, #216]	; (8001178 <LCD_GPIO_Init+0x174>)
 80010a0:	f043 0320 	orr.w	r3, r3, #32
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b34      	ldr	r3, [pc, #208]	; (8001178 <LCD_GPIO_Init+0x174>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0320 	and.w	r3, r3, #32
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	603b      	str	r3, [r7, #0]
 80010b6:	4b30      	ldr	r3, [pc, #192]	; (8001178 <LCD_GPIO_Init+0x174>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a2f      	ldr	r2, [pc, #188]	; (8001178 <LCD_GPIO_Init+0x174>)
 80010bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <LCD_GPIO_Init+0x174>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80010ce:	f641 0358 	movw	r3, #6232	; 0x1858
 80010d2:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80010dc:	2302      	movs	r3, #2
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80010e0:	230e      	movs	r3, #14
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	4619      	mov	r1, r3
 80010ea:	4824      	ldr	r0, [pc, #144]	; (800117c <LCD_GPIO_Init+0x178>)
 80010ec:	f001 fc98 	bl	8002a20 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80010f0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80010f4:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4619      	mov	r1, r3
 80010fc:	4820      	ldr	r0, [pc, #128]	; (8001180 <LCD_GPIO_Init+0x17c>)
 80010fe:	f001 fc8f 	bl	8002a20 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001102:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001106:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4619      	mov	r1, r3
 800110e:	481d      	ldr	r0, [pc, #116]	; (8001184 <LCD_GPIO_Init+0x180>)
 8001110:	f001 fc86 	bl	8002a20 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001114:	2348      	movs	r3, #72	; 0x48
 8001116:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4619      	mov	r1, r3
 800111e:	481a      	ldr	r0, [pc, #104]	; (8001188 <LCD_GPIO_Init+0x184>)
 8001120:	f001 fc7e 	bl	8002a20 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001128:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	4619      	mov	r1, r3
 8001130:	4816      	ldr	r0, [pc, #88]	; (800118c <LCD_GPIO_Init+0x188>)
 8001132:	f001 fc75 	bl	8002a20 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001136:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800113a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	4813      	ldr	r0, [pc, #76]	; (8001190 <LCD_GPIO_Init+0x18c>)
 8001144:	f001 fc6c 	bl	8002a20 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001148:	2303      	movs	r3, #3
 800114a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800114c:	2309      	movs	r3, #9
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	480a      	ldr	r0, [pc, #40]	; (8001180 <LCD_GPIO_Init+0x17c>)
 8001158:	f001 fc62 	bl	8002a20 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800115c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001160:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4619      	mov	r1, r3
 8001168:	4809      	ldr	r0, [pc, #36]	; (8001190 <LCD_GPIO_Init+0x18c>)
 800116a:	f001 fc59 	bl	8002a20 <HAL_GPIO_Init>
}
 800116e:	bf00      	nop
 8001170:	3730      	adds	r7, #48	; 0x30
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	40020000 	.word	0x40020000
 8001180:	40020400 	.word	0x40020400
 8001184:	40020800 	.word	0x40020800
 8001188:	40020c00 	.word	0x40020c00
 800118c:	40021400 	.word	0x40021400
 8001190:	40021800 	.word	0x40021800

08001194 <LTCD__Init>:


void LTCD__Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  	hltdc.Instance = LTDC;
 8001198:	4b2a      	ldr	r3, [pc, #168]	; (8001244 <LTCD__Init+0xb0>)
 800119a:	4a2b      	ldr	r2, [pc, #172]	; (8001248 <LTCD__Init+0xb4>)
 800119c:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 800119e:	4b29      	ldr	r3, [pc, #164]	; (8001244 <LTCD__Init+0xb0>)
 80011a0:	2209      	movs	r2, #9
 80011a2:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80011a4:	4b27      	ldr	r3, [pc, #156]	; (8001244 <LTCD__Init+0xb0>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80011aa:	4b26      	ldr	r3, [pc, #152]	; (8001244 <LTCD__Init+0xb0>)
 80011ac:	221d      	movs	r2, #29
 80011ae:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 80011b0:	4b24      	ldr	r3, [pc, #144]	; (8001244 <LTCD__Init+0xb0>)
 80011b2:	2203      	movs	r2, #3
 80011b4:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 80011b6:	4b23      	ldr	r3, [pc, #140]	; (8001244 <LTCD__Init+0xb0>)
 80011b8:	f240 120d 	movw	r2, #269	; 0x10d
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 80011be:	4b21      	ldr	r3, [pc, #132]	; (8001244 <LTCD__Init+0xb0>)
 80011c0:	f240 1243 	movw	r2, #323	; 0x143
 80011c4:	629a      	str	r2, [r3, #40]	; 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 80011c6:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <LTCD__Init+0xb0>)
 80011c8:	f240 1217 	movw	r2, #279	; 0x117
 80011cc:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80011ce:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <LTCD__Init+0xb0>)
 80011d0:	f240 1247 	movw	r2, #327	; 0x147
 80011d4:	631a      	str	r2, [r3, #48]	; 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80011d6:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <LTCD__Init+0xb0>)
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80011de:	4b19      	ldr	r3, [pc, #100]	; (8001244 <LTCD__Init+0xb0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 80011e6:	4b17      	ldr	r3, [pc, #92]	; (8001244 <LTCD__Init+0xb0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <LTCD__Init+0xb8>)
 80011f0:	2208      	movs	r2, #8
 80011f2:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80011f4:	4b15      	ldr	r3, [pc, #84]	; (800124c <LTCD__Init+0xb8>)
 80011f6:	22c0      	movs	r2, #192	; 0xc0
 80011f8:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80011fa:	4b14      	ldr	r3, [pc, #80]	; (800124c <LTCD__Init+0xb8>)
 80011fc:	2204      	movs	r2, #4
 80011fe:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <LTCD__Init+0xb8>)
 8001202:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001206:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001208:	4810      	ldr	r0, [pc, #64]	; (800124c <LTCD__Init+0xb8>)
 800120a:	f002 fe15 	bl	8003e38 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800120e:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <LTCD__Init+0xb0>)
 8001210:	2200      	movs	r2, #0
 8001212:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <LTCD__Init+0xb0>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <LTCD__Init+0xb0>)
 800121c:	2200      	movs	r2, #0
 800121e:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <LTCD__Init+0xb0>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8001226:	f7ff feed 	bl	8001004 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800122a:	4806      	ldr	r0, [pc, #24]	; (8001244 <LTCD__Init+0xb0>)
 800122c:	f001 fefa 	bl	8003024 <HAL_LTDC_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8001236:	f000 f9f7 	bl	8001628 <LCD_Error_Handler>
	 }

	ili9341_Init();
 800123a:	f000 f9f8 	bl	800162e <ili9341_Init>
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20001874 	.word	0x20001874
 8001248:	40016800 	.word	0x40016800
 800124c:	2000191c 	.word	0x2000191c

08001250 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b090      	sub	sp, #64	; 0x40
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 800125e:	23f0      	movs	r3, #240	; 0xf0
 8001260:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8001266:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800126a:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 800126c:	2302      	movs	r3, #2
 800126e:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001270:	23ff      	movs	r3, #255	; 0xff
 8001272:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001278:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800127e:	2305      	movs	r3, #5
 8001280:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (LayerIndex == 0){
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d101      	bne.n	800128c <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <LTCD_Layer_Init+0x78>)
 800128a:	633b      	str	r3, [r7, #48]	; 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 800128c:	23f0      	movs	r3, #240	; 0xf0
 800128e:	637b      	str	r3, [r7, #52]	; 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8001290:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001294:	63bb      	str	r3, [r7, #56]	; 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	pLayerCfg.Backcolor.Green = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80012a8:	79fa      	ldrb	r2, [r7, #7]
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	4619      	mov	r1, r3
 80012b0:	4806      	ldr	r0, [pc, #24]	; (80012cc <LTCD_Layer_Init+0x7c>)
 80012b2:	f001 ff87 	bl	80031c4 <HAL_LTDC_ConfigLayer>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80012bc:	f000 f9b4 	bl	8001628 <LCD_Error_Handler>
	}

}
 80012c0:	bf00      	nop
 80012c2:	3740      	adds	r7, #64	; 0x40
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	200019a8 	.word	0x200019a8
 80012cc:	20001874 	.word	0x20001874

080012d0 <LCD_Draw_Pixel>:

// Draws a single pixel, should be useds only within this fileset and should not be seen by external clients. 
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	80fb      	strh	r3, [r7, #6]
 80012da:	460b      	mov	r3, r1
 80012dc:	80bb      	strh	r3, [r7, #4]
 80012de:	4613      	mov	r3, r2
 80012e0:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80012e2:	88ba      	ldrh	r2, [r7, #4]
 80012e4:	4613      	mov	r3, r2
 80012e6:	011b      	lsls	r3, r3, #4
 80012e8:	1a9b      	subs	r3, r3, r2
 80012ea:	011b      	lsls	r3, r3, #4
 80012ec:	461a      	mov	r2, r3
 80012ee:	88fb      	ldrh	r3, [r7, #6]
 80012f0:	4413      	add	r3, r2
 80012f2:	4905      	ldr	r1, [pc, #20]	; (8001308 <LCD_Draw_Pixel+0x38>)
 80012f4:	887a      	ldrh	r2, [r7, #2]
 80012f6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	200019a8 	.word	0x200019a8

0800130c <LCD_DrawChar>:


void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	603a      	str	r2, [r7, #0]
 8001316:	80fb      	strh	r3, [r7, #6]
 8001318:	460b      	mov	r3, r1
 800131a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	2300      	movs	r3, #0
 8001322:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	e04c      	b.n	80013c4 <LCD_DrawChar+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	e03f      	b.n	80013b0 <LCD_DrawChar+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	4413      	add	r3, r2
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	4619      	mov	r1, r3
 800133c:	4b27      	ldr	r3, [pc, #156]	; (80013dc <LCD_DrawChar+0xd0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	889b      	ldrh	r3, [r3, #4]
 8001342:	4a27      	ldr	r2, [pc, #156]	; (80013e0 <LCD_DrawChar+0xd4>)
 8001344:	fba2 2303 	umull	r2, r3, r2, r3
 8001348:	08db      	lsrs	r3, r3, #3
 800134a:	b29b      	uxth	r3, r3
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	2280      	movs	r2, #128	; 0x80
 8001350:	409a      	lsls	r2, r3
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	fa42 f303 	asr.w	r3, r2, r3
 8001358:	400b      	ands	r3, r1
 800135a:	2b00      	cmp	r3, #0
 800135c:	d104      	bne.n	8001368 <LCD_DrawChar+0x5c>
 800135e:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <LCD_DrawChar+0xd0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	889b      	ldrh	r3, [r3, #4]
 8001364:	2b0c      	cmp	r3, #12
 8001366:	d920      	bls.n	80013aa <LCD_DrawChar+0x9e>
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	4413      	add	r3, r2
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	fa42 f303 	asr.w	r3, r2, r3
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	d104      	bne.n	800138c <LCD_DrawChar+0x80>
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <LCD_DrawChar+0xd0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	889b      	ldrh	r3, [r3, #4]
 8001388:	2b0c      	cmp	r3, #12
 800138a:	d80e      	bhi.n	80013aa <LCD_DrawChar+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	b29a      	uxth	r2, r3
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	4413      	add	r3, r2
 8001394:	b298      	uxth	r0, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	b29a      	uxth	r2, r3
 800139a:	88bb      	ldrh	r3, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	b29b      	uxth	r3, r3
 80013a0:	4a10      	ldr	r2, [pc, #64]	; (80013e4 <LCD_DrawChar+0xd8>)
 80013a2:	8812      	ldrh	r2, [r2, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	f7ff ff93 	bl	80012d0 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	3301      	adds	r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <LCD_DrawChar+0xd0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	889b      	ldrh	r3, [r3, #4]
 80013b6:	461a      	mov	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d3b8      	bcc.n	8001330 <LCD_DrawChar+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	3301      	adds	r3, #1
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <LCD_DrawChar+0xd0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	88db      	ldrh	r3, [r3, #6]
 80013ca:	461a      	mov	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d3ab      	bcc.n	800132a <LCD_DrawChar+0x1e>
      }
    }
  }
}
 80013d2:	bf00      	nop
 80013d4:	bf00      	nop
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	2000194c 	.word	0x2000194c
 80013e0:	aaaaaaab 	.word	0xaaaaaaab
 80013e4:	20000000 	.word	0x20000000

080013e8 <LCD_DisplayChar>:

// Displays Char
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	80fb      	strh	r3, [r7, #6]
 80013f2:	460b      	mov	r3, r1
 80013f4:	80bb      	strh	r3, [r7, #4]
 80013f6:	4613      	mov	r3, r2
 80013f8:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 80013fa:	78fb      	ldrb	r3, [r7, #3]
 80013fc:	3b20      	subs	r3, #32
 80013fe:	70fb      	strb	r3, [r7, #3]
  LCD_DrawChar(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <LCD_DisplayChar+0x40>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	78fb      	ldrb	r3, [r7, #3]
 8001408:	4907      	ldr	r1, [pc, #28]	; (8001428 <LCD_DisplayChar+0x40>)
 800140a:	6809      	ldr	r1, [r1, #0]
 800140c:	88c9      	ldrh	r1, [r1, #6]
 800140e:	fb01 f303 	mul.w	r3, r1, r3
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	441a      	add	r2, r3
 8001416:	88b9      	ldrh	r1, [r7, #4]
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff76 	bl	800130c <LCD_DrawChar>
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	2000194c 	.word	0x2000194c

0800142c <LCD_DisplayString>:

void LCD_DisplayString(uint16_t Xpos, uint16_t Ypos, char *string){
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	603a      	str	r2, [r7, #0]
 8001436:	80fb      	strh	r3, [r7, #6]
 8001438:	460b      	mov	r3, r1
 800143a:	80bb      	strh	r3, [r7, #4]
	if(string == NULL) return;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d017      	beq.n	8001472 <LCD_DisplayString+0x46>
	uint16_t offset = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	81fb      	strh	r3, [r7, #14]
	while(*string != '\0'){
 8001446:	e00f      	b.n	8001468 <LCD_DisplayString+0x3c>
		LCD_DisplayChar(Xpos+offset, Ypos, *string);
 8001448:	88fa      	ldrh	r2, [r7, #6]
 800144a:	89fb      	ldrh	r3, [r7, #14]
 800144c:	4413      	add	r3, r2
 800144e:	b298      	uxth	r0, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	781a      	ldrb	r2, [r3, #0]
 8001454:	88bb      	ldrh	r3, [r7, #4]
 8001456:	4619      	mov	r1, r3
 8001458:	f7ff ffc6 	bl	80013e8 <LCD_DisplayChar>
		string++;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	3301      	adds	r3, #1
 8001460:	603b      	str	r3, [r7, #0]
		offset+=15;
 8001462:	89fb      	ldrh	r3, [r7, #14]
 8001464:	330f      	adds	r3, #15
 8001466:	81fb      	strh	r3, [r7, #14]
	while(*string != '\0'){
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1eb      	bne.n	8001448 <LCD_DisplayString+0x1c>
 8001470:	e000      	b.n	8001474 <LCD_DisplayString+0x48>
	if(string == NULL) return;
 8001472:	bf00      	nop
	}
}
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <LCD_DisplayNumber>:

//Displays Number, size is the number of digits in the number you want to Display
void LCD_DisplayNumber(uint16_t Xpos, uint16_t Ypos, uint16_t Number){
 800147c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001480:	b089      	sub	sp, #36	; 0x24
 8001482:	af00      	add	r7, sp, #0
 8001484:	4603      	mov	r3, r0
 8001486:	80fb      	strh	r3, [r7, #6]
 8001488:	460b      	mov	r3, r1
 800148a:	80bb      	strh	r3, [r7, #4]
 800148c:	4613      	mov	r3, r2
 800148e:	807b      	strh	r3, [r7, #2]
 8001490:	466b      	mov	r3, sp
 8001492:	461e      	mov	r6, r3

	uint8_t numDigits = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	77fb      	strb	r3, [r7, #31]
	if(Number == 0){
 8001498:	887b      	ldrh	r3, [r7, #2]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d107      	bne.n	80014ae <LCD_DisplayNumber+0x32>
		LCD_DisplayChar(Xpos,Ypos,'0');
 800149e:	88b9      	ldrh	r1, [r7, #4]
 80014a0:	88fb      	ldrh	r3, [r7, #6]
 80014a2:	2230      	movs	r2, #48	; 0x30
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff9f 	bl	80013e8 <LCD_DisplayChar>
		return;
 80014aa:	46b5      	mov	sp, r6
 80014ac:	e074      	b.n	8001598 <LCD_DisplayNumber+0x11c>
	}
	else{
		uint16_t temp = Number;
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	83bb      	strh	r3, [r7, #28]
		while (temp > 0) {
 80014b2:	e008      	b.n	80014c6 <LCD_DisplayNumber+0x4a>
			temp /= 10;
 80014b4:	8bbb      	ldrh	r3, [r7, #28]
 80014b6:	4a3a      	ldr	r2, [pc, #232]	; (80015a0 <LCD_DisplayNumber+0x124>)
 80014b8:	fba2 2303 	umull	r2, r3, r2, r3
 80014bc:	08db      	lsrs	r3, r3, #3
 80014be:	83bb      	strh	r3, [r7, #28]
			numDigits++;
 80014c0:	7ffb      	ldrb	r3, [r7, #31]
 80014c2:	3301      	adds	r3, #1
 80014c4:	77fb      	strb	r3, [r7, #31]
		while (temp > 0) {
 80014c6:	8bbb      	ldrh	r3, [r7, #28]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1f3      	bne.n	80014b4 <LCD_DisplayNumber+0x38>
		}
	}



	uint8_t num_ascii[numDigits];
 80014cc:	7ff9      	ldrb	r1, [r7, #31]
 80014ce:	460b      	mov	r3, r1
 80014d0:	3b01      	subs	r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	b2cb      	uxtb	r3, r1
 80014d6:	2200      	movs	r2, #0
 80014d8:	4698      	mov	r8, r3
 80014da:	4691      	mov	r9, r2
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014f0:	b2cb      	uxtb	r3, r1
 80014f2:	2200      	movs	r2, #0
 80014f4:	461c      	mov	r4, r3
 80014f6:	4615      	mov	r5, r2
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	f04f 0300 	mov.w	r3, #0
 8001500:	00eb      	lsls	r3, r5, #3
 8001502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001506:	00e2      	lsls	r2, r4, #3
 8001508:	460b      	mov	r3, r1
 800150a:	3307      	adds	r3, #7
 800150c:	08db      	lsrs	r3, r3, #3
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	ebad 0d03 	sub.w	sp, sp, r3
 8001514:	466b      	mov	r3, sp
 8001516:	3300      	adds	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
	// Convert each digit to a character and print it with standard spacing.
	for (int i = numDigits - 1; i >= 0; i--) {
 800151a:	7ffb      	ldrb	r3, [r7, #31]
 800151c:	3b01      	subs	r3, #1
 800151e:	61bb      	str	r3, [r7, #24]
 8001520:	e01b      	b.n	800155a <LCD_DisplayNumber+0xde>
		num_ascii[i] = '0' + (Number % 10);
 8001522:	887a      	ldrh	r2, [r7, #2]
 8001524:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <LCD_DisplayNumber+0x124>)
 8001526:	fba3 1302 	umull	r1, r3, r3, r2
 800152a:	08d9      	lsrs	r1, r3, #3
 800152c:	460b      	mov	r3, r1
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	b29b      	uxth	r3, r3
 8001538:	b2db      	uxtb	r3, r3
 800153a:	3330      	adds	r3, #48	; 0x30
 800153c:	b2d9      	uxtb	r1, r3
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	4413      	add	r3, r2
 8001544:	460a      	mov	r2, r1
 8001546:	701a      	strb	r2, [r3, #0]

		Number /= 10;
 8001548:	887b      	ldrh	r3, [r7, #2]
 800154a:	4a15      	ldr	r2, [pc, #84]	; (80015a0 <LCD_DisplayNumber+0x124>)
 800154c:	fba2 2303 	umull	r2, r3, r2, r3
 8001550:	08db      	lsrs	r3, r3, #3
 8001552:	807b      	strh	r3, [r7, #2]
	for (int i = numDigits - 1; i >= 0; i--) {
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	3b01      	subs	r3, #1
 8001558:	61bb      	str	r3, [r7, #24]
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	2b00      	cmp	r3, #0
 800155e:	dae0      	bge.n	8001522 <LCD_DisplayNumber+0xa6>
	}

	//print numbers with offset on x-axis
	uint16_t offset = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	82fb      	strh	r3, [r7, #22]
	for(int i =0; i<numDigits; i++){
 8001564:	2300      	movs	r3, #0
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	e011      	b.n	800158e <LCD_DisplayNumber+0x112>
		LCD_DisplayChar(Xpos+offset,Ypos,num_ascii[i]);
 800156a:	88fa      	ldrh	r2, [r7, #6]
 800156c:	8afb      	ldrh	r3, [r7, #22]
 800156e:	4413      	add	r3, r2
 8001570:	b298      	uxth	r0, r3
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4413      	add	r3, r2
 8001578:	781a      	ldrb	r2, [r3, #0]
 800157a:	88bb      	ldrh	r3, [r7, #4]
 800157c:	4619      	mov	r1, r3
 800157e:	f7ff ff33 	bl	80013e8 <LCD_DisplayChar>
		offset+=12;
 8001582:	8afb      	ldrh	r3, [r7, #22]
 8001584:	330c      	adds	r3, #12
 8001586:	82fb      	strh	r3, [r7, #22]
	for(int i =0; i<numDigits; i++){
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	3301      	adds	r3, #1
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	7ffb      	ldrb	r3, [r7, #31]
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	429a      	cmp	r2, r3
 8001594:	dbe9      	blt.n	800156a <LCD_DisplayNumber+0xee>
 8001596:	46b5      	mov	sp, r6
	}

}
 8001598:	3724      	adds	r7, #36	; 0x24
 800159a:	46bd      	mov	sp, r7
 800159c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015a0:	cccccccd 	.word	0xcccccccd

080015a4 <LCD_SetTextColor>:

void LCD_SetTextColor(uint16_t Color)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <LCD_SetTextColor+0x1c>)
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	8013      	strh	r3, [r2, #0]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	20000000 	.word	0x20000000

080015c4 <LCD_SetFont>:

void LCD_SetFont(FONT_t *fonts)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 80015cc:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <LCD_SetFont+0x1c>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6013      	str	r3, [r2, #0]
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	2000194c 	.word	0x2000194c

080015e4 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	460a      	mov	r2, r1
 80015ee:	71fb      	strb	r3, [r7, #7]
 80015f0:	4613      	mov	r3, r2
 80015f2:	80bb      	strh	r3, [r7, #4]
  if (LayerIndex == 0){
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10e      	bne.n	8001618 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	e007      	b.n	8001610 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8001600:	4908      	ldr	r1, [pc, #32]	; (8001624 <LCD_Clear+0x40>)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	88ba      	ldrh	r2, [r7, #4]
 8001606:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	3301      	adds	r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 8001616:	d3f3      	bcc.n	8001600 <LCD_Clear+0x1c>
		}
	}
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	200019a8 	.word	0x200019a8

08001628 <LCD_Error_Handler>:

void LCD_Error_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  for(;;); // Something went wrong
 800162c:	e7fe      	b.n	800162c <LCD_Error_Handler+0x4>

0800162e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001632:	f000 f9ff 	bl	8001a34 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001636:	20ca      	movs	r0, #202	; 0xca
 8001638:	f000 f943 	bl	80018c2 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 800163c:	20c3      	movs	r0, #195	; 0xc3
 800163e:	f000 f94d 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001642:	2008      	movs	r0, #8
 8001644:	f000 f94a 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001648:	2050      	movs	r0, #80	; 0x50
 800164a:	f000 f947 	bl	80018dc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 800164e:	20cf      	movs	r0, #207	; 0xcf
 8001650:	f000 f937 	bl	80018c2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001654:	2000      	movs	r0, #0
 8001656:	f000 f941 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 800165a:	20c1      	movs	r0, #193	; 0xc1
 800165c:	f000 f93e 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001660:	2030      	movs	r0, #48	; 0x30
 8001662:	f000 f93b 	bl	80018dc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001666:	20ed      	movs	r0, #237	; 0xed
 8001668:	f000 f92b 	bl	80018c2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 800166c:	2064      	movs	r0, #100	; 0x64
 800166e:	f000 f935 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001672:	2003      	movs	r0, #3
 8001674:	f000 f932 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001678:	2012      	movs	r0, #18
 800167a:	f000 f92f 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 800167e:	2081      	movs	r0, #129	; 0x81
 8001680:	f000 f92c 	bl	80018dc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001684:	20e8      	movs	r0, #232	; 0xe8
 8001686:	f000 f91c 	bl	80018c2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 800168a:	2085      	movs	r0, #133	; 0x85
 800168c:	f000 f926 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001690:	2000      	movs	r0, #0
 8001692:	f000 f923 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001696:	2078      	movs	r0, #120	; 0x78
 8001698:	f000 f920 	bl	80018dc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 800169c:	20cb      	movs	r0, #203	; 0xcb
 800169e:	f000 f910 	bl	80018c2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 80016a2:	2039      	movs	r0, #57	; 0x39
 80016a4:	f000 f91a 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 80016a8:	202c      	movs	r0, #44	; 0x2c
 80016aa:	f000 f917 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80016ae:	2000      	movs	r0, #0
 80016b0:	f000 f914 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 80016b4:	2034      	movs	r0, #52	; 0x34
 80016b6:	f000 f911 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 80016ba:	2002      	movs	r0, #2
 80016bc:	f000 f90e 	bl	80018dc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 80016c0:	20f7      	movs	r0, #247	; 0xf7
 80016c2:	f000 f8fe 	bl	80018c2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 80016c6:	2020      	movs	r0, #32
 80016c8:	f000 f908 	bl	80018dc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 80016cc:	20ea      	movs	r0, #234	; 0xea
 80016ce:	f000 f8f8 	bl	80018c2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80016d2:	2000      	movs	r0, #0
 80016d4:	f000 f902 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80016d8:	2000      	movs	r0, #0
 80016da:	f000 f8ff 	bl	80018dc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 80016de:	20b1      	movs	r0, #177	; 0xb1
 80016e0:	f000 f8ef 	bl	80018c2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80016e4:	2000      	movs	r0, #0
 80016e6:	f000 f8f9 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80016ea:	201b      	movs	r0, #27
 80016ec:	f000 f8f6 	bl	80018dc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80016f0:	20b6      	movs	r0, #182	; 0xb6
 80016f2:	f000 f8e6 	bl	80018c2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80016f6:	200a      	movs	r0, #10
 80016f8:	f000 f8f0 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80016fc:	20a2      	movs	r0, #162	; 0xa2
 80016fe:	f000 f8ed 	bl	80018dc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001702:	20c0      	movs	r0, #192	; 0xc0
 8001704:	f000 f8dd 	bl	80018c2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001708:	2010      	movs	r0, #16
 800170a:	f000 f8e7 	bl	80018dc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 800170e:	20c1      	movs	r0, #193	; 0xc1
 8001710:	f000 f8d7 	bl	80018c2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001714:	2010      	movs	r0, #16
 8001716:	f000 f8e1 	bl	80018dc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 800171a:	20c5      	movs	r0, #197	; 0xc5
 800171c:	f000 f8d1 	bl	80018c2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001720:	2045      	movs	r0, #69	; 0x45
 8001722:	f000 f8db 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001726:	2015      	movs	r0, #21
 8001728:	f000 f8d8 	bl	80018dc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 800172c:	20c7      	movs	r0, #199	; 0xc7
 800172e:	f000 f8c8 	bl	80018c2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001732:	2090      	movs	r0, #144	; 0x90
 8001734:	f000 f8d2 	bl	80018dc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001738:	2036      	movs	r0, #54	; 0x36
 800173a:	f000 f8c2 	bl	80018c2 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 800173e:	20c8      	movs	r0, #200	; 0xc8
 8001740:	f000 f8cc 	bl	80018dc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001744:	20f2      	movs	r0, #242	; 0xf2
 8001746:	f000 f8bc 	bl	80018c2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800174a:	2000      	movs	r0, #0
 800174c:	f000 f8c6 	bl	80018dc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001750:	20b0      	movs	r0, #176	; 0xb0
 8001752:	f000 f8b6 	bl	80018c2 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001756:	20c2      	movs	r0, #194	; 0xc2
 8001758:	f000 f8c0 	bl	80018dc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800175c:	20b6      	movs	r0, #182	; 0xb6
 800175e:	f000 f8b0 	bl	80018c2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001762:	200a      	movs	r0, #10
 8001764:	f000 f8ba 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001768:	20a7      	movs	r0, #167	; 0xa7
 800176a:	f000 f8b7 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 800176e:	2027      	movs	r0, #39	; 0x27
 8001770:	f000 f8b4 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001774:	2004      	movs	r0, #4
 8001776:	f000 f8b1 	bl	80018dc <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 800177a:	202a      	movs	r0, #42	; 0x2a
 800177c:	f000 f8a1 	bl	80018c2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001780:	2000      	movs	r0, #0
 8001782:	f000 f8ab 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001786:	2000      	movs	r0, #0
 8001788:	f000 f8a8 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800178c:	2000      	movs	r0, #0
 800178e:	f000 f8a5 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001792:	20ef      	movs	r0, #239	; 0xef
 8001794:	f000 f8a2 	bl	80018dc <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001798:	202b      	movs	r0, #43	; 0x2b
 800179a:	f000 f892 	bl	80018c2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800179e:	2000      	movs	r0, #0
 80017a0:	f000 f89c 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80017a4:	2000      	movs	r0, #0
 80017a6:	f000 f899 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80017aa:	2001      	movs	r0, #1
 80017ac:	f000 f896 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80017b0:	203f      	movs	r0, #63	; 0x3f
 80017b2:	f000 f893 	bl	80018dc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80017b6:	20f6      	movs	r0, #246	; 0xf6
 80017b8:	f000 f883 	bl	80018c2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80017bc:	2001      	movs	r0, #1
 80017be:	f000 f88d 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80017c2:	2000      	movs	r0, #0
 80017c4:	f000 f88a 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80017c8:	2006      	movs	r0, #6
 80017ca:	f000 f887 	bl	80018dc <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80017ce:	202c      	movs	r0, #44	; 0x2c
 80017d0:	f000 f877 	bl	80018c2 <ili9341_Write_Reg>
  LCD_Delay(200);
 80017d4:	20c8      	movs	r0, #200	; 0xc8
 80017d6:	f000 f9e9 	bl	8001bac <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80017da:	2026      	movs	r0, #38	; 0x26
 80017dc:	f000 f871 	bl	80018c2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80017e0:	2001      	movs	r0, #1
 80017e2:	f000 f87b 	bl	80018dc <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80017e6:	20e0      	movs	r0, #224	; 0xe0
 80017e8:	f000 f86b 	bl	80018c2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80017ec:	200f      	movs	r0, #15
 80017ee:	f000 f875 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80017f2:	2029      	movs	r0, #41	; 0x29
 80017f4:	f000 f872 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80017f8:	2024      	movs	r0, #36	; 0x24
 80017fa:	f000 f86f 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80017fe:	200c      	movs	r0, #12
 8001800:	f000 f86c 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001804:	200e      	movs	r0, #14
 8001806:	f000 f869 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800180a:	2009      	movs	r0, #9
 800180c:	f000 f866 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001810:	204e      	movs	r0, #78	; 0x4e
 8001812:	f000 f863 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001816:	2078      	movs	r0, #120	; 0x78
 8001818:	f000 f860 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 800181c:	203c      	movs	r0, #60	; 0x3c
 800181e:	f000 f85d 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001822:	2009      	movs	r0, #9
 8001824:	f000 f85a 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001828:	2013      	movs	r0, #19
 800182a:	f000 f857 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800182e:	2005      	movs	r0, #5
 8001830:	f000 f854 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001834:	2017      	movs	r0, #23
 8001836:	f000 f851 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800183a:	2011      	movs	r0, #17
 800183c:	f000 f84e 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001840:	2000      	movs	r0, #0
 8001842:	f000 f84b 	bl	80018dc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001846:	20e1      	movs	r0, #225	; 0xe1
 8001848:	f000 f83b 	bl	80018c2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800184c:	2000      	movs	r0, #0
 800184e:	f000 f845 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001852:	2016      	movs	r0, #22
 8001854:	f000 f842 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001858:	201b      	movs	r0, #27
 800185a:	f000 f83f 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800185e:	2004      	movs	r0, #4
 8001860:	f000 f83c 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001864:	2011      	movs	r0, #17
 8001866:	f000 f839 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 800186a:	2007      	movs	r0, #7
 800186c:	f000 f836 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001870:	2031      	movs	r0, #49	; 0x31
 8001872:	f000 f833 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001876:	2033      	movs	r0, #51	; 0x33
 8001878:	f000 f830 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 800187c:	2042      	movs	r0, #66	; 0x42
 800187e:	f000 f82d 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001882:	2005      	movs	r0, #5
 8001884:	f000 f82a 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001888:	200c      	movs	r0, #12
 800188a:	f000 f827 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 800188e:	200a      	movs	r0, #10
 8001890:	f000 f824 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001894:	2028      	movs	r0, #40	; 0x28
 8001896:	f000 f821 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 800189a:	202f      	movs	r0, #47	; 0x2f
 800189c:	f000 f81e 	bl	80018dc <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 80018a0:	200f      	movs	r0, #15
 80018a2:	f000 f81b 	bl	80018dc <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 80018a6:	2011      	movs	r0, #17
 80018a8:	f000 f80b 	bl	80018c2 <ili9341_Write_Reg>
  LCD_Delay(200);
 80018ac:	20c8      	movs	r0, #200	; 0xc8
 80018ae:	f000 f97d 	bl	8001bac <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80018b2:	2029      	movs	r0, #41	; 0x29
 80018b4:	f000 f805 	bl	80018c2 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80018b8:	202c      	movs	r0, #44	; 0x2c
 80018ba:	f000 f802 	bl	80018c2 <ili9341_Write_Reg>
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4603      	mov	r3, r0
 80018ca:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 f94a 	bl	8001b68 <LCD_IO_WriteReg>
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 f91b 	bl	8001b24 <LCD_IO_WriteData>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80018fc:	4819      	ldr	r0, [pc, #100]	; (8001964 <SPI_Init+0x6c>)
 80018fe:	f003 f8fb 	bl	8004af8 <HAL_SPI_GetState>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d12b      	bne.n	8001960 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001908:	4b16      	ldr	r3, [pc, #88]	; (8001964 <SPI_Init+0x6c>)
 800190a:	4a17      	ldr	r2, [pc, #92]	; (8001968 <SPI_Init+0x70>)
 800190c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <SPI_Init+0x6c>)
 8001910:	2218      	movs	r2, #24
 8001912:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <SPI_Init+0x6c>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800191a:	4b12      	ldr	r3, [pc, #72]	; (8001964 <SPI_Init+0x6c>)
 800191c:	2200      	movs	r2, #0
 800191e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001920:	4b10      	ldr	r3, [pc, #64]	; (8001964 <SPI_Init+0x6c>)
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <SPI_Init+0x6c>)
 8001928:	2200      	movs	r2, #0
 800192a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800192c:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <SPI_Init+0x6c>)
 800192e:	2207      	movs	r2, #7
 8001930:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <SPI_Init+0x6c>)
 8001934:	2200      	movs	r2, #0
 8001936:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001938:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <SPI_Init+0x6c>)
 800193a:	2200      	movs	r2, #0
 800193c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <SPI_Init+0x6c>)
 8001940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001944:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001946:	4b07      	ldr	r3, [pc, #28]	; (8001964 <SPI_Init+0x6c>)
 8001948:	2200      	movs	r2, #0
 800194a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <SPI_Init+0x6c>)
 800194e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001952:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001954:	4803      	ldr	r0, [pc, #12]	; (8001964 <SPI_Init+0x6c>)
 8001956:	f000 f833 	bl	80019c0 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800195a:	4802      	ldr	r0, [pc, #8]	; (8001964 <SPI_Init+0x6c>)
 800195c:	f002 fc2c 	bl	80041b8 <HAL_SPI_Init>
  }
}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20001950 	.word	0x20001950
 8001968:	40015000 	.word	0x40015000

0800196c <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <SPI_Write+0x34>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	1db9      	adds	r1, r7, #6
 8001980:	2201      	movs	r2, #1
 8001982:	4808      	ldr	r0, [pc, #32]	; (80019a4 <SPI_Write+0x38>)
 8001984:	f002 fcc9 	bl	800431a <HAL_SPI_Transmit>
 8001988:	4603      	mov	r3, r0
 800198a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001992:	f000 f809 	bl	80019a8 <SPI_Error>
  }
}
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000004 	.word	0x20000004
 80019a4:	20001950 	.word	0x20001950

080019a8 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80019ac:	4803      	ldr	r0, [pc, #12]	; (80019bc <SPI_Error+0x14>)
 80019ae:	f002 fc8c 	bl	80042ca <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80019b2:	f7ff ffa1 	bl	80018f8 <SPI_Init>
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20001950 	.word	0x20001950

080019c0 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	; 0x28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <SPI_MspInit+0x6c>)
 80019ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d0:	4a16      	ldr	r2, [pc, #88]	; (8001a2c <SPI_MspInit+0x6c>)
 80019d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019d6:	6453      	str	r3, [r2, #68]	; 0x44
 80019d8:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <SPI_MspInit+0x6c>)
 80019da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <SPI_MspInit+0x6c>)
 80019ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ec:	4a0f      	ldr	r2, [pc, #60]	; (8001a2c <SPI_MspInit+0x6c>)
 80019ee:	f043 0320 	orr.w	r3, r3, #32
 80019f2:	6313      	str	r3, [r2, #48]	; 0x30
 80019f4:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <SPI_MspInit+0x6c>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f8:	f003 0320 	and.w	r3, r3, #32
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001a00:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001a12:	2305      	movs	r3, #5
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4804      	ldr	r0, [pc, #16]	; (8001a30 <SPI_MspInit+0x70>)
 8001a1e:	f000 ffff 	bl	8002a20 <HAL_GPIO_Init>
}
 8001a22:	bf00      	nop
 8001a24:	3728      	adds	r7, #40	; 0x28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40021400 	.word	0x40021400

08001a34 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001a3a:	4b36      	ldr	r3, [pc, #216]	; (8001b14 <LCD_IO_Init+0xe0>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d164      	bne.n	8001b0c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001a42:	4b34      	ldr	r3, [pc, #208]	; (8001b14 <LCD_IO_Init+0xe0>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	4b32      	ldr	r3, [pc, #200]	; (8001b18 <LCD_IO_Init+0xe4>)
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a50:	4a31      	ldr	r2, [pc, #196]	; (8001b18 <LCD_IO_Init+0xe4>)
 8001a52:	f043 0308 	orr.w	r3, r3, #8
 8001a56:	6313      	str	r3, [r2, #48]	; 0x30
 8001a58:	4b2f      	ldr	r3, [pc, #188]	; (8001b18 <LCD_IO_Init+0xe4>)
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5c:	f003 0308 	and.w	r3, r3, #8
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a68:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001a72:	2302      	movs	r3, #2
 8001a74:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4827      	ldr	r0, [pc, #156]	; (8001b1c <LCD_IO_Init+0xe8>)
 8001a7e:	f000 ffcf 	bl	8002a20 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <LCD_IO_Init+0xe4>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a23      	ldr	r2, [pc, #140]	; (8001b18 <LCD_IO_Init+0xe4>)
 8001a8c:	f043 0308 	orr.w	r3, r3, #8
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <LCD_IO_Init+0xe4>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001aac:	2302      	movs	r3, #2
 8001aae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001ab0:	f107 030c 	add.w	r3, r7, #12
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4819      	ldr	r0, [pc, #100]	; (8001b1c <LCD_IO_Init+0xe8>)
 8001ab8:	f000 ffb2 	bl	8002a20 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001abc:	2300      	movs	r3, #0
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <LCD_IO_Init+0xe4>)
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	4a14      	ldr	r2, [pc, #80]	; (8001b18 <LCD_IO_Init+0xe4>)
 8001ac6:	f043 0304 	orr.w	r3, r3, #4
 8001aca:	6313      	str	r3, [r2, #48]	; 0x30
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <LCD_IO_Init+0xe4>)
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	603b      	str	r3, [r7, #0]
 8001ad6:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001ad8:	2304      	movs	r3, #4
 8001ada:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001adc:	2301      	movs	r3, #1
 8001ade:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	4619      	mov	r1, r3
 8001aee:	480c      	ldr	r0, [pc, #48]	; (8001b20 <LCD_IO_Init+0xec>)
 8001af0:	f000 ff96 	bl	8002a20 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001af4:	2200      	movs	r2, #0
 8001af6:	2104      	movs	r1, #4
 8001af8:	4809      	ldr	r0, [pc, #36]	; (8001b20 <LCD_IO_Init+0xec>)
 8001afa:	f001 fa61 	bl	8002fc0 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001afe:	2201      	movs	r2, #1
 8001b00:	2104      	movs	r1, #4
 8001b02:	4807      	ldr	r0, [pc, #28]	; (8001b20 <LCD_IO_Init+0xec>)
 8001b04:	f001 fa5c 	bl	8002fc0 <HAL_GPIO_WritePin>

    SPI_Init();
 8001b08:	f7ff fef6 	bl	80018f8 <SPI_Init>
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	3720      	adds	r7, #32
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	200271a8 	.word	0x200271a8
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40020c00 	.word	0x40020c00
 8001b20:	40020800 	.word	0x40020800

08001b24 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b34:	480a      	ldr	r0, [pc, #40]	; (8001b60 <LCD_IO_WriteData+0x3c>)
 8001b36:	f001 fa43 	bl	8002fc0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2104      	movs	r1, #4
 8001b3e:	4809      	ldr	r0, [pc, #36]	; (8001b64 <LCD_IO_WriteData+0x40>)
 8001b40:	f001 fa3e 	bl	8002fc0 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001b44:	88fb      	ldrh	r3, [r7, #6]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff ff10 	bl	800196c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	2104      	movs	r1, #4
 8001b50:	4804      	ldr	r0, [pc, #16]	; (8001b64 <LCD_IO_WriteData+0x40>)
 8001b52:	f001 fa35 	bl	8002fc0 <HAL_GPIO_WritePin>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40020c00 	.word	0x40020c00
 8001b64:	40020800 	.word	0x40020800

08001b68 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001b72:	2200      	movs	r2, #0
 8001b74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b78:	480a      	ldr	r0, [pc, #40]	; (8001ba4 <LCD_IO_WriteReg+0x3c>)
 8001b7a:	f001 fa21 	bl	8002fc0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2104      	movs	r1, #4
 8001b82:	4809      	ldr	r0, [pc, #36]	; (8001ba8 <LCD_IO_WriteReg+0x40>)
 8001b84:	f001 fa1c 	bl	8002fc0 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff feed 	bl	800196c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001b92:	2201      	movs	r2, #1
 8001b94:	2104      	movs	r1, #4
 8001b96:	4804      	ldr	r0, [pc, #16]	; (8001ba8 <LCD_IO_WriteReg+0x40>)
 8001b98:	f001 fa12 	bl	8002fc0 <HAL_GPIO_WritePin>
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40020c00 	.word	0x40020c00
 8001ba8:	40020800 	.word	0x40020800

08001bac <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  osDelay(Delay);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f003 fadd 	bl	8005174 <osDelay>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <systemClockOverride>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void systemClockOverride(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b092      	sub	sp, #72	; 0x48
 8001bc8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	603b      	str	r3, [r7, #0]
 8001bce:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <systemClockOverride+0x7c>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	4a1b      	ldr	r2, [pc, #108]	; (8001c40 <systemClockOverride+0x7c>)
 8001bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bda:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <systemClockOverride+0x7c>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001be6:	2301      	movs	r3, #1
 8001be8:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bee:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bf4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bf8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bfa:	2308      	movs	r3, #8
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001bfe:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c04:	2302      	movs	r3, #2
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c08:	2307      	movs	r3, #7
 8001c0a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f001 fcae 	bl	8003570 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001c14:	230f      	movs	r3, #15
 8001c16:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c20:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c24:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2a:	647b      	str	r3, [r7, #68]	; 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001c2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c30:	2105      	movs	r1, #5
 8001c32:	4618      	mov	r0, r3
 8001c34:	f001 ff14 	bl	8003a60 <HAL_RCC_ClockConfig>
}
 8001c38:	bf00      	nop
 8001c3a:	3748      	adds	r7, #72	; 0x48
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40023800 	.word	0x40023800

08001c44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c48:	f000 fd66 	bl	8002718 <HAL_Init>
  /* Configure the system clock */
  //SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  //TODO: if you ever regenerate HAL code you will need to comment out SystemClock_Config() again located above this comment
  systemClockOverride();
 8001c4c:	f7ff ffba 	bl	8001bc4 <systemClockOverride>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c50:	f000 f92a 	bl	8001ea8 <MX_GPIO_Init>
  MX_SPI5_Init();
 8001c54:	f000 f8ce 	bl	8001df4 <MX_SPI5_Init>
  MX_LTDC_Init();
 8001c58:	f000 f81a 	bl	8001c90 <MX_LTDC_Init>
  MX_TIM11_Init();
 8001c5c:	f000 f900 	bl	8001e60 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  ApplicationInit();
 8001c60:	f7fe fc8e 	bl	8000580 <ApplicationInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001c64:	f003 f9aa 	bl	8004fbc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001c68:	4a06      	ldr	r2, [pc, #24]	; (8001c84 <main+0x40>)
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4806      	ldr	r0, [pc, #24]	; (8001c88 <main+0x44>)
 8001c6e:	f003 f9ef 	bl	8005050 <osThreadNew>
 8001c72:	4603      	mov	r3, r0
 8001c74:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <main+0x48>)
 8001c76:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  traceSTART();
 8001c78:	f009 f8f6 	bl	800ae68 <SEGGER_SYSVIEW_Conf>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001c7c:	f003 f9c2 	bl	8005004 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <main+0x3c>
 8001c82:	bf00      	nop
 8001c84:	0800c7dc 	.word	0x0800c7dc
 8001c88:	08002279 	.word	0x08002279
 8001c8c:	200272f4 	.word	0x200272f4

08001c90 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b09a      	sub	sp, #104	; 0x68
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001c96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c9a:	2234      	movs	r2, #52	; 0x34
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f009 fa35 	bl	800b10e <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001ca4:	463b      	mov	r3, r7
 8001ca6:	2234      	movs	r2, #52	; 0x34
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4618      	mov	r0, r3
 8001cac:	f009 fa2f 	bl	800b10e <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001cb0:	4b4e      	ldr	r3, [pc, #312]	; (8001dec <MX_LTDC_Init+0x15c>)
 8001cb2:	4a4f      	ldr	r2, [pc, #316]	; (8001df0 <MX_LTDC_Init+0x160>)
 8001cb4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001cb6:	4b4d      	ldr	r3, [pc, #308]	; (8001dec <MX_LTDC_Init+0x15c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001cbc:	4b4b      	ldr	r3, [pc, #300]	; (8001dec <MX_LTDC_Init+0x15c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001cc2:	4b4a      	ldr	r3, [pc, #296]	; (8001dec <MX_LTDC_Init+0x15c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001cc8:	4b48      	ldr	r3, [pc, #288]	; (8001dec <MX_LTDC_Init+0x15c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001cce:	4b47      	ldr	r3, [pc, #284]	; (8001dec <MX_LTDC_Init+0x15c>)
 8001cd0:	2207      	movs	r2, #7
 8001cd2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001cd4:	4b45      	ldr	r3, [pc, #276]	; (8001dec <MX_LTDC_Init+0x15c>)
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001cda:	4b44      	ldr	r3, [pc, #272]	; (8001dec <MX_LTDC_Init+0x15c>)
 8001cdc:	220e      	movs	r2, #14
 8001cde:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001ce0:	4b42      	ldr	r3, [pc, #264]	; (8001dec <MX_LTDC_Init+0x15c>)
 8001ce2:	2205      	movs	r2, #5
 8001ce4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001ce6:	4b41      	ldr	r3, [pc, #260]	; (8001dec <MX_LTDC_Init+0x15c>)
 8001ce8:	f240 228e 	movw	r2, #654	; 0x28e
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001cee:	4b3f      	ldr	r3, [pc, #252]	; (8001dec <MX_LTDC_Init+0x15c>)
 8001cf0:	f240 12e5 	movw	r2, #485	; 0x1e5
 8001cf4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8001cf6:	4b3d      	ldr	r3, [pc, #244]	; (8001dec <MX_LTDC_Init+0x15c>)
 8001cf8:	f44f 7225 	mov.w	r2, #660	; 0x294
 8001cfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001cfe:	4b3b      	ldr	r3, [pc, #236]	; (8001dec <MX_LTDC_Init+0x15c>)
 8001d00:	f240 12e7 	movw	r2, #487	; 0x1e7
 8001d04:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001d06:	4b39      	ldr	r3, [pc, #228]	; (8001dec <MX_LTDC_Init+0x15c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001d0e:	4b37      	ldr	r3, [pc, #220]	; (8001dec <MX_LTDC_Init+0x15c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001d16:	4b35      	ldr	r3, [pc, #212]	; (8001dec <MX_LTDC_Init+0x15c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001d1e:	4833      	ldr	r0, [pc, #204]	; (8001dec <MX_LTDC_Init+0x15c>)
 8001d20:	f001 f980 	bl	8003024 <HAL_LTDC_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001d2a:	f000 faae 	bl	800228a <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d4e:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001d50:	2305      	movs	r3, #5
 8001d52:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001d72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d76:	2200      	movs	r2, #0
 8001d78:	4619      	mov	r1, r3
 8001d7a:	481c      	ldr	r0, [pc, #112]	; (8001dec <MX_LTDC_Init+0x15c>)
 8001d7c:	f001 fa22 	bl	80031c4 <HAL_LTDC_ConfigLayer>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001d86:	f000 fa80 	bl	800228a <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001daa:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001dac:	2305      	movs	r3, #5
 8001dae:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001dce:	463b      	mov	r3, r7
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4805      	ldr	r0, [pc, #20]	; (8001dec <MX_LTDC_Init+0x15c>)
 8001dd6:	f001 f9f5 	bl	80031c4 <HAL_LTDC_ConfigLayer>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001de0:	f000 fa53 	bl	800228a <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001de4:	bf00      	nop
 8001de6:	3768      	adds	r7, #104	; 0x68
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	200271ac 	.word	0x200271ac
 8001df0:	40016800 	.word	0x40016800

08001df4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001df8:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <MX_SPI5_Init+0x64>)
 8001dfa:	4a18      	ldr	r2, [pc, #96]	; (8001e5c <MX_SPI5_Init+0x68>)
 8001dfc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001dfe:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <MX_SPI5_Init+0x64>)
 8001e00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e04:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001e06:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <MX_SPI5_Init+0x64>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <MX_SPI5_Init+0x64>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <MX_SPI5_Init+0x64>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e18:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <MX_SPI5_Init+0x64>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <MX_SPI5_Init+0x64>)
 8001e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e24:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e26:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <MX_SPI5_Init+0x64>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e2c:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <MX_SPI5_Init+0x64>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <MX_SPI5_Init+0x64>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e38:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <MX_SPI5_Init+0x64>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <MX_SPI5_Init+0x64>)
 8001e40:	220a      	movs	r2, #10
 8001e42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001e44:	4804      	ldr	r0, [pc, #16]	; (8001e58 <MX_SPI5_Init+0x64>)
 8001e46:	f002 f9b7 	bl	80041b8 <HAL_SPI_Init>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001e50:	f000 fa1b 	bl	800228a <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20027254 	.word	0x20027254
 8001e5c:	40015000 	.word	0x40015000

08001e60 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001e64:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <MX_TIM11_Init+0x40>)
 8001e66:	4a0f      	ldr	r2, [pc, #60]	; (8001ea4 <MX_TIM11_Init+0x44>)
 8001e68:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <MX_TIM11_Init+0x40>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <MX_TIM11_Init+0x40>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001e76:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <MX_TIM11_Init+0x40>)
 8001e78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e7c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <MX_TIM11_Init+0x40>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <MX_TIM11_Init+0x40>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001e8a:	4805      	ldr	r0, [pc, #20]	; (8001ea0 <MX_TIM11_Init+0x40>)
 8001e8c:	f002 ff72 	bl	8004d74 <HAL_TIM_Base_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001e96:	f000 f9f8 	bl	800228a <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200272ac 	.word	0x200272ac
 8001ea4:	40014800 	.word	0x40014800

08001ea8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08e      	sub	sp, #56	; 0x38
 8001eac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	605a      	str	r2, [r3, #4]
 8001eb8:	609a      	str	r2, [r3, #8]
 8001eba:	60da      	str	r2, [r3, #12]
 8001ebc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	623b      	str	r3, [r7, #32]
 8001ec2:	4bb3      	ldr	r3, [pc, #716]	; (8002190 <MX_GPIO_Init+0x2e8>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4ab2      	ldr	r2, [pc, #712]	; (8002190 <MX_GPIO_Init+0x2e8>)
 8001ec8:	f043 0304 	orr.w	r3, r3, #4
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4bb0      	ldr	r3, [pc, #704]	; (8002190 <MX_GPIO_Init+0x2e8>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	623b      	str	r3, [r7, #32]
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
 8001ede:	4bac      	ldr	r3, [pc, #688]	; (8002190 <MX_GPIO_Init+0x2e8>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4aab      	ldr	r2, [pc, #684]	; (8002190 <MX_GPIO_Init+0x2e8>)
 8001ee4:	f043 0320 	orr.w	r3, r3, #32
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4ba9      	ldr	r3, [pc, #676]	; (8002190 <MX_GPIO_Init+0x2e8>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0320 	and.w	r3, r3, #32
 8001ef2:	61fb      	str	r3, [r7, #28]
 8001ef4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61bb      	str	r3, [r7, #24]
 8001efa:	4ba5      	ldr	r3, [pc, #660]	; (8002190 <MX_GPIO_Init+0x2e8>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4aa4      	ldr	r2, [pc, #656]	; (8002190 <MX_GPIO_Init+0x2e8>)
 8001f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4ba2      	ldr	r3, [pc, #648]	; (8002190 <MX_GPIO_Init+0x2e8>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0e:	61bb      	str	r3, [r7, #24]
 8001f10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	4b9e      	ldr	r3, [pc, #632]	; (8002190 <MX_GPIO_Init+0x2e8>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a9d      	ldr	r2, [pc, #628]	; (8002190 <MX_GPIO_Init+0x2e8>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b9b      	ldr	r3, [pc, #620]	; (8002190 <MX_GPIO_Init+0x2e8>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	4b97      	ldr	r3, [pc, #604]	; (8002190 <MX_GPIO_Init+0x2e8>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	4a96      	ldr	r2, [pc, #600]	; (8002190 <MX_GPIO_Init+0x2e8>)
 8001f38:	f043 0302 	orr.w	r3, r3, #2
 8001f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3e:	4b94      	ldr	r3, [pc, #592]	; (8002190 <MX_GPIO_Init+0x2e8>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	4b90      	ldr	r3, [pc, #576]	; (8002190 <MX_GPIO_Init+0x2e8>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	4a8f      	ldr	r2, [pc, #572]	; (8002190 <MX_GPIO_Init+0x2e8>)
 8001f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f58:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5a:	4b8d      	ldr	r3, [pc, #564]	; (8002190 <MX_GPIO_Init+0x2e8>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	4b89      	ldr	r3, [pc, #548]	; (8002190 <MX_GPIO_Init+0x2e8>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	4a88      	ldr	r2, [pc, #544]	; (8002190 <MX_GPIO_Init+0x2e8>)
 8001f70:	f043 0310 	orr.w	r3, r3, #16
 8001f74:	6313      	str	r3, [r2, #48]	; 0x30
 8001f76:	4b86      	ldr	r3, [pc, #536]	; (8002190 <MX_GPIO_Init+0x2e8>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	f003 0310 	and.w	r3, r3, #16
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	607b      	str	r3, [r7, #4]
 8001f86:	4b82      	ldr	r3, [pc, #520]	; (8002190 <MX_GPIO_Init+0x2e8>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	4a81      	ldr	r2, [pc, #516]	; (8002190 <MX_GPIO_Init+0x2e8>)
 8001f8c:	f043 0308 	orr.w	r3, r3, #8
 8001f90:	6313      	str	r3, [r2, #48]	; 0x30
 8001f92:	4b7f      	ldr	r3, [pc, #508]	; (8002190 <MX_GPIO_Init+0x2e8>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2116      	movs	r1, #22
 8001fa2:	487c      	ldr	r0, [pc, #496]	; (8002194 <MX_GPIO_Init+0x2ec>)
 8001fa4:	f001 f80c 	bl	8002fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2180      	movs	r1, #128	; 0x80
 8001fac:	487a      	ldr	r0, [pc, #488]	; (8002198 <MX_GPIO_Init+0x2f0>)
 8001fae:	f001 f807 	bl	8002fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001fb8:	4878      	ldr	r0, [pc, #480]	; (800219c <MX_GPIO_Init+0x2f4>)
 8001fba:	f001 f801 	bl	8002fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001fc4:	4876      	ldr	r0, [pc, #472]	; (80021a0 <MX_GPIO_Init+0x2f8>)
 8001fc6:	f000 fffb 	bl	8002fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001fca:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fdc:	230c      	movs	r3, #12
 8001fde:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	486f      	ldr	r0, [pc, #444]	; (80021a4 <MX_GPIO_Init+0x2fc>)
 8001fe8:	f000 fd1a 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001fec:	2301      	movs	r3, #1
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ffc:	230c      	movs	r3, #12
 8001ffe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002004:	4619      	mov	r1, r3
 8002006:	4863      	ldr	r0, [pc, #396]	; (8002194 <MX_GPIO_Init+0x2ec>)
 8002008:	f000 fd0a 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800200c:	2316      	movs	r3, #22
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002010:	2301      	movs	r3, #1
 8002012:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002018:	2300      	movs	r3, #0
 800201a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800201c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002020:	4619      	mov	r1, r3
 8002022:	485c      	ldr	r0, [pc, #368]	; (8002194 <MX_GPIO_Init+0x2ec>)
 8002024:	f000 fcfc 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002028:	2301      	movs	r3, #1
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800202c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002030:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800203a:	4619      	mov	r1, r3
 800203c:	4856      	ldr	r0, [pc, #344]	; (8002198 <MX_GPIO_Init+0x2f0>)
 800203e:	f000 fcef 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002042:	f248 0306 	movw	r3, #32774	; 0x8006
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002048:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002056:	4619      	mov	r1, r3
 8002058:	484f      	ldr	r0, [pc, #316]	; (8002198 <MX_GPIO_Init+0x2f0>)
 800205a:	f000 fce1 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002062:	2301      	movs	r3, #1
 8002064:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206a:	2300      	movs	r3, #0
 800206c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800206e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002072:	4619      	mov	r1, r3
 8002074:	4848      	ldr	r0, [pc, #288]	; (8002198 <MX_GPIO_Init+0x2f0>)
 8002076:	f000 fcd3 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800207a:	2320      	movs	r3, #32
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800207e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002082:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800208c:	4619      	mov	r1, r3
 800208e:	4841      	ldr	r0, [pc, #260]	; (8002194 <MX_GPIO_Init+0x2ec>)
 8002090:	f000 fcc6 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002094:	2304      	movs	r3, #4
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002098:	2300      	movs	r3, #0
 800209a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80020a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a4:	4619      	mov	r1, r3
 80020a6:	4840      	ldr	r0, [pc, #256]	; (80021a8 <MX_GPIO_Init+0x300>)
 80020a8:	f000 fcba 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80020ac:	f248 1333 	movw	r3, #33075	; 0x8133
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ba:	2303      	movs	r3, #3
 80020bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020be:	230c      	movs	r3, #12
 80020c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c6:	4619      	mov	r1, r3
 80020c8:	4835      	ldr	r0, [pc, #212]	; (80021a0 <MX_GPIO_Init+0x2f8>)
 80020ca:	f000 fca9 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80020ce:	f64f 7383 	movw	r3, #65411	; 0xff83
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020dc:	2303      	movs	r3, #3
 80020de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020e0:	230c      	movs	r3, #12
 80020e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e8:	4619      	mov	r1, r3
 80020ea:	4830      	ldr	r0, [pc, #192]	; (80021ac <MX_GPIO_Init+0x304>)
 80020ec:	f000 fc98 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80020f0:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f6:	2302      	movs	r3, #2
 80020f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fe:	2300      	movs	r3, #0
 8002100:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002102:	230c      	movs	r3, #12
 8002104:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800210a:	4619      	mov	r1, r3
 800210c:	4826      	ldr	r0, [pc, #152]	; (80021a8 <MX_GPIO_Init+0x300>)
 800210e:	f000 fc87 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002112:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002118:	2300      	movs	r3, #0
 800211a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002124:	4619      	mov	r1, r3
 8002126:	4820      	ldr	r0, [pc, #128]	; (80021a8 <MX_GPIO_Init+0x300>)
 8002128:	f000 fc7a 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800212c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213a:	2303      	movs	r3, #3
 800213c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800213e:	230c      	movs	r3, #12
 8002140:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002146:	4619      	mov	r1, r3
 8002148:	4814      	ldr	r0, [pc, #80]	; (800219c <MX_GPIO_Init+0x2f4>)
 800214a:	f000 fc69 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 800214e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002154:	2300      	movs	r3, #0
 8002156:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800215c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002160:	4619      	mov	r1, r3
 8002162:	480e      	ldr	r0, [pc, #56]	; (800219c <MX_GPIO_Init+0x2f4>)
 8002164:	f000 fc5c 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8002168:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800216e:	2301      	movs	r3, #1
 8002170:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002176:	2300      	movs	r3, #0
 8002178:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800217a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800217e:	4619      	mov	r1, r3
 8002180:	4806      	ldr	r0, [pc, #24]	; (800219c <MX_GPIO_Init+0x2f4>)
 8002182:	f000 fc4d 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002186:	f44f 7300 	mov.w	r3, #512	; 0x200
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
 800218c:	e010      	b.n	80021b0 <MX_GPIO_Init+0x308>
 800218e:	bf00      	nop
 8002190:	40023800 	.word	0x40023800
 8002194:	40020800 	.word	0x40020800
 8002198:	40020000 	.word	0x40020000
 800219c:	40020c00 	.word	0x40020c00
 80021a0:	40021800 	.word	0x40021800
 80021a4:	40021400 	.word	0x40021400
 80021a8:	40020400 	.word	0x40020400
 80021ac:	40021000 	.word	0x40021000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021b0:	2312      	movs	r3, #18
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b8:	2300      	movs	r3, #0
 80021ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021bc:	2304      	movs	r3, #4
 80021be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80021c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c4:	4619      	mov	r1, r3
 80021c6:	4828      	ldr	r0, [pc, #160]	; (8002268 <MX_GPIO_Init+0x3c0>)
 80021c8:	f000 fc2a 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80021cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021d2:	2312      	movs	r3, #18
 80021d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021da:	2300      	movs	r3, #0
 80021dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021de:	2304      	movs	r3, #4
 80021e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80021e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e6:	4619      	mov	r1, r3
 80021e8:	4820      	ldr	r0, [pc, #128]	; (800226c <MX_GPIO_Init+0x3c4>)
 80021ea:	f000 fc19 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80021ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f4:	2302      	movs	r3, #2
 80021f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fc:	2303      	movs	r3, #3
 80021fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002200:	2307      	movs	r3, #7
 8002202:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002208:	4619      	mov	r1, r3
 800220a:	4818      	ldr	r0, [pc, #96]	; (800226c <MX_GPIO_Init+0x3c4>)
 800220c:	f000 fc08 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002210:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002216:	2301      	movs	r3, #1
 8002218:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221e:	2300      	movs	r3, #0
 8002220:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002226:	4619      	mov	r1, r3
 8002228:	4811      	ldr	r0, [pc, #68]	; (8002270 <MX_GPIO_Init+0x3c8>)
 800222a:	f000 fbf9 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800222e:	2360      	movs	r3, #96	; 0x60
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002232:	2302      	movs	r3, #2
 8002234:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223a:	2303      	movs	r3, #3
 800223c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800223e:	230c      	movs	r3, #12
 8002240:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002246:	4619      	mov	r1, r3
 8002248:	480a      	ldr	r0, [pc, #40]	; (8002274 <MX_GPIO_Init+0x3cc>)
 800224a:	f000 fbe9 	bl	8002a20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800224e:	2200      	movs	r2, #0
 8002250:	2105      	movs	r1, #5
 8002252:	2006      	movs	r0, #6
 8002254:	f000 fbad 	bl	80029b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002258:	2006      	movs	r0, #6
 800225a:	f000 fbc6 	bl	80029ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800225e:	bf00      	nop
 8002260:	3738      	adds	r7, #56	; 0x38
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40020800 	.word	0x40020800
 800226c:	40020000 	.word	0x40020000
 8002270:	40021800 	.word	0x40021800
 8002274:	40020400 	.word	0x40020400

08002278 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	//RunDemoForLCD();
    osDelay(10000);
 8002280:	f242 7010 	movw	r0, #10000	; 0x2710
 8002284:	f002 ff76 	bl	8005174 <osDelay>
 8002288:	e7fa      	b.n	8002280 <StartDefaultTask+0x8>

0800228a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800228e:	b672      	cpsid	i
}
 8002290:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002292:	e7fe      	b.n	8002292 <Error_Handler+0x8>

08002294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	607b      	str	r3, [r7, #4]
 800229e:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <HAL_MspInit+0x54>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	4a11      	ldr	r2, [pc, #68]	; (80022e8 <HAL_MspInit+0x54>)
 80022a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022a8:	6453      	str	r3, [r2, #68]	; 0x44
 80022aa:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <HAL_MspInit+0x54>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b2:	607b      	str	r3, [r7, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	603b      	str	r3, [r7, #0]
 80022ba:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_MspInit+0x54>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <HAL_MspInit+0x54>)
 80022c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c4:	6413      	str	r3, [r2, #64]	; 0x40
 80022c6:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <HAL_MspInit+0x54>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022d2:	2200      	movs	r2, #0
 80022d4:	210f      	movs	r1, #15
 80022d6:	f06f 0001 	mvn.w	r0, #1
 80022da:	f000 fb6a 	bl	80029b2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800

080022ec <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b09a      	sub	sp, #104	; 0x68
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002308:	2230      	movs	r2, #48	; 0x30
 800230a:	2100      	movs	r1, #0
 800230c:	4618      	mov	r0, r3
 800230e:	f008 fefe 	bl	800b10e <memset>
  if(hltdc->Instance==LTDC)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a81      	ldr	r2, [pc, #516]	; (800251c <HAL_LTDC_MspInit+0x230>)
 8002318:	4293      	cmp	r3, r2
 800231a:	f040 80fa 	bne.w	8002512 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800231e:	2308      	movs	r3, #8
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002322:	2332      	movs	r3, #50	; 0x32
 8002324:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002326:	2302      	movs	r3, #2
 8002328:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800232a:	2300      	movs	r3, #0
 800232c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800232e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002332:	4618      	mov	r0, r3
 8002334:	f001 fd80 	bl	8003e38 <HAL_RCCEx_PeriphCLKConfig>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800233e:	f7ff ffa4 	bl	800228a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	623b      	str	r3, [r7, #32]
 8002346:	4b76      	ldr	r3, [pc, #472]	; (8002520 <HAL_LTDC_MspInit+0x234>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	4a75      	ldr	r2, [pc, #468]	; (8002520 <HAL_LTDC_MspInit+0x234>)
 800234c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002350:	6453      	str	r3, [r2, #68]	; 0x44
 8002352:	4b73      	ldr	r3, [pc, #460]	; (8002520 <HAL_LTDC_MspInit+0x234>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800235a:	623b      	str	r3, [r7, #32]
 800235c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	4b6f      	ldr	r3, [pc, #444]	; (8002520 <HAL_LTDC_MspInit+0x234>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a6e      	ldr	r2, [pc, #440]	; (8002520 <HAL_LTDC_MspInit+0x234>)
 8002368:	f043 0320 	orr.w	r3, r3, #32
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b6c      	ldr	r3, [pc, #432]	; (8002520 <HAL_LTDC_MspInit+0x234>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0320 	and.w	r3, r3, #32
 8002376:	61fb      	str	r3, [r7, #28]
 8002378:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	61bb      	str	r3, [r7, #24]
 800237e:	4b68      	ldr	r3, [pc, #416]	; (8002520 <HAL_LTDC_MspInit+0x234>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	4a67      	ldr	r2, [pc, #412]	; (8002520 <HAL_LTDC_MspInit+0x234>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6313      	str	r3, [r2, #48]	; 0x30
 800238a:	4b65      	ldr	r3, [pc, #404]	; (8002520 <HAL_LTDC_MspInit+0x234>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	61bb      	str	r3, [r7, #24]
 8002394:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	617b      	str	r3, [r7, #20]
 800239a:	4b61      	ldr	r3, [pc, #388]	; (8002520 <HAL_LTDC_MspInit+0x234>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	4a60      	ldr	r2, [pc, #384]	; (8002520 <HAL_LTDC_MspInit+0x234>)
 80023a0:	f043 0302 	orr.w	r3, r3, #2
 80023a4:	6313      	str	r3, [r2, #48]	; 0x30
 80023a6:	4b5e      	ldr	r3, [pc, #376]	; (8002520 <HAL_LTDC_MspInit+0x234>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	617b      	str	r3, [r7, #20]
 80023b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	613b      	str	r3, [r7, #16]
 80023b6:	4b5a      	ldr	r3, [pc, #360]	; (8002520 <HAL_LTDC_MspInit+0x234>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	4a59      	ldr	r2, [pc, #356]	; (8002520 <HAL_LTDC_MspInit+0x234>)
 80023bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023c0:	6313      	str	r3, [r2, #48]	; 0x30
 80023c2:	4b57      	ldr	r3, [pc, #348]	; (8002520 <HAL_LTDC_MspInit+0x234>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	4b53      	ldr	r3, [pc, #332]	; (8002520 <HAL_LTDC_MspInit+0x234>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4a52      	ldr	r2, [pc, #328]	; (8002520 <HAL_LTDC_MspInit+0x234>)
 80023d8:	f043 0304 	orr.w	r3, r3, #4
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b50      	ldr	r3, [pc, #320]	; (8002520 <HAL_LTDC_MspInit+0x234>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	4b4c      	ldr	r3, [pc, #304]	; (8002520 <HAL_LTDC_MspInit+0x234>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4a4b      	ldr	r2, [pc, #300]	; (8002520 <HAL_LTDC_MspInit+0x234>)
 80023f4:	f043 0308 	orr.w	r3, r3, #8
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b49      	ldr	r3, [pc, #292]	; (8002520 <HAL_LTDC_MspInit+0x234>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002406:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800240a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240c:	2302      	movs	r3, #2
 800240e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002414:	2300      	movs	r3, #0
 8002416:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002418:	230e      	movs	r3, #14
 800241a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800241c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002420:	4619      	mov	r1, r3
 8002422:	4840      	ldr	r0, [pc, #256]	; (8002524 <HAL_LTDC_MspInit+0x238>)
 8002424:	f000 fafc 	bl	8002a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002428:	f641 0358 	movw	r3, #6232	; 0x1858
 800242c:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242e:	2302      	movs	r3, #2
 8002430:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002436:	2300      	movs	r3, #0
 8002438:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800243a:	230e      	movs	r3, #14
 800243c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002442:	4619      	mov	r1, r3
 8002444:	4838      	ldr	r0, [pc, #224]	; (8002528 <HAL_LTDC_MspInit+0x23c>)
 8002446:	f000 faeb 	bl	8002a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800244a:	2303      	movs	r3, #3
 800244c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244e:	2302      	movs	r3, #2
 8002450:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002456:	2300      	movs	r3, #0
 8002458:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800245a:	2309      	movs	r3, #9
 800245c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800245e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002462:	4619      	mov	r1, r3
 8002464:	4831      	ldr	r0, [pc, #196]	; (800252c <HAL_LTDC_MspInit+0x240>)
 8002466:	f000 fadb 	bl	8002a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800246a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800246e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002478:	2300      	movs	r3, #0
 800247a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800247c:	230e      	movs	r3, #14
 800247e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002480:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002484:	4619      	mov	r1, r3
 8002486:	4829      	ldr	r0, [pc, #164]	; (800252c <HAL_LTDC_MspInit+0x240>)
 8002488:	f000 faca 	bl	8002a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800248c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002490:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002492:	2302      	movs	r3, #2
 8002494:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249a:	2300      	movs	r3, #0
 800249c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800249e:	230e      	movs	r3, #14
 80024a0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024a6:	4619      	mov	r1, r3
 80024a8:	4821      	ldr	r0, [pc, #132]	; (8002530 <HAL_LTDC_MspInit+0x244>)
 80024aa:	f000 fab9 	bl	8002a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80024ae:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80024b2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b4:	2302      	movs	r3, #2
 80024b6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024bc:	2300      	movs	r3, #0
 80024be:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024c0:	230e      	movs	r3, #14
 80024c2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024c8:	4619      	mov	r1, r3
 80024ca:	481a      	ldr	r0, [pc, #104]	; (8002534 <HAL_LTDC_MspInit+0x248>)
 80024cc:	f000 faa8 	bl	8002a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80024d0:	2348      	movs	r3, #72	; 0x48
 80024d2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d4:	2302      	movs	r3, #2
 80024d6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	2300      	movs	r3, #0
 80024de:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024e0:	230e      	movs	r3, #14
 80024e2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024e8:	4619      	mov	r1, r3
 80024ea:	4813      	ldr	r0, [pc, #76]	; (8002538 <HAL_LTDC_MspInit+0x24c>)
 80024ec:	f000 fa98 	bl	8002a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80024f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024f4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f6:	2302      	movs	r3, #2
 80024f8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fe:	2300      	movs	r3, #0
 8002500:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002502:	2309      	movs	r3, #9
 8002504:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002506:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800250a:	4619      	mov	r1, r3
 800250c:	4808      	ldr	r0, [pc, #32]	; (8002530 <HAL_LTDC_MspInit+0x244>)
 800250e:	f000 fa87 	bl	8002a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002512:	bf00      	nop
 8002514:	3768      	adds	r7, #104	; 0x68
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40016800 	.word	0x40016800
 8002520:	40023800 	.word	0x40023800
 8002524:	40021400 	.word	0x40021400
 8002528:	40020000 	.word	0x40020000
 800252c:	40020400 	.word	0x40020400
 8002530:	40021800 	.word	0x40021800
 8002534:	40020800 	.word	0x40020800
 8002538:	40020c00 	.word	0x40020c00

0800253c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08a      	sub	sp, #40	; 0x28
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a19      	ldr	r2, [pc, #100]	; (80025c0 <HAL_SPI_MspInit+0x84>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d12c      	bne.n	80025b8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <HAL_SPI_MspInit+0x88>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	4a17      	ldr	r2, [pc, #92]	; (80025c4 <HAL_SPI_MspInit+0x88>)
 8002568:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800256c:	6453      	str	r3, [r2, #68]	; 0x44
 800256e:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <HAL_SPI_MspInit+0x88>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <HAL_SPI_MspInit+0x88>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a10      	ldr	r2, [pc, #64]	; (80025c4 <HAL_SPI_MspInit+0x88>)
 8002584:	f043 0320 	orr.w	r3, r3, #32
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <HAL_SPI_MspInit+0x88>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f003 0320 	and.w	r3, r3, #32
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002596:	f44f 7360 	mov.w	r3, #896	; 0x380
 800259a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259c:	2302      	movs	r3, #2
 800259e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a4:	2300      	movs	r3, #0
 80025a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80025a8:	2305      	movs	r3, #5
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	4619      	mov	r1, r3
 80025b2:	4805      	ldr	r0, [pc, #20]	; (80025c8 <HAL_SPI_MspInit+0x8c>)
 80025b4:	f000 fa34 	bl	8002a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80025b8:	bf00      	nop
 80025ba:	3728      	adds	r7, #40	; 0x28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40015000 	.word	0x40015000
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40021400 	.word	0x40021400

080025cc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a08      	ldr	r2, [pc, #32]	; (80025fc <HAL_SPI_MspDeInit+0x30>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d10a      	bne.n	80025f4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80025de:	4b08      	ldr	r3, [pc, #32]	; (8002600 <HAL_SPI_MspDeInit+0x34>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	4a07      	ldr	r2, [pc, #28]	; (8002600 <HAL_SPI_MspDeInit+0x34>)
 80025e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80025e8:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80025ea:	f44f 7160 	mov.w	r1, #896	; 0x380
 80025ee:	4805      	ldr	r0, [pc, #20]	; (8002604 <HAL_SPI_MspDeInit+0x38>)
 80025f0:	f000 fbc2 	bl	8002d78 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40015000 	.word	0x40015000
 8002600:	40023800 	.word	0x40023800
 8002604:	40021400 	.word	0x40021400

08002608 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a0b      	ldr	r2, [pc, #44]	; (8002644 <HAL_TIM_Base_MspInit+0x3c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d10d      	bne.n	8002636 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <HAL_TIM_Base_MspInit+0x40>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	4a09      	ldr	r2, [pc, #36]	; (8002648 <HAL_TIM_Base_MspInit+0x40>)
 8002624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002628:	6453      	str	r3, [r2, #68]	; 0x44
 800262a:	4b07      	ldr	r3, [pc, #28]	; (8002648 <HAL_TIM_Base_MspInit+0x40>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002636:	bf00      	nop
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40014800 	.word	0x40014800
 8002648:	40023800 	.word	0x40023800

0800264c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002650:	e7fe      	b.n	8002650 <NMI_Handler+0x4>

08002652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002656:	e7fe      	b.n	8002656 <HardFault_Handler+0x4>

08002658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800265c:	e7fe      	b.n	800265c <MemManage_Handler+0x4>

0800265e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800265e:	b480      	push	{r7}
 8002660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002662:	e7fe      	b.n	8002662 <BusFault_Handler+0x4>

08002664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002668:	e7fe      	b.n	8002668 <UsageFault_Handler+0x4>

0800266a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800266a:	b480      	push	{r7}
 800266c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800267c:	f000 f89e 	bl	80027bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002680:	f005 fdb8 	bl	80081f4 <xTaskGetSchedulerState>
 8002684:	4603      	mov	r3, r0
 8002686:	2b01      	cmp	r3, #1
 8002688:	d001      	beq.n	800268e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800268a:	f006 fdd5 	bl	8009238 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}

08002692 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002696:	2001      	movs	r0, #1
 8002698:	f000 fcac 	bl	8002ff4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800269c:	bf00      	nop
 800269e:	bd80      	pop	{r7, pc}

080026a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <SystemInit+0x20>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026aa:	4a05      	ldr	r2, [pc, #20]	; (80026c0 <SystemInit+0x20>)
 80026ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80026c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026fc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026c8:	480d      	ldr	r0, [pc, #52]	; (8002700 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026ca:	490e      	ldr	r1, [pc, #56]	; (8002704 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026cc:	4a0e      	ldr	r2, [pc, #56]	; (8002708 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026d0:	e002      	b.n	80026d8 <LoopCopyDataInit>

080026d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d6:	3304      	adds	r3, #4

080026d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026dc:	d3f9      	bcc.n	80026d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026de:	4a0b      	ldr	r2, [pc, #44]	; (800270c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026e0:	4c0b      	ldr	r4, [pc, #44]	; (8002710 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e4:	e001      	b.n	80026ea <LoopFillZerobss>

080026e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e8:	3204      	adds	r2, #4

080026ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026ec:	d3fb      	bcc.n	80026e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026ee:	f7ff ffd7 	bl	80026a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026f2:	f008 fd6b 	bl	800b1cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026f6:	f7ff faa5 	bl	8001c44 <main>
  bx  lr    
 80026fa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80026fc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002704:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002708:	0800c834 	.word	0x0800c834
  ldr r2, =_sbss
 800270c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002710:	2002c8a0 	.word	0x2002c8a0

08002714 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002714:	e7fe      	b.n	8002714 <ADC_IRQHandler>
	...

08002718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800271c:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <HAL_Init+0x40>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a0d      	ldr	r2, [pc, #52]	; (8002758 <HAL_Init+0x40>)
 8002722:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002726:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_Init+0x40>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <HAL_Init+0x40>)
 800272e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002732:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002734:	4b08      	ldr	r3, [pc, #32]	; (8002758 <HAL_Init+0x40>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a07      	ldr	r2, [pc, #28]	; (8002758 <HAL_Init+0x40>)
 800273a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002740:	2003      	movs	r0, #3
 8002742:	f000 f92b 	bl	800299c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002746:	200f      	movs	r0, #15
 8002748:	f000 f808 	bl	800275c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800274c:	f7ff fda2 	bl	8002294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40023c00 	.word	0x40023c00

0800275c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002764:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_InitTick+0x54>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_InitTick+0x58>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	4619      	mov	r1, r3
 800276e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002772:	fbb3 f3f1 	udiv	r3, r3, r1
 8002776:	fbb2 f3f3 	udiv	r3, r2, r3
 800277a:	4618      	mov	r0, r3
 800277c:	f000 f943 	bl	8002a06 <HAL_SYSTICK_Config>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e00e      	b.n	80027a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b0f      	cmp	r3, #15
 800278e:	d80a      	bhi.n	80027a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002790:	2200      	movs	r2, #0
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	f04f 30ff 	mov.w	r0, #4294967295
 8002798:	f000 f90b 	bl	80029b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800279c:	4a06      	ldr	r2, [pc, #24]	; (80027b8 <HAL_InitTick+0x5c>)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	e000      	b.n	80027a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000010 	.word	0x20000010
 80027b4:	20000018 	.word	0x20000018
 80027b8:	20000014 	.word	0x20000014

080027bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_IncTick+0x20>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <HAL_IncTick+0x24>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4413      	add	r3, r2
 80027cc:	4a04      	ldr	r2, [pc, #16]	; (80027e0 <HAL_IncTick+0x24>)
 80027ce:	6013      	str	r3, [r2, #0]
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20000018 	.word	0x20000018
 80027e0:	200272f8 	.word	0x200272f8

080027e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return uwTick;
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <HAL_GetTick+0x14>)
 80027ea:	681b      	ldr	r3, [r3, #0]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	200272f8 	.word	0x200272f8

080027fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800280c:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <__NVIC_SetPriorityGrouping+0x44>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002818:	4013      	ands	r3, r2
 800281a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800282c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800282e:	4a04      	ldr	r2, [pc, #16]	; (8002840 <__NVIC_SetPriorityGrouping+0x44>)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	60d3      	str	r3, [r2, #12]
}
 8002834:	bf00      	nop
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002848:	4b04      	ldr	r3, [pc, #16]	; (800285c <__NVIC_GetPriorityGrouping+0x18>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	f003 0307 	and.w	r3, r3, #7
}
 8002852:	4618      	mov	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	2b00      	cmp	r3, #0
 8002870:	db0b      	blt.n	800288a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	f003 021f 	and.w	r2, r3, #31
 8002878:	4907      	ldr	r1, [pc, #28]	; (8002898 <__NVIC_EnableIRQ+0x38>)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	2001      	movs	r0, #1
 8002882:	fa00 f202 	lsl.w	r2, r0, r2
 8002886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	e000e100 	.word	0xe000e100

0800289c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	6039      	str	r1, [r7, #0]
 80028a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	db0a      	blt.n	80028c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	490c      	ldr	r1, [pc, #48]	; (80028e8 <__NVIC_SetPriority+0x4c>)
 80028b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ba:	0112      	lsls	r2, r2, #4
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	440b      	add	r3, r1
 80028c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028c4:	e00a      	b.n	80028dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	4908      	ldr	r1, [pc, #32]	; (80028ec <__NVIC_SetPriority+0x50>)
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	3b04      	subs	r3, #4
 80028d4:	0112      	lsls	r2, r2, #4
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	440b      	add	r3, r1
 80028da:	761a      	strb	r2, [r3, #24]
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	e000e100 	.word	0xe000e100
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b089      	sub	sp, #36	; 0x24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f1c3 0307 	rsb	r3, r3, #7
 800290a:	2b04      	cmp	r3, #4
 800290c:	bf28      	it	cs
 800290e:	2304      	movcs	r3, #4
 8002910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3304      	adds	r3, #4
 8002916:	2b06      	cmp	r3, #6
 8002918:	d902      	bls.n	8002920 <NVIC_EncodePriority+0x30>
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	3b03      	subs	r3, #3
 800291e:	e000      	b.n	8002922 <NVIC_EncodePriority+0x32>
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002924:	f04f 32ff 	mov.w	r2, #4294967295
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43da      	mvns	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	401a      	ands	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002938:	f04f 31ff 	mov.w	r1, #4294967295
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	fa01 f303 	lsl.w	r3, r1, r3
 8002942:	43d9      	mvns	r1, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002948:	4313      	orrs	r3, r2
         );
}
 800294a:	4618      	mov	r0, r3
 800294c:	3724      	adds	r7, #36	; 0x24
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
	...

08002958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3b01      	subs	r3, #1
 8002964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002968:	d301      	bcc.n	800296e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800296a:	2301      	movs	r3, #1
 800296c:	e00f      	b.n	800298e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800296e:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <SysTick_Config+0x40>)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3b01      	subs	r3, #1
 8002974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002976:	210f      	movs	r1, #15
 8002978:	f04f 30ff 	mov.w	r0, #4294967295
 800297c:	f7ff ff8e 	bl	800289c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002980:	4b05      	ldr	r3, [pc, #20]	; (8002998 <SysTick_Config+0x40>)
 8002982:	2200      	movs	r2, #0
 8002984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002986:	4b04      	ldr	r3, [pc, #16]	; (8002998 <SysTick_Config+0x40>)
 8002988:	2207      	movs	r2, #7
 800298a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	e000e010 	.word	0xe000e010

0800299c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff ff29 	bl	80027fc <__NVIC_SetPriorityGrouping>
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b086      	sub	sp, #24
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	4603      	mov	r3, r0
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029c4:	f7ff ff3e 	bl	8002844 <__NVIC_GetPriorityGrouping>
 80029c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68b9      	ldr	r1, [r7, #8]
 80029ce:	6978      	ldr	r0, [r7, #20]
 80029d0:	f7ff ff8e 	bl	80028f0 <NVIC_EncodePriority>
 80029d4:	4602      	mov	r2, r0
 80029d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029da:	4611      	mov	r1, r2
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff ff5d 	bl	800289c <__NVIC_SetPriority>
}
 80029e2:	bf00      	nop
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	4603      	mov	r3, r0
 80029f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff ff31 	bl	8002860 <__NVIC_EnableIRQ>
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff ffa2 	bl	8002958 <SysTick_Config>
 8002a14:	4603      	mov	r3, r0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b089      	sub	sp, #36	; 0x24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
 8002a3a:	e177      	b.n	8002d2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	f040 8166 	bne.w	8002d26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d005      	beq.n	8002a72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d130      	bne.n	8002ad4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	2203      	movs	r2, #3
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4013      	ands	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	f003 0201 	and.w	r2, r3, #1
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d017      	beq.n	8002b10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	2203      	movs	r2, #3
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d123      	bne.n	8002b64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	08da      	lsrs	r2, r3, #3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3208      	adds	r2, #8
 8002b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	220f      	movs	r2, #15
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	08da      	lsrs	r2, r3, #3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3208      	adds	r2, #8
 8002b5e:	69b9      	ldr	r1, [r7, #24]
 8002b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	2203      	movs	r2, #3
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 0203 	and.w	r2, r3, #3
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 80c0 	beq.w	8002d26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	4b66      	ldr	r3, [pc, #408]	; (8002d44 <HAL_GPIO_Init+0x324>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	4a65      	ldr	r2, [pc, #404]	; (8002d44 <HAL_GPIO_Init+0x324>)
 8002bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb6:	4b63      	ldr	r3, [pc, #396]	; (8002d44 <HAL_GPIO_Init+0x324>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bc2:	4a61      	ldr	r2, [pc, #388]	; (8002d48 <HAL_GPIO_Init+0x328>)
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	089b      	lsrs	r3, r3, #2
 8002bc8:	3302      	adds	r3, #2
 8002bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	220f      	movs	r2, #15
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a58      	ldr	r2, [pc, #352]	; (8002d4c <HAL_GPIO_Init+0x32c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d037      	beq.n	8002c5e <HAL_GPIO_Init+0x23e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a57      	ldr	r2, [pc, #348]	; (8002d50 <HAL_GPIO_Init+0x330>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d031      	beq.n	8002c5a <HAL_GPIO_Init+0x23a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a56      	ldr	r2, [pc, #344]	; (8002d54 <HAL_GPIO_Init+0x334>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d02b      	beq.n	8002c56 <HAL_GPIO_Init+0x236>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a55      	ldr	r2, [pc, #340]	; (8002d58 <HAL_GPIO_Init+0x338>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d025      	beq.n	8002c52 <HAL_GPIO_Init+0x232>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a54      	ldr	r2, [pc, #336]	; (8002d5c <HAL_GPIO_Init+0x33c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d01f      	beq.n	8002c4e <HAL_GPIO_Init+0x22e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a53      	ldr	r2, [pc, #332]	; (8002d60 <HAL_GPIO_Init+0x340>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d019      	beq.n	8002c4a <HAL_GPIO_Init+0x22a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a52      	ldr	r2, [pc, #328]	; (8002d64 <HAL_GPIO_Init+0x344>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d013      	beq.n	8002c46 <HAL_GPIO_Init+0x226>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a51      	ldr	r2, [pc, #324]	; (8002d68 <HAL_GPIO_Init+0x348>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d00d      	beq.n	8002c42 <HAL_GPIO_Init+0x222>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a50      	ldr	r2, [pc, #320]	; (8002d6c <HAL_GPIO_Init+0x34c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d007      	beq.n	8002c3e <HAL_GPIO_Init+0x21e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a4f      	ldr	r2, [pc, #316]	; (8002d70 <HAL_GPIO_Init+0x350>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d101      	bne.n	8002c3a <HAL_GPIO_Init+0x21a>
 8002c36:	2309      	movs	r3, #9
 8002c38:	e012      	b.n	8002c60 <HAL_GPIO_Init+0x240>
 8002c3a:	230a      	movs	r3, #10
 8002c3c:	e010      	b.n	8002c60 <HAL_GPIO_Init+0x240>
 8002c3e:	2308      	movs	r3, #8
 8002c40:	e00e      	b.n	8002c60 <HAL_GPIO_Init+0x240>
 8002c42:	2307      	movs	r3, #7
 8002c44:	e00c      	b.n	8002c60 <HAL_GPIO_Init+0x240>
 8002c46:	2306      	movs	r3, #6
 8002c48:	e00a      	b.n	8002c60 <HAL_GPIO_Init+0x240>
 8002c4a:	2305      	movs	r3, #5
 8002c4c:	e008      	b.n	8002c60 <HAL_GPIO_Init+0x240>
 8002c4e:	2304      	movs	r3, #4
 8002c50:	e006      	b.n	8002c60 <HAL_GPIO_Init+0x240>
 8002c52:	2303      	movs	r3, #3
 8002c54:	e004      	b.n	8002c60 <HAL_GPIO_Init+0x240>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e002      	b.n	8002c60 <HAL_GPIO_Init+0x240>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <HAL_GPIO_Init+0x240>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	69fa      	ldr	r2, [r7, #28]
 8002c62:	f002 0203 	and.w	r2, r2, #3
 8002c66:	0092      	lsls	r2, r2, #2
 8002c68:	4093      	lsls	r3, r2
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c70:	4935      	ldr	r1, [pc, #212]	; (8002d48 <HAL_GPIO_Init+0x328>)
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	089b      	lsrs	r3, r3, #2
 8002c76:	3302      	adds	r3, #2
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c7e:	4b3d      	ldr	r3, [pc, #244]	; (8002d74 <HAL_GPIO_Init+0x354>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	43db      	mvns	r3, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ca2:	4a34      	ldr	r2, [pc, #208]	; (8002d74 <HAL_GPIO_Init+0x354>)
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ca8:	4b32      	ldr	r3, [pc, #200]	; (8002d74 <HAL_GPIO_Init+0x354>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ccc:	4a29      	ldr	r2, [pc, #164]	; (8002d74 <HAL_GPIO_Init+0x354>)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cd2:	4b28      	ldr	r3, [pc, #160]	; (8002d74 <HAL_GPIO_Init+0x354>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cf6:	4a1f      	ldr	r2, [pc, #124]	; (8002d74 <HAL_GPIO_Init+0x354>)
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cfc:	4b1d      	ldr	r3, [pc, #116]	; (8002d74 <HAL_GPIO_Init+0x354>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	43db      	mvns	r3, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d20:	4a14      	ldr	r2, [pc, #80]	; (8002d74 <HAL_GPIO_Init+0x354>)
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	61fb      	str	r3, [r7, #28]
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	2b0f      	cmp	r3, #15
 8002d30:	f67f ae84 	bls.w	8002a3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop
 8002d38:	3724      	adds	r7, #36	; 0x24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40013800 	.word	0x40013800
 8002d4c:	40020000 	.word	0x40020000
 8002d50:	40020400 	.word	0x40020400
 8002d54:	40020800 	.word	0x40020800
 8002d58:	40020c00 	.word	0x40020c00
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	40021400 	.word	0x40021400
 8002d64:	40021800 	.word	0x40021800
 8002d68:	40021c00 	.word	0x40021c00
 8002d6c:	40022000 	.word	0x40022000
 8002d70:	40022400 	.word	0x40022400
 8002d74:	40013c00 	.word	0x40013c00

08002d78 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	e0d9      	b.n	8002f48 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d94:	2201      	movs	r2, #1
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4013      	ands	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	f040 80c9 	bne.w	8002f42 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002db0:	4a6b      	ldr	r2, [pc, #428]	; (8002f60 <HAL_GPIO_DeInit+0x1e8>)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	089b      	lsrs	r3, r3, #2
 8002db6:	3302      	adds	r3, #2
 8002db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dbc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	220f      	movs	r2, #15
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a63      	ldr	r2, [pc, #396]	; (8002f64 <HAL_GPIO_DeInit+0x1ec>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d037      	beq.n	8002e4a <HAL_GPIO_DeInit+0xd2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a62      	ldr	r2, [pc, #392]	; (8002f68 <HAL_GPIO_DeInit+0x1f0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d031      	beq.n	8002e46 <HAL_GPIO_DeInit+0xce>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a61      	ldr	r2, [pc, #388]	; (8002f6c <HAL_GPIO_DeInit+0x1f4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d02b      	beq.n	8002e42 <HAL_GPIO_DeInit+0xca>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a60      	ldr	r2, [pc, #384]	; (8002f70 <HAL_GPIO_DeInit+0x1f8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d025      	beq.n	8002e3e <HAL_GPIO_DeInit+0xc6>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a5f      	ldr	r2, [pc, #380]	; (8002f74 <HAL_GPIO_DeInit+0x1fc>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d01f      	beq.n	8002e3a <HAL_GPIO_DeInit+0xc2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a5e      	ldr	r2, [pc, #376]	; (8002f78 <HAL_GPIO_DeInit+0x200>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d019      	beq.n	8002e36 <HAL_GPIO_DeInit+0xbe>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a5d      	ldr	r2, [pc, #372]	; (8002f7c <HAL_GPIO_DeInit+0x204>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d013      	beq.n	8002e32 <HAL_GPIO_DeInit+0xba>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a5c      	ldr	r2, [pc, #368]	; (8002f80 <HAL_GPIO_DeInit+0x208>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d00d      	beq.n	8002e2e <HAL_GPIO_DeInit+0xb6>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a5b      	ldr	r2, [pc, #364]	; (8002f84 <HAL_GPIO_DeInit+0x20c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d007      	beq.n	8002e2a <HAL_GPIO_DeInit+0xb2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a5a      	ldr	r2, [pc, #360]	; (8002f88 <HAL_GPIO_DeInit+0x210>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d101      	bne.n	8002e26 <HAL_GPIO_DeInit+0xae>
 8002e22:	2309      	movs	r3, #9
 8002e24:	e012      	b.n	8002e4c <HAL_GPIO_DeInit+0xd4>
 8002e26:	230a      	movs	r3, #10
 8002e28:	e010      	b.n	8002e4c <HAL_GPIO_DeInit+0xd4>
 8002e2a:	2308      	movs	r3, #8
 8002e2c:	e00e      	b.n	8002e4c <HAL_GPIO_DeInit+0xd4>
 8002e2e:	2307      	movs	r3, #7
 8002e30:	e00c      	b.n	8002e4c <HAL_GPIO_DeInit+0xd4>
 8002e32:	2306      	movs	r3, #6
 8002e34:	e00a      	b.n	8002e4c <HAL_GPIO_DeInit+0xd4>
 8002e36:	2305      	movs	r3, #5
 8002e38:	e008      	b.n	8002e4c <HAL_GPIO_DeInit+0xd4>
 8002e3a:	2304      	movs	r3, #4
 8002e3c:	e006      	b.n	8002e4c <HAL_GPIO_DeInit+0xd4>
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e004      	b.n	8002e4c <HAL_GPIO_DeInit+0xd4>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e002      	b.n	8002e4c <HAL_GPIO_DeInit+0xd4>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <HAL_GPIO_DeInit+0xd4>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	f002 0203 	and.w	r2, r2, #3
 8002e52:	0092      	lsls	r2, r2, #2
 8002e54:	4093      	lsls	r3, r2
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d132      	bne.n	8002ec2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002e5c:	4b4b      	ldr	r3, [pc, #300]	; (8002f8c <HAL_GPIO_DeInit+0x214>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	43db      	mvns	r3, r3
 8002e64:	4949      	ldr	r1, [pc, #292]	; (8002f8c <HAL_GPIO_DeInit+0x214>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002e6a:	4b48      	ldr	r3, [pc, #288]	; (8002f8c <HAL_GPIO_DeInit+0x214>)
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	43db      	mvns	r3, r3
 8002e72:	4946      	ldr	r1, [pc, #280]	; (8002f8c <HAL_GPIO_DeInit+0x214>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002e78:	4b44      	ldr	r3, [pc, #272]	; (8002f8c <HAL_GPIO_DeInit+0x214>)
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	4942      	ldr	r1, [pc, #264]	; (8002f8c <HAL_GPIO_DeInit+0x214>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002e86:	4b41      	ldr	r3, [pc, #260]	; (8002f8c <HAL_GPIO_DeInit+0x214>)
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	493f      	ldr	r1, [pc, #252]	; (8002f8c <HAL_GPIO_DeInit+0x214>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	220f      	movs	r2, #15
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002ea4:	4a2e      	ldr	r2, [pc, #184]	; (8002f60 <HAL_GPIO_DeInit+0x1e8>)
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	089b      	lsrs	r3, r3, #2
 8002eaa:	3302      	adds	r3, #2
 8002eac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	43da      	mvns	r2, r3
 8002eb4:	482a      	ldr	r0, [pc, #168]	; (8002f60 <HAL_GPIO_DeInit+0x1e8>)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	089b      	lsrs	r3, r3, #2
 8002eba:	400a      	ands	r2, r1
 8002ebc:	3302      	adds	r3, #2
 8002ebe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	2103      	movs	r1, #3
 8002ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	08da      	lsrs	r2, r3, #3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3208      	adds	r2, #8
 8002ee0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	220f      	movs	r2, #15
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	08d2      	lsrs	r2, r2, #3
 8002ef8:	4019      	ands	r1, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3208      	adds	r2, #8
 8002efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	2103      	movs	r1, #3
 8002f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	401a      	ands	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	fa01 f303 	lsl.w	r3, r1, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	401a      	ands	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	2103      	movs	r1, #3
 8002f36:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	401a      	ands	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	3301      	adds	r3, #1
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2b0f      	cmp	r3, #15
 8002f4c:	f67f af22 	bls.w	8002d94 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002f50:	bf00      	nop
 8002f52:	bf00      	nop
 8002f54:	371c      	adds	r7, #28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40013800 	.word	0x40013800
 8002f64:	40020000 	.word	0x40020000
 8002f68:	40020400 	.word	0x40020400
 8002f6c:	40020800 	.word	0x40020800
 8002f70:	40020c00 	.word	0x40020c00
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40021400 	.word	0x40021400
 8002f7c:	40021800 	.word	0x40021800
 8002f80:	40021c00 	.word	0x40021c00
 8002f84:	40022000 	.word	0x40022000
 8002f88:	40022400 	.word	0x40022400
 8002f8c:	40013c00 	.word	0x40013c00

08002f90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	887b      	ldrh	r3, [r7, #2]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d002      	beq.n	8002fae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	73fb      	strb	r3, [r7, #15]
 8002fac:	e001      	b.n	8002fb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	807b      	strh	r3, [r7, #2]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fd0:	787b      	ldrb	r3, [r7, #1]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fd6:	887a      	ldrh	r2, [r7, #2]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fdc:	e003      	b.n	8002fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fde:	887b      	ldrh	r3, [r7, #2]
 8002fe0:	041a      	lsls	r2, r3, #16
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	619a      	str	r2, [r3, #24]
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
	...

08002ff4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ffe:	4b08      	ldr	r3, [pc, #32]	; (8003020 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003000:	695a      	ldr	r2, [r3, #20]
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	4013      	ands	r3, r2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d006      	beq.n	8003018 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800300a:	4a05      	ldr	r2, [pc, #20]	; (8003020 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800300c:	88fb      	ldrh	r3, [r7, #6]
 800300e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003010:	88fb      	ldrh	r3, [r7, #6]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd fc3c 	bl	8000890 <HAL_GPIO_EXTI_Callback>
  }
}
 8003018:	bf00      	nop
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40013c00 	.word	0x40013c00

08003024 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e0bf      	b.n	80031b6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d106      	bne.n	8003050 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7ff f94e 	bl	80022ec <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699a      	ldr	r2, [r3, #24]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003066:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6999      	ldr	r1, [r3, #24]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800307c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6899      	ldr	r1, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	4b4a      	ldr	r3, [pc, #296]	; (80031c0 <HAL_LTDC_Init+0x19c>)
 8003098:	400b      	ands	r3, r1
 800309a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	041b      	lsls	r3, r3, #16
 80030a2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6899      	ldr	r1, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699a      	ldr	r2, [r3, #24]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68d9      	ldr	r1, [r3, #12]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4b3e      	ldr	r3, [pc, #248]	; (80031c0 <HAL_LTDC_Init+0x19c>)
 80030c6:	400b      	ands	r3, r1
 80030c8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	041b      	lsls	r3, r3, #16
 80030d0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68d9      	ldr	r1, [r3, #12]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a1a      	ldr	r2, [r3, #32]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6919      	ldr	r1, [r3, #16]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	4b33      	ldr	r3, [pc, #204]	; (80031c0 <HAL_LTDC_Init+0x19c>)
 80030f4:	400b      	ands	r3, r1
 80030f6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	041b      	lsls	r3, r3, #16
 80030fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6919      	ldr	r1, [r3, #16]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6959      	ldr	r1, [r3, #20]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	4b27      	ldr	r3, [pc, #156]	; (80031c0 <HAL_LTDC_Init+0x19c>)
 8003122:	400b      	ands	r3, r1
 8003124:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312a:	041b      	lsls	r3, r3, #16
 800312c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6959      	ldr	r1, [r3, #20]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800314a:	021b      	lsls	r3, r3, #8
 800314c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003154:	041b      	lsls	r3, r3, #16
 8003156:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003166:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0206 	orr.w	r2, r2, #6
 8003192:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	699a      	ldr	r2, [r3, #24]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	f000f800 	.word	0xf000f800

080031c4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80031c4:	b5b0      	push	{r4, r5, r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d101      	bne.n	80031de <HAL_LTDC_ConfigLayer+0x1a>
 80031da:	2302      	movs	r3, #2
 80031dc:	e02c      	b.n	8003238 <HAL_LTDC_ConfigLayer+0x74>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2202      	movs	r2, #2
 80031ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2134      	movs	r1, #52	; 0x34
 80031f4:	fb01 f303 	mul.w	r3, r1, r3
 80031f8:	4413      	add	r3, r2
 80031fa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	4614      	mov	r4, r2
 8003202:	461d      	mov	r5, r3
 8003204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800320a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800320c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800320e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003210:	682b      	ldr	r3, [r5, #0]
 8003212:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 f811 	bl	8003240 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2201      	movs	r2, #1
 8003224:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bdb0      	pop	{r4, r5, r7, pc}

08003240 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003240:	b480      	push	{r7}
 8003242:	b089      	sub	sp, #36	; 0x24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	0c1b      	lsrs	r3, r3, #16
 8003258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800325c:	4413      	add	r3, r2
 800325e:	041b      	lsls	r3, r3, #16
 8003260:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	01db      	lsls	r3, r3, #7
 800326c:	4413      	add	r3, r2
 800326e:	3384      	adds	r3, #132	; 0x84
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	6812      	ldr	r2, [r2, #0]
 8003276:	4611      	mov	r1, r2
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	01d2      	lsls	r2, r2, #7
 800327c:	440a      	add	r2, r1
 800327e:	3284      	adds	r2, #132	; 0x84
 8003280:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003284:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	0c1b      	lsrs	r3, r3, #16
 8003292:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003296:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003298:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4619      	mov	r1, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	01db      	lsls	r3, r3, #7
 80032a4:	440b      	add	r3, r1
 80032a6:	3384      	adds	r3, #132	; 0x84
 80032a8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80032ae:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032be:	4413      	add	r3, r2
 80032c0:	041b      	lsls	r3, r3, #16
 80032c2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	461a      	mov	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	01db      	lsls	r3, r3, #7
 80032ce:	4413      	add	r3, r2
 80032d0:	3384      	adds	r3, #132	; 0x84
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	6812      	ldr	r2, [r2, #0]
 80032d8:	4611      	mov	r1, r2
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	01d2      	lsls	r2, r2, #7
 80032de:	440a      	add	r2, r1
 80032e0:	3284      	adds	r2, #132	; 0x84
 80032e2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80032e6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032f6:	4413      	add	r3, r2
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4619      	mov	r1, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	01db      	lsls	r3, r3, #7
 8003304:	440b      	add	r3, r1
 8003306:	3384      	adds	r3, #132	; 0x84
 8003308:	4619      	mov	r1, r3
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	4313      	orrs	r3, r2
 800330e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	01db      	lsls	r3, r3, #7
 800331a:	4413      	add	r3, r2
 800331c:	3384      	adds	r3, #132	; 0x84
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	4611      	mov	r1, r2
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	01d2      	lsls	r2, r2, #7
 800332a:	440a      	add	r2, r1
 800332c:	3284      	adds	r2, #132	; 0x84
 800332e:	f023 0307 	bic.w	r3, r3, #7
 8003332:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	461a      	mov	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	01db      	lsls	r3, r3, #7
 800333e:	4413      	add	r3, r2
 8003340:	3384      	adds	r3, #132	; 0x84
 8003342:	461a      	mov	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003350:	021b      	lsls	r3, r3, #8
 8003352:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800335a:	041b      	lsls	r3, r3, #16
 800335c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	061b      	lsls	r3, r3, #24
 8003364:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	01db      	lsls	r3, r3, #7
 8003370:	4413      	add	r3, r2
 8003372:	3384      	adds	r3, #132	; 0x84
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	01db      	lsls	r3, r3, #7
 8003380:	4413      	add	r3, r2
 8003382:	3384      	adds	r3, #132	; 0x84
 8003384:	461a      	mov	r2, r3
 8003386:	2300      	movs	r3, #0
 8003388:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003390:	461a      	mov	r2, r3
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	431a      	orrs	r2, r3
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	431a      	orrs	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4619      	mov	r1, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	01db      	lsls	r3, r3, #7
 80033a4:	440b      	add	r3, r1
 80033a6:	3384      	adds	r3, #132	; 0x84
 80033a8:	4619      	mov	r1, r3
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	461a      	mov	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	01db      	lsls	r3, r3, #7
 80033ba:	4413      	add	r3, r2
 80033bc:	3384      	adds	r3, #132	; 0x84
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	6812      	ldr	r2, [r2, #0]
 80033c4:	4611      	mov	r1, r2
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	01d2      	lsls	r2, r2, #7
 80033ca:	440a      	add	r2, r1
 80033cc:	3284      	adds	r2, #132	; 0x84
 80033ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033d2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	461a      	mov	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	01db      	lsls	r3, r3, #7
 80033de:	4413      	add	r3, r2
 80033e0:	3384      	adds	r3, #132	; 0x84
 80033e2:	461a      	mov	r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	01db      	lsls	r3, r3, #7
 80033f4:	4413      	add	r3, r2
 80033f6:	3384      	adds	r3, #132	; 0x84
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	6812      	ldr	r2, [r2, #0]
 80033fe:	4611      	mov	r1, r2
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	01d2      	lsls	r2, r2, #7
 8003404:	440a      	add	r2, r1
 8003406:	3284      	adds	r2, #132	; 0x84
 8003408:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800340c:	f023 0307 	bic.w	r3, r3, #7
 8003410:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	69da      	ldr	r2, [r3, #28]
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	68f9      	ldr	r1, [r7, #12]
 800341c:	6809      	ldr	r1, [r1, #0]
 800341e:	4608      	mov	r0, r1
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	01c9      	lsls	r1, r1, #7
 8003424:	4401      	add	r1, r0
 8003426:	3184      	adds	r1, #132	; 0x84
 8003428:	4313      	orrs	r3, r2
 800342a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	461a      	mov	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	01db      	lsls	r3, r3, #7
 8003436:	4413      	add	r3, r2
 8003438:	3384      	adds	r3, #132	; 0x84
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	01db      	lsls	r3, r3, #7
 8003446:	4413      	add	r3, r2
 8003448:	3384      	adds	r3, #132	; 0x84
 800344a:	461a      	mov	r2, r3
 800344c:	2300      	movs	r3, #0
 800344e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	461a      	mov	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	01db      	lsls	r3, r3, #7
 800345a:	4413      	add	r3, r2
 800345c:	3384      	adds	r3, #132	; 0x84
 800345e:	461a      	mov	r2, r3
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d102      	bne.n	8003474 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800346e:	2304      	movs	r3, #4
 8003470:	61fb      	str	r3, [r7, #28]
 8003472:	e01b      	b.n	80034ac <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d102      	bne.n	8003482 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800347c:	2303      	movs	r3, #3
 800347e:	61fb      	str	r3, [r7, #28]
 8003480:	e014      	b.n	80034ac <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2b04      	cmp	r3, #4
 8003488:	d00b      	beq.n	80034a2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800348e:	2b02      	cmp	r3, #2
 8003490:	d007      	beq.n	80034a2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003496:	2b03      	cmp	r3, #3
 8003498:	d003      	beq.n	80034a2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800349e:	2b07      	cmp	r3, #7
 80034a0:	d102      	bne.n	80034a8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80034a2:	2302      	movs	r3, #2
 80034a4:	61fb      	str	r3, [r7, #28]
 80034a6:	e001      	b.n	80034ac <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80034a8:	2301      	movs	r3, #1
 80034aa:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	461a      	mov	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	01db      	lsls	r3, r3, #7
 80034b6:	4413      	add	r3, r2
 80034b8:	3384      	adds	r3, #132	; 0x84
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	6812      	ldr	r2, [r2, #0]
 80034c0:	4611      	mov	r1, r2
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	01d2      	lsls	r2, r2, #7
 80034c6:	440a      	add	r2, r1
 80034c8:	3284      	adds	r2, #132	; 0x84
 80034ca:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80034ce:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	69fa      	ldr	r2, [r7, #28]
 80034d6:	fb02 f303 	mul.w	r3, r2, r3
 80034da:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	6859      	ldr	r1, [r3, #4]
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	1acb      	subs	r3, r1, r3
 80034e6:	69f9      	ldr	r1, [r7, #28]
 80034e8:	fb01 f303 	mul.w	r3, r1, r3
 80034ec:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80034ee:	68f9      	ldr	r1, [r7, #12]
 80034f0:	6809      	ldr	r1, [r1, #0]
 80034f2:	4608      	mov	r0, r1
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	01c9      	lsls	r1, r1, #7
 80034f8:	4401      	add	r1, r0
 80034fa:	3184      	adds	r1, #132	; 0x84
 80034fc:	4313      	orrs	r3, r2
 80034fe:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	461a      	mov	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	01db      	lsls	r3, r3, #7
 800350a:	4413      	add	r3, r2
 800350c:	3384      	adds	r3, #132	; 0x84
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	4611      	mov	r1, r2
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	01d2      	lsls	r2, r2, #7
 800351a:	440a      	add	r2, r1
 800351c:	3284      	adds	r2, #132	; 0x84
 800351e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003522:	f023 0307 	bic.w	r3, r3, #7
 8003526:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	461a      	mov	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	01db      	lsls	r3, r3, #7
 8003532:	4413      	add	r3, r2
 8003534:	3384      	adds	r3, #132	; 0x84
 8003536:	461a      	mov	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	01db      	lsls	r3, r3, #7
 8003548:	4413      	add	r3, r2
 800354a:	3384      	adds	r3, #132	; 0x84
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	6812      	ldr	r2, [r2, #0]
 8003552:	4611      	mov	r1, r2
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	01d2      	lsls	r2, r2, #7
 8003558:	440a      	add	r2, r1
 800355a:	3284      	adds	r2, #132	; 0x84
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	6013      	str	r3, [r2, #0]
}
 8003562:	bf00      	nop
 8003564:	3724      	adds	r7, #36	; 0x24
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
	...

08003570 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e267      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d075      	beq.n	800367a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800358e:	4b88      	ldr	r3, [pc, #544]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 030c 	and.w	r3, r3, #12
 8003596:	2b04      	cmp	r3, #4
 8003598:	d00c      	beq.n	80035b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800359a:	4b85      	ldr	r3, [pc, #532]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d112      	bne.n	80035cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035a6:	4b82      	ldr	r3, [pc, #520]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035b2:	d10b      	bne.n	80035cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b4:	4b7e      	ldr	r3, [pc, #504]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d05b      	beq.n	8003678 <HAL_RCC_OscConfig+0x108>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d157      	bne.n	8003678 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e242      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d4:	d106      	bne.n	80035e4 <HAL_RCC_OscConfig+0x74>
 80035d6:	4b76      	ldr	r3, [pc, #472]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a75      	ldr	r2, [pc, #468]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	e01d      	b.n	8003620 <HAL_RCC_OscConfig+0xb0>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035ec:	d10c      	bne.n	8003608 <HAL_RCC_OscConfig+0x98>
 80035ee:	4b70      	ldr	r3, [pc, #448]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a6f      	ldr	r2, [pc, #444]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	4b6d      	ldr	r3, [pc, #436]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a6c      	ldr	r2, [pc, #432]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	e00b      	b.n	8003620 <HAL_RCC_OscConfig+0xb0>
 8003608:	4b69      	ldr	r3, [pc, #420]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a68      	ldr	r2, [pc, #416]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 800360e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003612:	6013      	str	r3, [r2, #0]
 8003614:	4b66      	ldr	r3, [pc, #408]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a65      	ldr	r2, [pc, #404]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 800361a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800361e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d013      	beq.n	8003650 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003628:	f7ff f8dc 	bl	80027e4 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003630:	f7ff f8d8 	bl	80027e4 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b64      	cmp	r3, #100	; 0x64
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e207      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003642:	4b5b      	ldr	r3, [pc, #364]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0xc0>
 800364e:	e014      	b.n	800367a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003650:	f7ff f8c8 	bl	80027e4 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003658:	f7ff f8c4 	bl	80027e4 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b64      	cmp	r3, #100	; 0x64
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e1f3      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366a:	4b51      	ldr	r3, [pc, #324]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0xe8>
 8003676:	e000      	b.n	800367a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d063      	beq.n	800374e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003686:	4b4a      	ldr	r3, [pc, #296]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 030c 	and.w	r3, r3, #12
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00b      	beq.n	80036aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003692:	4b47      	ldr	r3, [pc, #284]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800369a:	2b08      	cmp	r3, #8
 800369c:	d11c      	bne.n	80036d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800369e:	4b44      	ldr	r3, [pc, #272]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d116      	bne.n	80036d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036aa:	4b41      	ldr	r3, [pc, #260]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <HAL_RCC_OscConfig+0x152>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d001      	beq.n	80036c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e1c7      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c2:	4b3b      	ldr	r3, [pc, #236]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4937      	ldr	r1, [pc, #220]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d6:	e03a      	b.n	800374e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d020      	beq.n	8003722 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036e0:	4b34      	ldr	r3, [pc, #208]	; (80037b4 <HAL_RCC_OscConfig+0x244>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e6:	f7ff f87d 	bl	80027e4 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ee:	f7ff f879 	bl	80027e4 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e1a8      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003700:	4b2b      	ldr	r3, [pc, #172]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0f0      	beq.n	80036ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370c:	4b28      	ldr	r3, [pc, #160]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4925      	ldr	r1, [pc, #148]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 800371c:	4313      	orrs	r3, r2
 800371e:	600b      	str	r3, [r1, #0]
 8003720:	e015      	b.n	800374e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003722:	4b24      	ldr	r3, [pc, #144]	; (80037b4 <HAL_RCC_OscConfig+0x244>)
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003728:	f7ff f85c 	bl	80027e4 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003730:	f7ff f858 	bl	80027e4 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e187      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003742:	4b1b      	ldr	r3, [pc, #108]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f0      	bne.n	8003730 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d036      	beq.n	80037c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d016      	beq.n	8003790 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003762:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <HAL_RCC_OscConfig+0x248>)
 8003764:	2201      	movs	r2, #1
 8003766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003768:	f7ff f83c 	bl	80027e4 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003770:	f7ff f838 	bl	80027e4 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e167      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003782:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f0      	beq.n	8003770 <HAL_RCC_OscConfig+0x200>
 800378e:	e01b      	b.n	80037c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003790:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <HAL_RCC_OscConfig+0x248>)
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003796:	f7ff f825 	bl	80027e4 <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800379c:	e00e      	b.n	80037bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800379e:	f7ff f821 	bl	80027e4 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d907      	bls.n	80037bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e150      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
 80037b0:	40023800 	.word	0x40023800
 80037b4:	42470000 	.word	0x42470000
 80037b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037bc:	4b88      	ldr	r3, [pc, #544]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 80037be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1ea      	bne.n	800379e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 8097 	beq.w	8003904 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037d6:	2300      	movs	r3, #0
 80037d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037da:	4b81      	ldr	r3, [pc, #516]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10f      	bne.n	8003806 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	4b7d      	ldr	r3, [pc, #500]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	4a7c      	ldr	r2, [pc, #496]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 80037f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f4:	6413      	str	r3, [r2, #64]	; 0x40
 80037f6:	4b7a      	ldr	r3, [pc, #488]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003802:	2301      	movs	r3, #1
 8003804:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003806:	4b77      	ldr	r3, [pc, #476]	; (80039e4 <HAL_RCC_OscConfig+0x474>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380e:	2b00      	cmp	r3, #0
 8003810:	d118      	bne.n	8003844 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003812:	4b74      	ldr	r3, [pc, #464]	; (80039e4 <HAL_RCC_OscConfig+0x474>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a73      	ldr	r2, [pc, #460]	; (80039e4 <HAL_RCC_OscConfig+0x474>)
 8003818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800381e:	f7fe ffe1 	bl	80027e4 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003826:	f7fe ffdd 	bl	80027e4 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e10c      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003838:	4b6a      	ldr	r3, [pc, #424]	; (80039e4 <HAL_RCC_OscConfig+0x474>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f0      	beq.n	8003826 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d106      	bne.n	800385a <HAL_RCC_OscConfig+0x2ea>
 800384c:	4b64      	ldr	r3, [pc, #400]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 800384e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003850:	4a63      	ldr	r2, [pc, #396]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	6713      	str	r3, [r2, #112]	; 0x70
 8003858:	e01c      	b.n	8003894 <HAL_RCC_OscConfig+0x324>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b05      	cmp	r3, #5
 8003860:	d10c      	bne.n	800387c <HAL_RCC_OscConfig+0x30c>
 8003862:	4b5f      	ldr	r3, [pc, #380]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003866:	4a5e      	ldr	r2, [pc, #376]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003868:	f043 0304 	orr.w	r3, r3, #4
 800386c:	6713      	str	r3, [r2, #112]	; 0x70
 800386e:	4b5c      	ldr	r3, [pc, #368]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003872:	4a5b      	ldr	r2, [pc, #364]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	6713      	str	r3, [r2, #112]	; 0x70
 800387a:	e00b      	b.n	8003894 <HAL_RCC_OscConfig+0x324>
 800387c:	4b58      	ldr	r3, [pc, #352]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 800387e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003880:	4a57      	ldr	r2, [pc, #348]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003882:	f023 0301 	bic.w	r3, r3, #1
 8003886:	6713      	str	r3, [r2, #112]	; 0x70
 8003888:	4b55      	ldr	r3, [pc, #340]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 800388a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388c:	4a54      	ldr	r2, [pc, #336]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 800388e:	f023 0304 	bic.w	r3, r3, #4
 8003892:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d015      	beq.n	80038c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389c:	f7fe ffa2 	bl	80027e4 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a2:	e00a      	b.n	80038ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038a4:	f7fe ff9e 	bl	80027e4 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e0cb      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ba:	4b49      	ldr	r3, [pc, #292]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 80038bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0ee      	beq.n	80038a4 <HAL_RCC_OscConfig+0x334>
 80038c6:	e014      	b.n	80038f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c8:	f7fe ff8c 	bl	80027e4 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ce:	e00a      	b.n	80038e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038d0:	f7fe ff88 	bl	80027e4 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	f241 3288 	movw	r2, #5000	; 0x1388
 80038de:	4293      	cmp	r3, r2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e0b5      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e6:	4b3e      	ldr	r3, [pc, #248]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 80038e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1ee      	bne.n	80038d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038f2:	7dfb      	ldrb	r3, [r7, #23]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d105      	bne.n	8003904 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f8:	4b39      	ldr	r3, [pc, #228]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	4a38      	ldr	r2, [pc, #224]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 80038fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003902:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 80a1 	beq.w	8003a50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800390e:	4b34      	ldr	r3, [pc, #208]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
 8003916:	2b08      	cmp	r3, #8
 8003918:	d05c      	beq.n	80039d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d141      	bne.n	80039a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003922:	4b31      	ldr	r3, [pc, #196]	; (80039e8 <HAL_RCC_OscConfig+0x478>)
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003928:	f7fe ff5c 	bl	80027e4 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003930:	f7fe ff58 	bl	80027e4 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e087      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003942:	4b27      	ldr	r3, [pc, #156]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69da      	ldr	r2, [r3, #28]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	019b      	lsls	r3, r3, #6
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003964:	085b      	lsrs	r3, r3, #1
 8003966:	3b01      	subs	r3, #1
 8003968:	041b      	lsls	r3, r3, #16
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	061b      	lsls	r3, r3, #24
 8003972:	491b      	ldr	r1, [pc, #108]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003974:	4313      	orrs	r3, r2
 8003976:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003978:	4b1b      	ldr	r3, [pc, #108]	; (80039e8 <HAL_RCC_OscConfig+0x478>)
 800397a:	2201      	movs	r2, #1
 800397c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397e:	f7fe ff31 	bl	80027e4 <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003986:	f7fe ff2d 	bl	80027e4 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e05c      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003998:	4b11      	ldr	r3, [pc, #68]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0f0      	beq.n	8003986 <HAL_RCC_OscConfig+0x416>
 80039a4:	e054      	b.n	8003a50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a6:	4b10      	ldr	r3, [pc, #64]	; (80039e8 <HAL_RCC_OscConfig+0x478>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fe ff1a 	bl	80027e4 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039b4:	f7fe ff16 	bl	80027e4 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e045      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c6:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_OscConfig+0x444>
 80039d2:	e03d      	b.n	8003a50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d107      	bne.n	80039ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e038      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40007000 	.word	0x40007000
 80039e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039ec:	4b1b      	ldr	r3, [pc, #108]	; (8003a5c <HAL_RCC_OscConfig+0x4ec>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d028      	beq.n	8003a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d121      	bne.n	8003a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d11a      	bne.n	8003a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d111      	bne.n	8003a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a32:	085b      	lsrs	r3, r3, #1
 8003a34:	3b01      	subs	r3, #1
 8003a36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d107      	bne.n	8003a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e000      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40023800 	.word	0x40023800

08003a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e0cc      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a74:	4b68      	ldr	r3, [pc, #416]	; (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 030f 	and.w	r3, r3, #15
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d90c      	bls.n	8003a9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a82:	4b65      	ldr	r3, [pc, #404]	; (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8a:	4b63      	ldr	r3, [pc, #396]	; (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d001      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e0b8      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d020      	beq.n	8003aea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ab4:	4b59      	ldr	r3, [pc, #356]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	4a58      	ldr	r2, [pc, #352]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003abe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003acc:	4b53      	ldr	r3, [pc, #332]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	4a52      	ldr	r2, [pc, #328]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ad6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad8:	4b50      	ldr	r3, [pc, #320]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	494d      	ldr	r1, [pc, #308]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d044      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d107      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afe:	4b47      	ldr	r3, [pc, #284]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d119      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e07f      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d003      	beq.n	8003b1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d107      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b1e:	4b3f      	ldr	r3, [pc, #252]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d109      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e06f      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b2e:	4b3b      	ldr	r3, [pc, #236]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e067      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b3e:	4b37      	ldr	r3, [pc, #220]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f023 0203 	bic.w	r2, r3, #3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	4934      	ldr	r1, [pc, #208]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b50:	f7fe fe48 	bl	80027e4 <HAL_GetTick>
 8003b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b56:	e00a      	b.n	8003b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b58:	f7fe fe44 	bl	80027e4 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e04f      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6e:	4b2b      	ldr	r3, [pc, #172]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 020c 	and.w	r2, r3, #12
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d1eb      	bne.n	8003b58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b80:	4b25      	ldr	r3, [pc, #148]	; (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 030f 	and.w	r3, r3, #15
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d20c      	bcs.n	8003ba8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8e:	4b22      	ldr	r3, [pc, #136]	; (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b96:	4b20      	ldr	r3, [pc, #128]	; (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e032      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bb4:	4b19      	ldr	r3, [pc, #100]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	4916      	ldr	r1, [pc, #88]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d009      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bd2:	4b12      	ldr	r3, [pc, #72]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	490e      	ldr	r1, [pc, #56]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003be6:	f000 f821 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 8003bea:	4602      	mov	r2, r0
 8003bec:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	091b      	lsrs	r3, r3, #4
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	490a      	ldr	r1, [pc, #40]	; (8003c20 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf8:	5ccb      	ldrb	r3, [r1, r3]
 8003bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8003bfe:	4a09      	ldr	r2, [pc, #36]	; (8003c24 <HAL_RCC_ClockConfig+0x1c4>)
 8003c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c02:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <HAL_RCC_ClockConfig+0x1c8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fe fda8 	bl	800275c <HAL_InitTick>

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40023c00 	.word	0x40023c00
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	0800c800 	.word	0x0800c800
 8003c24:	20000010 	.word	0x20000010
 8003c28:	20000014 	.word	0x20000014

08003c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c30:	b094      	sub	sp, #80	; 0x50
 8003c32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	647b      	str	r3, [r7, #68]	; 0x44
 8003c38:	2300      	movs	r3, #0
 8003c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c44:	4b79      	ldr	r3, [pc, #484]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 030c 	and.w	r3, r3, #12
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d00d      	beq.n	8003c6c <HAL_RCC_GetSysClockFreq+0x40>
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	f200 80e1 	bhi.w	8003e18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <HAL_RCC_GetSysClockFreq+0x34>
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d003      	beq.n	8003c66 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c5e:	e0db      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c60:	4b73      	ldr	r3, [pc, #460]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c62:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003c64:	e0db      	b.n	8003e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c66:	4b73      	ldr	r3, [pc, #460]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c6a:	e0d8      	b.n	8003e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c6c:	4b6f      	ldr	r3, [pc, #444]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c74:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c76:	4b6d      	ldr	r3, [pc, #436]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d063      	beq.n	8003d4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c82:	4b6a      	ldr	r3, [pc, #424]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	099b      	lsrs	r3, r3, #6
 8003c88:	2200      	movs	r2, #0
 8003c8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c94:	633b      	str	r3, [r7, #48]	; 0x30
 8003c96:	2300      	movs	r3, #0
 8003c98:	637b      	str	r3, [r7, #52]	; 0x34
 8003c9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c9e:	4622      	mov	r2, r4
 8003ca0:	462b      	mov	r3, r5
 8003ca2:	f04f 0000 	mov.w	r0, #0
 8003ca6:	f04f 0100 	mov.w	r1, #0
 8003caa:	0159      	lsls	r1, r3, #5
 8003cac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cb0:	0150      	lsls	r0, r2, #5
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4621      	mov	r1, r4
 8003cb8:	1a51      	subs	r1, r2, r1
 8003cba:	6139      	str	r1, [r7, #16]
 8003cbc:	4629      	mov	r1, r5
 8003cbe:	eb63 0301 	sbc.w	r3, r3, r1
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cd0:	4659      	mov	r1, fp
 8003cd2:	018b      	lsls	r3, r1, #6
 8003cd4:	4651      	mov	r1, sl
 8003cd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cda:	4651      	mov	r1, sl
 8003cdc:	018a      	lsls	r2, r1, #6
 8003cde:	4651      	mov	r1, sl
 8003ce0:	ebb2 0801 	subs.w	r8, r2, r1
 8003ce4:	4659      	mov	r1, fp
 8003ce6:	eb63 0901 	sbc.w	r9, r3, r1
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cfe:	4690      	mov	r8, r2
 8003d00:	4699      	mov	r9, r3
 8003d02:	4623      	mov	r3, r4
 8003d04:	eb18 0303 	adds.w	r3, r8, r3
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	462b      	mov	r3, r5
 8003d0c:	eb49 0303 	adc.w	r3, r9, r3
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	f04f 0300 	mov.w	r3, #0
 8003d1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d1e:	4629      	mov	r1, r5
 8003d20:	024b      	lsls	r3, r1, #9
 8003d22:	4621      	mov	r1, r4
 8003d24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d28:	4621      	mov	r1, r4
 8003d2a:	024a      	lsls	r2, r1, #9
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	4619      	mov	r1, r3
 8003d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d32:	2200      	movs	r2, #0
 8003d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d3c:	f7fc faa2 	bl	8000284 <__aeabi_uldivmod>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	4613      	mov	r3, r2
 8003d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d48:	e058      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d4a:	4b38      	ldr	r3, [pc, #224]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	099b      	lsrs	r3, r3, #6
 8003d50:	2200      	movs	r2, #0
 8003d52:	4618      	mov	r0, r3
 8003d54:	4611      	mov	r1, r2
 8003d56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d5a:	623b      	str	r3, [r7, #32]
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d64:	4642      	mov	r2, r8
 8003d66:	464b      	mov	r3, r9
 8003d68:	f04f 0000 	mov.w	r0, #0
 8003d6c:	f04f 0100 	mov.w	r1, #0
 8003d70:	0159      	lsls	r1, r3, #5
 8003d72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d76:	0150      	lsls	r0, r2, #5
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4641      	mov	r1, r8
 8003d7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d82:	4649      	mov	r1, r9
 8003d84:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	f04f 0300 	mov.w	r3, #0
 8003d90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d9c:	ebb2 040a 	subs.w	r4, r2, sl
 8003da0:	eb63 050b 	sbc.w	r5, r3, fp
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	00eb      	lsls	r3, r5, #3
 8003dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003db2:	00e2      	lsls	r2, r4, #3
 8003db4:	4614      	mov	r4, r2
 8003db6:	461d      	mov	r5, r3
 8003db8:	4643      	mov	r3, r8
 8003dba:	18e3      	adds	r3, r4, r3
 8003dbc:	603b      	str	r3, [r7, #0]
 8003dbe:	464b      	mov	r3, r9
 8003dc0:	eb45 0303 	adc.w	r3, r5, r3
 8003dc4:	607b      	str	r3, [r7, #4]
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	f04f 0300 	mov.w	r3, #0
 8003dce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	028b      	lsls	r3, r1, #10
 8003dd6:	4621      	mov	r1, r4
 8003dd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ddc:	4621      	mov	r1, r4
 8003dde:	028a      	lsls	r2, r1, #10
 8003de0:	4610      	mov	r0, r2
 8003de2:	4619      	mov	r1, r3
 8003de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003de6:	2200      	movs	r2, #0
 8003de8:	61bb      	str	r3, [r7, #24]
 8003dea:	61fa      	str	r2, [r7, #28]
 8003dec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003df0:	f7fc fa48 	bl	8000284 <__aeabi_uldivmod>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4613      	mov	r3, r2
 8003dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	0c1b      	lsrs	r3, r3, #16
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	3301      	adds	r3, #1
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003e0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e16:	e002      	b.n	8003e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e18:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3750      	adds	r7, #80	; 0x50
 8003e24:	46bd      	mov	sp, r7
 8003e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	00f42400 	.word	0x00f42400
 8003e34:	007a1200 	.word	0x007a1200

08003e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10b      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d105      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d075      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e6c:	4b91      	ldr	r3, [pc, #580]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e72:	f7fe fcb7 	bl	80027e4 <HAL_GetTick>
 8003e76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e78:	e008      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e7a:	f7fe fcb3 	bl	80027e4 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e189      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e8c:	4b8a      	ldr	r3, [pc, #552]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1f0      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d009      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	019a      	lsls	r2, r3, #6
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	071b      	lsls	r3, r3, #28
 8003eb0:	4981      	ldr	r1, [pc, #516]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d01f      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ec4:	4b7c      	ldr	r3, [pc, #496]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eca:	0f1b      	lsrs	r3, r3, #28
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	019a      	lsls	r2, r3, #6
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	061b      	lsls	r3, r3, #24
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	071b      	lsls	r3, r3, #28
 8003ee4:	4974      	ldr	r1, [pc, #464]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003eec:	4b72      	ldr	r3, [pc, #456]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ef2:	f023 021f 	bic.w	r2, r3, #31
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	496e      	ldr	r1, [pc, #440]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00d      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	019a      	lsls	r2, r3, #6
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	061b      	lsls	r3, r3, #24
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	071b      	lsls	r3, r3, #28
 8003f24:	4964      	ldr	r1, [pc, #400]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f2c:	4b61      	ldr	r3, [pc, #388]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003f2e:	2201      	movs	r2, #1
 8003f30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f32:	f7fe fc57 	bl	80027e4 <HAL_GetTick>
 8003f36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f38:	e008      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f3a:	f7fe fc53 	bl	80027e4 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e129      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f4c:	4b5a      	ldr	r3, [pc, #360]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0f0      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d105      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d079      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f70:	4b52      	ldr	r3, [pc, #328]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f76:	f7fe fc35 	bl	80027e4 <HAL_GetTick>
 8003f7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003f7e:	f7fe fc31 	bl	80027e4 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e107      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f90:	4b49      	ldr	r3, [pc, #292]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f9c:	d0ef      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d020      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003faa:	4b43      	ldr	r3, [pc, #268]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb0:	0f1b      	lsrs	r3, r3, #28
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	019a      	lsls	r2, r3, #6
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	061b      	lsls	r3, r3, #24
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	071b      	lsls	r3, r3, #28
 8003fca:	493b      	ldr	r1, [pc, #236]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fd2:	4b39      	ldr	r3, [pc, #228]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fd8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	021b      	lsls	r3, r3, #8
 8003fe4:	4934      	ldr	r1, [pc, #208]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01e      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ff8:	4b2f      	ldr	r3, [pc, #188]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffe:	0e1b      	lsrs	r3, r3, #24
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	019a      	lsls	r2, r3, #6
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	061b      	lsls	r3, r3, #24
 8004010:	431a      	orrs	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	071b      	lsls	r3, r3, #28
 8004018:	4927      	ldr	r1, [pc, #156]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800401a:	4313      	orrs	r3, r2
 800401c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004020:	4b25      	ldr	r3, [pc, #148]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004026:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	4922      	ldr	r1, [pc, #136]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004030:	4313      	orrs	r3, r2
 8004032:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004036:	4b21      	ldr	r3, [pc, #132]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004038:	2201      	movs	r2, #1
 800403a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800403c:	f7fe fbd2 	bl	80027e4 <HAL_GetTick>
 8004040:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004044:	f7fe fbce 	bl	80027e4 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e0a4      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004056:	4b18      	ldr	r3, [pc, #96]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800405e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004062:	d1ef      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0320 	and.w	r3, r3, #32
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 808b 	beq.w	8004188 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	4b10      	ldr	r3, [pc, #64]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	4a0f      	ldr	r2, [pc, #60]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800407c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004080:	6413      	str	r3, [r2, #64]	; 0x40
 8004082:	4b0d      	ldr	r3, [pc, #52]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800408e:	4b0c      	ldr	r3, [pc, #48]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a0b      	ldr	r2, [pc, #44]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004098:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800409a:	f7fe fba3 	bl	80027e4 <HAL_GetTick>
 800409e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040a0:	e010      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80040a2:	f7fe fb9f 	bl	80027e4 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d909      	bls.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e075      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80040b4:	42470068 	.word	0x42470068
 80040b8:	40023800 	.word	0x40023800
 80040bc:	42470070 	.word	0x42470070
 80040c0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040c4:	4b38      	ldr	r3, [pc, #224]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0e8      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040d0:	4b36      	ldr	r3, [pc, #216]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80040d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d02f      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d028      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040ee:	4b2f      	ldr	r3, [pc, #188]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80040f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040f8:	4b2d      	ldr	r3, [pc, #180]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80040fa:	2201      	movs	r2, #1
 80040fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040fe:	4b2c      	ldr	r3, [pc, #176]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004104:	4a29      	ldr	r2, [pc, #164]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800410a:	4b28      	ldr	r3, [pc, #160]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800410c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b01      	cmp	r3, #1
 8004114:	d114      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004116:	f7fe fb65 	bl	80027e4 <HAL_GetTick>
 800411a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800411c:	e00a      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800411e:	f7fe fb61 	bl	80027e4 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	f241 3288 	movw	r2, #5000	; 0x1388
 800412c:	4293      	cmp	r3, r2
 800412e:	d901      	bls.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e035      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004134:	4b1d      	ldr	r3, [pc, #116]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0ee      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004148:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800414c:	d10d      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800414e:	4b17      	ldr	r3, [pc, #92]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800415e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004162:	4912      	ldr	r1, [pc, #72]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004164:	4313      	orrs	r3, r2
 8004166:	608b      	str	r3, [r1, #8]
 8004168:	e005      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800416a:	4b10      	ldr	r3, [pc, #64]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	4a0f      	ldr	r2, [pc, #60]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004170:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004174:	6093      	str	r3, [r2, #8]
 8004176:	4b0d      	ldr	r3, [pc, #52]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004178:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004182:	490a      	ldr	r1, [pc, #40]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004184:	4313      	orrs	r3, r2
 8004186:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	2b00      	cmp	r3, #0
 8004192:	d004      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800419a:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800419c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40007000 	.word	0x40007000
 80041ac:	40023800 	.word	0x40023800
 80041b0:	42470e40 	.word	0x42470e40
 80041b4:	424711e0 	.word	0x424711e0

080041b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e07b      	b.n	80042c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d108      	bne.n	80041e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041da:	d009      	beq.n	80041f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	61da      	str	r2, [r3, #28]
 80041e2:	e005      	b.n	80041f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d106      	bne.n	8004210 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7fe f996 	bl	800253c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004226:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004238:	431a      	orrs	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	431a      	orrs	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004260:	431a      	orrs	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800426a:	431a      	orrs	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004274:	ea42 0103 	orr.w	r1, r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	0c1b      	lsrs	r3, r3, #16
 800428e:	f003 0104 	and.w	r1, r3, #4
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	f003 0210 	and.w	r2, r3, #16
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69da      	ldr	r2, [r3, #28]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b082      	sub	sp, #8
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e01a      	b.n	8004312 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042f2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7fe f969 	bl	80025cc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b088      	sub	sp, #32
 800431e:	af00      	add	r7, sp, #0
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	603b      	str	r3, [r7, #0]
 8004326:	4613      	mov	r3, r2
 8004328:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <HAL_SPI_Transmit+0x22>
 8004338:	2302      	movs	r3, #2
 800433a:	e126      	b.n	800458a <HAL_SPI_Transmit+0x270>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004344:	f7fe fa4e 	bl	80027e4 <HAL_GetTick>
 8004348:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800434a:	88fb      	ldrh	r3, [r7, #6]
 800434c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b01      	cmp	r3, #1
 8004358:	d002      	beq.n	8004360 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800435a:	2302      	movs	r3, #2
 800435c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800435e:	e10b      	b.n	8004578 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <HAL_SPI_Transmit+0x52>
 8004366:	88fb      	ldrh	r3, [r7, #6]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d102      	bne.n	8004372 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004370:	e102      	b.n	8004578 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2203      	movs	r2, #3
 8004376:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	88fa      	ldrh	r2, [r7, #6]
 800438a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	88fa      	ldrh	r2, [r7, #6]
 8004390:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b8:	d10f      	bne.n	80043da <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e4:	2b40      	cmp	r3, #64	; 0x40
 80043e6:	d007      	beq.n	80043f8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004400:	d14b      	bne.n	800449a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <HAL_SPI_Transmit+0xf6>
 800440a:	8afb      	ldrh	r3, [r7, #22]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d13e      	bne.n	800448e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004414:	881a      	ldrh	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004420:	1c9a      	adds	r2, r3, #2
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800442a:	b29b      	uxth	r3, r3
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004434:	e02b      	b.n	800448e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b02      	cmp	r3, #2
 8004442:	d112      	bne.n	800446a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004448:	881a      	ldrh	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004454:	1c9a      	adds	r2, r3, #2
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	86da      	strh	r2, [r3, #54]	; 0x36
 8004468:	e011      	b.n	800448e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800446a:	f7fe f9bb 	bl	80027e4 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d803      	bhi.n	8004482 <HAL_SPI_Transmit+0x168>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004480:	d102      	bne.n	8004488 <HAL_SPI_Transmit+0x16e>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d102      	bne.n	800448e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800448c:	e074      	b.n	8004578 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1ce      	bne.n	8004436 <HAL_SPI_Transmit+0x11c>
 8004498:	e04c      	b.n	8004534 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d002      	beq.n	80044a8 <HAL_SPI_Transmit+0x18e>
 80044a2:	8afb      	ldrh	r3, [r7, #22]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d140      	bne.n	800452a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	330c      	adds	r3, #12
 80044b2:	7812      	ldrb	r2, [r2, #0]
 80044b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80044ce:	e02c      	b.n	800452a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d113      	bne.n	8004506 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	330c      	adds	r3, #12
 80044e8:	7812      	ldrb	r2, [r2, #0]
 80044ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	3b01      	subs	r3, #1
 80044fe:	b29a      	uxth	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	86da      	strh	r2, [r3, #54]	; 0x36
 8004504:	e011      	b.n	800452a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004506:	f7fe f96d 	bl	80027e4 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	d803      	bhi.n	800451e <HAL_SPI_Transmit+0x204>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451c:	d102      	bne.n	8004524 <HAL_SPI_Transmit+0x20a>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d102      	bne.n	800452a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004528:	e026      	b.n	8004578 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800452e:	b29b      	uxth	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1cd      	bne.n	80044d0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	6839      	ldr	r1, [r7, #0]
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 fbd9 	bl	8004cf0 <SPI_EndRxTxTransaction>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d002      	beq.n	800454a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2220      	movs	r2, #32
 8004548:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10a      	bne.n	8004568 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004552:	2300      	movs	r3, #0
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	613b      	str	r3, [r7, #16]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	613b      	str	r3, [r7, #16]
 8004566:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	77fb      	strb	r3, [r7, #31]
 8004574:	e000      	b.n	8004578 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004576:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004588:	7ffb      	ldrb	r3, [r7, #31]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3720      	adds	r7, #32
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b088      	sub	sp, #32
 8004596:	af02      	add	r7, sp, #8
 8004598:	60f8      	str	r0, [r7, #12]
 800459a:	60b9      	str	r1, [r7, #8]
 800459c:	603b      	str	r3, [r7, #0]
 800459e:	4613      	mov	r3, r2
 80045a0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ae:	d112      	bne.n	80045d6 <HAL_SPI_Receive+0x44>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10e      	bne.n	80045d6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2204      	movs	r2, #4
 80045bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80045c0:	88fa      	ldrh	r2, [r7, #6]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	4613      	mov	r3, r2
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	68b9      	ldr	r1, [r7, #8]
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 f8f1 	bl	80047b4 <HAL_SPI_TransmitReceive>
 80045d2:	4603      	mov	r3, r0
 80045d4:	e0ea      	b.n	80047ac <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_SPI_Receive+0x52>
 80045e0:	2302      	movs	r3, #2
 80045e2:	e0e3      	b.n	80047ac <HAL_SPI_Receive+0x21a>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045ec:	f7fe f8fa 	bl	80027e4 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d002      	beq.n	8004604 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80045fe:	2302      	movs	r3, #2
 8004600:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004602:	e0ca      	b.n	800479a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d002      	beq.n	8004610 <HAL_SPI_Receive+0x7e>
 800460a:	88fb      	ldrh	r3, [r7, #6]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d102      	bne.n	8004616 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004614:	e0c1      	b.n	800479a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2204      	movs	r2, #4
 800461a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	88fa      	ldrh	r2, [r7, #6]
 800462e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	88fa      	ldrh	r2, [r7, #6]
 8004634:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800465c:	d10f      	bne.n	800467e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800466c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800467c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004688:	2b40      	cmp	r3, #64	; 0x40
 800468a:	d007      	beq.n	800469c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800469a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d162      	bne.n	800476a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80046a4:	e02e      	b.n	8004704 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d115      	bne.n	80046e0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f103 020c 	add.w	r2, r3, #12
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c0:	7812      	ldrb	r2, [r2, #0]
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	3b01      	subs	r3, #1
 80046d8:	b29a      	uxth	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046de:	e011      	b.n	8004704 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046e0:	f7fe f880 	bl	80027e4 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d803      	bhi.n	80046f8 <HAL_SPI_Receive+0x166>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f6:	d102      	bne.n	80046fe <HAL_SPI_Receive+0x16c>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d102      	bne.n	8004704 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004702:	e04a      	b.n	800479a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004708:	b29b      	uxth	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1cb      	bne.n	80046a6 <HAL_SPI_Receive+0x114>
 800470e:	e031      	b.n	8004774 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b01      	cmp	r3, #1
 800471c:	d113      	bne.n	8004746 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004728:	b292      	uxth	r2, r2
 800472a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	1c9a      	adds	r2, r3, #2
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800473a:	b29b      	uxth	r3, r3
 800473c:	3b01      	subs	r3, #1
 800473e:	b29a      	uxth	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004744:	e011      	b.n	800476a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004746:	f7fe f84d 	bl	80027e4 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	429a      	cmp	r2, r3
 8004754:	d803      	bhi.n	800475e <HAL_SPI_Receive+0x1cc>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475c:	d102      	bne.n	8004764 <HAL_SPI_Receive+0x1d2>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d102      	bne.n	800476a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004768:	e017      	b.n	800479a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800476e:	b29b      	uxth	r3, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1cd      	bne.n	8004710 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	6839      	ldr	r1, [r7, #0]
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f000 fa53 	bl	8004c24 <SPI_EndRxTransaction>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d002      	beq.n	800478a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2220      	movs	r2, #32
 8004788:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478e:	2b00      	cmp	r3, #0
 8004790:	d002      	beq.n	8004798 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	75fb      	strb	r3, [r7, #23]
 8004796:	e000      	b.n	800479a <HAL_SPI_Receive+0x208>
  }

error :
 8004798:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08c      	sub	sp, #48	; 0x30
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
 80047c0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80047c2:	2301      	movs	r3, #1
 80047c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d101      	bne.n	80047da <HAL_SPI_TransmitReceive+0x26>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e18a      	b.n	8004af0 <HAL_SPI_TransmitReceive+0x33c>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047e2:	f7fd ffff 	bl	80027e4 <HAL_GetTick>
 80047e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80047f8:	887b      	ldrh	r3, [r7, #2]
 80047fa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004800:	2b01      	cmp	r3, #1
 8004802:	d00f      	beq.n	8004824 <HAL_SPI_TransmitReceive+0x70>
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800480a:	d107      	bne.n	800481c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d103      	bne.n	800481c <HAL_SPI_TransmitReceive+0x68>
 8004814:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004818:	2b04      	cmp	r3, #4
 800481a:	d003      	beq.n	8004824 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800481c:	2302      	movs	r3, #2
 800481e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004822:	e15b      	b.n	8004adc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d005      	beq.n	8004836 <HAL_SPI_TransmitReceive+0x82>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d002      	beq.n	8004836 <HAL_SPI_TransmitReceive+0x82>
 8004830:	887b      	ldrh	r3, [r7, #2]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d103      	bne.n	800483e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800483c:	e14e      	b.n	8004adc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b04      	cmp	r3, #4
 8004848:	d003      	beq.n	8004852 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2205      	movs	r2, #5
 800484e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	887a      	ldrh	r2, [r7, #2]
 8004862:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	887a      	ldrh	r2, [r7, #2]
 8004868:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	887a      	ldrh	r2, [r7, #2]
 8004874:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	887a      	ldrh	r2, [r7, #2]
 800487a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004892:	2b40      	cmp	r3, #64	; 0x40
 8004894:	d007      	beq.n	80048a6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ae:	d178      	bne.n	80049a2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <HAL_SPI_TransmitReceive+0x10a>
 80048b8:	8b7b      	ldrh	r3, [r7, #26]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d166      	bne.n	800498c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c2:	881a      	ldrh	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ce:	1c9a      	adds	r2, r3, #2
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048e2:	e053      	b.n	800498c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d11b      	bne.n	800492a <HAL_SPI_TransmitReceive+0x176>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d016      	beq.n	800492a <HAL_SPI_TransmitReceive+0x176>
 80048fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d113      	bne.n	800492a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004906:	881a      	ldrh	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004912:	1c9a      	adds	r2, r3, #2
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800491c:	b29b      	uxth	r3, r3
 800491e:	3b01      	subs	r3, #1
 8004920:	b29a      	uxth	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b01      	cmp	r3, #1
 8004936:	d119      	bne.n	800496c <HAL_SPI_TransmitReceive+0x1b8>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800493c:	b29b      	uxth	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d014      	beq.n	800496c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494c:	b292      	uxth	r2, r2
 800494e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004954:	1c9a      	adds	r2, r3, #2
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800495e:	b29b      	uxth	r3, r3
 8004960:	3b01      	subs	r3, #1
 8004962:	b29a      	uxth	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004968:	2301      	movs	r3, #1
 800496a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800496c:	f7fd ff3a 	bl	80027e4 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004978:	429a      	cmp	r2, r3
 800497a:	d807      	bhi.n	800498c <HAL_SPI_TransmitReceive+0x1d8>
 800497c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004982:	d003      	beq.n	800498c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800498a:	e0a7      	b.n	8004adc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004990:	b29b      	uxth	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1a6      	bne.n	80048e4 <HAL_SPI_TransmitReceive+0x130>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800499a:	b29b      	uxth	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1a1      	bne.n	80048e4 <HAL_SPI_TransmitReceive+0x130>
 80049a0:	e07c      	b.n	8004a9c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <HAL_SPI_TransmitReceive+0x1fc>
 80049aa:	8b7b      	ldrh	r3, [r7, #26]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d16b      	bne.n	8004a88 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	330c      	adds	r3, #12
 80049ba:	7812      	ldrb	r2, [r2, #0]
 80049bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c2:	1c5a      	adds	r2, r3, #1
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049d6:	e057      	b.n	8004a88 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d11c      	bne.n	8004a20 <HAL_SPI_TransmitReceive+0x26c>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d017      	beq.n	8004a20 <HAL_SPI_TransmitReceive+0x26c>
 80049f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d114      	bne.n	8004a20 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	330c      	adds	r3, #12
 8004a00:	7812      	ldrb	r2, [r2, #0]
 8004a02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d119      	bne.n	8004a62 <HAL_SPI_TransmitReceive+0x2ae>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d014      	beq.n	8004a62 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68da      	ldr	r2, [r3, #12]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4a:	1c5a      	adds	r2, r3, #1
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	3b01      	subs	r3, #1
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a62:	f7fd febf 	bl	80027e4 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d803      	bhi.n	8004a7a <HAL_SPI_TransmitReceive+0x2c6>
 8004a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a78:	d102      	bne.n	8004a80 <HAL_SPI_TransmitReceive+0x2cc>
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d103      	bne.n	8004a88 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004a86:	e029      	b.n	8004adc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1a2      	bne.n	80049d8 <HAL_SPI_TransmitReceive+0x224>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d19d      	bne.n	80049d8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 f925 	bl	8004cf0 <SPI_EndRxTxTransaction>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d006      	beq.n	8004aba <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004ab8:	e010      	b.n	8004adc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10b      	bne.n	8004ada <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	617b      	str	r3, [r7, #20]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	617b      	str	r3, [r7, #20]
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	e000      	b.n	8004adc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004ada:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004aec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3730      	adds	r7, #48	; 0x30
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b06:	b2db      	uxtb	r3, r3
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	4613      	mov	r3, r2
 8004b22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b24:	f7fd fe5e 	bl	80027e4 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2c:	1a9b      	subs	r3, r3, r2
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	4413      	add	r3, r2
 8004b32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b34:	f7fd fe56 	bl	80027e4 <HAL_GetTick>
 8004b38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b3a:	4b39      	ldr	r3, [pc, #228]	; (8004c20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	015b      	lsls	r3, r3, #5
 8004b40:	0d1b      	lsrs	r3, r3, #20
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	fb02 f303 	mul.w	r3, r2, r3
 8004b48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b4a:	e054      	b.n	8004bf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b52:	d050      	beq.n	8004bf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b54:	f7fd fe46 	bl	80027e4 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	69fa      	ldr	r2, [r7, #28]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d902      	bls.n	8004b6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d13d      	bne.n	8004be6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b82:	d111      	bne.n	8004ba8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b8c:	d004      	beq.n	8004b98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b96:	d107      	bne.n	8004ba8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ba6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb0:	d10f      	bne.n	8004bd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e017      	b.n	8004c16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	bf0c      	ite	eq
 8004c06:	2301      	moveq	r3, #1
 8004c08:	2300      	movne	r3, #0
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d19b      	bne.n	8004b4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3720      	adds	r7, #32
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	20000010 	.word	0x20000010

08004c24 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af02      	add	r7, sp, #8
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c38:	d111      	bne.n	8004c5e <SPI_EndRxTransaction+0x3a>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c42:	d004      	beq.n	8004c4e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c4c:	d107      	bne.n	8004c5e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c5c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c66:	d12a      	bne.n	8004cbe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c70:	d012      	beq.n	8004c98 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	2180      	movs	r1, #128	; 0x80
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f7ff ff49 	bl	8004b14 <SPI_WaitFlagStateUntilTimeout>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d02d      	beq.n	8004ce4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8c:	f043 0220 	orr.w	r2, r3, #32
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e026      	b.n	8004ce6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f7ff ff36 	bl	8004b14 <SPI_WaitFlagStateUntilTimeout>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d01a      	beq.n	8004ce4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb2:	f043 0220 	orr.w	r2, r3, #32
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e013      	b.n	8004ce6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f7ff ff23 	bl	8004b14 <SPI_WaitFlagStateUntilTimeout>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d007      	beq.n	8004ce4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd8:	f043 0220 	orr.w	r2, r3, #32
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e000      	b.n	8004ce6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
	...

08004cf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b088      	sub	sp, #32
 8004cf4:	af02      	add	r7, sp, #8
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004cfc:	4b1b      	ldr	r3, [pc, #108]	; (8004d6c <SPI_EndRxTxTransaction+0x7c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a1b      	ldr	r2, [pc, #108]	; (8004d70 <SPI_EndRxTxTransaction+0x80>)
 8004d02:	fba2 2303 	umull	r2, r3, r2, r3
 8004d06:	0d5b      	lsrs	r3, r3, #21
 8004d08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d0c:	fb02 f303 	mul.w	r3, r2, r3
 8004d10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d1a:	d112      	bne.n	8004d42 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2200      	movs	r2, #0
 8004d24:	2180      	movs	r1, #128	; 0x80
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f7ff fef4 	bl	8004b14 <SPI_WaitFlagStateUntilTimeout>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d016      	beq.n	8004d60 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d36:	f043 0220 	orr.w	r2, r3, #32
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e00f      	b.n	8004d62 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d58:	2b80      	cmp	r3, #128	; 0x80
 8004d5a:	d0f2      	beq.n	8004d42 <SPI_EndRxTxTransaction+0x52>
 8004d5c:	e000      	b.n	8004d60 <SPI_EndRxTxTransaction+0x70>
        break;
 8004d5e:	bf00      	nop
  }

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	20000010 	.word	0x20000010
 8004d70:	165e9f81 	.word	0x165e9f81

08004d74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e041      	b.n	8004e0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d106      	bne.n	8004da0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7fd fc34 	bl	8002608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3304      	adds	r3, #4
 8004db0:	4619      	mov	r1, r3
 8004db2:	4610      	mov	r0, r2
 8004db4:	f000 f82e 	bl	8004e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3708      	adds	r7, #8
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a40      	ldr	r2, [pc, #256]	; (8004f28 <TIM_Base_SetConfig+0x114>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d013      	beq.n	8004e54 <TIM_Base_SetConfig+0x40>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e32:	d00f      	beq.n	8004e54 <TIM_Base_SetConfig+0x40>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a3d      	ldr	r2, [pc, #244]	; (8004f2c <TIM_Base_SetConfig+0x118>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d00b      	beq.n	8004e54 <TIM_Base_SetConfig+0x40>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a3c      	ldr	r2, [pc, #240]	; (8004f30 <TIM_Base_SetConfig+0x11c>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d007      	beq.n	8004e54 <TIM_Base_SetConfig+0x40>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a3b      	ldr	r2, [pc, #236]	; (8004f34 <TIM_Base_SetConfig+0x120>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d003      	beq.n	8004e54 <TIM_Base_SetConfig+0x40>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a3a      	ldr	r2, [pc, #232]	; (8004f38 <TIM_Base_SetConfig+0x124>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d108      	bne.n	8004e66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a2f      	ldr	r2, [pc, #188]	; (8004f28 <TIM_Base_SetConfig+0x114>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d02b      	beq.n	8004ec6 <TIM_Base_SetConfig+0xb2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e74:	d027      	beq.n	8004ec6 <TIM_Base_SetConfig+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a2c      	ldr	r2, [pc, #176]	; (8004f2c <TIM_Base_SetConfig+0x118>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d023      	beq.n	8004ec6 <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a2b      	ldr	r2, [pc, #172]	; (8004f30 <TIM_Base_SetConfig+0x11c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d01f      	beq.n	8004ec6 <TIM_Base_SetConfig+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a2a      	ldr	r2, [pc, #168]	; (8004f34 <TIM_Base_SetConfig+0x120>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d01b      	beq.n	8004ec6 <TIM_Base_SetConfig+0xb2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a29      	ldr	r2, [pc, #164]	; (8004f38 <TIM_Base_SetConfig+0x124>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d017      	beq.n	8004ec6 <TIM_Base_SetConfig+0xb2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a28      	ldr	r2, [pc, #160]	; (8004f3c <TIM_Base_SetConfig+0x128>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d013      	beq.n	8004ec6 <TIM_Base_SetConfig+0xb2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a27      	ldr	r2, [pc, #156]	; (8004f40 <TIM_Base_SetConfig+0x12c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d00f      	beq.n	8004ec6 <TIM_Base_SetConfig+0xb2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a26      	ldr	r2, [pc, #152]	; (8004f44 <TIM_Base_SetConfig+0x130>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00b      	beq.n	8004ec6 <TIM_Base_SetConfig+0xb2>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a25      	ldr	r2, [pc, #148]	; (8004f48 <TIM_Base_SetConfig+0x134>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d007      	beq.n	8004ec6 <TIM_Base_SetConfig+0xb2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a24      	ldr	r2, [pc, #144]	; (8004f4c <TIM_Base_SetConfig+0x138>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d003      	beq.n	8004ec6 <TIM_Base_SetConfig+0xb2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a23      	ldr	r2, [pc, #140]	; (8004f50 <TIM_Base_SetConfig+0x13c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d108      	bne.n	8004ed8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ecc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a0a      	ldr	r2, [pc, #40]	; (8004f28 <TIM_Base_SetConfig+0x114>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d003      	beq.n	8004f0c <TIM_Base_SetConfig+0xf8>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a0c      	ldr	r2, [pc, #48]	; (8004f38 <TIM_Base_SetConfig+0x124>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d103      	bne.n	8004f14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	691a      	ldr	r2, [r3, #16]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	615a      	str	r2, [r3, #20]
}
 8004f1a:	bf00      	nop
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	40010000 	.word	0x40010000
 8004f2c:	40000400 	.word	0x40000400
 8004f30:	40000800 	.word	0x40000800
 8004f34:	40000c00 	.word	0x40000c00
 8004f38:	40010400 	.word	0x40010400
 8004f3c:	40014000 	.word	0x40014000
 8004f40:	40014400 	.word	0x40014400
 8004f44:	40014800 	.word	0x40014800
 8004f48:	40001800 	.word	0x40001800
 8004f4c:	40001c00 	.word	0x40001c00
 8004f50:	40002000 	.word	0x40002000

08004f54 <__NVIC_SetPriority>:
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	6039      	str	r1, [r7, #0]
 8004f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	db0a      	blt.n	8004f7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	b2da      	uxtb	r2, r3
 8004f6c:	490c      	ldr	r1, [pc, #48]	; (8004fa0 <__NVIC_SetPriority+0x4c>)
 8004f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f72:	0112      	lsls	r2, r2, #4
 8004f74:	b2d2      	uxtb	r2, r2
 8004f76:	440b      	add	r3, r1
 8004f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004f7c:	e00a      	b.n	8004f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	4908      	ldr	r1, [pc, #32]	; (8004fa4 <__NVIC_SetPriority+0x50>)
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	f003 030f 	and.w	r3, r3, #15
 8004f8a:	3b04      	subs	r3, #4
 8004f8c:	0112      	lsls	r2, r2, #4
 8004f8e:	b2d2      	uxtb	r2, r2
 8004f90:	440b      	add	r3, r1
 8004f92:	761a      	strb	r2, [r3, #24]
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	e000e100 	.word	0xe000e100
 8004fa4:	e000ed00 	.word	0xe000ed00

08004fa8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004fac:	2100      	movs	r1, #0
 8004fae:	f06f 0004 	mvn.w	r0, #4
 8004fb2:	f7ff ffcf 	bl	8004f54 <__NVIC_SetPriority>
#endif
}
 8004fb6:	bf00      	nop
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fc2:	f3ef 8305 	mrs	r3, IPSR
 8004fc6:	603b      	str	r3, [r7, #0]
  return(result);
 8004fc8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004fce:	f06f 0305 	mvn.w	r3, #5
 8004fd2:	607b      	str	r3, [r7, #4]
 8004fd4:	e00c      	b.n	8004ff0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004fd6:	4b0a      	ldr	r3, [pc, #40]	; (8005000 <osKernelInitialize+0x44>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d105      	bne.n	8004fea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004fde:	4b08      	ldr	r3, [pc, #32]	; (8005000 <osKernelInitialize+0x44>)
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	607b      	str	r3, [r7, #4]
 8004fe8:	e002      	b.n	8004ff0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004fea:	f04f 33ff 	mov.w	r3, #4294967295
 8004fee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ff0:	687b      	ldr	r3, [r7, #4]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	200272fc 	.word	0x200272fc

08005004 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800500a:	f3ef 8305 	mrs	r3, IPSR
 800500e:	603b      	str	r3, [r7, #0]
  return(result);
 8005010:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005016:	f06f 0305 	mvn.w	r3, #5
 800501a:	607b      	str	r3, [r7, #4]
 800501c:	e010      	b.n	8005040 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800501e:	4b0b      	ldr	r3, [pc, #44]	; (800504c <osKernelStart+0x48>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d109      	bne.n	800503a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005026:	f7ff ffbf 	bl	8004fa8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800502a:	4b08      	ldr	r3, [pc, #32]	; (800504c <osKernelStart+0x48>)
 800502c:	2202      	movs	r2, #2
 800502e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005030:	f002 fb54 	bl	80076dc <vTaskStartScheduler>
      stat = osOK;
 8005034:	2300      	movs	r3, #0
 8005036:	607b      	str	r3, [r7, #4]
 8005038:	e002      	b.n	8005040 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800503a:	f04f 33ff 	mov.w	r3, #4294967295
 800503e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005040:	687b      	ldr	r3, [r7, #4]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	200272fc 	.word	0x200272fc

08005050 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005050:	b580      	push	{r7, lr}
 8005052:	b08e      	sub	sp, #56	; 0x38
 8005054:	af04      	add	r7, sp, #16
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800505c:	2300      	movs	r3, #0
 800505e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005060:	f3ef 8305 	mrs	r3, IPSR
 8005064:	617b      	str	r3, [r7, #20]
  return(result);
 8005066:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005068:	2b00      	cmp	r3, #0
 800506a:	d17e      	bne.n	800516a <osThreadNew+0x11a>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d07b      	beq.n	800516a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005072:	2380      	movs	r3, #128	; 0x80
 8005074:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005076:	2318      	movs	r3, #24
 8005078:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800507a:	2300      	movs	r3, #0
 800507c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800507e:	f04f 33ff 	mov.w	r3, #4294967295
 8005082:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d045      	beq.n	8005116 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <osThreadNew+0x48>
        name = attr->name;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d008      	beq.n	80050be <osThreadNew+0x6e>
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	2b38      	cmp	r3, #56	; 0x38
 80050b0:	d805      	bhi.n	80050be <osThreadNew+0x6e>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <osThreadNew+0x72>
        return (NULL);
 80050be:	2300      	movs	r3, #0
 80050c0:	e054      	b.n	800516c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	089b      	lsrs	r3, r3, #2
 80050d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00e      	beq.n	80050f8 <osThreadNew+0xa8>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	2ba7      	cmp	r3, #167	; 0xa7
 80050e0:	d90a      	bls.n	80050f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d006      	beq.n	80050f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <osThreadNew+0xa8>
        mem = 1;
 80050f2:	2301      	movs	r3, #1
 80050f4:	61bb      	str	r3, [r7, #24]
 80050f6:	e010      	b.n	800511a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10c      	bne.n	800511a <osThreadNew+0xca>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d108      	bne.n	800511a <osThreadNew+0xca>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d104      	bne.n	800511a <osThreadNew+0xca>
          mem = 0;
 8005110:	2300      	movs	r3, #0
 8005112:	61bb      	str	r3, [r7, #24]
 8005114:	e001      	b.n	800511a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005116:	2300      	movs	r3, #0
 8005118:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d110      	bne.n	8005142 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005128:	9202      	str	r2, [sp, #8]
 800512a:	9301      	str	r3, [sp, #4]
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	6a3a      	ldr	r2, [r7, #32]
 8005134:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f002 f8c2 	bl	80072c0 <xTaskCreateStatic>
 800513c:	4603      	mov	r3, r0
 800513e:	613b      	str	r3, [r7, #16]
 8005140:	e013      	b.n	800516a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d110      	bne.n	800516a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	b29a      	uxth	r2, r3
 800514c:	f107 0310 	add.w	r3, r7, #16
 8005150:	9301      	str	r3, [sp, #4]
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f002 f90d 	bl	800737a <xTaskCreate>
 8005160:	4603      	mov	r3, r0
 8005162:	2b01      	cmp	r3, #1
 8005164:	d001      	beq.n	800516a <osThreadNew+0x11a>
            hTask = NULL;
 8005166:	2300      	movs	r3, #0
 8005168:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800516a:	693b      	ldr	r3, [r7, #16]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3728      	adds	r7, #40	; 0x28
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800517c:	f3ef 8305 	mrs	r3, IPSR
 8005180:	60bb      	str	r3, [r7, #8]
  return(result);
 8005182:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <osDelay+0x1c>
    stat = osErrorISR;
 8005188:	f06f 0305 	mvn.w	r3, #5
 800518c:	60fb      	str	r3, [r7, #12]
 800518e:	e007      	b.n	80051a0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005190:	2300      	movs	r3, #0
 8005192:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d002      	beq.n	80051a0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f002 fa66 	bl	800766c <vTaskDelay>
    }
  }

  return (stat);
 80051a0:	68fb      	ldr	r3, [r7, #12]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b084      	sub	sp, #16
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f003 fe3f 	bl	8008e36 <pvTimerGetTimerID>
 80051b8:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d005      	beq.n	80051cc <TimerCallback+0x22>
    callb->func (callb->arg);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	6852      	ldr	r2, [r2, #4]
 80051c8:	4610      	mov	r0, r2
 80051ca:	4798      	blx	r3
  }
}
 80051cc:	bf00      	nop
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08c      	sub	sp, #48	; 0x30
 80051d8:	af02      	add	r7, sp, #8
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	607a      	str	r2, [r7, #4]
 80051de:	603b      	str	r3, [r7, #0]
 80051e0:	460b      	mov	r3, r1
 80051e2:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80051e4:	2300      	movs	r3, #0
 80051e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051e8:	f3ef 8305 	mrs	r3, IPSR
 80051ec:	613b      	str	r3, [r7, #16]
  return(result);
 80051ee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d163      	bne.n	80052bc <osTimerNew+0xe8>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d060      	beq.n	80052bc <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80051fa:	2008      	movs	r0, #8
 80051fc:	f004 f8ac 	bl	8009358 <pvPortMalloc>
 8005200:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d059      	beq.n	80052bc <osTimerNew+0xe8>
      callb->func = func;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8005214:	7afb      	ldrb	r3, [r7, #11]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d102      	bne.n	8005220 <osTimerNew+0x4c>
        reload = pdFALSE;
 800521a:	2300      	movs	r3, #0
 800521c:	61fb      	str	r3, [r7, #28]
 800521e:	e001      	b.n	8005224 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8005220:	2301      	movs	r3, #1
 8005222:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8005224:	f04f 33ff 	mov.w	r3, #4294967295
 8005228:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800522a:	2300      	movs	r3, #0
 800522c:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d01c      	beq.n	800526e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d002      	beq.n	8005242 <osTimerNew+0x6e>
          name = attr->name;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d006      	beq.n	8005258 <osTimerNew+0x84>
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	2b2b      	cmp	r3, #43	; 0x2b
 8005250:	d902      	bls.n	8005258 <osTimerNew+0x84>
          mem = 1;
 8005252:	2301      	movs	r3, #1
 8005254:	61bb      	str	r3, [r7, #24]
 8005256:	e00c      	b.n	8005272 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d108      	bne.n	8005272 <osTimerNew+0x9e>
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d104      	bne.n	8005272 <osTimerNew+0x9e>
            mem = 0;
 8005268:	2300      	movs	r3, #0
 800526a:	61bb      	str	r3, [r7, #24]
 800526c:	e001      	b.n	8005272 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800526e:	2300      	movs	r3, #0
 8005270:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d10c      	bne.n	8005292 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	9301      	str	r3, [sp, #4]
 800527e:	4b12      	ldr	r3, [pc, #72]	; (80052c8 <osTimerNew+0xf4>)
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	69fa      	ldr	r2, [r7, #28]
 8005286:	2101      	movs	r1, #1
 8005288:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800528a:	f003 fa2c 	bl	80086e6 <xTimerCreateStatic>
 800528e:	6238      	str	r0, [r7, #32]
 8005290:	e00b      	b.n	80052aa <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d108      	bne.n	80052aa <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8005298:	4b0b      	ldr	r3, [pc, #44]	; (80052c8 <osTimerNew+0xf4>)
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	69fa      	ldr	r2, [r7, #28]
 80052a0:	2101      	movs	r1, #1
 80052a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052a4:	f003 f9fe 	bl	80086a4 <xTimerCreate>
 80052a8:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d105      	bne.n	80052bc <osTimerNew+0xe8>
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <osTimerNew+0xe8>
        vPortFree (callb);
 80052b6:	6978      	ldr	r0, [r7, #20]
 80052b8:	f004 f91a 	bl	80094f0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80052bc:	6a3b      	ldr	r3, [r7, #32]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3728      	adds	r7, #40	; 0x28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	080051ab 	.word	0x080051ab

080052cc <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b088      	sub	sp, #32
 80052d0:	af02      	add	r7, sp, #8
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052da:	f3ef 8305 	mrs	r3, IPSR
 80052de:	60fb      	str	r3, [r7, #12]
  return(result);
 80052e0:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <osTimerStart+0x22>
    stat = osErrorISR;
 80052e6:	f06f 0305 	mvn.w	r3, #5
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	e017      	b.n	800531e <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d103      	bne.n	80052fc <osTimerStart+0x30>
    stat = osErrorParameter;
 80052f4:	f06f 0303 	mvn.w	r3, #3
 80052f8:	617b      	str	r3, [r7, #20]
 80052fa:	e010      	b.n	800531e <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80052fc:	2300      	movs	r3, #0
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	2300      	movs	r3, #0
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	2104      	movs	r1, #4
 8005306:	6938      	ldr	r0, [r7, #16]
 8005308:	f003 fa66 	bl	80087d8 <xTimerGenericCommand>
 800530c:	4603      	mov	r3, r0
 800530e:	2b01      	cmp	r3, #1
 8005310:	d102      	bne.n	8005318 <osTimerStart+0x4c>
      stat = osOK;
 8005312:	2300      	movs	r3, #0
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	e002      	b.n	800531e <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8005318:	f06f 0302 	mvn.w	r3, #2
 800531c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800531e:	697b      	ldr	r3, [r7, #20]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3718      	adds	r7, #24
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b088      	sub	sp, #32
 800532c:	af02      	add	r7, sp, #8
 800532e:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005334:	f3ef 8305 	mrs	r3, IPSR
 8005338:	60fb      	str	r3, [r7, #12]
  return(result);
 800533a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <osTimerStop+0x20>
    stat = osErrorISR;
 8005340:	f06f 0305 	mvn.w	r3, #5
 8005344:	617b      	str	r3, [r7, #20]
 8005346:	e021      	b.n	800538c <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d103      	bne.n	8005356 <osTimerStop+0x2e>
    stat = osErrorParameter;
 800534e:	f06f 0303 	mvn.w	r3, #3
 8005352:	617b      	str	r3, [r7, #20]
 8005354:	e01a      	b.n	800538c <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 8005356:	6938      	ldr	r0, [r7, #16]
 8005358:	f003 fd44 	bl	8008de4 <xTimerIsTimerActive>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d103      	bne.n	800536a <osTimerStop+0x42>
      stat = osErrorResource;
 8005362:	f06f 0302 	mvn.w	r3, #2
 8005366:	617b      	str	r3, [r7, #20]
 8005368:	e010      	b.n	800538c <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800536a:	2300      	movs	r3, #0
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	2300      	movs	r3, #0
 8005370:	2200      	movs	r2, #0
 8005372:	2103      	movs	r1, #3
 8005374:	6938      	ldr	r0, [r7, #16]
 8005376:	f003 fa2f 	bl	80087d8 <xTimerGenericCommand>
 800537a:	4603      	mov	r3, r0
 800537c:	2b01      	cmp	r3, #1
 800537e:	d102      	bne.n	8005386 <osTimerStop+0x5e>
        stat = osOK;
 8005380:	2300      	movs	r3, #0
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	e002      	b.n	800538c <osTimerStop+0x64>
      } else {
        stat = osError;
 8005386:	f04f 33ff 	mov.w	r3, #4294967295
 800538a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800538c:	697b      	ldr	r3, [r7, #20]
}
 800538e:	4618      	mov	r0, r3
 8005390:	3718      	adds	r7, #24
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8005396:	b580      	push	{r7, lr}
 8005398:	b086      	sub	sp, #24
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053a2:	f3ef 8305 	mrs	r3, IPSR
 80053a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80053a8:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d12d      	bne.n	800540a <osEventFlagsNew+0x74>
    mem = -1;
 80053ae:	f04f 33ff 	mov.w	r3, #4294967295
 80053b2:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d015      	beq.n	80053e6 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d006      	beq.n	80053d0 <osEventFlagsNew+0x3a>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	2b1f      	cmp	r3, #31
 80053c8:	d902      	bls.n	80053d0 <osEventFlagsNew+0x3a>
        mem = 1;
 80053ca:	2301      	movs	r3, #1
 80053cc:	613b      	str	r3, [r7, #16]
 80053ce:	e00c      	b.n	80053ea <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d108      	bne.n	80053ea <osEventFlagsNew+0x54>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d104      	bne.n	80053ea <osEventFlagsNew+0x54>
          mem = 0;
 80053e0:	2300      	movs	r3, #0
 80053e2:	613b      	str	r3, [r7, #16]
 80053e4:	e001      	b.n	80053ea <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d106      	bne.n	80053fe <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 fb19 	bl	8005a2c <xEventGroupCreateStatic>
 80053fa:	6178      	str	r0, [r7, #20]
 80053fc:	e005      	b.n	800540a <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d102      	bne.n	800540a <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8005404:	f000 fb49 	bl	8005a9a <xEventGroupCreate>
 8005408:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800540a:	697b      	ldr	r3, [r7, #20]
}
 800540c:	4618      	mov	r0, r3
 800540e:	3718      	adds	r7, #24
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d004      	beq.n	8005432 <osEventFlagsSet+0x1e>
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8005432:	f06f 0303 	mvn.w	r3, #3
 8005436:	617b      	str	r3, [r7, #20]
 8005438:	e028      	b.n	800548c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800543a:	f3ef 8305 	mrs	r3, IPSR
 800543e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005440:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005442:	2b00      	cmp	r3, #0
 8005444:	d01d      	beq.n	8005482 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8005446:	2300      	movs	r3, #0
 8005448:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800544a:	f107 0308 	add.w	r3, r7, #8
 800544e:	461a      	mov	r2, r3
 8005450:	6839      	ldr	r1, [r7, #0]
 8005452:	6938      	ldr	r0, [r7, #16]
 8005454:	f000 fcc4 	bl	8005de0 <xEventGroupSetBitsFromISR>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d103      	bne.n	8005466 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800545e:	f06f 0302 	mvn.w	r3, #2
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	e012      	b.n	800548c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00d      	beq.n	800548c <osEventFlagsSet+0x78>
 8005470:	4b09      	ldr	r3, [pc, #36]	; (8005498 <osEventFlagsSet+0x84>)
 8005472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	e004      	b.n	800548c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8005482:	6839      	ldr	r1, [r7, #0]
 8005484:	6938      	ldr	r0, [r7, #16]
 8005486:	f000 fbf1 	bl	8005c6c <xEventGroupSetBits>
 800548a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800548c:	697b      	ldr	r3, [r7, #20]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	e000ed04 	.word	0xe000ed04

0800549c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800549c:	b580      	push	{r7, lr}
 800549e:	b08c      	sub	sp, #48	; 0x30
 80054a0:	af02      	add	r7, sp, #8
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d004      	beq.n	80054be <osEventFlagsWait+0x22>
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80054be:	f06f 0303 	mvn.w	r3, #3
 80054c2:	61fb      	str	r3, [r7, #28]
 80054c4:	e04b      	b.n	800555e <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054c6:	f3ef 8305 	mrs	r3, IPSR
 80054ca:	617b      	str	r3, [r7, #20]
  return(result);
 80054cc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80054d2:	f06f 0305 	mvn.w	r3, #5
 80054d6:	61fb      	str	r3, [r7, #28]
 80054d8:	e041      	b.n	800555e <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80054e4:	2301      	movs	r3, #1
 80054e6:	627b      	str	r3, [r7, #36]	; 0x24
 80054e8:	e001      	b.n	80054ee <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80054ea:	2300      	movs	r3, #0
 80054ec:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d002      	beq.n	80054fe <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80054f8:	2300      	movs	r3, #0
 80054fa:	623b      	str	r3, [r7, #32]
 80054fc:	e001      	b.n	8005502 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80054fe:	2301      	movs	r3, #1
 8005500:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	6a3a      	ldr	r2, [r7, #32]
 800550a:	68b9      	ldr	r1, [r7, #8]
 800550c:	69b8      	ldr	r0, [r7, #24]
 800550e:	f000 fadf 	bl	8005ad0 <xEventGroupWaitBits>
 8005512:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d010      	beq.n	8005540 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	4013      	ands	r3, r2
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	429a      	cmp	r2, r3
 8005528:	d019      	beq.n	800555e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8005530:	f06f 0301 	mvn.w	r3, #1
 8005534:	61fb      	str	r3, [r7, #28]
 8005536:	e012      	b.n	800555e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8005538:	f06f 0302 	mvn.w	r3, #2
 800553c:	61fb      	str	r3, [r7, #28]
 800553e:	e00e      	b.n	800555e <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	4013      	ands	r3, r2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d109      	bne.n	800555e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d003      	beq.n	8005558 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8005550:	f06f 0301 	mvn.w	r3, #1
 8005554:	61fb      	str	r3, [r7, #28]
 8005556:	e002      	b.n	800555e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8005558:	f06f 0302 	mvn.w	r3, #2
 800555c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800555e:	69fb      	ldr	r3, [r7, #28]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3728      	adds	r7, #40	; 0x28
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005570:	2300      	movs	r3, #0
 8005572:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005574:	f3ef 8305 	mrs	r3, IPSR
 8005578:	60bb      	str	r3, [r7, #8]
  return(result);
 800557a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800557c:	2b00      	cmp	r3, #0
 800557e:	d174      	bne.n	800566a <osMutexNew+0x102>
    if (attr != NULL) {
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <osMutexNew+0x26>
      type = attr->attr_bits;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	61bb      	str	r3, [r7, #24]
 800558c:	e001      	b.n	8005592 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800558e:	2300      	movs	r3, #0
 8005590:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	2b00      	cmp	r3, #0
 800559a:	d002      	beq.n	80055a2 <osMutexNew+0x3a>
      rmtx = 1U;
 800559c:	2301      	movs	r3, #1
 800559e:	617b      	str	r3, [r7, #20]
 80055a0:	e001      	b.n	80055a6 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80055a2:	2300      	movs	r3, #0
 80055a4:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	f003 0308 	and.w	r3, r3, #8
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d15c      	bne.n	800566a <osMutexNew+0x102>
      mem = -1;
 80055b0:	f04f 33ff 	mov.w	r3, #4294967295
 80055b4:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d015      	beq.n	80055e8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d006      	beq.n	80055d2 <osMutexNew+0x6a>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	2b4f      	cmp	r3, #79	; 0x4f
 80055ca:	d902      	bls.n	80055d2 <osMutexNew+0x6a>
          mem = 1;
 80055cc:	2301      	movs	r3, #1
 80055ce:	613b      	str	r3, [r7, #16]
 80055d0:	e00c      	b.n	80055ec <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d108      	bne.n	80055ec <osMutexNew+0x84>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d104      	bne.n	80055ec <osMutexNew+0x84>
            mem = 0;
 80055e2:	2300      	movs	r3, #0
 80055e4:	613b      	str	r3, [r7, #16]
 80055e6:	e001      	b.n	80055ec <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80055e8:	2300      	movs	r3, #0
 80055ea:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d112      	bne.n	8005618 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d007      	beq.n	8005608 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	4619      	mov	r1, r3
 80055fe:	2004      	movs	r0, #4
 8005600:	f000 fe2b 	bl	800625a <xQueueCreateMutexStatic>
 8005604:	61f8      	str	r0, [r7, #28]
 8005606:	e016      	b.n	8005636 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	4619      	mov	r1, r3
 800560e:	2001      	movs	r0, #1
 8005610:	f000 fe23 	bl	800625a <xQueueCreateMutexStatic>
 8005614:	61f8      	str	r0, [r7, #28]
 8005616:	e00e      	b.n	8005636 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10b      	bne.n	8005636 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d004      	beq.n	800562e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005624:	2004      	movs	r0, #4
 8005626:	f000 fe00 	bl	800622a <xQueueCreateMutex>
 800562a:	61f8      	str	r0, [r7, #28]
 800562c:	e003      	b.n	8005636 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800562e:	2001      	movs	r0, #1
 8005630:	f000 fdfb 	bl	800622a <xQueueCreateMutex>
 8005634:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00c      	beq.n	8005656 <osMutexNew+0xee>
        if (attr != NULL) {
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <osMutexNew+0xe2>
          name = attr->name;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	e001      	b.n	800564e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800564a:	2300      	movs	r3, #0
 800564c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800564e:	68f9      	ldr	r1, [r7, #12]
 8005650:	69f8      	ldr	r0, [r7, #28]
 8005652:	f001 fda5 	bl	80071a0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d006      	beq.n	800566a <osMutexNew+0x102>
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	f043 0301 	orr.w	r3, r3, #1
 8005668:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800566a:	69fb      	ldr	r3, [r7, #28]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3720      	adds	r7, #32
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f023 0301 	bic.w	r3, r3, #1
 8005684:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800568e:	2300      	movs	r3, #0
 8005690:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005692:	f3ef 8305 	mrs	r3, IPSR
 8005696:	60bb      	str	r3, [r7, #8]
  return(result);
 8005698:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800569e:	f06f 0305 	mvn.w	r3, #5
 80056a2:	617b      	str	r3, [r7, #20]
 80056a4:	e02c      	b.n	8005700 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d103      	bne.n	80056b4 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80056ac:	f06f 0303 	mvn.w	r3, #3
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	e025      	b.n	8005700 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d011      	beq.n	80056de <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80056ba:	6839      	ldr	r1, [r7, #0]
 80056bc:	6938      	ldr	r0, [r7, #16]
 80056be:	f000 fe1b 	bl	80062f8 <xQueueTakeMutexRecursive>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d01b      	beq.n	8005700 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80056ce:	f06f 0301 	mvn.w	r3, #1
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	e014      	b.n	8005700 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80056d6:	f06f 0302 	mvn.w	r3, #2
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	e010      	b.n	8005700 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80056de:	6839      	ldr	r1, [r7, #0]
 80056e0:	6938      	ldr	r0, [r7, #16]
 80056e2:	f001 fa2f 	bl	8006b44 <xQueueSemaphoreTake>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d009      	beq.n	8005700 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80056f2:	f06f 0301 	mvn.w	r3, #1
 80056f6:	617b      	str	r3, [r7, #20]
 80056f8:	e002      	b.n	8005700 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80056fa:	f06f 0302 	mvn.w	r3, #2
 80056fe:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005700:	697b      	ldr	r3, [r7, #20]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800570a:	b580      	push	{r7, lr}
 800570c:	b086      	sub	sp, #24
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f023 0301 	bic.w	r3, r3, #1
 8005718:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005722:	2300      	movs	r3, #0
 8005724:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005726:	f3ef 8305 	mrs	r3, IPSR
 800572a:	60bb      	str	r3, [r7, #8]
  return(result);
 800572c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <osMutexRelease+0x30>
    stat = osErrorISR;
 8005732:	f06f 0305 	mvn.w	r3, #5
 8005736:	617b      	str	r3, [r7, #20]
 8005738:	e01f      	b.n	800577a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d103      	bne.n	8005748 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005740:	f06f 0303 	mvn.w	r3, #3
 8005744:	617b      	str	r3, [r7, #20]
 8005746:	e018      	b.n	800577a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d009      	beq.n	8005762 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800574e:	6938      	ldr	r0, [r7, #16]
 8005750:	f000 fd9e 	bl	8006290 <xQueueGiveMutexRecursive>
 8005754:	4603      	mov	r3, r0
 8005756:	2b01      	cmp	r3, #1
 8005758:	d00f      	beq.n	800577a <osMutexRelease+0x70>
        stat = osErrorResource;
 800575a:	f06f 0302 	mvn.w	r3, #2
 800575e:	617b      	str	r3, [r7, #20]
 8005760:	e00b      	b.n	800577a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005762:	2300      	movs	r3, #0
 8005764:	2200      	movs	r2, #0
 8005766:	2100      	movs	r1, #0
 8005768:	6938      	ldr	r0, [r7, #16]
 800576a:	f000 fe65 	bl	8006438 <xQueueGenericSend>
 800576e:	4603      	mov	r3, r0
 8005770:	2b01      	cmp	r3, #1
 8005772:	d002      	beq.n	800577a <osMutexRelease+0x70>
        stat = osErrorResource;
 8005774:	f06f 0302 	mvn.w	r3, #2
 8005778:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800577a:	697b      	ldr	r3, [r7, #20]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3718      	adds	r7, #24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005784:	b580      	push	{r7, lr}
 8005786:	b08a      	sub	sp, #40	; 0x28
 8005788:	af02      	add	r7, sp, #8
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005790:	2300      	movs	r3, #0
 8005792:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005794:	f3ef 8305 	mrs	r3, IPSR
 8005798:	613b      	str	r3, [r7, #16]
  return(result);
 800579a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800579c:	2b00      	cmp	r3, #0
 800579e:	d175      	bne.n	800588c <osSemaphoreNew+0x108>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d072      	beq.n	800588c <osSemaphoreNew+0x108>
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d86e      	bhi.n	800588c <osSemaphoreNew+0x108>
    mem = -1;
 80057ae:	f04f 33ff 	mov.w	r3, #4294967295
 80057b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d015      	beq.n	80057e6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d006      	beq.n	80057d0 <osSemaphoreNew+0x4c>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	2b4f      	cmp	r3, #79	; 0x4f
 80057c8:	d902      	bls.n	80057d0 <osSemaphoreNew+0x4c>
        mem = 1;
 80057ca:	2301      	movs	r3, #1
 80057cc:	61bb      	str	r3, [r7, #24]
 80057ce:	e00c      	b.n	80057ea <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d108      	bne.n	80057ea <osSemaphoreNew+0x66>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d104      	bne.n	80057ea <osSemaphoreNew+0x66>
          mem = 0;
 80057e0:	2300      	movs	r3, #0
 80057e2:	61bb      	str	r3, [r7, #24]
 80057e4:	e001      	b.n	80057ea <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80057e6:	2300      	movs	r3, #0
 80057e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f0:	d04c      	beq.n	800588c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d128      	bne.n	800584a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d10a      	bne.n	8005814 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	2203      	movs	r2, #3
 8005804:	9200      	str	r2, [sp, #0]
 8005806:	2200      	movs	r2, #0
 8005808:	2100      	movs	r1, #0
 800580a:	2001      	movs	r0, #1
 800580c:	f000 fc18 	bl	8006040 <xQueueGenericCreateStatic>
 8005810:	61f8      	str	r0, [r7, #28]
 8005812:	e005      	b.n	8005820 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005814:	2203      	movs	r2, #3
 8005816:	2100      	movs	r1, #0
 8005818:	2001      	movs	r0, #1
 800581a:	f000 fc89 	bl	8006130 <xQueueGenericCreate>
 800581e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d022      	beq.n	800586c <osSemaphoreNew+0xe8>
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d01f      	beq.n	800586c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800582c:	2300      	movs	r3, #0
 800582e:	2200      	movs	r2, #0
 8005830:	2100      	movs	r1, #0
 8005832:	69f8      	ldr	r0, [r7, #28]
 8005834:	f000 fe00 	bl	8006438 <xQueueGenericSend>
 8005838:	4603      	mov	r3, r0
 800583a:	2b01      	cmp	r3, #1
 800583c:	d016      	beq.n	800586c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800583e:	69f8      	ldr	r0, [r7, #28]
 8005840:	f001 fb5a 	bl	8006ef8 <vQueueDelete>
            hSemaphore = NULL;
 8005844:	2300      	movs	r3, #0
 8005846:	61fb      	str	r3, [r7, #28]
 8005848:	e010      	b.n	800586c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d108      	bne.n	8005862 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	461a      	mov	r2, r3
 8005856:	68b9      	ldr	r1, [r7, #8]
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 fd83 	bl	8006364 <xQueueCreateCountingSemaphoreStatic>
 800585e:	61f8      	str	r0, [r7, #28]
 8005860:	e004      	b.n	800586c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005862:	68b9      	ldr	r1, [r7, #8]
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 fdb4 	bl	80063d2 <xQueueCreateCountingSemaphore>
 800586a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00c      	beq.n	800588c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	617b      	str	r3, [r7, #20]
 800587e:	e001      	b.n	8005884 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005880:	2300      	movs	r3, #0
 8005882:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005884:	6979      	ldr	r1, [r7, #20]
 8005886:	69f8      	ldr	r0, [r7, #28]
 8005888:	f001 fc8a 	bl	80071a0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800588c:	69fb      	ldr	r3, [r7, #28]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3720      	adds	r7, #32
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80058a6:	2300      	movs	r3, #0
 80058a8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d103      	bne.n	80058b8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80058b0:	f06f 0303 	mvn.w	r3, #3
 80058b4:	617b      	str	r3, [r7, #20]
 80058b6:	e039      	b.n	800592c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058b8:	f3ef 8305 	mrs	r3, IPSR
 80058bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80058be:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d022      	beq.n	800590a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80058ca:	f06f 0303 	mvn.w	r3, #3
 80058ce:	617b      	str	r3, [r7, #20]
 80058d0:	e02c      	b.n	800592c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80058d2:	2300      	movs	r3, #0
 80058d4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80058d6:	f107 0308 	add.w	r3, r7, #8
 80058da:	461a      	mov	r2, r3
 80058dc:	2100      	movs	r1, #0
 80058de:	6938      	ldr	r0, [r7, #16]
 80058e0:	f001 fa6c 	bl	8006dbc <xQueueReceiveFromISR>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d003      	beq.n	80058f2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80058ea:	f06f 0302 	mvn.w	r3, #2
 80058ee:	617b      	str	r3, [r7, #20]
 80058f0:	e01c      	b.n	800592c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d019      	beq.n	800592c <osSemaphoreAcquire+0x94>
 80058f8:	4b0f      	ldr	r3, [pc, #60]	; (8005938 <osSemaphoreAcquire+0xa0>)
 80058fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	e010      	b.n	800592c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800590a:	6839      	ldr	r1, [r7, #0]
 800590c:	6938      	ldr	r0, [r7, #16]
 800590e:	f001 f919 	bl	8006b44 <xQueueSemaphoreTake>
 8005912:	4603      	mov	r3, r0
 8005914:	2b01      	cmp	r3, #1
 8005916:	d009      	beq.n	800592c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800591e:	f06f 0301 	mvn.w	r3, #1
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	e002      	b.n	800592c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005926:	f06f 0302 	mvn.w	r3, #2
 800592a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800592c:	697b      	ldr	r3, [r7, #20]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3718      	adds	r7, #24
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	e000ed04 	.word	0xe000ed04

0800593c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005948:	2300      	movs	r3, #0
 800594a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d103      	bne.n	800595a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005952:	f06f 0303 	mvn.w	r3, #3
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	e02c      	b.n	80059b4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800595a:	f3ef 8305 	mrs	r3, IPSR
 800595e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005960:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005962:	2b00      	cmp	r3, #0
 8005964:	d01a      	beq.n	800599c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005966:	2300      	movs	r3, #0
 8005968:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800596a:	f107 0308 	add.w	r3, r7, #8
 800596e:	4619      	mov	r1, r3
 8005970:	6938      	ldr	r0, [r7, #16]
 8005972:	f000 ff36 	bl	80067e2 <xQueueGiveFromISR>
 8005976:	4603      	mov	r3, r0
 8005978:	2b01      	cmp	r3, #1
 800597a:	d003      	beq.n	8005984 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800597c:	f06f 0302 	mvn.w	r3, #2
 8005980:	617b      	str	r3, [r7, #20]
 8005982:	e017      	b.n	80059b4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d014      	beq.n	80059b4 <osSemaphoreRelease+0x78>
 800598a:	4b0d      	ldr	r3, [pc, #52]	; (80059c0 <osSemaphoreRelease+0x84>)
 800598c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	e00b      	b.n	80059b4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800599c:	2300      	movs	r3, #0
 800599e:	2200      	movs	r2, #0
 80059a0:	2100      	movs	r1, #0
 80059a2:	6938      	ldr	r0, [r7, #16]
 80059a4:	f000 fd48 	bl	8006438 <xQueueGenericSend>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d002      	beq.n	80059b4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80059ae:	f06f 0302 	mvn.w	r3, #2
 80059b2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80059b4:	697b      	ldr	r3, [r7, #20]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	e000ed04 	.word	0xe000ed04

080059c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4a07      	ldr	r2, [pc, #28]	; (80059f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80059d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	4a06      	ldr	r2, [pc, #24]	; (80059f4 <vApplicationGetIdleTaskMemory+0x30>)
 80059da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2280      	movs	r2, #128	; 0x80
 80059e0:	601a      	str	r2, [r3, #0]
}
 80059e2:	bf00      	nop
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	20027300 	.word	0x20027300
 80059f4:	200273a8 	.word	0x200273a8

080059f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4a07      	ldr	r2, [pc, #28]	; (8005a24 <vApplicationGetTimerTaskMemory+0x2c>)
 8005a08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	4a06      	ldr	r2, [pc, #24]	; (8005a28 <vApplicationGetTimerTaskMemory+0x30>)
 8005a0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a16:	601a      	str	r2, [r3, #0]
}
 8005a18:	bf00      	nop
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	200275a8 	.word	0x200275a8
 8005a28:	20027650 	.word	0x20027650

08005a2c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10a      	bne.n	8005a50 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3e:	f383 8811 	msr	BASEPRI, r3
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005a4c:	bf00      	nop
 8005a4e:	e7fe      	b.n	8005a4e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8005a50:	2320      	movs	r3, #32
 8005a52:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2b20      	cmp	r3, #32
 8005a58:	d00a      	beq.n	8005a70 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8005a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	60fb      	str	r3, [r7, #12]
}
 8005a6c:	bf00      	nop
 8005a6e:	e7fe      	b.n	8005a6e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	3304      	adds	r3, #4
 8005a84:	4618      	mov	r0, r3
 8005a86:	f000 f9bf 	bl	8005e08 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8005a90:	697b      	ldr	r3, [r7, #20]
	}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b082      	sub	sp, #8
 8005a9e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8005aa0:	2020      	movs	r0, #32
 8005aa2:	f003 fc59 	bl	8009358 <pvPortMalloc>
 8005aa6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 f9a5 	bl	8005e08 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8005ac4:	687b      	ldr	r3, [r7, #4]
	}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b090      	sub	sp, #64	; 0x40
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
 8005adc:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10a      	bne.n	8005b06 <xEventGroupWaitBits+0x36>
	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	623b      	str	r3, [r7, #32]
}
 8005b02:	bf00      	nop
 8005b04:	e7fe      	b.n	8005b04 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00a      	beq.n	8005b26 <xEventGroupWaitBits+0x56>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	61fb      	str	r3, [r7, #28]
}
 8005b22:	bf00      	nop
 8005b24:	e7fe      	b.n	8005b24 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10a      	bne.n	8005b42 <xEventGroupWaitBits+0x72>
	__asm volatile
 8005b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	61bb      	str	r3, [r7, #24]
}
 8005b3e:	bf00      	nop
 8005b40:	e7fe      	b.n	8005b40 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b42:	f002 fb57 	bl	80081f4 <xTaskGetSchedulerState>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d102      	bne.n	8005b52 <xEventGroupWaitBits+0x82>
 8005b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <xEventGroupWaitBits+0x86>
 8005b52:	2301      	movs	r3, #1
 8005b54:	e000      	b.n	8005b58 <xEventGroupWaitBits+0x88>
 8005b56:	2300      	movs	r3, #0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10a      	bne.n	8005b72 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8005b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b60:	f383 8811 	msr	BASEPRI, r3
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	617b      	str	r3, [r7, #20]
}
 8005b6e:	bf00      	nop
 8005b70:	e7fe      	b.n	8005b70 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8005b72:	f001 fe35 	bl	80077e0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	68b9      	ldr	r1, [r7, #8]
 8005b80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b82:	f000 f90b 	bl	8005d9c <prvTestWaitCondition>
 8005b86:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8005b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00e      	beq.n	8005bac <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8005b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b90:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8005b92:	2300      	movs	r3, #0
 8005b94:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d028      	beq.n	8005bee <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	43db      	mvns	r3, r3
 8005ba4:	401a      	ands	r2, r3
 8005ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	e020      	b.n	8005bee <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d104      	bne.n	8005bbc <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8005bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	633b      	str	r3, [r7, #48]	; 0x30
 8005bba:	e018      	b.n	8005bee <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bc8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bd6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bda:	1d18      	adds	r0, r3, #4
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be0:	4313      	orrs	r3, r2
 8005be2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005be4:	4619      	mov	r1, r3
 8005be6:	f002 f827 	bl	8007c38 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8005bea:	2300      	movs	r3, #0
 8005bec:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8005bee:	f001 fe05 	bl	80077fc <xTaskResumeAll>
 8005bf2:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d031      	beq.n	8005c5e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d107      	bne.n	8005c10 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8005c00:	4b19      	ldr	r3, [pc, #100]	; (8005c68 <xEventGroupWaitBits+0x198>)
 8005c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8005c10:	f002 fc80 	bl	8008514 <uxTaskResetEventItemValue>
 8005c14:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d11a      	bne.n	8005c56 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8005c20:	f003 fa78 	bl	8009114 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8005c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	68b9      	ldr	r1, [r7, #8]
 8005c2e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005c30:	f000 f8b4 	bl	8005d9c <prvTestWaitCondition>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d009      	beq.n	8005c4e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d006      	beq.n	8005c4e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	43db      	mvns	r3, r3
 8005c48:	401a      	ands	r2, r3
 8005c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c4c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8005c52:	f003 fa8f 	bl	8009174 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8005c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3740      	adds	r7, #64	; 0x40
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	e000ed04 	.word	0xe000ed04

08005c6c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b08e      	sub	sp, #56	; 0x38
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8005c76:	2300      	movs	r3, #0
 8005c78:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10a      	bne.n	8005c9e <xEventGroupSetBits+0x32>
	__asm volatile
 8005c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	613b      	str	r3, [r7, #16]
}
 8005c9a:	bf00      	nop
 8005c9c:	e7fe      	b.n	8005c9c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00a      	beq.n	8005cbe <xEventGroupSetBits+0x52>
	__asm volatile
 8005ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	60fb      	str	r3, [r7, #12]
}
 8005cba:	bf00      	nop
 8005cbc:	e7fe      	b.n	8005cbc <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8005cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	3308      	adds	r3, #8
 8005cc8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8005cca:	f001 fd89 	bl	80077e0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cde:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005ce0:	e03c      	b.n	8005d5c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8005ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005cf8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d00:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d108      	bne.n	8005d1e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	4013      	ands	r3, r2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00b      	beq.n	8005d30 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d1c:	e008      	b.n	8005d30 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	4013      	ands	r3, r2
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d101      	bne.n	8005d30 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d010      	beq.n	8005d58 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d50:	4619      	mov	r1, r3
 8005d52:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005d54:	f002 f842 	bl	8007ddc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005d5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d5e:	6a3b      	ldr	r3, [r7, #32]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d1be      	bne.n	8005ce2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6a:	43db      	mvns	r3, r3
 8005d6c:	401a      	ands	r2, r3
 8005d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d70:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8005d72:	f001 fd43 	bl	80077fc <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8005d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d78:	681b      	ldr	r3, [r3, #0]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3738      	adds	r7, #56	; 0x38
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b082      	sub	sp, #8
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7ff ff6c 	bl	8005c6c <xEventGroupSetBits>
}
 8005d94:	bf00      	nop
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005da8:	2300      	movs	r3, #0
 8005daa:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d107      	bne.n	8005dc2 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	4013      	ands	r3, r2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00a      	beq.n	8005dd2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	617b      	str	r3, [r7, #20]
 8005dc0:	e007      	b.n	8005dd2 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d101      	bne.n	8005dd2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005dd2:	697b      	ldr	r3, [r7, #20]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	371c      	adds	r7, #28
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	68f9      	ldr	r1, [r7, #12]
 8005df2:	4804      	ldr	r0, [pc, #16]	; (8005e04 <xEventGroupSetBitsFromISR+0x24>)
 8005df4:	f003 f840 	bl	8008e78 <xTimerPendFunctionCallFromISR>
 8005df8:	6178      	str	r0, [r7, #20]

		return xReturn;
 8005dfa:	697b      	ldr	r3, [r7, #20]
	}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3718      	adds	r7, #24
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	08005d83 	.word	0x08005d83

08005e08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f103 0208 	add.w	r2, r3, #8
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f103 0208 	add.w	r2, r3, #8
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f103 0208 	add.w	r2, r3, #8
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e56:	bf00      	nop
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e62:	b480      	push	{r7}
 8005e64:	b085      	sub	sp, #20
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	1c5a      	adds	r2, r3, #1
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	601a      	str	r2, [r3, #0]
}
 8005e9e:	bf00      	nop
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b085      	sub	sp, #20
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec0:	d103      	bne.n	8005eca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	e00c      	b.n	8005ee4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	3308      	adds	r3, #8
 8005ece:	60fb      	str	r3, [r7, #12]
 8005ed0:	e002      	b.n	8005ed8 <vListInsert+0x2e>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d2f6      	bcs.n	8005ed2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	1c5a      	adds	r2, r3, #1
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	601a      	str	r2, [r3, #0]
}
 8005f10:	bf00      	nop
 8005f12:	3714      	adds	r7, #20
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	6892      	ldr	r2, [r2, #8]
 8005f32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	6852      	ldr	r2, [r2, #4]
 8005f3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d103      	bne.n	8005f50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	1e5a      	subs	r2, r3, #1
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10a      	bne.n	8005f9a <xQueueGenericReset+0x2a>
	__asm volatile
 8005f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	60bb      	str	r3, [r7, #8]
}
 8005f96:	bf00      	nop
 8005f98:	e7fe      	b.n	8005f98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005f9a:	f003 f8bb 	bl	8009114 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa6:	68f9      	ldr	r1, [r7, #12]
 8005fa8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005faa:	fb01 f303 	mul.w	r3, r1, r3
 8005fae:	441a      	add	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	68f9      	ldr	r1, [r7, #12]
 8005fce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005fd0:	fb01 f303 	mul.w	r3, r1, r3
 8005fd4:	441a      	add	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	22ff      	movs	r2, #255	; 0xff
 8005fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	22ff      	movs	r2, #255	; 0xff
 8005fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d114      	bne.n	800601a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d01a      	beq.n	800602e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	3310      	adds	r3, #16
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f001 fe85 	bl	8007d0c <xTaskRemoveFromEventList>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d012      	beq.n	800602e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006008:	4b0c      	ldr	r3, [pc, #48]	; (800603c <xQueueGenericReset+0xcc>)
 800600a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	f3bf 8f4f 	dsb	sy
 8006014:	f3bf 8f6f 	isb	sy
 8006018:	e009      	b.n	800602e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	3310      	adds	r3, #16
 800601e:	4618      	mov	r0, r3
 8006020:	f7ff fef2 	bl	8005e08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	3324      	adds	r3, #36	; 0x24
 8006028:	4618      	mov	r0, r3
 800602a:	f7ff feed 	bl	8005e08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800602e:	f003 f8a1 	bl	8009174 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006032:	2301      	movs	r3, #1
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	e000ed04 	.word	0xe000ed04

08006040 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006040:	b580      	push	{r7, lr}
 8006042:	b08e      	sub	sp, #56	; 0x38
 8006044:	af02      	add	r7, sp, #8
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
 800604c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10a      	bne.n	800606a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006058:	f383 8811 	msr	BASEPRI, r3
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006066:	bf00      	nop
 8006068:	e7fe      	b.n	8006068 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10a      	bne.n	8006086 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006074:	f383 8811 	msr	BASEPRI, r3
 8006078:	f3bf 8f6f 	isb	sy
 800607c:	f3bf 8f4f 	dsb	sy
 8006080:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006082:	bf00      	nop
 8006084:	e7fe      	b.n	8006084 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d002      	beq.n	8006092 <xQueueGenericCreateStatic+0x52>
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <xQueueGenericCreateStatic+0x56>
 8006092:	2301      	movs	r3, #1
 8006094:	e000      	b.n	8006098 <xQueueGenericCreateStatic+0x58>
 8006096:	2300      	movs	r3, #0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10a      	bne.n	80060b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	623b      	str	r3, [r7, #32]
}
 80060ae:	bf00      	nop
 80060b0:	e7fe      	b.n	80060b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d102      	bne.n	80060be <xQueueGenericCreateStatic+0x7e>
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <xQueueGenericCreateStatic+0x82>
 80060be:	2301      	movs	r3, #1
 80060c0:	e000      	b.n	80060c4 <xQueueGenericCreateStatic+0x84>
 80060c2:	2300      	movs	r3, #0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10a      	bne.n	80060de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80060c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	61fb      	str	r3, [r7, #28]
}
 80060da:	bf00      	nop
 80060dc:	e7fe      	b.n	80060dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80060de:	2350      	movs	r3, #80	; 0x50
 80060e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2b50      	cmp	r3, #80	; 0x50
 80060e6:	d00a      	beq.n	80060fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80060e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ec:	f383 8811 	msr	BASEPRI, r3
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	61bb      	str	r3, [r7, #24]
}
 80060fa:	bf00      	nop
 80060fc:	e7fe      	b.n	80060fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80060fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00d      	beq.n	8006126 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800610a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006112:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	4613      	mov	r3, r2
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	68b9      	ldr	r1, [r7, #8]
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 f83f 	bl	80061a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006128:	4618      	mov	r0, r3
 800612a:	3730      	adds	r7, #48	; 0x30
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006130:	b580      	push	{r7, lr}
 8006132:	b08a      	sub	sp, #40	; 0x28
 8006134:	af02      	add	r7, sp, #8
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	4613      	mov	r3, r2
 800613c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10a      	bne.n	800615a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	613b      	str	r3, [r7, #16]
}
 8006156:	bf00      	nop
 8006158:	e7fe      	b.n	8006158 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	fb02 f303 	mul.w	r3, r2, r3
 8006162:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	3350      	adds	r3, #80	; 0x50
 8006168:	4618      	mov	r0, r3
 800616a:	f003 f8f5 	bl	8009358 <pvPortMalloc>
 800616e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d011      	beq.n	800619a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	3350      	adds	r3, #80	; 0x50
 800617e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006188:	79fa      	ldrb	r2, [r7, #7]
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	4613      	mov	r3, r2
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	68b9      	ldr	r1, [r7, #8]
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f000 f805 	bl	80061a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800619a:	69bb      	ldr	r3, [r7, #24]
	}
 800619c:	4618      	mov	r0, r3
 800619e:	3720      	adds	r7, #32
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
 80061b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d103      	bne.n	80061c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	e002      	b.n	80061c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80061d2:	2101      	movs	r1, #1
 80061d4:	69b8      	ldr	r0, [r7, #24]
 80061d6:	f7ff fecb 	bl	8005f70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	78fa      	ldrb	r2, [r7, #3]
 80061de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80061e2:	78fb      	ldrb	r3, [r7, #3]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	68f9      	ldr	r1, [r7, #12]
 80061e8:	2073      	movs	r0, #115	; 0x73
 80061ea:	f003 ff79 	bl	800a0e0 <SEGGER_SYSVIEW_RecordU32x3>
}
 80061ee:	bf00      	nop
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b082      	sub	sp, #8
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00e      	beq.n	8006222 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006216:	2300      	movs	r3, #0
 8006218:	2200      	movs	r2, #0
 800621a:	2100      	movs	r1, #0
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f90b 	bl	8006438 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006222:	bf00      	nop
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800622a:	b580      	push	{r7, lr}
 800622c:	b086      	sub	sp, #24
 800622e:	af00      	add	r7, sp, #0
 8006230:	4603      	mov	r3, r0
 8006232:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006234:	2301      	movs	r3, #1
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	2300      	movs	r3, #0
 800623a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800623c:	79fb      	ldrb	r3, [r7, #7]
 800623e:	461a      	mov	r2, r3
 8006240:	6939      	ldr	r1, [r7, #16]
 8006242:	6978      	ldr	r0, [r7, #20]
 8006244:	f7ff ff74 	bl	8006130 <xQueueGenericCreate>
 8006248:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f7ff ffd3 	bl	80061f6 <prvInitialiseMutex>

		return xNewQueue;
 8006250:	68fb      	ldr	r3, [r7, #12]
	}
 8006252:	4618      	mov	r0, r3
 8006254:	3718      	adds	r7, #24
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800625a:	b580      	push	{r7, lr}
 800625c:	b088      	sub	sp, #32
 800625e:	af02      	add	r7, sp, #8
 8006260:	4603      	mov	r3, r0
 8006262:	6039      	str	r1, [r7, #0]
 8006264:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006266:	2301      	movs	r3, #1
 8006268:	617b      	str	r3, [r7, #20]
 800626a:	2300      	movs	r3, #0
 800626c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800626e:	79fb      	ldrb	r3, [r7, #7]
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2200      	movs	r2, #0
 8006276:	6939      	ldr	r1, [r7, #16]
 8006278:	6978      	ldr	r0, [r7, #20]
 800627a:	f7ff fee1 	bl	8006040 <xQueueGenericCreateStatic>
 800627e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f7ff ffb8 	bl	80061f6 <prvInitialiseMutex>

		return xNewQueue;
 8006286:	68fb      	ldr	r3, [r7, #12]
	}
 8006288:	4618      	mov	r0, r3
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006290:	b590      	push	{r4, r7, lr}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10a      	bne.n	80062b8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80062a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a6:	f383 8811 	msr	BASEPRI, r3
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	60fb      	str	r3, [r7, #12]
}
 80062b4:	bf00      	nop
 80062b6:	e7fe      	b.n	80062b6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	689c      	ldr	r4, [r3, #8]
 80062bc:	f001 ff8a 	bl	80081d4 <xTaskGetCurrentTaskHandle>
 80062c0:	4603      	mov	r3, r0
 80062c2:	429c      	cmp	r4, r3
 80062c4:	d111      	bne.n	80062ea <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	1e5a      	subs	r2, r3, #1
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d105      	bne.n	80062e4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80062d8:	2300      	movs	r3, #0
 80062da:	2200      	movs	r2, #0
 80062dc:	2100      	movs	r1, #0
 80062de:	6938      	ldr	r0, [r7, #16]
 80062e0:	f000 f8aa 	bl	8006438 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80062e4:	2301      	movs	r3, #1
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	e001      	b.n	80062ee <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80062ee:	697b      	ldr	r3, [r7, #20]
	}
 80062f0:	4618      	mov	r0, r3
 80062f2:	371c      	adds	r7, #28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd90      	pop	{r4, r7, pc}

080062f8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80062f8:	b590      	push	{r4, r7, lr}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10a      	bne.n	8006322 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	60fb      	str	r3, [r7, #12]
}
 800631e:	bf00      	nop
 8006320:	e7fe      	b.n	8006320 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	689c      	ldr	r4, [r3, #8]
 8006326:	f001 ff55 	bl	80081d4 <xTaskGetCurrentTaskHandle>
 800632a:	4603      	mov	r3, r0
 800632c:	429c      	cmp	r4, r3
 800632e:	d107      	bne.n	8006340 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	1c5a      	adds	r2, r3, #1
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800633a:	2301      	movs	r3, #1
 800633c:	617b      	str	r3, [r7, #20]
 800633e:	e00c      	b.n	800635a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006340:	6839      	ldr	r1, [r7, #0]
 8006342:	6938      	ldr	r0, [r7, #16]
 8006344:	f000 fbfe 	bl	8006b44 <xQueueSemaphoreTake>
 8006348:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d004      	beq.n	800635a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800635a:	697b      	ldr	r3, [r7, #20]
	}
 800635c:	4618      	mov	r0, r3
 800635e:	371c      	adds	r7, #28
 8006360:	46bd      	mov	sp, r7
 8006362:	bd90      	pop	{r4, r7, pc}

08006364 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006364:	b580      	push	{r7, lr}
 8006366:	b08a      	sub	sp, #40	; 0x28
 8006368:	af02      	add	r7, sp, #8
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10a      	bne.n	800638c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637a:	f383 8811 	msr	BASEPRI, r3
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	61bb      	str	r3, [r7, #24]
}
 8006388:	bf00      	nop
 800638a:	e7fe      	b.n	800638a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	429a      	cmp	r2, r3
 8006392:	d90a      	bls.n	80063aa <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	617b      	str	r3, [r7, #20]
}
 80063a6:	bf00      	nop
 80063a8:	e7fe      	b.n	80063a8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80063aa:	2302      	movs	r3, #2
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	2100      	movs	r1, #0
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f7ff fe43 	bl	8006040 <xQueueGenericCreateStatic>
 80063ba:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d002      	beq.n	80063c8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80063c8:	69fb      	ldr	r3, [r7, #28]
	}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3720      	adds	r7, #32
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b086      	sub	sp, #24
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10a      	bne.n	80063f8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	613b      	str	r3, [r7, #16]
}
 80063f4:	bf00      	nop
 80063f6:	e7fe      	b.n	80063f6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d90a      	bls.n	8006416 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006404:	f383 8811 	msr	BASEPRI, r3
 8006408:	f3bf 8f6f 	isb	sy
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	60fb      	str	r3, [r7, #12]
}
 8006412:	bf00      	nop
 8006414:	e7fe      	b.n	8006414 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006416:	2202      	movs	r2, #2
 8006418:	2100      	movs	r1, #0
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7ff fe88 	bl	8006130 <xQueueGenericCreate>
 8006420:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800642e:	697b      	ldr	r3, [r7, #20]
	}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b090      	sub	sp, #64	; 0x40
 800643c:	af02      	add	r7, sp, #8
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
 8006444:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006446:	2300      	movs	r3, #0
 8006448:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10a      	bne.n	800646a <xQueueGenericSend+0x32>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006466:	bf00      	nop
 8006468:	e7fe      	b.n	8006468 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d103      	bne.n	8006478 <xQueueGenericSend+0x40>
 8006470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <xQueueGenericSend+0x44>
 8006478:	2301      	movs	r3, #1
 800647a:	e000      	b.n	800647e <xQueueGenericSend+0x46>
 800647c:	2300      	movs	r3, #0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10a      	bne.n	8006498 <xQueueGenericSend+0x60>
	__asm volatile
 8006482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006494:	bf00      	nop
 8006496:	e7fe      	b.n	8006496 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	2b02      	cmp	r3, #2
 800649c:	d103      	bne.n	80064a6 <xQueueGenericSend+0x6e>
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d101      	bne.n	80064aa <xQueueGenericSend+0x72>
 80064a6:	2301      	movs	r3, #1
 80064a8:	e000      	b.n	80064ac <xQueueGenericSend+0x74>
 80064aa:	2300      	movs	r3, #0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10a      	bne.n	80064c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80064b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	623b      	str	r3, [r7, #32]
}
 80064c2:	bf00      	nop
 80064c4:	e7fe      	b.n	80064c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064c6:	f001 fe95 	bl	80081f4 <xTaskGetSchedulerState>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d102      	bne.n	80064d6 <xQueueGenericSend+0x9e>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <xQueueGenericSend+0xa2>
 80064d6:	2301      	movs	r3, #1
 80064d8:	e000      	b.n	80064dc <xQueueGenericSend+0xa4>
 80064da:	2300      	movs	r3, #0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10a      	bne.n	80064f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	61fb      	str	r3, [r7, #28]
}
 80064f2:	bf00      	nop
 80064f4:	e7fe      	b.n	80064f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064f6:	f002 fe0d 	bl	8009114 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006502:	429a      	cmp	r2, r3
 8006504:	d302      	bcc.n	800650c <xQueueGenericSend+0xd4>
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b02      	cmp	r3, #2
 800650a:	d136      	bne.n	800657a <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 800650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650e:	4618      	mov	r0, r3
 8006510:	f004 fa98 	bl	800aa44 <SEGGER_SYSVIEW_ShrinkId>
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	6879      	ldr	r1, [r7, #4]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	460b      	mov	r3, r1
 800651e:	4601      	mov	r1, r0
 8006520:	205a      	movs	r0, #90	; 0x5a
 8006522:	f003 fe53 	bl	800a1cc <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006526:	683a      	ldr	r2, [r7, #0]
 8006528:	68b9      	ldr	r1, [r7, #8]
 800652a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800652c:	f000 fd28 	bl	8006f80 <prvCopyDataToQueue>
 8006530:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006536:	2b00      	cmp	r3, #0
 8006538:	d010      	beq.n	800655c <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800653a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653c:	3324      	adds	r3, #36	; 0x24
 800653e:	4618      	mov	r0, r3
 8006540:	f001 fbe4 	bl	8007d0c <xTaskRemoveFromEventList>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d013      	beq.n	8006572 <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800654a:	4b4d      	ldr	r3, [pc, #308]	; (8006680 <xQueueGenericSend+0x248>)
 800654c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	f3bf 8f4f 	dsb	sy
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	e00a      	b.n	8006572 <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800655c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655e:	2b00      	cmp	r3, #0
 8006560:	d007      	beq.n	8006572 <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006562:	4b47      	ldr	r3, [pc, #284]	; (8006680 <xQueueGenericSend+0x248>)
 8006564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006572:	f002 fdff 	bl	8009174 <vPortExitCritical>
				return pdPASS;
 8006576:	2301      	movs	r3, #1
 8006578:	e07d      	b.n	8006676 <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d110      	bne.n	80065a2 <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006580:	f002 fdf8 	bl	8009174 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	4618      	mov	r0, r3
 8006588:	f004 fa5c 	bl	800aa44 <SEGGER_SYSVIEW_ShrinkId>
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	6879      	ldr	r1, [r7, #4]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	460b      	mov	r3, r1
 8006596:	4601      	mov	r1, r0
 8006598:	205a      	movs	r0, #90	; 0x5a
 800659a:	f003 fe17 	bl	800a1cc <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	e069      	b.n	8006676 <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d106      	bne.n	80065b6 <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065a8:	f107 0314 	add.w	r3, r7, #20
 80065ac:	4618      	mov	r0, r3
 80065ae:	f001 fc7b 	bl	8007ea8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065b2:	2301      	movs	r3, #1
 80065b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065b6:	f002 fddd 	bl	8009174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065ba:	f001 f911 	bl	80077e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065be:	f002 fda9 	bl	8009114 <vPortEnterCritical>
 80065c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065c8:	b25b      	sxtb	r3, r3
 80065ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ce:	d103      	bne.n	80065d8 <xQueueGenericSend+0x1a0>
 80065d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065de:	b25b      	sxtb	r3, r3
 80065e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e4:	d103      	bne.n	80065ee <xQueueGenericSend+0x1b6>
 80065e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065ee:	f002 fdc1 	bl	8009174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065f2:	1d3a      	adds	r2, r7, #4
 80065f4:	f107 0314 	add.w	r3, r7, #20
 80065f8:	4611      	mov	r1, r2
 80065fa:	4618      	mov	r0, r3
 80065fc:	f001 fc6a 	bl	8007ed4 <xTaskCheckForTimeOut>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d124      	bne.n	8006650 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006606:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006608:	f000 fdb2 	bl	8007170 <prvIsQueueFull>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d018      	beq.n	8006644 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006614:	3310      	adds	r3, #16
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	4611      	mov	r1, r2
 800661a:	4618      	mov	r0, r3
 800661c:	f001 fae8 	bl	8007bf0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006622:	f000 fd3d 	bl	80070a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006626:	f001 f8e9 	bl	80077fc <xTaskResumeAll>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	f47f af62 	bne.w	80064f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006632:	4b13      	ldr	r3, [pc, #76]	; (8006680 <xQueueGenericSend+0x248>)
 8006634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006638:	601a      	str	r2, [r3, #0]
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	e758      	b.n	80064f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006646:	f000 fd2b 	bl	80070a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800664a:	f001 f8d7 	bl	80077fc <xTaskResumeAll>
 800664e:	e752      	b.n	80064f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006652:	f000 fd25 	bl	80070a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006656:	f001 f8d1 	bl	80077fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 800665a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665c:	4618      	mov	r0, r3
 800665e:	f004 f9f1 	bl	800aa44 <SEGGER_SYSVIEW_ShrinkId>
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	6879      	ldr	r1, [r7, #4]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	460b      	mov	r3, r1
 800666c:	4601      	mov	r1, r0
 800666e:	205a      	movs	r0, #90	; 0x5a
 8006670:	f003 fdac 	bl	800a1cc <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8006674:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006676:	4618      	mov	r0, r3
 8006678:	3738      	adds	r7, #56	; 0x38
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	e000ed04 	.word	0xe000ed04

08006684 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b090      	sub	sp, #64	; 0x40
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
 8006690:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10a      	bne.n	80066b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800669c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a0:	f383 8811 	msr	BASEPRI, r3
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80066ae:	bf00      	nop
 80066b0:	e7fe      	b.n	80066b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d103      	bne.n	80066c0 <xQueueGenericSendFromISR+0x3c>
 80066b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <xQueueGenericSendFromISR+0x40>
 80066c0:	2301      	movs	r3, #1
 80066c2:	e000      	b.n	80066c6 <xQueueGenericSendFromISR+0x42>
 80066c4:	2300      	movs	r3, #0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10a      	bne.n	80066e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80066ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80066dc:	bf00      	nop
 80066de:	e7fe      	b.n	80066de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d103      	bne.n	80066ee <xQueueGenericSendFromISR+0x6a>
 80066e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d101      	bne.n	80066f2 <xQueueGenericSendFromISR+0x6e>
 80066ee:	2301      	movs	r3, #1
 80066f0:	e000      	b.n	80066f4 <xQueueGenericSendFromISR+0x70>
 80066f2:	2300      	movs	r3, #0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10a      	bne.n	800670e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80066f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fc:	f383 8811 	msr	BASEPRI, r3
 8006700:	f3bf 8f6f 	isb	sy
 8006704:	f3bf 8f4f 	dsb	sy
 8006708:	623b      	str	r3, [r7, #32]
}
 800670a:	bf00      	nop
 800670c:	e7fe      	b.n	800670c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800670e:	f002 fde3 	bl	80092d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006712:	f3ef 8211 	mrs	r2, BASEPRI
 8006716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671a:	f383 8811 	msr	BASEPRI, r3
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	61fa      	str	r2, [r7, #28]
 8006728:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800672a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800672c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800672e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006736:	429a      	cmp	r2, r3
 8006738:	d302      	bcc.n	8006740 <xQueueGenericSendFromISR+0xbc>
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b02      	cmp	r3, #2
 800673e:	d139      	bne.n	80067b4 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006742:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800674a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674e:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8006750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006752:	4618      	mov	r0, r3
 8006754:	f004 f976 	bl	800aa44 <SEGGER_SYSVIEW_ShrinkId>
 8006758:	4601      	mov	r1, r0
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	461a      	mov	r2, r3
 800675e:	2060      	movs	r0, #96	; 0x60
 8006760:	f003 fc64 	bl	800a02c <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006764:	683a      	ldr	r2, [r7, #0]
 8006766:	68b9      	ldr	r1, [r7, #8]
 8006768:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800676a:	f000 fc09 	bl	8006f80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800676e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006776:	d112      	bne.n	800679e <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677c:	2b00      	cmp	r3, #0
 800677e:	d016      	beq.n	80067ae <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006782:	3324      	adds	r3, #36	; 0x24
 8006784:	4618      	mov	r0, r3
 8006786:	f001 fac1 	bl	8007d0c <xTaskRemoveFromEventList>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00e      	beq.n	80067ae <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00b      	beq.n	80067ae <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	e007      	b.n	80067ae <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800679e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80067a2:	3301      	adds	r3, #1
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	b25a      	sxtb	r2, r3
 80067a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80067ae:	2301      	movs	r3, #1
 80067b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80067b2:	e00b      	b.n	80067cc <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80067b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b6:	4618      	mov	r0, r3
 80067b8:	f004 f944 	bl	800aa44 <SEGGER_SYSVIEW_ShrinkId>
 80067bc:	4601      	mov	r1, r0
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	461a      	mov	r2, r3
 80067c2:	2060      	movs	r0, #96	; 0x60
 80067c4:	f003 fc32 	bl	800a02c <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 80067c8:	2300      	movs	r3, #0
 80067ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80067d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3740      	adds	r7, #64	; 0x40
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b08e      	sub	sp, #56	; 0x38
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80067f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10a      	bne.n	800680c <xQueueGiveFromISR+0x2a>
	__asm volatile
 80067f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fa:	f383 8811 	msr	BASEPRI, r3
 80067fe:	f3bf 8f6f 	isb	sy
 8006802:	f3bf 8f4f 	dsb	sy
 8006806:	623b      	str	r3, [r7, #32]
}
 8006808:	bf00      	nop
 800680a:	e7fe      	b.n	800680a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800680c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00a      	beq.n	800682a <xQueueGiveFromISR+0x48>
	__asm volatile
 8006814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006818:	f383 8811 	msr	BASEPRI, r3
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	f3bf 8f4f 	dsb	sy
 8006824:	61fb      	str	r3, [r7, #28]
}
 8006826:	bf00      	nop
 8006828:	e7fe      	b.n	8006828 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800682a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d103      	bne.n	800683a <xQueueGiveFromISR+0x58>
 8006832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d101      	bne.n	800683e <xQueueGiveFromISR+0x5c>
 800683a:	2301      	movs	r3, #1
 800683c:	e000      	b.n	8006840 <xQueueGiveFromISR+0x5e>
 800683e:	2300      	movs	r3, #0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10a      	bne.n	800685a <xQueueGiveFromISR+0x78>
	__asm volatile
 8006844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006848:	f383 8811 	msr	BASEPRI, r3
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	61bb      	str	r3, [r7, #24]
}
 8006856:	bf00      	nop
 8006858:	e7fe      	b.n	8006858 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800685a:	f002 fd3d 	bl	80092d8 <vPortValidateInterruptPriority>
	__asm volatile
 800685e:	f3ef 8211 	mrs	r2, BASEPRI
 8006862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	617a      	str	r2, [r7, #20]
 8006874:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006876:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006878:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800687a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006884:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006886:	429a      	cmp	r2, r3
 8006888:	d235      	bcs.n	80068f6 <xQueueGiveFromISR+0x114>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800688a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8006894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006896:	4618      	mov	r0, r3
 8006898:	f004 f8d4 	bl	800aa44 <SEGGER_SYSVIEW_ShrinkId>
 800689c:	4601      	mov	r1, r0
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	461a      	mov	r2, r3
 80068a2:	2060      	movs	r0, #96	; 0x60
 80068a4:	f003 fbc2 	bl	800a02c <SEGGER_SYSVIEW_RecordU32x2>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068aa:	1c5a      	adds	r2, r3, #1
 80068ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80068b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80068b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b8:	d112      	bne.n	80068e0 <xQueueGiveFromISR+0xfe>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d016      	beq.n	80068f0 <xQueueGiveFromISR+0x10e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c4:	3324      	adds	r3, #36	; 0x24
 80068c6:	4618      	mov	r0, r3
 80068c8:	f001 fa20 	bl	8007d0c <xTaskRemoveFromEventList>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00e      	beq.n	80068f0 <xQueueGiveFromISR+0x10e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00b      	beq.n	80068f0 <xQueueGiveFromISR+0x10e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	2201      	movs	r2, #1
 80068dc:	601a      	str	r2, [r3, #0]
 80068de:	e007      	b.n	80068f0 <xQueueGiveFromISR+0x10e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80068e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068e4:	3301      	adds	r3, #1
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	b25a      	sxtb	r2, r3
 80068ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80068f0:	2301      	movs	r3, #1
 80068f2:	637b      	str	r3, [r7, #52]	; 0x34
 80068f4:	e00b      	b.n	800690e <xQueueGiveFromISR+0x12c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80068f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f8:	4618      	mov	r0, r3
 80068fa:	f004 f8a3 	bl	800aa44 <SEGGER_SYSVIEW_ShrinkId>
 80068fe:	4601      	mov	r1, r0
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	461a      	mov	r2, r3
 8006904:	2060      	movs	r0, #96	; 0x60
 8006906:	f003 fb91 	bl	800a02c <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 800690a:	2300      	movs	r3, #0
 800690c:	637b      	str	r3, [r7, #52]	; 0x34
 800690e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006910:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f383 8811 	msr	BASEPRI, r3
}
 8006918:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800691a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800691c:	4618      	mov	r0, r3
 800691e:	3738      	adds	r7, #56	; 0x38
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006924:	b590      	push	{r4, r7, lr}
 8006926:	b08f      	sub	sp, #60	; 0x3c
 8006928:	af02      	add	r7, sp, #8
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006930:	2300      	movs	r3, #0
 8006932:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10a      	bne.n	8006954 <xQueueReceive+0x30>
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	623b      	str	r3, [r7, #32]
}
 8006950:	bf00      	nop
 8006952:	e7fe      	b.n	8006952 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d103      	bne.n	8006962 <xQueueReceive+0x3e>
 800695a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	2b00      	cmp	r3, #0
 8006960:	d101      	bne.n	8006966 <xQueueReceive+0x42>
 8006962:	2301      	movs	r3, #1
 8006964:	e000      	b.n	8006968 <xQueueReceive+0x44>
 8006966:	2300      	movs	r3, #0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10a      	bne.n	8006982 <xQueueReceive+0x5e>
	__asm volatile
 800696c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006970:	f383 8811 	msr	BASEPRI, r3
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	61fb      	str	r3, [r7, #28]
}
 800697e:	bf00      	nop
 8006980:	e7fe      	b.n	8006980 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006982:	f001 fc37 	bl	80081f4 <xTaskGetSchedulerState>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d102      	bne.n	8006992 <xQueueReceive+0x6e>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <xQueueReceive+0x72>
 8006992:	2301      	movs	r3, #1
 8006994:	e000      	b.n	8006998 <xQueueReceive+0x74>
 8006996:	2300      	movs	r3, #0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10a      	bne.n	80069b2 <xQueueReceive+0x8e>
	__asm volatile
 800699c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	61bb      	str	r3, [r7, #24]
}
 80069ae:	bf00      	nop
 80069b0:	e7fe      	b.n	80069b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069b2:	f002 fbaf 	bl	8009114 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d02f      	beq.n	8006a22 <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069c2:	68b9      	ldr	r1, [r7, #8]
 80069c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069c6:	f000 fb45 	bl	8007054 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 80069ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069cc:	4618      	mov	r0, r3
 80069ce:	f004 f839 	bl	800aa44 <SEGGER_SYSVIEW_ShrinkId>
 80069d2:	4604      	mov	r4, r0
 80069d4:	2000      	movs	r0, #0
 80069d6:	f004 f835 	bl	800aa44 <SEGGER_SYSVIEW_ShrinkId>
 80069da:	4602      	mov	r2, r0
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2101      	movs	r1, #1
 80069e0:	9100      	str	r1, [sp, #0]
 80069e2:	4621      	mov	r1, r4
 80069e4:	205c      	movs	r0, #92	; 0x5c
 80069e6:	f003 fbf1 	bl	800a1cc <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	1e5a      	subs	r2, r3, #1
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00f      	beq.n	8006a1a <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fc:	3310      	adds	r3, #16
 80069fe:	4618      	mov	r0, r3
 8006a00:	f001 f984 	bl	8007d0c <xTaskRemoveFromEventList>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d007      	beq.n	8006a1a <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a0a:	4b4d      	ldr	r3, [pc, #308]	; (8006b40 <xQueueReceive+0x21c>)
 8006a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a10:	601a      	str	r2, [r3, #0]
 8006a12:	f3bf 8f4f 	dsb	sy
 8006a16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a1a:	f002 fbab 	bl	8009174 <vPortExitCritical>
				return pdPASS;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e08a      	b.n	8006b38 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d113      	bne.n	8006a50 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a28:	f002 fba4 	bl	8009174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8006a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f004 f808 	bl	800aa44 <SEGGER_SYSVIEW_ShrinkId>
 8006a34:	4604      	mov	r4, r0
 8006a36:	2000      	movs	r0, #0
 8006a38:	f004 f804 	bl	800aa44 <SEGGER_SYSVIEW_ShrinkId>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2101      	movs	r1, #1
 8006a42:	9100      	str	r1, [sp, #0]
 8006a44:	4621      	mov	r1, r4
 8006a46:	205c      	movs	r0, #92	; 0x5c
 8006a48:	f003 fbc0 	bl	800a1cc <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	e073      	b.n	8006b38 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d106      	bne.n	8006a64 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a56:	f107 0310 	add.w	r3, r7, #16
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f001 fa24 	bl	8007ea8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a60:	2301      	movs	r3, #1
 8006a62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a64:	f002 fb86 	bl	8009174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a68:	f000 feba 	bl	80077e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a6c:	f002 fb52 	bl	8009114 <vPortEnterCritical>
 8006a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a76:	b25b      	sxtb	r3, r3
 8006a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7c:	d103      	bne.n	8006a86 <xQueueReceive+0x162>
 8006a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a8c:	b25b      	sxtb	r3, r3
 8006a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a92:	d103      	bne.n	8006a9c <xQueueReceive+0x178>
 8006a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a9c:	f002 fb6a 	bl	8009174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006aa0:	1d3a      	adds	r2, r7, #4
 8006aa2:	f107 0310 	add.w	r3, r7, #16
 8006aa6:	4611      	mov	r1, r2
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f001 fa13 	bl	8007ed4 <xTaskCheckForTimeOut>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d124      	bne.n	8006afe <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ab6:	f000 fb45 	bl	8007144 <prvIsQueueEmpty>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d018      	beq.n	8006af2 <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac2:	3324      	adds	r3, #36	; 0x24
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	4611      	mov	r1, r2
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f001 f891 	bl	8007bf0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ace:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ad0:	f000 fae6 	bl	80070a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ad4:	f000 fe92 	bl	80077fc <xTaskResumeAll>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f47f af69 	bne.w	80069b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006ae0:	4b17      	ldr	r3, [pc, #92]	; (8006b40 <xQueueReceive+0x21c>)
 8006ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ae6:	601a      	str	r2, [r3, #0]
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	e75f      	b.n	80069b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006af2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006af4:	f000 fad4 	bl	80070a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006af8:	f000 fe80 	bl	80077fc <xTaskResumeAll>
 8006afc:	e759      	b.n	80069b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006afe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b00:	f000 face 	bl	80070a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b04:	f000 fe7a 	bl	80077fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b0a:	f000 fb1b 	bl	8007144 <prvIsQueueEmpty>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f43f af4e 	beq.w	80069b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8006b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f003 ff93 	bl	800aa44 <SEGGER_SYSVIEW_ShrinkId>
 8006b1e:	4604      	mov	r4, r0
 8006b20:	2000      	movs	r0, #0
 8006b22:	f003 ff8f 	bl	800aa44 <SEGGER_SYSVIEW_ShrinkId>
 8006b26:	4602      	mov	r2, r0
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2101      	movs	r1, #1
 8006b2c:	9100      	str	r1, [sp, #0]
 8006b2e:	4621      	mov	r1, r4
 8006b30:	205c      	movs	r0, #92	; 0x5c
 8006b32:	f003 fb4b 	bl	800a1cc <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8006b36:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3734      	adds	r7, #52	; 0x34
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd90      	pop	{r4, r7, pc}
 8006b40:	e000ed04 	.word	0xe000ed04

08006b44 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006b44:	b590      	push	{r4, r7, lr}
 8006b46:	b091      	sub	sp, #68	; 0x44
 8006b48:	af02      	add	r7, sp, #8
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006b56:	2300      	movs	r3, #0
 8006b58:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10a      	bne.n	8006b76 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	623b      	str	r3, [r7, #32]
}
 8006b72:	bf00      	nop
 8006b74:	e7fe      	b.n	8006b74 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00a      	beq.n	8006b94 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	61fb      	str	r3, [r7, #28]
}
 8006b90:	bf00      	nop
 8006b92:	e7fe      	b.n	8006b92 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b94:	f001 fb2e 	bl	80081f4 <xTaskGetSchedulerState>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d102      	bne.n	8006ba4 <xQueueSemaphoreTake+0x60>
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <xQueueSemaphoreTake+0x64>
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e000      	b.n	8006baa <xQueueSemaphoreTake+0x66>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10a      	bne.n	8006bc4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	61bb      	str	r3, [r7, #24]
}
 8006bc0:	bf00      	nop
 8006bc2:	e7fe      	b.n	8006bc2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bc4:	f002 faa6 	bl	8009114 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bcc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d034      	beq.n	8006c3e <xQueueSemaphoreTake+0xfa>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8006bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f003 ff34 	bl	800aa44 <SEGGER_SYSVIEW_ShrinkId>
 8006bdc:	4604      	mov	r4, r0
 8006bde:	2000      	movs	r0, #0
 8006be0:	f003 ff30 	bl	800aa44 <SEGGER_SYSVIEW_ShrinkId>
 8006be4:	4602      	mov	r2, r0
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	2101      	movs	r1, #1
 8006bea:	9100      	str	r1, [sp, #0]
 8006bec:	4621      	mov	r1, r4
 8006bee:	205c      	movs	r0, #92	; 0x5c
 8006bf0:	f003 faec 	bl	800a1cc <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf6:	1e5a      	subs	r2, r3, #1
 8006bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d104      	bne.n	8006c0e <xQueueSemaphoreTake+0xca>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006c04:	f001 fc9e 	bl	8008544 <pvTaskIncrementMutexHeldCount>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00f      	beq.n	8006c36 <xQueueSemaphoreTake+0xf2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c18:	3310      	adds	r3, #16
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f001 f876 	bl	8007d0c <xTaskRemoveFromEventList>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d007      	beq.n	8006c36 <xQueueSemaphoreTake+0xf2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c26:	4b64      	ldr	r3, [pc, #400]	; (8006db8 <xQueueSemaphoreTake+0x274>)
 8006c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c2c:	601a      	str	r2, [r3, #0]
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c36:	f002 fa9d 	bl	8009174 <vPortExitCritical>
				return pdPASS;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e0b7      	b.n	8006dae <xQueueSemaphoreTake+0x26a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d121      	bne.n	8006c88 <xQueueSemaphoreTake+0x144>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00a      	beq.n	8006c60 <xQueueSemaphoreTake+0x11c>
	__asm volatile
 8006c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4e:	f383 8811 	msr	BASEPRI, r3
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	617b      	str	r3, [r7, #20]
}
 8006c5c:	bf00      	nop
 8006c5e:	e7fe      	b.n	8006c5e <xQueueSemaphoreTake+0x11a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006c60:	f002 fa88 	bl	8009174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8006c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c66:	4618      	mov	r0, r3
 8006c68:	f003 feec 	bl	800aa44 <SEGGER_SYSVIEW_ShrinkId>
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	2000      	movs	r0, #0
 8006c70:	f003 fee8 	bl	800aa44 <SEGGER_SYSVIEW_ShrinkId>
 8006c74:	4602      	mov	r2, r0
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2101      	movs	r1, #1
 8006c7a:	9100      	str	r1, [sp, #0]
 8006c7c:	4621      	mov	r1, r4
 8006c7e:	205c      	movs	r0, #92	; 0x5c
 8006c80:	f003 faa4 	bl	800a1cc <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8006c84:	2300      	movs	r3, #0
 8006c86:	e092      	b.n	8006dae <xQueueSemaphoreTake+0x26a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d106      	bne.n	8006c9c <xQueueSemaphoreTake+0x158>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c8e:	f107 030c 	add.w	r3, r7, #12
 8006c92:	4618      	mov	r0, r3
 8006c94:	f001 f908 	bl	8007ea8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c9c:	f002 fa6a 	bl	8009174 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ca0:	f000 fd9e 	bl	80077e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ca4:	f002 fa36 	bl	8009114 <vPortEnterCritical>
 8006ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006caa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cae:	b25b      	sxtb	r3, r3
 8006cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb4:	d103      	bne.n	8006cbe <xQueueSemaphoreTake+0x17a>
 8006cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cc4:	b25b      	sxtb	r3, r3
 8006cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cca:	d103      	bne.n	8006cd4 <xQueueSemaphoreTake+0x190>
 8006ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cd4:	f002 fa4e 	bl	8009174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cd8:	463a      	mov	r2, r7
 8006cda:	f107 030c 	add.w	r3, r7, #12
 8006cde:	4611      	mov	r1, r2
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f001 f8f7 	bl	8007ed4 <xTaskCheckForTimeOut>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d132      	bne.n	8006d52 <xQueueSemaphoreTake+0x20e>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cee:	f000 fa29 	bl	8007144 <prvIsQueueEmpty>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d026      	beq.n	8006d46 <xQueueSemaphoreTake+0x202>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d109      	bne.n	8006d14 <xQueueSemaphoreTake+0x1d0>
					{
						taskENTER_CRITICAL();
 8006d00:	f002 fa08 	bl	8009114 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f001 fa91 	bl	8008230 <xTaskPriorityInherit>
 8006d0e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006d10:	f002 fa30 	bl	8009174 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d16:	3324      	adds	r3, #36	; 0x24
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	4611      	mov	r1, r2
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f000 ff67 	bl	8007bf0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d24:	f000 f9bc 	bl	80070a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d28:	f000 fd68 	bl	80077fc <xTaskResumeAll>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f47f af48 	bne.w	8006bc4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006d34:	4b20      	ldr	r3, [pc, #128]	; (8006db8 <xQueueSemaphoreTake+0x274>)
 8006d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d3a:	601a      	str	r2, [r3, #0]
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	e73e      	b.n	8006bc4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006d46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d48:	f000 f9aa 	bl	80070a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d4c:	f000 fd56 	bl	80077fc <xTaskResumeAll>
 8006d50:	e738      	b.n	8006bc4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006d52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d54:	f000 f9a4 	bl	80070a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d58:	f000 fd50 	bl	80077fc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d5e:	f000 f9f1 	bl	8007144 <prvIsQueueEmpty>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f43f af2d 	beq.w	8006bc4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00d      	beq.n	8006d8c <xQueueSemaphoreTake+0x248>
					{
						taskENTER_CRITICAL();
 8006d70:	f002 f9d0 	bl	8009114 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006d74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d76:	f000 f8eb 	bl	8006f50 <prvGetDisinheritPriorityAfterTimeout>
 8006d7a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d82:	4618      	mov	r0, r3
 8006d84:	f001 fb3c 	bl	8008400 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006d88:	f002 f9f4 	bl	8009174 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8006d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f003 fe58 	bl	800aa44 <SEGGER_SYSVIEW_ShrinkId>
 8006d94:	4604      	mov	r4, r0
 8006d96:	2000      	movs	r0, #0
 8006d98:	f003 fe54 	bl	800aa44 <SEGGER_SYSVIEW_ShrinkId>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2101      	movs	r1, #1
 8006da2:	9100      	str	r1, [sp, #0]
 8006da4:	4621      	mov	r1, r4
 8006da6:	205c      	movs	r0, #92	; 0x5c
 8006da8:	f003 fa10 	bl	800a1cc <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8006dac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	373c      	adds	r7, #60	; 0x3c
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd90      	pop	{r4, r7, pc}
 8006db6:	bf00      	nop
 8006db8:	e000ed04 	.word	0xe000ed04

08006dbc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006dbc:	b590      	push	{r4, r7, lr}
 8006dbe:	b08f      	sub	sp, #60	; 0x3c
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10a      	bne.n	8006de8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	623b      	str	r3, [r7, #32]
}
 8006de4:	bf00      	nop
 8006de6:	e7fe      	b.n	8006de6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d103      	bne.n	8006df6 <xQueueReceiveFromISR+0x3a>
 8006dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <xQueueReceiveFromISR+0x3e>
 8006df6:	2301      	movs	r3, #1
 8006df8:	e000      	b.n	8006dfc <xQueueReceiveFromISR+0x40>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10a      	bne.n	8006e16 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	61fb      	str	r3, [r7, #28]
}
 8006e12:	bf00      	nop
 8006e14:	e7fe      	b.n	8006e14 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e16:	f002 fa5f 	bl	80092d8 <vPortValidateInterruptPriority>
	__asm volatile
 8006e1a:	f3ef 8211 	mrs	r2, BASEPRI
 8006e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	61ba      	str	r2, [r7, #24]
 8006e30:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006e32:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e34:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d03e      	beq.n	8006ec0 <xQueueReceiveFromISR+0x104>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8006e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f003 fdf8 	bl	800aa44 <SEGGER_SYSVIEW_ShrinkId>
 8006e54:	4604      	mov	r4, r0
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f003 fdf3 	bl	800aa44 <SEGGER_SYSVIEW_ShrinkId>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4621      	mov	r1, r4
 8006e64:	2062      	movs	r0, #98	; 0x62
 8006e66:	f003 f93b 	bl	800a0e0 <SEGGER_SYSVIEW_RecordU32x3>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e6a:	68b9      	ldr	r1, [r7, #8]
 8006e6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e6e:	f000 f8f1 	bl	8007054 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e74:	1e5a      	subs	r2, r3, #1
 8006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e78:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006e7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e82:	d112      	bne.n	8006eaa <xQueueReceiveFromISR+0xee>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d016      	beq.n	8006eba <xQueueReceiveFromISR+0xfe>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8e:	3310      	adds	r3, #16
 8006e90:	4618      	mov	r0, r3
 8006e92:	f000 ff3b 	bl	8007d0c <xTaskRemoveFromEventList>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00e      	beq.n	8006eba <xQueueReceiveFromISR+0xfe>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00b      	beq.n	8006eba <xQueueReceiveFromISR+0xfe>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	601a      	str	r2, [r3, #0]
 8006ea8:	e007      	b.n	8006eba <xQueueReceiveFromISR+0xfe>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006eaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006eae:	3301      	adds	r3, #1
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	b25a      	sxtb	r2, r3
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8006ebe:	e010      	b.n	8006ee2 <xQueueReceiveFromISR+0x126>
		}
		else
		{
			xReturn = pdFAIL;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f003 fdbc 	bl	800aa44 <SEGGER_SYSVIEW_ShrinkId>
 8006ecc:	4604      	mov	r4, r0
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f003 fdb7 	bl	800aa44 <SEGGER_SYSVIEW_ShrinkId>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4621      	mov	r1, r4
 8006edc:	2062      	movs	r0, #98	; 0x62
 8006ede:	f003 f8ff 	bl	800a0e0 <SEGGER_SYSVIEW_RecordU32x3>
 8006ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	f383 8811 	msr	BASEPRI, r3
}
 8006eec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	373c      	adds	r7, #60	; 0x3c
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd90      	pop	{r4, r7, pc}

08006ef8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10a      	bne.n	8006f20 <vQueueDelete+0x28>
	__asm volatile
 8006f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0e:	f383 8811 	msr	BASEPRI, r3
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	60bb      	str	r3, [r7, #8]
}
 8006f1c:	bf00      	nop
 8006f1e:	e7fe      	b.n	8006f1e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f003 fd8e 	bl	800aa44 <SEGGER_SYSVIEW_ShrinkId>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	205f      	movs	r0, #95	; 0x5f
 8006f2e:	f003 f841 	bl	8009fb4 <SEGGER_SYSVIEW_RecordU32>

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f000 f966 	bl	8007204 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d102      	bne.n	8006f48 <vQueueDelete+0x50>
		{
			vPortFree( pxQueue );
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f002 fad4 	bl	80094f0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006f48:	bf00      	nop
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d006      	beq.n	8006f6e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006f6a:	60fb      	str	r3, [r7, #12]
 8006f6c:	e001      	b.n	8006f72 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006f72:	68fb      	ldr	r3, [r7, #12]
	}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3714      	adds	r7, #20
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10d      	bne.n	8006fba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d14d      	bne.n	8007042 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f001 f9b2 	bl	8008314 <xTaskPriorityDisinherit>
 8006fb0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	609a      	str	r2, [r3, #8]
 8006fb8:	e043      	b.n	8007042 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d119      	bne.n	8006ff4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6858      	ldr	r0, [r3, #4]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc8:	461a      	mov	r2, r3
 8006fca:	68b9      	ldr	r1, [r7, #8]
 8006fcc:	f004 f924 	bl	800b218 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd8:	441a      	add	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d32b      	bcc.n	8007042 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	605a      	str	r2, [r3, #4]
 8006ff2:	e026      	b.n	8007042 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	68d8      	ldr	r0, [r3, #12]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	68b9      	ldr	r1, [r7, #8]
 8007000:	f004 f90a 	bl	800b218 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	68da      	ldr	r2, [r3, #12]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700c:	425b      	negs	r3, r3
 800700e:	441a      	add	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	68da      	ldr	r2, [r3, #12]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	429a      	cmp	r2, r3
 800701e:	d207      	bcs.n	8007030 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007028:	425b      	negs	r3, r3
 800702a:	441a      	add	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b02      	cmp	r3, #2
 8007034:	d105      	bne.n	8007042 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d002      	beq.n	8007042 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	3b01      	subs	r3, #1
 8007040:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	1c5a      	adds	r2, r3, #1
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800704a:	697b      	ldr	r3, [r7, #20]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3718      	adds	r7, #24
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007062:	2b00      	cmp	r3, #0
 8007064:	d018      	beq.n	8007098 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	68da      	ldr	r2, [r3, #12]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706e:	441a      	add	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	68da      	ldr	r2, [r3, #12]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	429a      	cmp	r2, r3
 800707e:	d303      	bcc.n	8007088 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	68d9      	ldr	r1, [r3, #12]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007090:	461a      	mov	r2, r3
 8007092:	6838      	ldr	r0, [r7, #0]
 8007094:	f004 f8c0 	bl	800b218 <memcpy>
	}
}
 8007098:	bf00      	nop
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80070a8:	f002 f834 	bl	8009114 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070b4:	e011      	b.n	80070da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d012      	beq.n	80070e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	3324      	adds	r3, #36	; 0x24
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 fe22 	bl	8007d0c <xTaskRemoveFromEventList>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80070ce:	f000 ff63 	bl	8007f98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80070d2:	7bfb      	ldrb	r3, [r7, #15]
 80070d4:	3b01      	subs	r3, #1
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	dce9      	bgt.n	80070b6 <prvUnlockQueue+0x16>
 80070e2:	e000      	b.n	80070e6 <prvUnlockQueue+0x46>
					break;
 80070e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	22ff      	movs	r2, #255	; 0xff
 80070ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80070ee:	f002 f841 	bl	8009174 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80070f2:	f002 f80f 	bl	8009114 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070fe:	e011      	b.n	8007124 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d012      	beq.n	800712e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3310      	adds	r3, #16
 800710c:	4618      	mov	r0, r3
 800710e:	f000 fdfd 	bl	8007d0c <xTaskRemoveFromEventList>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007118:	f000 ff3e 	bl	8007f98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800711c:	7bbb      	ldrb	r3, [r7, #14]
 800711e:	3b01      	subs	r3, #1
 8007120:	b2db      	uxtb	r3, r3
 8007122:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007124:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007128:	2b00      	cmp	r3, #0
 800712a:	dce9      	bgt.n	8007100 <prvUnlockQueue+0x60>
 800712c:	e000      	b.n	8007130 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800712e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	22ff      	movs	r2, #255	; 0xff
 8007134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007138:	f002 f81c 	bl	8009174 <vPortExitCritical>
}
 800713c:	bf00      	nop
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800714c:	f001 ffe2 	bl	8009114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007154:	2b00      	cmp	r3, #0
 8007156:	d102      	bne.n	800715e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007158:	2301      	movs	r3, #1
 800715a:	60fb      	str	r3, [r7, #12]
 800715c:	e001      	b.n	8007162 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800715e:	2300      	movs	r3, #0
 8007160:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007162:	f002 f807 	bl	8009174 <vPortExitCritical>

	return xReturn;
 8007166:	68fb      	ldr	r3, [r7, #12]
}
 8007168:	4618      	mov	r0, r3
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007178:	f001 ffcc 	bl	8009114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007184:	429a      	cmp	r2, r3
 8007186:	d102      	bne.n	800718e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007188:	2301      	movs	r3, #1
 800718a:	60fb      	str	r3, [r7, #12]
 800718c:	e001      	b.n	8007192 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800718e:	2300      	movs	r3, #0
 8007190:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007192:	f001 ffef 	bl	8009174 <vPortExitCritical>

	return xReturn;
 8007196:	68fb      	ldr	r3, [r7, #12]
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071aa:	2300      	movs	r3, #0
 80071ac:	60fb      	str	r3, [r7, #12]
 80071ae:	e01e      	b.n	80071ee <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80071b0:	4a13      	ldr	r2, [pc, #76]	; (8007200 <vQueueAddToRegistry+0x60>)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d115      	bne.n	80071e8 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80071bc:	4910      	ldr	r1, [pc, #64]	; (8007200 <vQueueAddToRegistry+0x60>)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80071c6:	4a0e      	ldr	r2, [pc, #56]	; (8007200 <vQueueAddToRegistry+0x60>)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	00db      	lsls	r3, r3, #3
 80071cc:	4413      	add	r3, r2
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f003 fc35 	bl	800aa44 <SEGGER_SYSVIEW_ShrinkId>
 80071da:	4601      	mov	r1, r0
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	461a      	mov	r2, r3
 80071e0:	2071      	movs	r0, #113	; 0x71
 80071e2:	f002 ff23 	bl	800a02c <SEGGER_SYSVIEW_RecordU32x2>
				break;
 80071e6:	e006      	b.n	80071f6 <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	3301      	adds	r3, #1
 80071ec:	60fb      	str	r3, [r7, #12]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2b07      	cmp	r3, #7
 80071f2:	d9dd      	bls.n	80071b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80071f4:	bf00      	nop
 80071f6:	bf00      	nop
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	20027a50 	.word	0x20027a50

08007204 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800720c:	2300      	movs	r3, #0
 800720e:	60fb      	str	r3, [r7, #12]
 8007210:	e016      	b.n	8007240 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007212:	4a10      	ldr	r2, [pc, #64]	; (8007254 <vQueueUnregisterQueue+0x50>)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	00db      	lsls	r3, r3, #3
 8007218:	4413      	add	r3, r2
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	429a      	cmp	r2, r3
 8007220:	d10b      	bne.n	800723a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007222:	4a0c      	ldr	r2, [pc, #48]	; (8007254 <vQueueUnregisterQueue+0x50>)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2100      	movs	r1, #0
 8007228:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800722c:	4a09      	ldr	r2, [pc, #36]	; (8007254 <vQueueUnregisterQueue+0x50>)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	00db      	lsls	r3, r3, #3
 8007232:	4413      	add	r3, r2
 8007234:	2200      	movs	r2, #0
 8007236:	605a      	str	r2, [r3, #4]
				break;
 8007238:	e006      	b.n	8007248 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	3301      	adds	r3, #1
 800723e:	60fb      	str	r3, [r7, #12]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2b07      	cmp	r3, #7
 8007244:	d9e5      	bls.n	8007212 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007246:	bf00      	nop
 8007248:	bf00      	nop
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	20027a50 	.word	0x20027a50

08007258 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007268:	f001 ff54 	bl	8009114 <vPortEnterCritical>
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007272:	b25b      	sxtb	r3, r3
 8007274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007278:	d103      	bne.n	8007282 <vQueueWaitForMessageRestricted+0x2a>
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007288:	b25b      	sxtb	r3, r3
 800728a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800728e:	d103      	bne.n	8007298 <vQueueWaitForMessageRestricted+0x40>
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007298:	f001 ff6c 	bl	8009174 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d106      	bne.n	80072b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	3324      	adds	r3, #36	; 0x24
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	68b9      	ldr	r1, [r7, #8]
 80072ac:	4618      	mov	r0, r3
 80072ae:	f000 fcff 	bl	8007cb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80072b2:	6978      	ldr	r0, [r7, #20]
 80072b4:	f7ff fef4 	bl	80070a0 <prvUnlockQueue>
	}
 80072b8:	bf00      	nop
 80072ba:	3718      	adds	r7, #24
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b08e      	sub	sp, #56	; 0x38
 80072c4:	af04      	add	r7, sp, #16
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
 80072cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80072ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10a      	bne.n	80072ea <xTaskCreateStatic+0x2a>
	__asm volatile
 80072d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	623b      	str	r3, [r7, #32]
}
 80072e6:	bf00      	nop
 80072e8:	e7fe      	b.n	80072e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80072ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10a      	bne.n	8007306 <xTaskCreateStatic+0x46>
	__asm volatile
 80072f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f4:	f383 8811 	msr	BASEPRI, r3
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	61fb      	str	r3, [r7, #28]
}
 8007302:	bf00      	nop
 8007304:	e7fe      	b.n	8007304 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007306:	23a8      	movs	r3, #168	; 0xa8
 8007308:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	2ba8      	cmp	r3, #168	; 0xa8
 800730e:	d00a      	beq.n	8007326 <xTaskCreateStatic+0x66>
	__asm volatile
 8007310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007314:	f383 8811 	msr	BASEPRI, r3
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	61bb      	str	r3, [r7, #24]
}
 8007322:	bf00      	nop
 8007324:	e7fe      	b.n	8007324 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007326:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732a:	2b00      	cmp	r3, #0
 800732c:	d01e      	beq.n	800736c <xTaskCreateStatic+0xac>
 800732e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007330:	2b00      	cmp	r3, #0
 8007332:	d01b      	beq.n	800736c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007336:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800733c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800733e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007340:	2202      	movs	r2, #2
 8007342:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007346:	2300      	movs	r3, #0
 8007348:	9303      	str	r3, [sp, #12]
 800734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734c:	9302      	str	r3, [sp, #8]
 800734e:	f107 0314 	add.w	r3, r7, #20
 8007352:	9301      	str	r3, [sp, #4]
 8007354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	68b9      	ldr	r1, [r7, #8]
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f000 f850 	bl	8007404 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007364:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007366:	f000 f8f3 	bl	8007550 <prvAddNewTaskToReadyList>
 800736a:	e001      	b.n	8007370 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800736c:	2300      	movs	r3, #0
 800736e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007370:	697b      	ldr	r3, [r7, #20]
	}
 8007372:	4618      	mov	r0, r3
 8007374:	3728      	adds	r7, #40	; 0x28
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800737a:	b580      	push	{r7, lr}
 800737c:	b08c      	sub	sp, #48	; 0x30
 800737e:	af04      	add	r7, sp, #16
 8007380:	60f8      	str	r0, [r7, #12]
 8007382:	60b9      	str	r1, [r7, #8]
 8007384:	603b      	str	r3, [r7, #0]
 8007386:	4613      	mov	r3, r2
 8007388:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800738a:	88fb      	ldrh	r3, [r7, #6]
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4618      	mov	r0, r3
 8007390:	f001 ffe2 	bl	8009358 <pvPortMalloc>
 8007394:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00e      	beq.n	80073ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800739c:	20a8      	movs	r0, #168	; 0xa8
 800739e:	f001 ffdb 	bl	8009358 <pvPortMalloc>
 80073a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	631a      	str	r2, [r3, #48]	; 0x30
 80073b0:	e005      	b.n	80073be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80073b2:	6978      	ldr	r0, [r7, #20]
 80073b4:	f002 f89c 	bl	80094f0 <vPortFree>
 80073b8:	e001      	b.n	80073be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80073ba:	2300      	movs	r3, #0
 80073bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d017      	beq.n	80073f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80073cc:	88fa      	ldrh	r2, [r7, #6]
 80073ce:	2300      	movs	r3, #0
 80073d0:	9303      	str	r3, [sp, #12]
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	9302      	str	r3, [sp, #8]
 80073d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d8:	9301      	str	r3, [sp, #4]
 80073da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	68b9      	ldr	r1, [r7, #8]
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f000 f80e 	bl	8007404 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073e8:	69f8      	ldr	r0, [r7, #28]
 80073ea:	f000 f8b1 	bl	8007550 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80073ee:	2301      	movs	r3, #1
 80073f0:	61bb      	str	r3, [r7, #24]
 80073f2:	e002      	b.n	80073fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80073f4:	f04f 33ff 	mov.w	r3, #4294967295
 80073f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80073fa:	69bb      	ldr	r3, [r7, #24]
	}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3720      	adds	r7, #32
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b088      	sub	sp, #32
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
 8007410:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007414:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	461a      	mov	r2, r3
 800741c:	21a5      	movs	r1, #165	; 0xa5
 800741e:	f003 fe76 	bl	800b10e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800742c:	3b01      	subs	r3, #1
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	f023 0307 	bic.w	r3, r3, #7
 800743a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	f003 0307 	and.w	r3, r3, #7
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00a      	beq.n	800745c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744a:	f383 8811 	msr	BASEPRI, r3
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	617b      	str	r3, [r7, #20]
}
 8007458:	bf00      	nop
 800745a:	e7fe      	b.n	800745a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d01f      	beq.n	80074a2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007462:	2300      	movs	r3, #0
 8007464:	61fb      	str	r3, [r7, #28]
 8007466:	e012      	b.n	800748e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	4413      	add	r3, r2
 800746e:	7819      	ldrb	r1, [r3, #0]
 8007470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	4413      	add	r3, r2
 8007476:	3334      	adds	r3, #52	; 0x34
 8007478:	460a      	mov	r2, r1
 800747a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	4413      	add	r3, r2
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d006      	beq.n	8007496 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	3301      	adds	r3, #1
 800748c:	61fb      	str	r3, [r7, #28]
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	2b0f      	cmp	r3, #15
 8007492:	d9e9      	bls.n	8007468 <prvInitialiseNewTask+0x64>
 8007494:	e000      	b.n	8007498 <prvInitialiseNewTask+0x94>
			{
				break;
 8007496:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749a:	2200      	movs	r2, #0
 800749c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074a0:	e003      	b.n	80074aa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80074a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ac:	2b37      	cmp	r3, #55	; 0x37
 80074ae:	d901      	bls.n	80074b4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074b0:	2337      	movs	r3, #55	; 0x37
 80074b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80074c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c2:	2200      	movs	r2, #0
 80074c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c8:	3304      	adds	r3, #4
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fe fcbc 	bl	8005e48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d2:	3318      	adds	r3, #24
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7fe fcb7 	bl	8005e48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80074da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80074e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80074ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80074f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f2:	2200      	movs	r2, #0
 80074f4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007502:	3354      	adds	r3, #84	; 0x54
 8007504:	224c      	movs	r2, #76	; 0x4c
 8007506:	2100      	movs	r1, #0
 8007508:	4618      	mov	r0, r3
 800750a:	f003 fe00 	bl	800b10e <memset>
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	4a0c      	ldr	r2, [pc, #48]	; (8007544 <prvInitialiseNewTask+0x140>)
 8007512:	659a      	str	r2, [r3, #88]	; 0x58
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	4a0c      	ldr	r2, [pc, #48]	; (8007548 <prvInitialiseNewTask+0x144>)
 8007518:	65da      	str	r2, [r3, #92]	; 0x5c
 800751a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751c:	4a0b      	ldr	r2, [pc, #44]	; (800754c <prvInitialiseNewTask+0x148>)
 800751e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007520:	683a      	ldr	r2, [r7, #0]
 8007522:	68f9      	ldr	r1, [r7, #12]
 8007524:	69b8      	ldr	r0, [r7, #24]
 8007526:	f001 fcc7 	bl	8008eb8 <pxPortInitialiseStack>
 800752a:	4602      	mov	r2, r0
 800752c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007532:	2b00      	cmp	r3, #0
 8007534:	d002      	beq.n	800753c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800753a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800753c:	bf00      	nop
 800753e:	3720      	adds	r7, #32
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	2002c760 	.word	0x2002c760
 8007548:	2002c7c8 	.word	0x2002c7c8
 800754c:	2002c830 	.word	0x2002c830

08007550 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007550:	b5b0      	push	{r4, r5, r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af02      	add	r7, sp, #8
 8007556:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007558:	f001 fddc 	bl	8009114 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800755c:	4b3c      	ldr	r3, [pc, #240]	; (8007650 <prvAddNewTaskToReadyList+0x100>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3301      	adds	r3, #1
 8007562:	4a3b      	ldr	r2, [pc, #236]	; (8007650 <prvAddNewTaskToReadyList+0x100>)
 8007564:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007566:	4b3b      	ldr	r3, [pc, #236]	; (8007654 <prvAddNewTaskToReadyList+0x104>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d109      	bne.n	8007582 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800756e:	4a39      	ldr	r2, [pc, #228]	; (8007654 <prvAddNewTaskToReadyList+0x104>)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007574:	4b36      	ldr	r3, [pc, #216]	; (8007650 <prvAddNewTaskToReadyList+0x100>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d110      	bne.n	800759e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800757c:	f000 fd30 	bl	8007fe0 <prvInitialiseTaskLists>
 8007580:	e00d      	b.n	800759e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007582:	4b35      	ldr	r3, [pc, #212]	; (8007658 <prvAddNewTaskToReadyList+0x108>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d109      	bne.n	800759e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800758a:	4b32      	ldr	r3, [pc, #200]	; (8007654 <prvAddNewTaskToReadyList+0x104>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007594:	429a      	cmp	r2, r3
 8007596:	d802      	bhi.n	800759e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007598:	4a2e      	ldr	r2, [pc, #184]	; (8007654 <prvAddNewTaskToReadyList+0x104>)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800759e:	4b2f      	ldr	r3, [pc, #188]	; (800765c <prvAddNewTaskToReadyList+0x10c>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3301      	adds	r3, #1
 80075a4:	4a2d      	ldr	r2, [pc, #180]	; (800765c <prvAddNewTaskToReadyList+0x10c>)
 80075a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80075a8:	4b2c      	ldr	r3, [pc, #176]	; (800765c <prvAddNewTaskToReadyList+0x10c>)
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d016      	beq.n	80075e4 <prvAddNewTaskToReadyList+0x94>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4618      	mov	r0, r3
 80075ba:	f003 f97d 	bl	800a8b8 <SEGGER_SYSVIEW_OnTaskCreate>
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ce:	461d      	mov	r5, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	461c      	mov	r4, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075da:	1ae3      	subs	r3, r4, r3
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	462b      	mov	r3, r5
 80075e0:	f003 fcfc 	bl	800afdc <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f003 f9ea 	bl	800a9c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f0:	4b1b      	ldr	r3, [pc, #108]	; (8007660 <prvAddNewTaskToReadyList+0x110>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d903      	bls.n	8007600 <prvAddNewTaskToReadyList+0xb0>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fc:	4a18      	ldr	r2, [pc, #96]	; (8007660 <prvAddNewTaskToReadyList+0x110>)
 80075fe:	6013      	str	r3, [r2, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007604:	4613      	mov	r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	4413      	add	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	4a15      	ldr	r2, [pc, #84]	; (8007664 <prvAddNewTaskToReadyList+0x114>)
 800760e:	441a      	add	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	3304      	adds	r3, #4
 8007614:	4619      	mov	r1, r3
 8007616:	4610      	mov	r0, r2
 8007618:	f7fe fc23 	bl	8005e62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800761c:	f001 fdaa 	bl	8009174 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007620:	4b0d      	ldr	r3, [pc, #52]	; (8007658 <prvAddNewTaskToReadyList+0x108>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00e      	beq.n	8007646 <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007628:	4b0a      	ldr	r3, [pc, #40]	; (8007654 <prvAddNewTaskToReadyList+0x104>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007632:	429a      	cmp	r2, r3
 8007634:	d207      	bcs.n	8007646 <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007636:	4b0c      	ldr	r3, [pc, #48]	; (8007668 <prvAddNewTaskToReadyList+0x118>)
 8007638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007646:	bf00      	nop
 8007648:	3708      	adds	r7, #8
 800764a:	46bd      	mov	sp, r7
 800764c:	bdb0      	pop	{r4, r5, r7, pc}
 800764e:	bf00      	nop
 8007650:	20027f64 	.word	0x20027f64
 8007654:	20027a90 	.word	0x20027a90
 8007658:	20027f70 	.word	0x20027f70
 800765c:	20027f80 	.word	0x20027f80
 8007660:	20027f6c 	.word	0x20027f6c
 8007664:	20027a94 	.word	0x20027a94
 8007668:	e000ed04 	.word	0xe000ed04

0800766c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007674:	2300      	movs	r3, #0
 8007676:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d01b      	beq.n	80076b6 <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800767e:	4b15      	ldr	r3, [pc, #84]	; (80076d4 <vTaskDelay+0x68>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00a      	beq.n	800769c <vTaskDelay+0x30>
	__asm volatile
 8007686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768a:	f383 8811 	msr	BASEPRI, r3
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	60bb      	str	r3, [r7, #8]
}
 8007698:	bf00      	nop
 800769a:	e7fe      	b.n	800769a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800769c:	f000 f8a0 	bl	80077e0 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 80076a0:	6879      	ldr	r1, [r7, #4]
 80076a2:	2023      	movs	r0, #35	; 0x23
 80076a4:	f002 fc86 	bl	8009fb4 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80076a8:	2100      	movs	r1, #0
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 ff5e 	bl	800856c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80076b0:	f000 f8a4 	bl	80077fc <xTaskResumeAll>
 80076b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d107      	bne.n	80076cc <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 80076bc:	4b06      	ldr	r3, [pc, #24]	; (80076d8 <vTaskDelay+0x6c>)
 80076be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076c2:	601a      	str	r2, [r3, #0]
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076cc:	bf00      	nop
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	20027f8c 	.word	0x20027f8c
 80076d8:	e000ed04 	.word	0xe000ed04

080076dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b08a      	sub	sp, #40	; 0x28
 80076e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80076e2:	2300      	movs	r3, #0
 80076e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80076e6:	2300      	movs	r3, #0
 80076e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80076ea:	463a      	mov	r2, r7
 80076ec:	1d39      	adds	r1, r7, #4
 80076ee:	f107 0308 	add.w	r3, r7, #8
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fe f966 	bl	80059c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	9202      	str	r2, [sp, #8]
 8007700:	9301      	str	r3, [sp, #4]
 8007702:	2300      	movs	r3, #0
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	2300      	movs	r3, #0
 8007708:	460a      	mov	r2, r1
 800770a:	492d      	ldr	r1, [pc, #180]	; (80077c0 <vTaskStartScheduler+0xe4>)
 800770c:	482d      	ldr	r0, [pc, #180]	; (80077c4 <vTaskStartScheduler+0xe8>)
 800770e:	f7ff fdd7 	bl	80072c0 <xTaskCreateStatic>
 8007712:	4603      	mov	r3, r0
 8007714:	4a2c      	ldr	r2, [pc, #176]	; (80077c8 <vTaskStartScheduler+0xec>)
 8007716:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007718:	4b2b      	ldr	r3, [pc, #172]	; (80077c8 <vTaskStartScheduler+0xec>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d002      	beq.n	8007726 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007720:	2301      	movs	r3, #1
 8007722:	617b      	str	r3, [r7, #20]
 8007724:	e001      	b.n	800772a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007726:	2300      	movs	r3, #0
 8007728:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d102      	bne.n	8007736 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007730:	f000 ff70 	bl	8008614 <xTimerCreateTimerTask>
 8007734:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d12e      	bne.n	800779a <vTaskStartScheduler+0xbe>
	__asm volatile
 800773c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007740:	f383 8811 	msr	BASEPRI, r3
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	f3bf 8f4f 	dsb	sy
 800774c:	613b      	str	r3, [r7, #16]
}
 800774e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007750:	4b1e      	ldr	r3, [pc, #120]	; (80077cc <vTaskStartScheduler+0xf0>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	3354      	adds	r3, #84	; 0x54
 8007756:	4a1e      	ldr	r2, [pc, #120]	; (80077d0 <vTaskStartScheduler+0xf4>)
 8007758:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800775a:	4b1e      	ldr	r3, [pc, #120]	; (80077d4 <vTaskStartScheduler+0xf8>)
 800775c:	f04f 32ff 	mov.w	r2, #4294967295
 8007760:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007762:	4b1d      	ldr	r3, [pc, #116]	; (80077d8 <vTaskStartScheduler+0xfc>)
 8007764:	2201      	movs	r2, #1
 8007766:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007768:	4b1c      	ldr	r3, [pc, #112]	; (80077dc <vTaskStartScheduler+0x100>)
 800776a:	2200      	movs	r2, #0
 800776c:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 800776e:	4b17      	ldr	r3, [pc, #92]	; (80077cc <vTaskStartScheduler+0xf0>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	3334      	adds	r3, #52	; 0x34
 8007774:	2205      	movs	r2, #5
 8007776:	4912      	ldr	r1, [pc, #72]	; (80077c0 <vTaskStartScheduler+0xe4>)
 8007778:	4618      	mov	r0, r3
 800777a:	f003 fcb8 	bl	800b0ee <memcmp>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d005      	beq.n	8007790 <vTaskStartScheduler+0xb4>
 8007784:	4b11      	ldr	r3, [pc, #68]	; (80077cc <vTaskStartScheduler+0xf0>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4618      	mov	r0, r3
 800778a:	f003 f8d7 	bl	800a93c <SEGGER_SYSVIEW_OnTaskStartExec>
 800778e:	e001      	b.n	8007794 <vTaskStartScheduler+0xb8>
 8007790:	f003 f876 	bl	800a880 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007794:	f001 fc1c 	bl	8008fd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007798:	e00e      	b.n	80077b8 <vTaskStartScheduler+0xdc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a0:	d10a      	bne.n	80077b8 <vTaskStartScheduler+0xdc>
	__asm volatile
 80077a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a6:	f383 8811 	msr	BASEPRI, r3
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	60fb      	str	r3, [r7, #12]
}
 80077b4:	bf00      	nop
 80077b6:	e7fe      	b.n	80077b6 <vTaskStartScheduler+0xda>
}
 80077b8:	bf00      	nop
 80077ba:	3718      	adds	r7, #24
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	0800b474 	.word	0x0800b474
 80077c4:	08007fb1 	.word	0x08007fb1
 80077c8:	20027f88 	.word	0x20027f88
 80077cc:	20027a90 	.word	0x20027a90
 80077d0:	2000006c 	.word	0x2000006c
 80077d4:	20027f84 	.word	0x20027f84
 80077d8:	20027f70 	.word	0x20027f70
 80077dc:	20027f68 	.word	0x20027f68

080077e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80077e0:	b480      	push	{r7}
 80077e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80077e4:	4b04      	ldr	r3, [pc, #16]	; (80077f8 <vTaskSuspendAll+0x18>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	3301      	adds	r3, #1
 80077ea:	4a03      	ldr	r2, [pc, #12]	; (80077f8 <vTaskSuspendAll+0x18>)
 80077ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80077ee:	bf00      	nop
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr
 80077f8:	20027f8c 	.word	0x20027f8c

080077fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007802:	2300      	movs	r3, #0
 8007804:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007806:	2300      	movs	r3, #0
 8007808:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800780a:	4b44      	ldr	r3, [pc, #272]	; (800791c <xTaskResumeAll+0x120>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10a      	bne.n	8007828 <xTaskResumeAll+0x2c>
	__asm volatile
 8007812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	603b      	str	r3, [r7, #0]
}
 8007824:	bf00      	nop
 8007826:	e7fe      	b.n	8007826 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007828:	f001 fc74 	bl	8009114 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800782c:	4b3b      	ldr	r3, [pc, #236]	; (800791c <xTaskResumeAll+0x120>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	3b01      	subs	r3, #1
 8007832:	4a3a      	ldr	r2, [pc, #232]	; (800791c <xTaskResumeAll+0x120>)
 8007834:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007836:	4b39      	ldr	r3, [pc, #228]	; (800791c <xTaskResumeAll+0x120>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d166      	bne.n	800790c <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800783e:	4b38      	ldr	r3, [pc, #224]	; (8007920 <xTaskResumeAll+0x124>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d062      	beq.n	800790c <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007846:	e033      	b.n	80078b0 <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007848:	4b36      	ldr	r3, [pc, #216]	; (8007924 <xTaskResumeAll+0x128>)
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	3318      	adds	r3, #24
 8007854:	4618      	mov	r0, r3
 8007856:	f7fe fb61 	bl	8005f1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	3304      	adds	r3, #4
 800785e:	4618      	mov	r0, r3
 8007860:	f7fe fb5c 	bl	8005f1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	4618      	mov	r0, r3
 8007868:	f003 f8aa 	bl	800a9c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007870:	4b2d      	ldr	r3, [pc, #180]	; (8007928 <xTaskResumeAll+0x12c>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	429a      	cmp	r2, r3
 8007876:	d903      	bls.n	8007880 <xTaskResumeAll+0x84>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787c:	4a2a      	ldr	r2, [pc, #168]	; (8007928 <xTaskResumeAll+0x12c>)
 800787e:	6013      	str	r3, [r2, #0]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007884:	4613      	mov	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4413      	add	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	4a27      	ldr	r2, [pc, #156]	; (800792c <xTaskResumeAll+0x130>)
 800788e:	441a      	add	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	3304      	adds	r3, #4
 8007894:	4619      	mov	r1, r3
 8007896:	4610      	mov	r0, r2
 8007898:	f7fe fae3 	bl	8005e62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a0:	4b23      	ldr	r3, [pc, #140]	; (8007930 <xTaskResumeAll+0x134>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d302      	bcc.n	80078b0 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 80078aa:	4b22      	ldr	r3, [pc, #136]	; (8007934 <xTaskResumeAll+0x138>)
 80078ac:	2201      	movs	r2, #1
 80078ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078b0:	4b1c      	ldr	r3, [pc, #112]	; (8007924 <xTaskResumeAll+0x128>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1c7      	bne.n	8007848 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d001      	beq.n	80078c2 <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80078be:	f000 fc69 	bl	8008194 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80078c2:	4b1d      	ldr	r3, [pc, #116]	; (8007938 <xTaskResumeAll+0x13c>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d010      	beq.n	80078f0 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80078ce:	f000 f859 	bl	8007984 <xTaskIncrementTick>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 80078d8:	4b16      	ldr	r3, [pc, #88]	; (8007934 <xTaskResumeAll+0x138>)
 80078da:	2201      	movs	r2, #1
 80078dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	3b01      	subs	r3, #1
 80078e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1f1      	bne.n	80078ce <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 80078ea:	4b13      	ldr	r3, [pc, #76]	; (8007938 <xTaskResumeAll+0x13c>)
 80078ec:	2200      	movs	r2, #0
 80078ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80078f0:	4b10      	ldr	r3, [pc, #64]	; (8007934 <xTaskResumeAll+0x138>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d009      	beq.n	800790c <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80078f8:	2301      	movs	r3, #1
 80078fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80078fc:	4b0f      	ldr	r3, [pc, #60]	; (800793c <xTaskResumeAll+0x140>)
 80078fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007902:	601a      	str	r2, [r3, #0]
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800790c:	f001 fc32 	bl	8009174 <vPortExitCritical>

	return xAlreadyYielded;
 8007910:	68bb      	ldr	r3, [r7, #8]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	20027f8c 	.word	0x20027f8c
 8007920:	20027f64 	.word	0x20027f64
 8007924:	20027f24 	.word	0x20027f24
 8007928:	20027f6c 	.word	0x20027f6c
 800792c:	20027a94 	.word	0x20027a94
 8007930:	20027a90 	.word	0x20027a90
 8007934:	20027f78 	.word	0x20027f78
 8007938:	20027f74 	.word	0x20027f74
 800793c:	e000ed04 	.word	0xe000ed04

08007940 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007946:	4b05      	ldr	r3, [pc, #20]	; (800795c <xTaskGetTickCount+0x1c>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800794c:	687b      	ldr	r3, [r7, #4]
}
 800794e:	4618      	mov	r0, r3
 8007950:	370c      	adds	r7, #12
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	20027f68 	.word	0x20027f68

08007960 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007966:	f001 fcb7 	bl	80092d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800796a:	2300      	movs	r3, #0
 800796c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800796e:	4b04      	ldr	r3, [pc, #16]	; (8007980 <xTaskGetTickCountFromISR+0x20>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007974:	683b      	ldr	r3, [r7, #0]
}
 8007976:	4618      	mov	r0, r3
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	20027f68 	.word	0x20027f68

08007984 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800798a:	2300      	movs	r3, #0
 800798c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800798e:	4b51      	ldr	r3, [pc, #324]	; (8007ad4 <xTaskIncrementTick+0x150>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	f040 8093 	bne.w	8007abe <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007998:	4b4f      	ldr	r3, [pc, #316]	; (8007ad8 <xTaskIncrementTick+0x154>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	3301      	adds	r3, #1
 800799e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80079a0:	4a4d      	ldr	r2, [pc, #308]	; (8007ad8 <xTaskIncrementTick+0x154>)
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d120      	bne.n	80079ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80079ac:	4b4b      	ldr	r3, [pc, #300]	; (8007adc <xTaskIncrementTick+0x158>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00a      	beq.n	80079cc <xTaskIncrementTick+0x48>
	__asm volatile
 80079b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	603b      	str	r3, [r7, #0]
}
 80079c8:	bf00      	nop
 80079ca:	e7fe      	b.n	80079ca <xTaskIncrementTick+0x46>
 80079cc:	4b43      	ldr	r3, [pc, #268]	; (8007adc <xTaskIncrementTick+0x158>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	60fb      	str	r3, [r7, #12]
 80079d2:	4b43      	ldr	r3, [pc, #268]	; (8007ae0 <xTaskIncrementTick+0x15c>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a41      	ldr	r2, [pc, #260]	; (8007adc <xTaskIncrementTick+0x158>)
 80079d8:	6013      	str	r3, [r2, #0]
 80079da:	4a41      	ldr	r2, [pc, #260]	; (8007ae0 <xTaskIncrementTick+0x15c>)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6013      	str	r3, [r2, #0]
 80079e0:	4b40      	ldr	r3, [pc, #256]	; (8007ae4 <xTaskIncrementTick+0x160>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	3301      	adds	r3, #1
 80079e6:	4a3f      	ldr	r2, [pc, #252]	; (8007ae4 <xTaskIncrementTick+0x160>)
 80079e8:	6013      	str	r3, [r2, #0]
 80079ea:	f000 fbd3 	bl	8008194 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80079ee:	4b3e      	ldr	r3, [pc, #248]	; (8007ae8 <xTaskIncrementTick+0x164>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	693a      	ldr	r2, [r7, #16]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d34d      	bcc.n	8007a94 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079f8:	4b38      	ldr	r3, [pc, #224]	; (8007adc <xTaskIncrementTick+0x158>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d104      	bne.n	8007a0c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a02:	4b39      	ldr	r3, [pc, #228]	; (8007ae8 <xTaskIncrementTick+0x164>)
 8007a04:	f04f 32ff 	mov.w	r2, #4294967295
 8007a08:	601a      	str	r2, [r3, #0]
					break;
 8007a0a:	e043      	b.n	8007a94 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a0c:	4b33      	ldr	r3, [pc, #204]	; (8007adc <xTaskIncrementTick+0x158>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d203      	bcs.n	8007a2c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a24:	4a30      	ldr	r2, [pc, #192]	; (8007ae8 <xTaskIncrementTick+0x164>)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a2a:	e033      	b.n	8007a94 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	3304      	adds	r3, #4
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fe fa73 	bl	8005f1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d004      	beq.n	8007a48 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	3318      	adds	r3, #24
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7fe fa6a 	bl	8005f1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f002 ffb8 	bl	800a9c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a54:	4b25      	ldr	r3, [pc, #148]	; (8007aec <xTaskIncrementTick+0x168>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d903      	bls.n	8007a64 <xTaskIncrementTick+0xe0>
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a60:	4a22      	ldr	r2, [pc, #136]	; (8007aec <xTaskIncrementTick+0x168>)
 8007a62:	6013      	str	r3, [r2, #0]
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a68:	4613      	mov	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4413      	add	r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	4a1f      	ldr	r2, [pc, #124]	; (8007af0 <xTaskIncrementTick+0x16c>)
 8007a72:	441a      	add	r2, r3
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	3304      	adds	r3, #4
 8007a78:	4619      	mov	r1, r3
 8007a7a:	4610      	mov	r0, r2
 8007a7c:	f7fe f9f1 	bl	8005e62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a84:	4b1b      	ldr	r3, [pc, #108]	; (8007af4 <xTaskIncrementTick+0x170>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d3b4      	bcc.n	80079f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a92:	e7b1      	b.n	80079f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a94:	4b17      	ldr	r3, [pc, #92]	; (8007af4 <xTaskIncrementTick+0x170>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a9a:	4915      	ldr	r1, [pc, #84]	; (8007af0 <xTaskIncrementTick+0x16c>)
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	4413      	add	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	440b      	add	r3, r1
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d901      	bls.n	8007ab0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8007aac:	2301      	movs	r3, #1
 8007aae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007ab0:	4b11      	ldr	r3, [pc, #68]	; (8007af8 <xTaskIncrementTick+0x174>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d007      	beq.n	8007ac8 <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	617b      	str	r3, [r7, #20]
 8007abc:	e004      	b.n	8007ac8 <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007abe:	4b0f      	ldr	r3, [pc, #60]	; (8007afc <xTaskIncrementTick+0x178>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	4a0d      	ldr	r2, [pc, #52]	; (8007afc <xTaskIncrementTick+0x178>)
 8007ac6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007ac8:	697b      	ldr	r3, [r7, #20]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3718      	adds	r7, #24
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	20027f8c 	.word	0x20027f8c
 8007ad8:	20027f68 	.word	0x20027f68
 8007adc:	20027f1c 	.word	0x20027f1c
 8007ae0:	20027f20 	.word	0x20027f20
 8007ae4:	20027f7c 	.word	0x20027f7c
 8007ae8:	20027f84 	.word	0x20027f84
 8007aec:	20027f6c 	.word	0x20027f6c
 8007af0:	20027a94 	.word	0x20027a94
 8007af4:	20027a90 	.word	0x20027a90
 8007af8:	20027f78 	.word	0x20027f78
 8007afc:	20027f74 	.word	0x20027f74

08007b00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b06:	4b33      	ldr	r3, [pc, #204]	; (8007bd4 <vTaskSwitchContext+0xd4>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d003      	beq.n	8007b16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b0e:	4b32      	ldr	r3, [pc, #200]	; (8007bd8 <vTaskSwitchContext+0xd8>)
 8007b10:	2201      	movs	r2, #1
 8007b12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b14:	e059      	b.n	8007bca <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8007b16:	4b30      	ldr	r3, [pc, #192]	; (8007bd8 <vTaskSwitchContext+0xd8>)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b1c:	4b2f      	ldr	r3, [pc, #188]	; (8007bdc <vTaskSwitchContext+0xdc>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	60fb      	str	r3, [r7, #12]
 8007b22:	e010      	b.n	8007b46 <vTaskSwitchContext+0x46>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10a      	bne.n	8007b40 <vTaskSwitchContext+0x40>
	__asm volatile
 8007b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2e:	f383 8811 	msr	BASEPRI, r3
 8007b32:	f3bf 8f6f 	isb	sy
 8007b36:	f3bf 8f4f 	dsb	sy
 8007b3a:	607b      	str	r3, [r7, #4]
}
 8007b3c:	bf00      	nop
 8007b3e:	e7fe      	b.n	8007b3e <vTaskSwitchContext+0x3e>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	3b01      	subs	r3, #1
 8007b44:	60fb      	str	r3, [r7, #12]
 8007b46:	4926      	ldr	r1, [pc, #152]	; (8007be0 <vTaskSwitchContext+0xe0>)
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	440b      	add	r3, r1
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d0e4      	beq.n	8007b24 <vTaskSwitchContext+0x24>
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	4413      	add	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4a1e      	ldr	r2, [pc, #120]	; (8007be0 <vTaskSwitchContext+0xe0>)
 8007b66:	4413      	add	r3, r2
 8007b68:	60bb      	str	r3, [r7, #8]
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	685a      	ldr	r2, [r3, #4]
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	605a      	str	r2, [r3, #4]
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	685a      	ldr	r2, [r3, #4]
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	3308      	adds	r3, #8
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d104      	bne.n	8007b8a <vTaskSwitchContext+0x8a>
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	685a      	ldr	r2, [r3, #4]
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	605a      	str	r2, [r3, #4]
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	4a14      	ldr	r2, [pc, #80]	; (8007be4 <vTaskSwitchContext+0xe4>)
 8007b92:	6013      	str	r3, [r2, #0]
 8007b94:	4a11      	ldr	r2, [pc, #68]	; (8007bdc <vTaskSwitchContext+0xdc>)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8007b9a:	4b12      	ldr	r3, [pc, #72]	; (8007be4 <vTaskSwitchContext+0xe4>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	3334      	adds	r3, #52	; 0x34
 8007ba0:	2205      	movs	r2, #5
 8007ba2:	4911      	ldr	r1, [pc, #68]	; (8007be8 <vTaskSwitchContext+0xe8>)
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f003 faa2 	bl	800b0ee <memcmp>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d005      	beq.n	8007bbc <vTaskSwitchContext+0xbc>
 8007bb0:	4b0c      	ldr	r3, [pc, #48]	; (8007be4 <vTaskSwitchContext+0xe4>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f002 fec1 	bl	800a93c <SEGGER_SYSVIEW_OnTaskStartExec>
 8007bba:	e001      	b.n	8007bc0 <vTaskSwitchContext+0xc0>
 8007bbc:	f002 fe60 	bl	800a880 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007bc0:	4b08      	ldr	r3, [pc, #32]	; (8007be4 <vTaskSwitchContext+0xe4>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	3354      	adds	r3, #84	; 0x54
 8007bc6:	4a09      	ldr	r2, [pc, #36]	; (8007bec <vTaskSwitchContext+0xec>)
 8007bc8:	6013      	str	r3, [r2, #0]
}
 8007bca:	bf00      	nop
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	20027f8c 	.word	0x20027f8c
 8007bd8:	20027f78 	.word	0x20027f78
 8007bdc:	20027f6c 	.word	0x20027f6c
 8007be0:	20027a94 	.word	0x20027a94
 8007be4:	20027a90 	.word	0x20027a90
 8007be8:	0800b474 	.word	0x0800b474
 8007bec:	2000006c 	.word	0x2000006c

08007bf0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10a      	bne.n	8007c16 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c04:	f383 8811 	msr	BASEPRI, r3
 8007c08:	f3bf 8f6f 	isb	sy
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	60fb      	str	r3, [r7, #12]
}
 8007c12:	bf00      	nop
 8007c14:	e7fe      	b.n	8007c14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c16:	4b07      	ldr	r3, [pc, #28]	; (8007c34 <vTaskPlaceOnEventList+0x44>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3318      	adds	r3, #24
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7fe f943 	bl	8005eaa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c24:	2101      	movs	r1, #1
 8007c26:	6838      	ldr	r0, [r7, #0]
 8007c28:	f000 fca0 	bl	800856c <prvAddCurrentTaskToDelayedList>
}
 8007c2c:	bf00      	nop
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	20027a90 	.word	0x20027a90

08007c38 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10a      	bne.n	8007c60 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8007c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4e:	f383 8811 	msr	BASEPRI, r3
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	617b      	str	r3, [r7, #20]
}
 8007c5c:	bf00      	nop
 8007c5e:	e7fe      	b.n	8007c5e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8007c60:	4b11      	ldr	r3, [pc, #68]	; (8007ca8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10a      	bne.n	8007c7e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8007c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	613b      	str	r3, [r7, #16]
}
 8007c7a:	bf00      	nop
 8007c7c:	e7fe      	b.n	8007c7c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007c7e:	4b0b      	ldr	r3, [pc, #44]	; (8007cac <vTaskPlaceOnUnorderedEventList+0x74>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007c88:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c8a:	4b08      	ldr	r3, [pc, #32]	; (8007cac <vTaskPlaceOnUnorderedEventList+0x74>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3318      	adds	r3, #24
 8007c90:	4619      	mov	r1, r3
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f7fe f8e5 	bl	8005e62 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c98:	2101      	movs	r1, #1
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fc66 	bl	800856c <prvAddCurrentTaskToDelayedList>
}
 8007ca0:	bf00      	nop
 8007ca2:	3718      	adds	r7, #24
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	20027f8c 	.word	0x20027f8c
 8007cac:	20027a90 	.word	0x20027a90

08007cb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d10a      	bne.n	8007cd8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc6:	f383 8811 	msr	BASEPRI, r3
 8007cca:	f3bf 8f6f 	isb	sy
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	617b      	str	r3, [r7, #20]
}
 8007cd4:	bf00      	nop
 8007cd6:	e7fe      	b.n	8007cd6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cd8:	4b0b      	ldr	r3, [pc, #44]	; (8007d08 <vTaskPlaceOnEventListRestricted+0x58>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	3318      	adds	r3, #24
 8007cde:	4619      	mov	r1, r3
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f7fe f8be 	bl	8005e62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d002      	beq.n	8007cf2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007cec:	f04f 33ff 	mov.w	r3, #4294967295
 8007cf0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8007cf2:	2024      	movs	r0, #36	; 0x24
 8007cf4:	f002 f940 	bl	8009f78 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007cf8:	6879      	ldr	r1, [r7, #4]
 8007cfa:	68b8      	ldr	r0, [r7, #8]
 8007cfc:	f000 fc36 	bl	800856c <prvAddCurrentTaskToDelayedList>
	}
 8007d00:	bf00      	nop
 8007d02:	3718      	adds	r7, #24
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	20027a90 	.word	0x20027a90

08007d0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10a      	bne.n	8007d38 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	60fb      	str	r3, [r7, #12]
}
 8007d34:	bf00      	nop
 8007d36:	e7fe      	b.n	8007d36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	3318      	adds	r3, #24
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7fe f8ed 	bl	8005f1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d42:	4b20      	ldr	r3, [pc, #128]	; (8007dc4 <xTaskRemoveFromEventList+0xb8>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d121      	bne.n	8007d8e <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	3304      	adds	r3, #4
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fe f8e4 	bl	8005f1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	4618      	mov	r0, r3
 8007d58:	f002 fe32 	bl	800a9c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d60:	4b19      	ldr	r3, [pc, #100]	; (8007dc8 <xTaskRemoveFromEventList+0xbc>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d903      	bls.n	8007d70 <xTaskRemoveFromEventList+0x64>
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6c:	4a16      	ldr	r2, [pc, #88]	; (8007dc8 <xTaskRemoveFromEventList+0xbc>)
 8007d6e:	6013      	str	r3, [r2, #0]
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d74:	4613      	mov	r3, r2
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4413      	add	r3, r2
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	4a13      	ldr	r2, [pc, #76]	; (8007dcc <xTaskRemoveFromEventList+0xc0>)
 8007d7e:	441a      	add	r2, r3
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	3304      	adds	r3, #4
 8007d84:	4619      	mov	r1, r3
 8007d86:	4610      	mov	r0, r2
 8007d88:	f7fe f86b 	bl	8005e62 <vListInsertEnd>
 8007d8c:	e005      	b.n	8007d9a <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	3318      	adds	r3, #24
 8007d92:	4619      	mov	r1, r3
 8007d94:	480e      	ldr	r0, [pc, #56]	; (8007dd0 <xTaskRemoveFromEventList+0xc4>)
 8007d96:	f7fe f864 	bl	8005e62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d9e:	4b0d      	ldr	r3, [pc, #52]	; (8007dd4 <xTaskRemoveFromEventList+0xc8>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d905      	bls.n	8007db4 <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007da8:	2301      	movs	r3, #1
 8007daa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007dac:	4b0a      	ldr	r3, [pc, #40]	; (8007dd8 <xTaskRemoveFromEventList+0xcc>)
 8007dae:	2201      	movs	r2, #1
 8007db0:	601a      	str	r2, [r3, #0]
 8007db2:	e001      	b.n	8007db8 <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 8007db4:	2300      	movs	r3, #0
 8007db6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007db8:	697b      	ldr	r3, [r7, #20]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3718      	adds	r7, #24
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	20027f8c 	.word	0x20027f8c
 8007dc8:	20027f6c 	.word	0x20027f6c
 8007dcc:	20027a94 	.word	0x20027a94
 8007dd0:	20027f24 	.word	0x20027f24
 8007dd4:	20027a90 	.word	0x20027a90
 8007dd8:	20027f78 	.word	0x20027f78

08007ddc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8007de6:	4b2b      	ldr	r3, [pc, #172]	; (8007e94 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d10a      	bne.n	8007e04 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8007dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df2:	f383 8811 	msr	BASEPRI, r3
 8007df6:	f3bf 8f6f 	isb	sy
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	613b      	str	r3, [r7, #16]
}
 8007e00:	bf00      	nop
 8007e02:	e7fe      	b.n	8007e02 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10a      	bne.n	8007e30 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	60fb      	str	r3, [r7, #12]
}
 8007e2c:	bf00      	nop
 8007e2e:	e7fe      	b.n	8007e2e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f7fe f873 	bl	8005f1c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	3304      	adds	r3, #4
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7fe f86e 	bl	8005f1c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	4618      	mov	r0, r3
 8007e44:	f002 fdbc 	bl	800a9c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e4c:	4b12      	ldr	r3, [pc, #72]	; (8007e98 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d903      	bls.n	8007e5c <vTaskRemoveFromUnorderedEventList+0x80>
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e58:	4a0f      	ldr	r2, [pc, #60]	; (8007e98 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007e5a:	6013      	str	r3, [r2, #0]
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e60:	4613      	mov	r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	4413      	add	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4a0c      	ldr	r2, [pc, #48]	; (8007e9c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8007e6a:	441a      	add	r2, r3
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	3304      	adds	r3, #4
 8007e70:	4619      	mov	r1, r3
 8007e72:	4610      	mov	r0, r2
 8007e74:	f7fd fff5 	bl	8005e62 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e7c:	4b08      	ldr	r3, [pc, #32]	; (8007ea0 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d902      	bls.n	8007e8c <vTaskRemoveFromUnorderedEventList+0xb0>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8007e86:	4b07      	ldr	r3, [pc, #28]	; (8007ea4 <vTaskRemoveFromUnorderedEventList+0xc8>)
 8007e88:	2201      	movs	r2, #1
 8007e8a:	601a      	str	r2, [r3, #0]
	}
}
 8007e8c:	bf00      	nop
 8007e8e:	3718      	adds	r7, #24
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	20027f8c 	.word	0x20027f8c
 8007e98:	20027f6c 	.word	0x20027f6c
 8007e9c:	20027a94 	.word	0x20027a94
 8007ea0:	20027a90 	.word	0x20027a90
 8007ea4:	20027f78 	.word	0x20027f78

08007ea8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007eb0:	4b06      	ldr	r3, [pc, #24]	; (8007ecc <vTaskInternalSetTimeOutState+0x24>)
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007eb8:	4b05      	ldr	r3, [pc, #20]	; (8007ed0 <vTaskInternalSetTimeOutState+0x28>)
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	605a      	str	r2, [r3, #4]
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	20027f7c 	.word	0x20027f7c
 8007ed0:	20027f68 	.word	0x20027f68

08007ed4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b088      	sub	sp, #32
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d10a      	bne.n	8007efa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee8:	f383 8811 	msr	BASEPRI, r3
 8007eec:	f3bf 8f6f 	isb	sy
 8007ef0:	f3bf 8f4f 	dsb	sy
 8007ef4:	613b      	str	r3, [r7, #16]
}
 8007ef6:	bf00      	nop
 8007ef8:	e7fe      	b.n	8007ef8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10a      	bne.n	8007f16 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	60fb      	str	r3, [r7, #12]
}
 8007f12:	bf00      	nop
 8007f14:	e7fe      	b.n	8007f14 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007f16:	f001 f8fd 	bl	8009114 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f1a:	4b1d      	ldr	r3, [pc, #116]	; (8007f90 <xTaskCheckForTimeOut+0xbc>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	69ba      	ldr	r2, [r7, #24]
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f32:	d102      	bne.n	8007f3a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f34:	2300      	movs	r3, #0
 8007f36:	61fb      	str	r3, [r7, #28]
 8007f38:	e023      	b.n	8007f82 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	4b15      	ldr	r3, [pc, #84]	; (8007f94 <xTaskCheckForTimeOut+0xc0>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d007      	beq.n	8007f56 <xTaskCheckForTimeOut+0x82>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	69ba      	ldr	r2, [r7, #24]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d302      	bcc.n	8007f56 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f50:	2301      	movs	r3, #1
 8007f52:	61fb      	str	r3, [r7, #28]
 8007f54:	e015      	b.n	8007f82 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d20b      	bcs.n	8007f78 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	1ad2      	subs	r2, r2, r3
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f7ff ff9b 	bl	8007ea8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f72:	2300      	movs	r3, #0
 8007f74:	61fb      	str	r3, [r7, #28]
 8007f76:	e004      	b.n	8007f82 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f82:	f001 f8f7 	bl	8009174 <vPortExitCritical>

	return xReturn;
 8007f86:	69fb      	ldr	r3, [r7, #28]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3720      	adds	r7, #32
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	20027f68 	.word	0x20027f68
 8007f94:	20027f7c 	.word	0x20027f7c

08007f98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f98:	b480      	push	{r7}
 8007f9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f9c:	4b03      	ldr	r3, [pc, #12]	; (8007fac <vTaskMissedYield+0x14>)
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	601a      	str	r2, [r3, #0]
}
 8007fa2:	bf00      	nop
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	20027f78 	.word	0x20027f78

08007fb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007fb8:	f000 f852 	bl	8008060 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007fbc:	4b06      	ldr	r3, [pc, #24]	; (8007fd8 <prvIdleTask+0x28>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d9f9      	bls.n	8007fb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007fc4:	4b05      	ldr	r3, [pc, #20]	; (8007fdc <prvIdleTask+0x2c>)
 8007fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fca:	601a      	str	r2, [r3, #0]
 8007fcc:	f3bf 8f4f 	dsb	sy
 8007fd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007fd4:	e7f0      	b.n	8007fb8 <prvIdleTask+0x8>
 8007fd6:	bf00      	nop
 8007fd8:	20027a94 	.word	0x20027a94
 8007fdc:	e000ed04 	.word	0xe000ed04

08007fe0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	607b      	str	r3, [r7, #4]
 8007fea:	e00c      	b.n	8008006 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	4a12      	ldr	r2, [pc, #72]	; (8008040 <prvInitialiseTaskLists+0x60>)
 8007ff8:	4413      	add	r3, r2
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fd ff04 	bl	8005e08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	3301      	adds	r3, #1
 8008004:	607b      	str	r3, [r7, #4]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2b37      	cmp	r3, #55	; 0x37
 800800a:	d9ef      	bls.n	8007fec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800800c:	480d      	ldr	r0, [pc, #52]	; (8008044 <prvInitialiseTaskLists+0x64>)
 800800e:	f7fd fefb 	bl	8005e08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008012:	480d      	ldr	r0, [pc, #52]	; (8008048 <prvInitialiseTaskLists+0x68>)
 8008014:	f7fd fef8 	bl	8005e08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008018:	480c      	ldr	r0, [pc, #48]	; (800804c <prvInitialiseTaskLists+0x6c>)
 800801a:	f7fd fef5 	bl	8005e08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800801e:	480c      	ldr	r0, [pc, #48]	; (8008050 <prvInitialiseTaskLists+0x70>)
 8008020:	f7fd fef2 	bl	8005e08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008024:	480b      	ldr	r0, [pc, #44]	; (8008054 <prvInitialiseTaskLists+0x74>)
 8008026:	f7fd feef 	bl	8005e08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800802a:	4b0b      	ldr	r3, [pc, #44]	; (8008058 <prvInitialiseTaskLists+0x78>)
 800802c:	4a05      	ldr	r2, [pc, #20]	; (8008044 <prvInitialiseTaskLists+0x64>)
 800802e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008030:	4b0a      	ldr	r3, [pc, #40]	; (800805c <prvInitialiseTaskLists+0x7c>)
 8008032:	4a05      	ldr	r2, [pc, #20]	; (8008048 <prvInitialiseTaskLists+0x68>)
 8008034:	601a      	str	r2, [r3, #0]
}
 8008036:	bf00      	nop
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	20027a94 	.word	0x20027a94
 8008044:	20027ef4 	.word	0x20027ef4
 8008048:	20027f08 	.word	0x20027f08
 800804c:	20027f24 	.word	0x20027f24
 8008050:	20027f38 	.word	0x20027f38
 8008054:	20027f50 	.word	0x20027f50
 8008058:	20027f1c 	.word	0x20027f1c
 800805c:	20027f20 	.word	0x20027f20

08008060 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008066:	e019      	b.n	800809c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008068:	f001 f854 	bl	8009114 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800806c:	4b10      	ldr	r3, [pc, #64]	; (80080b0 <prvCheckTasksWaitingTermination+0x50>)
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	3304      	adds	r3, #4
 8008078:	4618      	mov	r0, r3
 800807a:	f7fd ff4f 	bl	8005f1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800807e:	4b0d      	ldr	r3, [pc, #52]	; (80080b4 <prvCheckTasksWaitingTermination+0x54>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	3b01      	subs	r3, #1
 8008084:	4a0b      	ldr	r2, [pc, #44]	; (80080b4 <prvCheckTasksWaitingTermination+0x54>)
 8008086:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008088:	4b0b      	ldr	r3, [pc, #44]	; (80080b8 <prvCheckTasksWaitingTermination+0x58>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	3b01      	subs	r3, #1
 800808e:	4a0a      	ldr	r2, [pc, #40]	; (80080b8 <prvCheckTasksWaitingTermination+0x58>)
 8008090:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008092:	f001 f86f 	bl	8009174 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f848 	bl	800812c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800809c:	4b06      	ldr	r3, [pc, #24]	; (80080b8 <prvCheckTasksWaitingTermination+0x58>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1e1      	bne.n	8008068 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80080a4:	bf00      	nop
 80080a6:	bf00      	nop
 80080a8:	3708      	adds	r7, #8
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	20027f38 	.word	0x20027f38
 80080b4:	20027f64 	.word	0x20027f64
 80080b8:	20027f4c 	.word	0x20027f4c

080080bc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80080c4:	2300      	movs	r3, #0
 80080c6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80080c8:	e005      	b.n	80080d6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	3301      	adds	r3, #1
 80080ce:	607b      	str	r3, [r7, #4]
			ulCount++;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	3301      	adds	r3, #1
 80080d4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	2ba5      	cmp	r3, #165	; 0xa5
 80080dc:	d0f5      	beq.n	80080ca <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	089b      	lsrs	r3, r3, #2
 80080e2:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	b29b      	uxth	r3, r3
	}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3714      	adds	r7, #20
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d102      	bne.n	8008108 <uxTaskGetStackHighWaterMark+0x14>
 8008102:	4b09      	ldr	r3, [pc, #36]	; (8008128 <uxTaskGetStackHighWaterMark+0x34>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	e000      	b.n	800810a <uxTaskGetStackHighWaterMark+0x16>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008110:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8008112:	6938      	ldr	r0, [r7, #16]
 8008114:	f7ff ffd2 	bl	80080bc <prvTaskCheckFreeStackSpace>
 8008118:	4603      	mov	r3, r0
 800811a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800811c:	68fb      	ldr	r3, [r7, #12]
	}
 800811e:	4618      	mov	r0, r3
 8008120:	3718      	adds	r7, #24
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	20027a90 	.word	0x20027a90

0800812c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	3354      	adds	r3, #84	; 0x54
 8008138:	4618      	mov	r0, r3
 800813a:	f002 fff1 	bl	800b120 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008144:	2b00      	cmp	r3, #0
 8008146:	d108      	bne.n	800815a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800814c:	4618      	mov	r0, r3
 800814e:	f001 f9cf 	bl	80094f0 <vPortFree>
				vPortFree( pxTCB );
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f001 f9cc 	bl	80094f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008158:	e018      	b.n	800818c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008160:	2b01      	cmp	r3, #1
 8008162:	d103      	bne.n	800816c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f001 f9c3 	bl	80094f0 <vPortFree>
	}
 800816a:	e00f      	b.n	800818c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008172:	2b02      	cmp	r3, #2
 8008174:	d00a      	beq.n	800818c <prvDeleteTCB+0x60>
	__asm volatile
 8008176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817a:	f383 8811 	msr	BASEPRI, r3
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	60fb      	str	r3, [r7, #12]
}
 8008188:	bf00      	nop
 800818a:	e7fe      	b.n	800818a <prvDeleteTCB+0x5e>
	}
 800818c:	bf00      	nop
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800819a:	4b0c      	ldr	r3, [pc, #48]	; (80081cc <prvResetNextTaskUnblockTime+0x38>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d104      	bne.n	80081ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80081a4:	4b0a      	ldr	r3, [pc, #40]	; (80081d0 <prvResetNextTaskUnblockTime+0x3c>)
 80081a6:	f04f 32ff 	mov.w	r2, #4294967295
 80081aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80081ac:	e008      	b.n	80081c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081ae:	4b07      	ldr	r3, [pc, #28]	; (80081cc <prvResetNextTaskUnblockTime+0x38>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	4a04      	ldr	r2, [pc, #16]	; (80081d0 <prvResetNextTaskUnblockTime+0x3c>)
 80081be:	6013      	str	r3, [r2, #0]
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr
 80081cc:	20027f1c 	.word	0x20027f1c
 80081d0:	20027f84 	.word	0x20027f84

080081d4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80081da:	4b05      	ldr	r3, [pc, #20]	; (80081f0 <xTaskGetCurrentTaskHandle+0x1c>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	607b      	str	r3, [r7, #4]

		return xReturn;
 80081e0:	687b      	ldr	r3, [r7, #4]
	}
 80081e2:	4618      	mov	r0, r3
 80081e4:	370c      	adds	r7, #12
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	20027a90 	.word	0x20027a90

080081f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80081fa:	4b0b      	ldr	r3, [pc, #44]	; (8008228 <xTaskGetSchedulerState+0x34>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d102      	bne.n	8008208 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008202:	2301      	movs	r3, #1
 8008204:	607b      	str	r3, [r7, #4]
 8008206:	e008      	b.n	800821a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008208:	4b08      	ldr	r3, [pc, #32]	; (800822c <xTaskGetSchedulerState+0x38>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d102      	bne.n	8008216 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008210:	2302      	movs	r3, #2
 8008212:	607b      	str	r3, [r7, #4]
 8008214:	e001      	b.n	800821a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008216:	2300      	movs	r3, #0
 8008218:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800821a:	687b      	ldr	r3, [r7, #4]
	}
 800821c:	4618      	mov	r0, r3
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr
 8008228:	20027f70 	.word	0x20027f70
 800822c:	20027f8c 	.word	0x20027f8c

08008230 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800823c:	2300      	movs	r3, #0
 800823e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d05a      	beq.n	80082fc <xTaskPriorityInherit+0xcc>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800824a:	4b2f      	ldr	r3, [pc, #188]	; (8008308 <xTaskPriorityInherit+0xd8>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008250:	429a      	cmp	r2, r3
 8008252:	d24a      	bcs.n	80082ea <xTaskPriorityInherit+0xba>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	2b00      	cmp	r3, #0
 800825a:	db06      	blt.n	800826a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800825c:	4b2a      	ldr	r3, [pc, #168]	; (8008308 <xTaskPriorityInherit+0xd8>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008262:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	6959      	ldr	r1, [r3, #20]
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008272:	4613      	mov	r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	4413      	add	r3, r2
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4a24      	ldr	r2, [pc, #144]	; (800830c <xTaskPriorityInherit+0xdc>)
 800827c:	4413      	add	r3, r2
 800827e:	4299      	cmp	r1, r3
 8008280:	d126      	bne.n	80082d0 <xTaskPriorityInherit+0xa0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	3304      	adds	r3, #4
 8008286:	4618      	mov	r0, r3
 8008288:	f7fd fe48 	bl	8005f1c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800828c:	4b1e      	ldr	r3, [pc, #120]	; (8008308 <xTaskPriorityInherit+0xd8>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	4618      	mov	r0, r3
 800829a:	f002 fb91 	bl	800a9c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a2:	4b1b      	ldr	r3, [pc, #108]	; (8008310 <xTaskPriorityInherit+0xe0>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d903      	bls.n	80082b2 <xTaskPriorityInherit+0x82>
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ae:	4a18      	ldr	r2, [pc, #96]	; (8008310 <xTaskPriorityInherit+0xe0>)
 80082b0:	6013      	str	r3, [r2, #0]
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082b6:	4613      	mov	r3, r2
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	4413      	add	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4a13      	ldr	r2, [pc, #76]	; (800830c <xTaskPriorityInherit+0xdc>)
 80082c0:	441a      	add	r2, r3
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	3304      	adds	r3, #4
 80082c6:	4619      	mov	r1, r3
 80082c8:	4610      	mov	r0, r2
 80082ca:	f7fd fdca 	bl	8005e62 <vListInsertEnd>
 80082ce:	e004      	b.n	80082da <xTaskPriorityInherit+0xaa>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80082d0:	4b0d      	ldr	r3, [pc, #52]	; (8008308 <xTaskPriorityInherit+0xd8>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4619      	mov	r1, r3
 80082de:	2049      	movs	r0, #73	; 0x49
 80082e0:	f001 fe68 	bl	8009fb4 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80082e4:	2301      	movs	r3, #1
 80082e6:	60fb      	str	r3, [r7, #12]
 80082e8:	e008      	b.n	80082fc <xTaskPriorityInherit+0xcc>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082ee:	4b06      	ldr	r3, [pc, #24]	; (8008308 <xTaskPriorityInherit+0xd8>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d201      	bcs.n	80082fc <xTaskPriorityInherit+0xcc>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80082f8:	2301      	movs	r3, #1
 80082fa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80082fc:	68fb      	ldr	r3, [r7, #12]
	}
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	20027a90 	.word	0x20027a90
 800830c:	20027a94 	.word	0x20027a94
 8008310:	20027f6c 	.word	0x20027f6c

08008314 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008314:	b580      	push	{r7, lr}
 8008316:	b086      	sub	sp, #24
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008320:	2300      	movs	r3, #0
 8008322:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d05f      	beq.n	80083ea <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800832a:	4b32      	ldr	r3, [pc, #200]	; (80083f4 <xTaskPriorityDisinherit+0xe0>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	429a      	cmp	r2, r3
 8008332:	d00a      	beq.n	800834a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	60fb      	str	r3, [r7, #12]
}
 8008346:	bf00      	nop
 8008348:	e7fe      	b.n	8008348 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10a      	bne.n	8008368 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008356:	f383 8811 	msr	BASEPRI, r3
 800835a:	f3bf 8f6f 	isb	sy
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	60bb      	str	r3, [r7, #8]
}
 8008364:	bf00      	nop
 8008366:	e7fe      	b.n	8008366 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800836c:	1e5a      	subs	r2, r3, #1
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800837a:	429a      	cmp	r2, r3
 800837c:	d035      	beq.n	80083ea <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008382:	2b00      	cmp	r3, #0
 8008384:	d131      	bne.n	80083ea <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	3304      	adds	r3, #4
 800838a:	4618      	mov	r0, r3
 800838c:	f7fd fdc6 	bl	8005f1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4619      	mov	r1, r3
 8008394:	204a      	movs	r0, #74	; 0x4a
 8008396:	f001 fe0d 	bl	8009fb4 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	4618      	mov	r0, r3
 80083b2:	f002 fb05 	bl	800a9c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ba:	4b0f      	ldr	r3, [pc, #60]	; (80083f8 <xTaskPriorityDisinherit+0xe4>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d903      	bls.n	80083ca <xTaskPriorityDisinherit+0xb6>
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c6:	4a0c      	ldr	r2, [pc, #48]	; (80083f8 <xTaskPriorityDisinherit+0xe4>)
 80083c8:	6013      	str	r3, [r2, #0]
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ce:	4613      	mov	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4413      	add	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4a09      	ldr	r2, [pc, #36]	; (80083fc <xTaskPriorityDisinherit+0xe8>)
 80083d8:	441a      	add	r2, r3
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	3304      	adds	r3, #4
 80083de:	4619      	mov	r1, r3
 80083e0:	4610      	mov	r0, r2
 80083e2:	f7fd fd3e 	bl	8005e62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80083e6:	2301      	movs	r3, #1
 80083e8:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80083ea:	697b      	ldr	r3, [r7, #20]
	}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3718      	adds	r7, #24
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	20027a90 	.word	0x20027a90
 80083f8:	20027f6c 	.word	0x20027f6c
 80083fc:	20027a94 	.word	0x20027a94

08008400 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008400:	b580      	push	{r7, lr}
 8008402:	b088      	sub	sp, #32
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800840e:	2301      	movs	r3, #1
 8008410:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d073      	beq.n	8008500 <vTaskPriorityDisinheritAfterTimeout+0x100>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800841c:	2b00      	cmp	r3, #0
 800841e:	d10a      	bne.n	8008436 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008424:	f383 8811 	msr	BASEPRI, r3
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	60fb      	str	r3, [r7, #12]
}
 8008432:	bf00      	nop
 8008434:	e7fe      	b.n	8008434 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800843a:	683a      	ldr	r2, [r7, #0]
 800843c:	429a      	cmp	r2, r3
 800843e:	d902      	bls.n	8008446 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	61fb      	str	r3, [r7, #28]
 8008444:	e002      	b.n	800844c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800844a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008450:	69fa      	ldr	r2, [r7, #28]
 8008452:	429a      	cmp	r2, r3
 8008454:	d054      	beq.n	8008500 <vTaskPriorityDisinheritAfterTimeout+0x100>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800845a:	697a      	ldr	r2, [r7, #20]
 800845c:	429a      	cmp	r2, r3
 800845e:	d14f      	bne.n	8008500 <vTaskPriorityDisinheritAfterTimeout+0x100>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008460:	4b29      	ldr	r3, [pc, #164]	; (8008508 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	69ba      	ldr	r2, [r7, #24]
 8008466:	429a      	cmp	r2, r3
 8008468:	d10a      	bne.n	8008480 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800846a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846e:	f383 8811 	msr	BASEPRI, r3
 8008472:	f3bf 8f6f 	isb	sy
 8008476:	f3bf 8f4f 	dsb	sy
 800847a:	60bb      	str	r3, [r7, #8]
}
 800847c:	bf00      	nop
 800847e:	e7fe      	b.n	800847e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4619      	mov	r1, r3
 8008484:	204a      	movs	r0, #74	; 0x4a
 8008486:	f001 fd95 	bl	8009fb4 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	69fa      	ldr	r2, [r7, #28]
 8008494:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	2b00      	cmp	r3, #0
 800849c:	db04      	blt.n	80084a8 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	6959      	ldr	r1, [r3, #20]
 80084ac:	693a      	ldr	r2, [r7, #16]
 80084ae:	4613      	mov	r3, r2
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	4413      	add	r3, r2
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	4a15      	ldr	r2, [pc, #84]	; (800850c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80084b8:	4413      	add	r3, r2
 80084ba:	4299      	cmp	r1, r3
 80084bc:	d120      	bne.n	8008500 <vTaskPriorityDisinheritAfterTimeout+0x100>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	3304      	adds	r3, #4
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fd fd2a 	bl	8005f1c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f002 fa78 	bl	800a9c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d4:	4b0e      	ldr	r3, [pc, #56]	; (8008510 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d903      	bls.n	80084e4 <vTaskPriorityDisinheritAfterTimeout+0xe4>
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e0:	4a0b      	ldr	r2, [pc, #44]	; (8008510 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80084e2:	6013      	str	r3, [r2, #0]
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e8:	4613      	mov	r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4413      	add	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	4a06      	ldr	r2, [pc, #24]	; (800850c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80084f2:	441a      	add	r2, r3
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	3304      	adds	r3, #4
 80084f8:	4619      	mov	r1, r3
 80084fa:	4610      	mov	r0, r2
 80084fc:	f7fd fcb1 	bl	8005e62 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008500:	bf00      	nop
 8008502:	3720      	adds	r7, #32
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	20027a90 	.word	0x20027a90
 800850c:	20027a94 	.word	0x20027a94
 8008510:	20027f6c 	.word	0x20027f6c

08008514 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800851a:	4b09      	ldr	r3, [pc, #36]	; (8008540 <uxTaskResetEventItemValue+0x2c>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	699b      	ldr	r3, [r3, #24]
 8008520:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008522:	4b07      	ldr	r3, [pc, #28]	; (8008540 <uxTaskResetEventItemValue+0x2c>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008528:	4b05      	ldr	r3, [pc, #20]	; (8008540 <uxTaskResetEventItemValue+0x2c>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8008530:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8008532:	687b      	ldr	r3, [r7, #4]
}
 8008534:	4618      	mov	r0, r3
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr
 8008540:	20027a90 	.word	0x20027a90

08008544 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008544:	b480      	push	{r7}
 8008546:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008548:	4b07      	ldr	r3, [pc, #28]	; (8008568 <pvTaskIncrementMutexHeldCount+0x24>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d004      	beq.n	800855a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008550:	4b05      	ldr	r3, [pc, #20]	; (8008568 <pvTaskIncrementMutexHeldCount+0x24>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008556:	3201      	adds	r2, #1
 8008558:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800855a:	4b03      	ldr	r3, [pc, #12]	; (8008568 <pvTaskIncrementMutexHeldCount+0x24>)
 800855c:	681b      	ldr	r3, [r3, #0]
	}
 800855e:	4618      	mov	r0, r3
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr
 8008568:	20027a90 	.word	0x20027a90

0800856c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008576:	4b21      	ldr	r3, [pc, #132]	; (80085fc <prvAddCurrentTaskToDelayedList+0x90>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800857c:	4b20      	ldr	r3, [pc, #128]	; (8008600 <prvAddCurrentTaskToDelayedList+0x94>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	3304      	adds	r3, #4
 8008582:	4618      	mov	r0, r3
 8008584:	f7fd fcca 	bl	8005f1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800858e:	d10a      	bne.n	80085a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d007      	beq.n	80085a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008596:	4b1a      	ldr	r3, [pc, #104]	; (8008600 <prvAddCurrentTaskToDelayedList+0x94>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	3304      	adds	r3, #4
 800859c:	4619      	mov	r1, r3
 800859e:	4819      	ldr	r0, [pc, #100]	; (8008604 <prvAddCurrentTaskToDelayedList+0x98>)
 80085a0:	f7fd fc5f 	bl	8005e62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80085a4:	e026      	b.n	80085f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4413      	add	r3, r2
 80085ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80085ae:	4b14      	ldr	r3, [pc, #80]	; (8008600 <prvAddCurrentTaskToDelayedList+0x94>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d209      	bcs.n	80085d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085be:	4b12      	ldr	r3, [pc, #72]	; (8008608 <prvAddCurrentTaskToDelayedList+0x9c>)
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	4b0f      	ldr	r3, [pc, #60]	; (8008600 <prvAddCurrentTaskToDelayedList+0x94>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	3304      	adds	r3, #4
 80085c8:	4619      	mov	r1, r3
 80085ca:	4610      	mov	r0, r2
 80085cc:	f7fd fc6d 	bl	8005eaa <vListInsert>
}
 80085d0:	e010      	b.n	80085f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085d2:	4b0e      	ldr	r3, [pc, #56]	; (800860c <prvAddCurrentTaskToDelayedList+0xa0>)
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	4b0a      	ldr	r3, [pc, #40]	; (8008600 <prvAddCurrentTaskToDelayedList+0x94>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	3304      	adds	r3, #4
 80085dc:	4619      	mov	r1, r3
 80085de:	4610      	mov	r0, r2
 80085e0:	f7fd fc63 	bl	8005eaa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80085e4:	4b0a      	ldr	r3, [pc, #40]	; (8008610 <prvAddCurrentTaskToDelayedList+0xa4>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d202      	bcs.n	80085f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80085ee:	4a08      	ldr	r2, [pc, #32]	; (8008610 <prvAddCurrentTaskToDelayedList+0xa4>)
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	6013      	str	r3, [r2, #0]
}
 80085f4:	bf00      	nop
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	20027f68 	.word	0x20027f68
 8008600:	20027a90 	.word	0x20027a90
 8008604:	20027f50 	.word	0x20027f50
 8008608:	20027f20 	.word	0x20027f20
 800860c:	20027f1c 	.word	0x20027f1c
 8008610:	20027f84 	.word	0x20027f84

08008614 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b08a      	sub	sp, #40	; 0x28
 8008618:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800861a:	2300      	movs	r3, #0
 800861c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800861e:	f000 fba1 	bl	8008d64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008622:	4b1c      	ldr	r3, [pc, #112]	; (8008694 <xTimerCreateTimerTask+0x80>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d021      	beq.n	800866e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800862a:	2300      	movs	r3, #0
 800862c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800862e:	2300      	movs	r3, #0
 8008630:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008632:	1d3a      	adds	r2, r7, #4
 8008634:	f107 0108 	add.w	r1, r7, #8
 8008638:	f107 030c 	add.w	r3, r7, #12
 800863c:	4618      	mov	r0, r3
 800863e:	f7fd f9db 	bl	80059f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008642:	6879      	ldr	r1, [r7, #4]
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	9202      	str	r2, [sp, #8]
 800864a:	9301      	str	r3, [sp, #4]
 800864c:	2302      	movs	r3, #2
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	2300      	movs	r3, #0
 8008652:	460a      	mov	r2, r1
 8008654:	4910      	ldr	r1, [pc, #64]	; (8008698 <xTimerCreateTimerTask+0x84>)
 8008656:	4811      	ldr	r0, [pc, #68]	; (800869c <xTimerCreateTimerTask+0x88>)
 8008658:	f7fe fe32 	bl	80072c0 <xTaskCreateStatic>
 800865c:	4603      	mov	r3, r0
 800865e:	4a10      	ldr	r2, [pc, #64]	; (80086a0 <xTimerCreateTimerTask+0x8c>)
 8008660:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008662:	4b0f      	ldr	r3, [pc, #60]	; (80086a0 <xTimerCreateTimerTask+0x8c>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d001      	beq.n	800866e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800866a:	2301      	movs	r3, #1
 800866c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10a      	bne.n	800868a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008678:	f383 8811 	msr	BASEPRI, r3
 800867c:	f3bf 8f6f 	isb	sy
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	613b      	str	r3, [r7, #16]
}
 8008686:	bf00      	nop
 8008688:	e7fe      	b.n	8008688 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800868a:	697b      	ldr	r3, [r7, #20]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3718      	adds	r7, #24
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	20027fc0 	.word	0x20027fc0
 8008698:	0800b47c 	.word	0x0800b47c
 800869c:	0800890d 	.word	0x0800890d
 80086a0:	20027fc4 	.word	0x20027fc4

080086a4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b088      	sub	sp, #32
 80086a8:	af02      	add	r7, sp, #8
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
 80086b0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80086b2:	202c      	movs	r0, #44	; 0x2c
 80086b4:	f000 fe50 	bl	8009358 <pvPortMalloc>
 80086b8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d00d      	beq.n	80086dc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	9301      	str	r3, [sp, #4]
 80086cc:	6a3b      	ldr	r3, [r7, #32]
 80086ce:	9300      	str	r3, [sp, #0]
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	68b9      	ldr	r1, [r7, #8]
 80086d6:	68f8      	ldr	r0, [r7, #12]
 80086d8:	f000 f843 	bl	8008762 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80086dc:	697b      	ldr	r3, [r7, #20]
	}
 80086de:	4618      	mov	r0, r3
 80086e0:	3718      	adds	r7, #24
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b08a      	sub	sp, #40	; 0x28
 80086ea:	af02      	add	r7, sp, #8
 80086ec:	60f8      	str	r0, [r7, #12]
 80086ee:	60b9      	str	r1, [r7, #8]
 80086f0:	607a      	str	r2, [r7, #4]
 80086f2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80086f4:	232c      	movs	r3, #44	; 0x2c
 80086f6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	2b2c      	cmp	r3, #44	; 0x2c
 80086fc:	d00a      	beq.n	8008714 <xTimerCreateStatic+0x2e>
	__asm volatile
 80086fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	61bb      	str	r3, [r7, #24]
}
 8008710:	bf00      	nop
 8008712:	e7fe      	b.n	8008712 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008714:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8008716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008718:	2b00      	cmp	r3, #0
 800871a:	d10a      	bne.n	8008732 <xTimerCreateStatic+0x4c>
	__asm volatile
 800871c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008720:	f383 8811 	msr	BASEPRI, r3
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	617b      	str	r3, [r7, #20]
}
 800872e:	bf00      	nop
 8008730:	e7fe      	b.n	8008730 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8008732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008734:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00d      	beq.n	8008758 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	2202      	movs	r2, #2
 8008740:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	9301      	str	r3, [sp, #4]
 8008748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874a:	9300      	str	r3, [sp, #0]
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	68b9      	ldr	r1, [r7, #8]
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f000 f805 	bl	8008762 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008758:	69fb      	ldr	r3, [r7, #28]
	}
 800875a:	4618      	mov	r0, r3
 800875c:	3720      	adds	r7, #32
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b086      	sub	sp, #24
 8008766:	af00      	add	r7, sp, #0
 8008768:	60f8      	str	r0, [r7, #12]
 800876a:	60b9      	str	r1, [r7, #8]
 800876c:	607a      	str	r2, [r7, #4]
 800876e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10a      	bne.n	800878c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8008776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877a:	f383 8811 	msr	BASEPRI, r3
 800877e:	f3bf 8f6f 	isb	sy
 8008782:	f3bf 8f4f 	dsb	sy
 8008786:	617b      	str	r3, [r7, #20]
}
 8008788:	bf00      	nop
 800878a:	e7fe      	b.n	800878a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	2b00      	cmp	r3, #0
 8008790:	d01e      	beq.n	80087d0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008792:	f000 fae7 	bl	8008d64 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800879c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879e:	68ba      	ldr	r2, [r7, #8]
 80087a0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80087a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a4:	683a      	ldr	r2, [r7, #0]
 80087a6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80087a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087aa:	6a3a      	ldr	r2, [r7, #32]
 80087ac:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80087ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b0:	3304      	adds	r3, #4
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7fd fb48 	bl	8005e48 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d008      	beq.n	80087d0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80087be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087c4:	f043 0304 	orr.w	r3, r3, #4
 80087c8:	b2da      	uxtb	r2, r3
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80087d0:	bf00      	nop
 80087d2:	3718      	adds	r7, #24
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b08a      	sub	sp, #40	; 0x28
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	607a      	str	r2, [r7, #4]
 80087e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80087e6:	2300      	movs	r3, #0
 80087e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d10a      	bne.n	8008806 <xTimerGenericCommand+0x2e>
	__asm volatile
 80087f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	623b      	str	r3, [r7, #32]
}
 8008802:	bf00      	nop
 8008804:	e7fe      	b.n	8008804 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008806:	4b1a      	ldr	r3, [pc, #104]	; (8008870 <xTimerGenericCommand+0x98>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d02a      	beq.n	8008864 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	2b05      	cmp	r3, #5
 800881e:	dc18      	bgt.n	8008852 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008820:	f7ff fce8 	bl	80081f4 <xTaskGetSchedulerState>
 8008824:	4603      	mov	r3, r0
 8008826:	2b02      	cmp	r3, #2
 8008828:	d109      	bne.n	800883e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800882a:	4b11      	ldr	r3, [pc, #68]	; (8008870 <xTimerGenericCommand+0x98>)
 800882c:	6818      	ldr	r0, [r3, #0]
 800882e:	f107 0110 	add.w	r1, r7, #16
 8008832:	2300      	movs	r3, #0
 8008834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008836:	f7fd fdff 	bl	8006438 <xQueueGenericSend>
 800883a:	6278      	str	r0, [r7, #36]	; 0x24
 800883c:	e012      	b.n	8008864 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800883e:	4b0c      	ldr	r3, [pc, #48]	; (8008870 <xTimerGenericCommand+0x98>)
 8008840:	6818      	ldr	r0, [r3, #0]
 8008842:	f107 0110 	add.w	r1, r7, #16
 8008846:	2300      	movs	r3, #0
 8008848:	2200      	movs	r2, #0
 800884a:	f7fd fdf5 	bl	8006438 <xQueueGenericSend>
 800884e:	6278      	str	r0, [r7, #36]	; 0x24
 8008850:	e008      	b.n	8008864 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008852:	4b07      	ldr	r3, [pc, #28]	; (8008870 <xTimerGenericCommand+0x98>)
 8008854:	6818      	ldr	r0, [r3, #0]
 8008856:	f107 0110 	add.w	r1, r7, #16
 800885a:	2300      	movs	r3, #0
 800885c:	683a      	ldr	r2, [r7, #0]
 800885e:	f7fd ff11 	bl	8006684 <xQueueGenericSendFromISR>
 8008862:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008866:	4618      	mov	r0, r3
 8008868:	3728      	adds	r7, #40	; 0x28
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	20027fc0 	.word	0x20027fc0

08008874 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b088      	sub	sp, #32
 8008878:	af02      	add	r7, sp, #8
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800887e:	4b22      	ldr	r3, [pc, #136]	; (8008908 <prvProcessExpiredTimer+0x94>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	3304      	adds	r3, #4
 800888c:	4618      	mov	r0, r3
 800888e:	f7fd fb45 	bl	8005f1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008898:	f003 0304 	and.w	r3, r3, #4
 800889c:	2b00      	cmp	r3, #0
 800889e:	d022      	beq.n	80088e6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	699a      	ldr	r2, [r3, #24]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	18d1      	adds	r1, r2, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	683a      	ldr	r2, [r7, #0]
 80088ac:	6978      	ldr	r0, [r7, #20]
 80088ae:	f000 f8d1 	bl	8008a54 <prvInsertTimerInActiveList>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d01f      	beq.n	80088f8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088b8:	2300      	movs	r3, #0
 80088ba:	9300      	str	r3, [sp, #0]
 80088bc:	2300      	movs	r3, #0
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	2100      	movs	r1, #0
 80088c2:	6978      	ldr	r0, [r7, #20]
 80088c4:	f7ff ff88 	bl	80087d8 <xTimerGenericCommand>
 80088c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d113      	bne.n	80088f8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80088d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d4:	f383 8811 	msr	BASEPRI, r3
 80088d8:	f3bf 8f6f 	isb	sy
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	60fb      	str	r3, [r7, #12]
}
 80088e2:	bf00      	nop
 80088e4:	e7fe      	b.n	80088e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088ec:	f023 0301 	bic.w	r3, r3, #1
 80088f0:	b2da      	uxtb	r2, r3
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	6a1b      	ldr	r3, [r3, #32]
 80088fc:	6978      	ldr	r0, [r7, #20]
 80088fe:	4798      	blx	r3
}
 8008900:	bf00      	nop
 8008902:	3718      	adds	r7, #24
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	20027fb8 	.word	0x20027fb8

0800890c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008914:	f107 0308 	add.w	r3, r7, #8
 8008918:	4618      	mov	r0, r3
 800891a:	f000 f857 	bl	80089cc <prvGetNextExpireTime>
 800891e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	4619      	mov	r1, r3
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f000 f803 	bl	8008930 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800892a:	f000 f8d5 	bl	8008ad8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800892e:	e7f1      	b.n	8008914 <prvTimerTask+0x8>

08008930 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800893a:	f7fe ff51 	bl	80077e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800893e:	f107 0308 	add.w	r3, r7, #8
 8008942:	4618      	mov	r0, r3
 8008944:	f000 f866 	bl	8008a14 <prvSampleTimeNow>
 8008948:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d130      	bne.n	80089b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10a      	bne.n	800896c <prvProcessTimerOrBlockTask+0x3c>
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	429a      	cmp	r2, r3
 800895c:	d806      	bhi.n	800896c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800895e:	f7fe ff4d 	bl	80077fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008962:	68f9      	ldr	r1, [r7, #12]
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f7ff ff85 	bl	8008874 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800896a:	e024      	b.n	80089b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d008      	beq.n	8008984 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008972:	4b13      	ldr	r3, [pc, #76]	; (80089c0 <prvProcessTimerOrBlockTask+0x90>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d101      	bne.n	8008980 <prvProcessTimerOrBlockTask+0x50>
 800897c:	2301      	movs	r3, #1
 800897e:	e000      	b.n	8008982 <prvProcessTimerOrBlockTask+0x52>
 8008980:	2300      	movs	r3, #0
 8008982:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008984:	4b0f      	ldr	r3, [pc, #60]	; (80089c4 <prvProcessTimerOrBlockTask+0x94>)
 8008986:	6818      	ldr	r0, [r3, #0]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	683a      	ldr	r2, [r7, #0]
 8008990:	4619      	mov	r1, r3
 8008992:	f7fe fc61 	bl	8007258 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008996:	f7fe ff31 	bl	80077fc <xTaskResumeAll>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10a      	bne.n	80089b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80089a0:	4b09      	ldr	r3, [pc, #36]	; (80089c8 <prvProcessTimerOrBlockTask+0x98>)
 80089a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089a6:	601a      	str	r2, [r3, #0]
 80089a8:	f3bf 8f4f 	dsb	sy
 80089ac:	f3bf 8f6f 	isb	sy
}
 80089b0:	e001      	b.n	80089b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80089b2:	f7fe ff23 	bl	80077fc <xTaskResumeAll>
}
 80089b6:	bf00      	nop
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	20027fbc 	.word	0x20027fbc
 80089c4:	20027fc0 	.word	0x20027fc0
 80089c8:	e000ed04 	.word	0xe000ed04

080089cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80089cc:	b480      	push	{r7}
 80089ce:	b085      	sub	sp, #20
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80089d4:	4b0e      	ldr	r3, [pc, #56]	; (8008a10 <prvGetNextExpireTime+0x44>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d101      	bne.n	80089e2 <prvGetNextExpireTime+0x16>
 80089de:	2201      	movs	r2, #1
 80089e0:	e000      	b.n	80089e4 <prvGetNextExpireTime+0x18>
 80089e2:	2200      	movs	r2, #0
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d105      	bne.n	80089fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089f0:	4b07      	ldr	r3, [pc, #28]	; (8008a10 <prvGetNextExpireTime+0x44>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	60fb      	str	r3, [r7, #12]
 80089fa:	e001      	b.n	8008a00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80089fc:	2300      	movs	r3, #0
 80089fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008a00:	68fb      	ldr	r3, [r7, #12]
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3714      	adds	r7, #20
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	20027fb8 	.word	0x20027fb8

08008a14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008a1c:	f7fe ff90 	bl	8007940 <xTaskGetTickCount>
 8008a20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008a22:	4b0b      	ldr	r3, [pc, #44]	; (8008a50 <prvSampleTimeNow+0x3c>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d205      	bcs.n	8008a38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008a2c:	f000 f936 	bl	8008c9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	601a      	str	r2, [r3, #0]
 8008a36:	e002      	b.n	8008a3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008a3e:	4a04      	ldr	r2, [pc, #16]	; (8008a50 <prvSampleTimeNow+0x3c>)
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008a44:	68fb      	ldr	r3, [r7, #12]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	20027fc8 	.word	0x20027fc8

08008a54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b086      	sub	sp, #24
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
 8008a60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008a62:	2300      	movs	r3, #0
 8008a64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008a72:	68ba      	ldr	r2, [r7, #8]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d812      	bhi.n	8008aa0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	1ad2      	subs	r2, r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d302      	bcc.n	8008a8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	617b      	str	r3, [r7, #20]
 8008a8c:	e01b      	b.n	8008ac6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a8e:	4b10      	ldr	r3, [pc, #64]	; (8008ad0 <prvInsertTimerInActiveList+0x7c>)
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	3304      	adds	r3, #4
 8008a96:	4619      	mov	r1, r3
 8008a98:	4610      	mov	r0, r2
 8008a9a:	f7fd fa06 	bl	8005eaa <vListInsert>
 8008a9e:	e012      	b.n	8008ac6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d206      	bcs.n	8008ab6 <prvInsertTimerInActiveList+0x62>
 8008aa8:	68ba      	ldr	r2, [r7, #8]
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d302      	bcc.n	8008ab6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	617b      	str	r3, [r7, #20]
 8008ab4:	e007      	b.n	8008ac6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ab6:	4b07      	ldr	r3, [pc, #28]	; (8008ad4 <prvInsertTimerInActiveList+0x80>)
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	3304      	adds	r3, #4
 8008abe:	4619      	mov	r1, r3
 8008ac0:	4610      	mov	r0, r2
 8008ac2:	f7fd f9f2 	bl	8005eaa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008ac6:	697b      	ldr	r3, [r7, #20]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3718      	adds	r7, #24
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	20027fbc 	.word	0x20027fbc
 8008ad4:	20027fb8 	.word	0x20027fb8

08008ad8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b08e      	sub	sp, #56	; 0x38
 8008adc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ade:	e0ca      	b.n	8008c76 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	da18      	bge.n	8008b18 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008ae6:	1d3b      	adds	r3, r7, #4
 8008ae8:	3304      	adds	r3, #4
 8008aea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d10a      	bne.n	8008b08 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af6:	f383 8811 	msr	BASEPRI, r3
 8008afa:	f3bf 8f6f 	isb	sy
 8008afe:	f3bf 8f4f 	dsb	sy
 8008b02:	61fb      	str	r3, [r7, #28]
}
 8008b04:	bf00      	nop
 8008b06:	e7fe      	b.n	8008b06 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b0e:	6850      	ldr	r0, [r2, #4]
 8008b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b12:	6892      	ldr	r2, [r2, #8]
 8008b14:	4611      	mov	r1, r2
 8008b16:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	f2c0 80ab 	blt.w	8008c76 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b26:	695b      	ldr	r3, [r3, #20]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d004      	beq.n	8008b36 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2e:	3304      	adds	r3, #4
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7fd f9f3 	bl	8005f1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b36:	463b      	mov	r3, r7
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7ff ff6b 	bl	8008a14 <prvSampleTimeNow>
 8008b3e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b09      	cmp	r3, #9
 8008b44:	f200 8096 	bhi.w	8008c74 <prvProcessReceivedCommands+0x19c>
 8008b48:	a201      	add	r2, pc, #4	; (adr r2, 8008b50 <prvProcessReceivedCommands+0x78>)
 8008b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4e:	bf00      	nop
 8008b50:	08008b79 	.word	0x08008b79
 8008b54:	08008b79 	.word	0x08008b79
 8008b58:	08008b79 	.word	0x08008b79
 8008b5c:	08008bed 	.word	0x08008bed
 8008b60:	08008c01 	.word	0x08008c01
 8008b64:	08008c4b 	.word	0x08008c4b
 8008b68:	08008b79 	.word	0x08008b79
 8008b6c:	08008b79 	.word	0x08008b79
 8008b70:	08008bed 	.word	0x08008bed
 8008b74:	08008c01 	.word	0x08008c01
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b7e:	f043 0301 	orr.w	r3, r3, #1
 8008b82:	b2da      	uxtb	r2, r3
 8008b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8e:	699b      	ldr	r3, [r3, #24]
 8008b90:	18d1      	adds	r1, r2, r3
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b98:	f7ff ff5c 	bl	8008a54 <prvInsertTimerInActiveList>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d069      	beq.n	8008c76 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba4:	6a1b      	ldr	r3, [r3, #32]
 8008ba6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ba8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bb0:	f003 0304 	and.w	r3, r3, #4
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d05e      	beq.n	8008c76 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008bb8:	68ba      	ldr	r2, [r7, #8]
 8008bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	441a      	add	r2, r3
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	9300      	str	r3, [sp, #0]
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bca:	f7ff fe05 	bl	80087d8 <xTimerGenericCommand>
 8008bce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008bd0:	6a3b      	ldr	r3, [r7, #32]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d14f      	bne.n	8008c76 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bda:	f383 8811 	msr	BASEPRI, r3
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f3bf 8f4f 	dsb	sy
 8008be6:	61bb      	str	r3, [r7, #24]
}
 8008be8:	bf00      	nop
 8008bea:	e7fe      	b.n	8008bea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bf2:	f023 0301 	bic.w	r3, r3, #1
 8008bf6:	b2da      	uxtb	r2, r3
 8008bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008bfe:	e03a      	b.n	8008c76 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c06:	f043 0301 	orr.w	r3, r3, #1
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c16:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d10a      	bne.n	8008c36 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c24:	f383 8811 	msr	BASEPRI, r3
 8008c28:	f3bf 8f6f 	isb	sy
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	617b      	str	r3, [r7, #20]
}
 8008c32:	bf00      	nop
 8008c34:	e7fe      	b.n	8008c34 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c38:	699a      	ldr	r2, [r3, #24]
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3c:	18d1      	adds	r1, r2, r3
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c44:	f7ff ff06 	bl	8008a54 <prvInsertTimerInActiveList>
					break;
 8008c48:	e015      	b.n	8008c76 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c50:	f003 0302 	and.w	r3, r3, #2
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d103      	bne.n	8008c60 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008c58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c5a:	f000 fc49 	bl	80094f0 <vPortFree>
 8008c5e:	e00a      	b.n	8008c76 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c66:	f023 0301 	bic.w	r3, r3, #1
 8008c6a:	b2da      	uxtb	r2, r3
 8008c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008c72:	e000      	b.n	8008c76 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008c74:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c76:	4b08      	ldr	r3, [pc, #32]	; (8008c98 <prvProcessReceivedCommands+0x1c0>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	1d39      	adds	r1, r7, #4
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fd fe50 	bl	8006924 <xQueueReceive>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f47f af2a 	bne.w	8008ae0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008c8c:	bf00      	nop
 8008c8e:	bf00      	nop
 8008c90:	3730      	adds	r7, #48	; 0x30
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	20027fc0 	.word	0x20027fc0

08008c9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b088      	sub	sp, #32
 8008ca0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ca2:	e048      	b.n	8008d36 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ca4:	4b2d      	ldr	r3, [pc, #180]	; (8008d5c <prvSwitchTimerLists+0xc0>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cae:	4b2b      	ldr	r3, [pc, #172]	; (8008d5c <prvSwitchTimerLists+0xc0>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	3304      	adds	r3, #4
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7fd f92d 	bl	8005f1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6a1b      	ldr	r3, [r3, #32]
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cd0:	f003 0304 	and.w	r3, r3, #4
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d02e      	beq.n	8008d36 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	693a      	ldr	r2, [r7, #16]
 8008cde:	4413      	add	r3, r2
 8008ce0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d90e      	bls.n	8008d08 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	68ba      	ldr	r2, [r7, #8]
 8008cee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cf6:	4b19      	ldr	r3, [pc, #100]	; (8008d5c <prvSwitchTimerLists+0xc0>)
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	3304      	adds	r3, #4
 8008cfe:	4619      	mov	r1, r3
 8008d00:	4610      	mov	r0, r2
 8008d02:	f7fd f8d2 	bl	8005eaa <vListInsert>
 8008d06:	e016      	b.n	8008d36 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d08:	2300      	movs	r3, #0
 8008d0a:	9300      	str	r3, [sp, #0]
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	2100      	movs	r1, #0
 8008d12:	68f8      	ldr	r0, [r7, #12]
 8008d14:	f7ff fd60 	bl	80087d8 <xTimerGenericCommand>
 8008d18:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d10a      	bne.n	8008d36 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d24:	f383 8811 	msr	BASEPRI, r3
 8008d28:	f3bf 8f6f 	isb	sy
 8008d2c:	f3bf 8f4f 	dsb	sy
 8008d30:	603b      	str	r3, [r7, #0]
}
 8008d32:	bf00      	nop
 8008d34:	e7fe      	b.n	8008d34 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d36:	4b09      	ldr	r3, [pc, #36]	; (8008d5c <prvSwitchTimerLists+0xc0>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d1b1      	bne.n	8008ca4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008d40:	4b06      	ldr	r3, [pc, #24]	; (8008d5c <prvSwitchTimerLists+0xc0>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008d46:	4b06      	ldr	r3, [pc, #24]	; (8008d60 <prvSwitchTimerLists+0xc4>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a04      	ldr	r2, [pc, #16]	; (8008d5c <prvSwitchTimerLists+0xc0>)
 8008d4c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008d4e:	4a04      	ldr	r2, [pc, #16]	; (8008d60 <prvSwitchTimerLists+0xc4>)
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	6013      	str	r3, [r2, #0]
}
 8008d54:	bf00      	nop
 8008d56:	3718      	adds	r7, #24
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	20027fb8 	.word	0x20027fb8
 8008d60:	20027fbc 	.word	0x20027fbc

08008d64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d6a:	f000 f9d3 	bl	8009114 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d6e:	4b15      	ldr	r3, [pc, #84]	; (8008dc4 <prvCheckForValidListAndQueue+0x60>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d120      	bne.n	8008db8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d76:	4814      	ldr	r0, [pc, #80]	; (8008dc8 <prvCheckForValidListAndQueue+0x64>)
 8008d78:	f7fd f846 	bl	8005e08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d7c:	4813      	ldr	r0, [pc, #76]	; (8008dcc <prvCheckForValidListAndQueue+0x68>)
 8008d7e:	f7fd f843 	bl	8005e08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d82:	4b13      	ldr	r3, [pc, #76]	; (8008dd0 <prvCheckForValidListAndQueue+0x6c>)
 8008d84:	4a10      	ldr	r2, [pc, #64]	; (8008dc8 <prvCheckForValidListAndQueue+0x64>)
 8008d86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d88:	4b12      	ldr	r3, [pc, #72]	; (8008dd4 <prvCheckForValidListAndQueue+0x70>)
 8008d8a:	4a10      	ldr	r2, [pc, #64]	; (8008dcc <prvCheckForValidListAndQueue+0x68>)
 8008d8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d8e:	2300      	movs	r3, #0
 8008d90:	9300      	str	r3, [sp, #0]
 8008d92:	4b11      	ldr	r3, [pc, #68]	; (8008dd8 <prvCheckForValidListAndQueue+0x74>)
 8008d94:	4a11      	ldr	r2, [pc, #68]	; (8008ddc <prvCheckForValidListAndQueue+0x78>)
 8008d96:	2110      	movs	r1, #16
 8008d98:	200a      	movs	r0, #10
 8008d9a:	f7fd f951 	bl	8006040 <xQueueGenericCreateStatic>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	4a08      	ldr	r2, [pc, #32]	; (8008dc4 <prvCheckForValidListAndQueue+0x60>)
 8008da2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008da4:	4b07      	ldr	r3, [pc, #28]	; (8008dc4 <prvCheckForValidListAndQueue+0x60>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d005      	beq.n	8008db8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008dac:	4b05      	ldr	r3, [pc, #20]	; (8008dc4 <prvCheckForValidListAndQueue+0x60>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	490b      	ldr	r1, [pc, #44]	; (8008de0 <prvCheckForValidListAndQueue+0x7c>)
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7fe f9f4 	bl	80071a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008db8:	f000 f9dc 	bl	8009174 <vPortExitCritical>
}
 8008dbc:	bf00      	nop
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	20027fc0 	.word	0x20027fc0
 8008dc8:	20027f90 	.word	0x20027f90
 8008dcc:	20027fa4 	.word	0x20027fa4
 8008dd0:	20027fb8 	.word	0x20027fb8
 8008dd4:	20027fbc 	.word	0x20027fbc
 8008dd8:	2002806c 	.word	0x2002806c
 8008ddc:	20027fcc 	.word	0x20027fcc
 8008de0:	0800b484 	.word	0x0800b484

08008de4 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b086      	sub	sp, #24
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10a      	bne.n	8008e0c <xTimerIsTimerActive+0x28>
	__asm volatile
 8008df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfa:	f383 8811 	msr	BASEPRI, r3
 8008dfe:	f3bf 8f6f 	isb	sy
 8008e02:	f3bf 8f4f 	dsb	sy
 8008e06:	60fb      	str	r3, [r7, #12]
}
 8008e08:	bf00      	nop
 8008e0a:	e7fe      	b.n	8008e0a <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8008e0c:	f000 f982 	bl	8009114 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e16:	f003 0301 	and.w	r3, r3, #1
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d102      	bne.n	8008e24 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	617b      	str	r3, [r7, #20]
 8008e22:	e001      	b.n	8008e28 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 8008e24:	2301      	movs	r3, #1
 8008e26:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8008e28:	f000 f9a4 	bl	8009174 <vPortExitCritical>

	return xReturn;
 8008e2c:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3718      	adds	r7, #24
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b086      	sub	sp, #24
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d10a      	bne.n	8008e5e <pvTimerGetTimerID+0x28>
	__asm volatile
 8008e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4c:	f383 8811 	msr	BASEPRI, r3
 8008e50:	f3bf 8f6f 	isb	sy
 8008e54:	f3bf 8f4f 	dsb	sy
 8008e58:	60fb      	str	r3, [r7, #12]
}
 8008e5a:	bf00      	nop
 8008e5c:	e7fe      	b.n	8008e5c <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8008e5e:	f000 f959 	bl	8009114 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	69db      	ldr	r3, [r3, #28]
 8008e66:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8008e68:	f000 f984 	bl	8009174 <vPortExitCritical>

	return pvReturn;
 8008e6c:	693b      	ldr	r3, [r7, #16]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3718      	adds	r7, #24
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
	...

08008e78 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b08a      	sub	sp, #40	; 0x28
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]
 8008e84:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8008e86:	f06f 0301 	mvn.w	r3, #1
 8008e8a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e98:	4b06      	ldr	r3, [pc, #24]	; (8008eb4 <xTimerPendFunctionCallFromISR+0x3c>)
 8008e9a:	6818      	ldr	r0, [r3, #0]
 8008e9c:	f107 0114 	add.w	r1, r7, #20
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	683a      	ldr	r2, [r7, #0]
 8008ea4:	f7fd fbee 	bl	8006684 <xQueueGenericSendFromISR>
 8008ea8:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3728      	adds	r7, #40	; 0x28
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	20027fc0 	.word	0x20027fc0

08008eb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	3b04      	subs	r3, #4
 8008ec8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008ed0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	3b04      	subs	r3, #4
 8008ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	f023 0201 	bic.w	r2, r3, #1
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	3b04      	subs	r3, #4
 8008ee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008ee8:	4a0c      	ldr	r2, [pc, #48]	; (8008f1c <pxPortInitialiseStack+0x64>)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	3b14      	subs	r3, #20
 8008ef2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	3b04      	subs	r3, #4
 8008efe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f06f 0202 	mvn.w	r2, #2
 8008f06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	3b20      	subs	r3, #32
 8008f0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3714      	adds	r7, #20
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr
 8008f1c:	08008f21 	.word	0x08008f21

08008f20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008f26:	2300      	movs	r3, #0
 8008f28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008f2a:	4b12      	ldr	r3, [pc, #72]	; (8008f74 <prvTaskExitError+0x54>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f32:	d00a      	beq.n	8008f4a <prvTaskExitError+0x2a>
	__asm volatile
 8008f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f38:	f383 8811 	msr	BASEPRI, r3
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	60fb      	str	r3, [r7, #12]
}
 8008f46:	bf00      	nop
 8008f48:	e7fe      	b.n	8008f48 <prvTaskExitError+0x28>
	__asm volatile
 8008f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4e:	f383 8811 	msr	BASEPRI, r3
 8008f52:	f3bf 8f6f 	isb	sy
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	60bb      	str	r3, [r7, #8]
}
 8008f5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008f5e:	bf00      	nop
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d0fc      	beq.n	8008f60 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008f66:	bf00      	nop
 8008f68:	bf00      	nop
 8008f6a:	3714      	adds	r7, #20
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr
 8008f74:	2000001c 	.word	0x2000001c
	...

08008f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008f80:	4b07      	ldr	r3, [pc, #28]	; (8008fa0 <pxCurrentTCBConst2>)
 8008f82:	6819      	ldr	r1, [r3, #0]
 8008f84:	6808      	ldr	r0, [r1, #0]
 8008f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f8a:	f380 8809 	msr	PSP, r0
 8008f8e:	f3bf 8f6f 	isb	sy
 8008f92:	f04f 0000 	mov.w	r0, #0
 8008f96:	f380 8811 	msr	BASEPRI, r0
 8008f9a:	4770      	bx	lr
 8008f9c:	f3af 8000 	nop.w

08008fa0 <pxCurrentTCBConst2>:
 8008fa0:	20027a90 	.word	0x20027a90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008fa4:	bf00      	nop
 8008fa6:	bf00      	nop

08008fa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008fa8:	4808      	ldr	r0, [pc, #32]	; (8008fcc <prvPortStartFirstTask+0x24>)
 8008faa:	6800      	ldr	r0, [r0, #0]
 8008fac:	6800      	ldr	r0, [r0, #0]
 8008fae:	f380 8808 	msr	MSP, r0
 8008fb2:	f04f 0000 	mov.w	r0, #0
 8008fb6:	f380 8814 	msr	CONTROL, r0
 8008fba:	b662      	cpsie	i
 8008fbc:	b661      	cpsie	f
 8008fbe:	f3bf 8f4f 	dsb	sy
 8008fc2:	f3bf 8f6f 	isb	sy
 8008fc6:	df00      	svc	0
 8008fc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008fca:	bf00      	nop
 8008fcc:	e000ed08 	.word	0xe000ed08

08008fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008fd6:	4b46      	ldr	r3, [pc, #280]	; (80090f0 <xPortStartScheduler+0x120>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a46      	ldr	r2, [pc, #280]	; (80090f4 <xPortStartScheduler+0x124>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d10a      	bne.n	8008ff6 <xPortStartScheduler+0x26>
	__asm volatile
 8008fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe4:	f383 8811 	msr	BASEPRI, r3
 8008fe8:	f3bf 8f6f 	isb	sy
 8008fec:	f3bf 8f4f 	dsb	sy
 8008ff0:	613b      	str	r3, [r7, #16]
}
 8008ff2:	bf00      	nop
 8008ff4:	e7fe      	b.n	8008ff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ff6:	4b3e      	ldr	r3, [pc, #248]	; (80090f0 <xPortStartScheduler+0x120>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a3f      	ldr	r2, [pc, #252]	; (80090f8 <xPortStartScheduler+0x128>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d10a      	bne.n	8009016 <xPortStartScheduler+0x46>
	__asm volatile
 8009000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	60fb      	str	r3, [r7, #12]
}
 8009012:	bf00      	nop
 8009014:	e7fe      	b.n	8009014 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009016:	4b39      	ldr	r3, [pc, #228]	; (80090fc <xPortStartScheduler+0x12c>)
 8009018:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	b2db      	uxtb	r3, r3
 8009020:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	22ff      	movs	r2, #255	; 0xff
 8009026:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	b2db      	uxtb	r3, r3
 800902e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009030:	78fb      	ldrb	r3, [r7, #3]
 8009032:	b2db      	uxtb	r3, r3
 8009034:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009038:	b2da      	uxtb	r2, r3
 800903a:	4b31      	ldr	r3, [pc, #196]	; (8009100 <xPortStartScheduler+0x130>)
 800903c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800903e:	4b31      	ldr	r3, [pc, #196]	; (8009104 <xPortStartScheduler+0x134>)
 8009040:	2207      	movs	r2, #7
 8009042:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009044:	e009      	b.n	800905a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009046:	4b2f      	ldr	r3, [pc, #188]	; (8009104 <xPortStartScheduler+0x134>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	3b01      	subs	r3, #1
 800904c:	4a2d      	ldr	r2, [pc, #180]	; (8009104 <xPortStartScheduler+0x134>)
 800904e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009050:	78fb      	ldrb	r3, [r7, #3]
 8009052:	b2db      	uxtb	r3, r3
 8009054:	005b      	lsls	r3, r3, #1
 8009056:	b2db      	uxtb	r3, r3
 8009058:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800905a:	78fb      	ldrb	r3, [r7, #3]
 800905c:	b2db      	uxtb	r3, r3
 800905e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009062:	2b80      	cmp	r3, #128	; 0x80
 8009064:	d0ef      	beq.n	8009046 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009066:	4b27      	ldr	r3, [pc, #156]	; (8009104 <xPortStartScheduler+0x134>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f1c3 0307 	rsb	r3, r3, #7
 800906e:	2b04      	cmp	r3, #4
 8009070:	d00a      	beq.n	8009088 <xPortStartScheduler+0xb8>
	__asm volatile
 8009072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009076:	f383 8811 	msr	BASEPRI, r3
 800907a:	f3bf 8f6f 	isb	sy
 800907e:	f3bf 8f4f 	dsb	sy
 8009082:	60bb      	str	r3, [r7, #8]
}
 8009084:	bf00      	nop
 8009086:	e7fe      	b.n	8009086 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009088:	4b1e      	ldr	r3, [pc, #120]	; (8009104 <xPortStartScheduler+0x134>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	021b      	lsls	r3, r3, #8
 800908e:	4a1d      	ldr	r2, [pc, #116]	; (8009104 <xPortStartScheduler+0x134>)
 8009090:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009092:	4b1c      	ldr	r3, [pc, #112]	; (8009104 <xPortStartScheduler+0x134>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800909a:	4a1a      	ldr	r2, [pc, #104]	; (8009104 <xPortStartScheduler+0x134>)
 800909c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	b2da      	uxtb	r2, r3
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80090a6:	4b18      	ldr	r3, [pc, #96]	; (8009108 <xPortStartScheduler+0x138>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a17      	ldr	r2, [pc, #92]	; (8009108 <xPortStartScheduler+0x138>)
 80090ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80090b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80090b2:	4b15      	ldr	r3, [pc, #84]	; (8009108 <xPortStartScheduler+0x138>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a14      	ldr	r2, [pc, #80]	; (8009108 <xPortStartScheduler+0x138>)
 80090b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80090bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80090be:	f000 f8dd 	bl	800927c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80090c2:	4b12      	ldr	r3, [pc, #72]	; (800910c <xPortStartScheduler+0x13c>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80090c8:	f000 f8fc 	bl	80092c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80090cc:	4b10      	ldr	r3, [pc, #64]	; (8009110 <xPortStartScheduler+0x140>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a0f      	ldr	r2, [pc, #60]	; (8009110 <xPortStartScheduler+0x140>)
 80090d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80090d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80090d8:	f7ff ff66 	bl	8008fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80090dc:	f7fe fd10 	bl	8007b00 <vTaskSwitchContext>
	prvTaskExitError();
 80090e0:	f7ff ff1e 	bl	8008f20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3718      	adds	r7, #24
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	e000ed00 	.word	0xe000ed00
 80090f4:	410fc271 	.word	0x410fc271
 80090f8:	410fc270 	.word	0x410fc270
 80090fc:	e000e400 	.word	0xe000e400
 8009100:	200280bc 	.word	0x200280bc
 8009104:	200280c0 	.word	0x200280c0
 8009108:	e000ed20 	.word	0xe000ed20
 800910c:	2000001c 	.word	0x2000001c
 8009110:	e000ef34 	.word	0xe000ef34

08009114 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
	__asm volatile
 800911a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911e:	f383 8811 	msr	BASEPRI, r3
 8009122:	f3bf 8f6f 	isb	sy
 8009126:	f3bf 8f4f 	dsb	sy
 800912a:	607b      	str	r3, [r7, #4]
}
 800912c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800912e:	4b0f      	ldr	r3, [pc, #60]	; (800916c <vPortEnterCritical+0x58>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	3301      	adds	r3, #1
 8009134:	4a0d      	ldr	r2, [pc, #52]	; (800916c <vPortEnterCritical+0x58>)
 8009136:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009138:	4b0c      	ldr	r3, [pc, #48]	; (800916c <vPortEnterCritical+0x58>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d10f      	bne.n	8009160 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009140:	4b0b      	ldr	r3, [pc, #44]	; (8009170 <vPortEnterCritical+0x5c>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	b2db      	uxtb	r3, r3
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00a      	beq.n	8009160 <vPortEnterCritical+0x4c>
	__asm volatile
 800914a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914e:	f383 8811 	msr	BASEPRI, r3
 8009152:	f3bf 8f6f 	isb	sy
 8009156:	f3bf 8f4f 	dsb	sy
 800915a:	603b      	str	r3, [r7, #0]
}
 800915c:	bf00      	nop
 800915e:	e7fe      	b.n	800915e <vPortEnterCritical+0x4a>
	}
}
 8009160:	bf00      	nop
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr
 800916c:	2000001c 	.word	0x2000001c
 8009170:	e000ed04 	.word	0xe000ed04

08009174 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800917a:	4b12      	ldr	r3, [pc, #72]	; (80091c4 <vPortExitCritical+0x50>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d10a      	bne.n	8009198 <vPortExitCritical+0x24>
	__asm volatile
 8009182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009186:	f383 8811 	msr	BASEPRI, r3
 800918a:	f3bf 8f6f 	isb	sy
 800918e:	f3bf 8f4f 	dsb	sy
 8009192:	607b      	str	r3, [r7, #4]
}
 8009194:	bf00      	nop
 8009196:	e7fe      	b.n	8009196 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009198:	4b0a      	ldr	r3, [pc, #40]	; (80091c4 <vPortExitCritical+0x50>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	3b01      	subs	r3, #1
 800919e:	4a09      	ldr	r2, [pc, #36]	; (80091c4 <vPortExitCritical+0x50>)
 80091a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80091a2:	4b08      	ldr	r3, [pc, #32]	; (80091c4 <vPortExitCritical+0x50>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d105      	bne.n	80091b6 <vPortExitCritical+0x42>
 80091aa:	2300      	movs	r3, #0
 80091ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	f383 8811 	msr	BASEPRI, r3
}
 80091b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80091b6:	bf00      	nop
 80091b8:	370c      	adds	r7, #12
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	2000001c 	.word	0x2000001c
	...

080091d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80091d0:	f3ef 8009 	mrs	r0, PSP
 80091d4:	f3bf 8f6f 	isb	sy
 80091d8:	4b15      	ldr	r3, [pc, #84]	; (8009230 <pxCurrentTCBConst>)
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	f01e 0f10 	tst.w	lr, #16
 80091e0:	bf08      	it	eq
 80091e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80091e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ea:	6010      	str	r0, [r2, #0]
 80091ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80091f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80091f4:	f380 8811 	msr	BASEPRI, r0
 80091f8:	f3bf 8f4f 	dsb	sy
 80091fc:	f3bf 8f6f 	isb	sy
 8009200:	f7fe fc7e 	bl	8007b00 <vTaskSwitchContext>
 8009204:	f04f 0000 	mov.w	r0, #0
 8009208:	f380 8811 	msr	BASEPRI, r0
 800920c:	bc09      	pop	{r0, r3}
 800920e:	6819      	ldr	r1, [r3, #0]
 8009210:	6808      	ldr	r0, [r1, #0]
 8009212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009216:	f01e 0f10 	tst.w	lr, #16
 800921a:	bf08      	it	eq
 800921c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009220:	f380 8809 	msr	PSP, r0
 8009224:	f3bf 8f6f 	isb	sy
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	f3af 8000 	nop.w

08009230 <pxCurrentTCBConst>:
 8009230:	20027a90 	.word	0x20027a90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009234:	bf00      	nop
 8009236:	bf00      	nop

08009238 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
	__asm volatile
 800923e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009242:	f383 8811 	msr	BASEPRI, r3
 8009246:	f3bf 8f6f 	isb	sy
 800924a:	f3bf 8f4f 	dsb	sy
 800924e:	607b      	str	r3, [r7, #4]
}
 8009250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009252:	f7fe fb97 	bl	8007984 <xTaskIncrementTick>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	d003      	beq.n	8009264 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800925c:	4b06      	ldr	r3, [pc, #24]	; (8009278 <xPortSysTickHandler+0x40>)
 800925e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009262:	601a      	str	r2, [r3, #0]
 8009264:	2300      	movs	r3, #0
 8009266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	f383 8811 	msr	BASEPRI, r3
}
 800926e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009270:	bf00      	nop
 8009272:	3708      	adds	r7, #8
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}
 8009278:	e000ed04 	.word	0xe000ed04

0800927c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800927c:	b480      	push	{r7}
 800927e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009280:	4b0b      	ldr	r3, [pc, #44]	; (80092b0 <vPortSetupTimerInterrupt+0x34>)
 8009282:	2200      	movs	r2, #0
 8009284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009286:	4b0b      	ldr	r3, [pc, #44]	; (80092b4 <vPortSetupTimerInterrupt+0x38>)
 8009288:	2200      	movs	r2, #0
 800928a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800928c:	4b0a      	ldr	r3, [pc, #40]	; (80092b8 <vPortSetupTimerInterrupt+0x3c>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a0a      	ldr	r2, [pc, #40]	; (80092bc <vPortSetupTimerInterrupt+0x40>)
 8009292:	fba2 2303 	umull	r2, r3, r2, r3
 8009296:	099b      	lsrs	r3, r3, #6
 8009298:	4a09      	ldr	r2, [pc, #36]	; (80092c0 <vPortSetupTimerInterrupt+0x44>)
 800929a:	3b01      	subs	r3, #1
 800929c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800929e:	4b04      	ldr	r3, [pc, #16]	; (80092b0 <vPortSetupTimerInterrupt+0x34>)
 80092a0:	2207      	movs	r2, #7
 80092a2:	601a      	str	r2, [r3, #0]
}
 80092a4:	bf00      	nop
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop
 80092b0:	e000e010 	.word	0xe000e010
 80092b4:	e000e018 	.word	0xe000e018
 80092b8:	20000010 	.word	0x20000010
 80092bc:	10624dd3 	.word	0x10624dd3
 80092c0:	e000e014 	.word	0xe000e014

080092c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80092c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80092d4 <vPortEnableVFP+0x10>
 80092c8:	6801      	ldr	r1, [r0, #0]
 80092ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80092ce:	6001      	str	r1, [r0, #0]
 80092d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80092d2:	bf00      	nop
 80092d4:	e000ed88 	.word	0xe000ed88

080092d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80092d8:	b480      	push	{r7}
 80092da:	b085      	sub	sp, #20
 80092dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80092de:	f3ef 8305 	mrs	r3, IPSR
 80092e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2b0f      	cmp	r3, #15
 80092e8:	d914      	bls.n	8009314 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80092ea:	4a17      	ldr	r2, [pc, #92]	; (8009348 <vPortValidateInterruptPriority+0x70>)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	4413      	add	r3, r2
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80092f4:	4b15      	ldr	r3, [pc, #84]	; (800934c <vPortValidateInterruptPriority+0x74>)
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	7afa      	ldrb	r2, [r7, #11]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d20a      	bcs.n	8009314 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80092fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009302:	f383 8811 	msr	BASEPRI, r3
 8009306:	f3bf 8f6f 	isb	sy
 800930a:	f3bf 8f4f 	dsb	sy
 800930e:	607b      	str	r3, [r7, #4]
}
 8009310:	bf00      	nop
 8009312:	e7fe      	b.n	8009312 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009314:	4b0e      	ldr	r3, [pc, #56]	; (8009350 <vPortValidateInterruptPriority+0x78>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800931c:	4b0d      	ldr	r3, [pc, #52]	; (8009354 <vPortValidateInterruptPriority+0x7c>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	429a      	cmp	r2, r3
 8009322:	d90a      	bls.n	800933a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009328:	f383 8811 	msr	BASEPRI, r3
 800932c:	f3bf 8f6f 	isb	sy
 8009330:	f3bf 8f4f 	dsb	sy
 8009334:	603b      	str	r3, [r7, #0]
}
 8009336:	bf00      	nop
 8009338:	e7fe      	b.n	8009338 <vPortValidateInterruptPriority+0x60>
	}
 800933a:	bf00      	nop
 800933c:	3714      	adds	r7, #20
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	e000e3f0 	.word	0xe000e3f0
 800934c:	200280bc 	.word	0x200280bc
 8009350:	e000ed0c 	.word	0xe000ed0c
 8009354:	200280c0 	.word	0x200280c0

08009358 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b08a      	sub	sp, #40	; 0x28
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009360:	2300      	movs	r3, #0
 8009362:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009364:	f7fe fa3c 	bl	80077e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009368:	4b5b      	ldr	r3, [pc, #364]	; (80094d8 <pvPortMalloc+0x180>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d101      	bne.n	8009374 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009370:	f000 f920 	bl	80095b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009374:	4b59      	ldr	r3, [pc, #356]	; (80094dc <pvPortMalloc+0x184>)
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4013      	ands	r3, r2
 800937c:	2b00      	cmp	r3, #0
 800937e:	f040 8093 	bne.w	80094a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d01d      	beq.n	80093c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009388:	2208      	movs	r2, #8
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4413      	add	r3, r2
 800938e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f003 0307 	and.w	r3, r3, #7
 8009396:	2b00      	cmp	r3, #0
 8009398:	d014      	beq.n	80093c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f023 0307 	bic.w	r3, r3, #7
 80093a0:	3308      	adds	r3, #8
 80093a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f003 0307 	and.w	r3, r3, #7
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00a      	beq.n	80093c4 <pvPortMalloc+0x6c>
	__asm volatile
 80093ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b2:	f383 8811 	msr	BASEPRI, r3
 80093b6:	f3bf 8f6f 	isb	sy
 80093ba:	f3bf 8f4f 	dsb	sy
 80093be:	617b      	str	r3, [r7, #20]
}
 80093c0:	bf00      	nop
 80093c2:	e7fe      	b.n	80093c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d06e      	beq.n	80094a8 <pvPortMalloc+0x150>
 80093ca:	4b45      	ldr	r3, [pc, #276]	; (80094e0 <pvPortMalloc+0x188>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d869      	bhi.n	80094a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80093d4:	4b43      	ldr	r3, [pc, #268]	; (80094e4 <pvPortMalloc+0x18c>)
 80093d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80093d8:	4b42      	ldr	r3, [pc, #264]	; (80094e4 <pvPortMalloc+0x18c>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093de:	e004      	b.n	80093ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80093e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80093e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d903      	bls.n	80093fc <pvPortMalloc+0xa4>
 80093f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d1f1      	bne.n	80093e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80093fc:	4b36      	ldr	r3, [pc, #216]	; (80094d8 <pvPortMalloc+0x180>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009402:	429a      	cmp	r2, r3
 8009404:	d050      	beq.n	80094a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009406:	6a3b      	ldr	r3, [r7, #32]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2208      	movs	r2, #8
 800940c:	4413      	add	r3, r2
 800940e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	6a3b      	ldr	r3, [r7, #32]
 8009416:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	1ad2      	subs	r2, r2, r3
 8009420:	2308      	movs	r3, #8
 8009422:	005b      	lsls	r3, r3, #1
 8009424:	429a      	cmp	r2, r3
 8009426:	d91f      	bls.n	8009468 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4413      	add	r3, r2
 800942e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009430:	69bb      	ldr	r3, [r7, #24]
 8009432:	f003 0307 	and.w	r3, r3, #7
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00a      	beq.n	8009450 <pvPortMalloc+0xf8>
	__asm volatile
 800943a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943e:	f383 8811 	msr	BASEPRI, r3
 8009442:	f3bf 8f6f 	isb	sy
 8009446:	f3bf 8f4f 	dsb	sy
 800944a:	613b      	str	r3, [r7, #16]
}
 800944c:	bf00      	nop
 800944e:	e7fe      	b.n	800944e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009452:	685a      	ldr	r2, [r3, #4]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	1ad2      	subs	r2, r2, r3
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009462:	69b8      	ldr	r0, [r7, #24]
 8009464:	f000 f908 	bl	8009678 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009468:	4b1d      	ldr	r3, [pc, #116]	; (80094e0 <pvPortMalloc+0x188>)
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	4a1b      	ldr	r2, [pc, #108]	; (80094e0 <pvPortMalloc+0x188>)
 8009474:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009476:	4b1a      	ldr	r3, [pc, #104]	; (80094e0 <pvPortMalloc+0x188>)
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	4b1b      	ldr	r3, [pc, #108]	; (80094e8 <pvPortMalloc+0x190>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	429a      	cmp	r2, r3
 8009480:	d203      	bcs.n	800948a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009482:	4b17      	ldr	r3, [pc, #92]	; (80094e0 <pvPortMalloc+0x188>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a18      	ldr	r2, [pc, #96]	; (80094e8 <pvPortMalloc+0x190>)
 8009488:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800948a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948c:	685a      	ldr	r2, [r3, #4]
 800948e:	4b13      	ldr	r3, [pc, #76]	; (80094dc <pvPortMalloc+0x184>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	431a      	orrs	r2, r3
 8009494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009496:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949a:	2200      	movs	r2, #0
 800949c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800949e:	4b13      	ldr	r3, [pc, #76]	; (80094ec <pvPortMalloc+0x194>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	3301      	adds	r3, #1
 80094a4:	4a11      	ldr	r2, [pc, #68]	; (80094ec <pvPortMalloc+0x194>)
 80094a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80094a8:	f7fe f9a8 	bl	80077fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	f003 0307 	and.w	r3, r3, #7
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00a      	beq.n	80094cc <pvPortMalloc+0x174>
	__asm volatile
 80094b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ba:	f383 8811 	msr	BASEPRI, r3
 80094be:	f3bf 8f6f 	isb	sy
 80094c2:	f3bf 8f4f 	dsb	sy
 80094c6:	60fb      	str	r3, [r7, #12]
}
 80094c8:	bf00      	nop
 80094ca:	e7fe      	b.n	80094ca <pvPortMalloc+0x172>
	return pvReturn;
 80094cc:	69fb      	ldr	r3, [r7, #28]
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3728      	adds	r7, #40	; 0x28
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	2002bccc 	.word	0x2002bccc
 80094dc:	2002bce0 	.word	0x2002bce0
 80094e0:	2002bcd0 	.word	0x2002bcd0
 80094e4:	2002bcc4 	.word	0x2002bcc4
 80094e8:	2002bcd4 	.word	0x2002bcd4
 80094ec:	2002bcd8 	.word	0x2002bcd8

080094f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b086      	sub	sp, #24
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d04d      	beq.n	800959e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009502:	2308      	movs	r3, #8
 8009504:	425b      	negs	r3, r3
 8009506:	697a      	ldr	r2, [r7, #20]
 8009508:	4413      	add	r3, r2
 800950a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	685a      	ldr	r2, [r3, #4]
 8009514:	4b24      	ldr	r3, [pc, #144]	; (80095a8 <vPortFree+0xb8>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4013      	ands	r3, r2
 800951a:	2b00      	cmp	r3, #0
 800951c:	d10a      	bne.n	8009534 <vPortFree+0x44>
	__asm volatile
 800951e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009522:	f383 8811 	msr	BASEPRI, r3
 8009526:	f3bf 8f6f 	isb	sy
 800952a:	f3bf 8f4f 	dsb	sy
 800952e:	60fb      	str	r3, [r7, #12]
}
 8009530:	bf00      	nop
 8009532:	e7fe      	b.n	8009532 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00a      	beq.n	8009552 <vPortFree+0x62>
	__asm volatile
 800953c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009540:	f383 8811 	msr	BASEPRI, r3
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	60bb      	str	r3, [r7, #8]
}
 800954e:	bf00      	nop
 8009550:	e7fe      	b.n	8009550 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	685a      	ldr	r2, [r3, #4]
 8009556:	4b14      	ldr	r3, [pc, #80]	; (80095a8 <vPortFree+0xb8>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4013      	ands	r3, r2
 800955c:	2b00      	cmp	r3, #0
 800955e:	d01e      	beq.n	800959e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d11a      	bne.n	800959e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	685a      	ldr	r2, [r3, #4]
 800956c:	4b0e      	ldr	r3, [pc, #56]	; (80095a8 <vPortFree+0xb8>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	43db      	mvns	r3, r3
 8009572:	401a      	ands	r2, r3
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009578:	f7fe f932 	bl	80077e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	685a      	ldr	r2, [r3, #4]
 8009580:	4b0a      	ldr	r3, [pc, #40]	; (80095ac <vPortFree+0xbc>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4413      	add	r3, r2
 8009586:	4a09      	ldr	r2, [pc, #36]	; (80095ac <vPortFree+0xbc>)
 8009588:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800958a:	6938      	ldr	r0, [r7, #16]
 800958c:	f000 f874 	bl	8009678 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009590:	4b07      	ldr	r3, [pc, #28]	; (80095b0 <vPortFree+0xc0>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	3301      	adds	r3, #1
 8009596:	4a06      	ldr	r2, [pc, #24]	; (80095b0 <vPortFree+0xc0>)
 8009598:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800959a:	f7fe f92f 	bl	80077fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800959e:	bf00      	nop
 80095a0:	3718      	adds	r7, #24
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	2002bce0 	.word	0x2002bce0
 80095ac:	2002bcd0 	.word	0x2002bcd0
 80095b0:	2002bcdc 	.word	0x2002bcdc

080095b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80095b4:	b480      	push	{r7}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80095ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80095be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80095c0:	4b27      	ldr	r3, [pc, #156]	; (8009660 <prvHeapInit+0xac>)
 80095c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f003 0307 	and.w	r3, r3, #7
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00c      	beq.n	80095e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	3307      	adds	r3, #7
 80095d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f023 0307 	bic.w	r3, r3, #7
 80095da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80095dc:	68ba      	ldr	r2, [r7, #8]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	4a1f      	ldr	r2, [pc, #124]	; (8009660 <prvHeapInit+0xac>)
 80095e4:	4413      	add	r3, r2
 80095e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80095ec:	4a1d      	ldr	r2, [pc, #116]	; (8009664 <prvHeapInit+0xb0>)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80095f2:	4b1c      	ldr	r3, [pc, #112]	; (8009664 <prvHeapInit+0xb0>)
 80095f4:	2200      	movs	r2, #0
 80095f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	4413      	add	r3, r2
 80095fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009600:	2208      	movs	r2, #8
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	1a9b      	subs	r3, r3, r2
 8009606:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f023 0307 	bic.w	r3, r3, #7
 800960e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	4a15      	ldr	r2, [pc, #84]	; (8009668 <prvHeapInit+0xb4>)
 8009614:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009616:	4b14      	ldr	r3, [pc, #80]	; (8009668 <prvHeapInit+0xb4>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2200      	movs	r2, #0
 800961c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800961e:	4b12      	ldr	r3, [pc, #72]	; (8009668 <prvHeapInit+0xb4>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2200      	movs	r2, #0
 8009624:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	1ad2      	subs	r2, r2, r3
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009634:	4b0c      	ldr	r3, [pc, #48]	; (8009668 <prvHeapInit+0xb4>)
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	4a0a      	ldr	r2, [pc, #40]	; (800966c <prvHeapInit+0xb8>)
 8009642:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	4a09      	ldr	r2, [pc, #36]	; (8009670 <prvHeapInit+0xbc>)
 800964a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800964c:	4b09      	ldr	r3, [pc, #36]	; (8009674 <prvHeapInit+0xc0>)
 800964e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009652:	601a      	str	r2, [r3, #0]
}
 8009654:	bf00      	nop
 8009656:	3714      	adds	r7, #20
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr
 8009660:	200280c4 	.word	0x200280c4
 8009664:	2002bcc4 	.word	0x2002bcc4
 8009668:	2002bccc 	.word	0x2002bccc
 800966c:	2002bcd4 	.word	0x2002bcd4
 8009670:	2002bcd0 	.word	0x2002bcd0
 8009674:	2002bce0 	.word	0x2002bce0

08009678 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009680:	4b28      	ldr	r3, [pc, #160]	; (8009724 <prvInsertBlockIntoFreeList+0xac>)
 8009682:	60fb      	str	r3, [r7, #12]
 8009684:	e002      	b.n	800968c <prvInsertBlockIntoFreeList+0x14>
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	60fb      	str	r3, [r7, #12]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	429a      	cmp	r2, r3
 8009694:	d8f7      	bhi.n	8009686 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	68ba      	ldr	r2, [r7, #8]
 80096a0:	4413      	add	r3, r2
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d108      	bne.n	80096ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	685a      	ldr	r2, [r3, #4]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	441a      	add	r2, r3
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	441a      	add	r2, r3
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d118      	bne.n	8009700 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	4b15      	ldr	r3, [pc, #84]	; (8009728 <prvInsertBlockIntoFreeList+0xb0>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d00d      	beq.n	80096f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	685a      	ldr	r2, [r3, #4]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	441a      	add	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	601a      	str	r2, [r3, #0]
 80096f4:	e008      	b.n	8009708 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80096f6:	4b0c      	ldr	r3, [pc, #48]	; (8009728 <prvInsertBlockIntoFreeList+0xb0>)
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	601a      	str	r2, [r3, #0]
 80096fe:	e003      	b.n	8009708 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009708:	68fa      	ldr	r2, [r7, #12]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	429a      	cmp	r2, r3
 800970e:	d002      	beq.n	8009716 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009716:	bf00      	nop
 8009718:	3714      	adds	r7, #20
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	2002bcc4 	.word	0x2002bcc4
 8009728:	2002bccc 	.word	0x2002bccc

0800972c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8009732:	4b24      	ldr	r3, [pc, #144]	; (80097c4 <_DoInit+0x98>)
 8009734:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2203      	movs	r2, #3
 800973a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2203      	movs	r2, #3
 8009740:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a20      	ldr	r2, [pc, #128]	; (80097c8 <_DoInit+0x9c>)
 8009746:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4a20      	ldr	r2, [pc, #128]	; (80097cc <_DoInit+0xa0>)
 800974c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009754:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a17      	ldr	r2, [pc, #92]	; (80097c8 <_DoInit+0x9c>)
 800976c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4a17      	ldr	r2, [pc, #92]	; (80097d0 <_DoInit+0xa4>)
 8009772:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2210      	movs	r2, #16
 8009778:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	3307      	adds	r3, #7
 8009790:	4a10      	ldr	r2, [pc, #64]	; (80097d4 <_DoInit+0xa8>)
 8009792:	6810      	ldr	r0, [r2, #0]
 8009794:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8009796:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4a0e      	ldr	r2, [pc, #56]	; (80097d8 <_DoInit+0xac>)
 800979e:	6810      	ldr	r0, [r2, #0]
 80097a0:	6018      	str	r0, [r3, #0]
 80097a2:	8891      	ldrh	r1, [r2, #4]
 80097a4:	7992      	ldrb	r2, [r2, #6]
 80097a6:	8099      	strh	r1, [r3, #4]
 80097a8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80097aa:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2220      	movs	r2, #32
 80097b2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80097b4:	f3bf 8f5f 	dmb	sy
}
 80097b8:	bf00      	nop
 80097ba:	370c      	adds	r7, #12
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr
 80097c4:	2002bce4 	.word	0x2002bce4
 80097c8:	0800b48c 	.word	0x0800b48c
 80097cc:	2002bd8c 	.word	0x2002bd8c
 80097d0:	2002c18c 	.word	0x2002c18c
 80097d4:	0800b498 	.word	0x0800b498
 80097d8:	0800b49c 	.word	0x0800b49c

080097dc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80097dc:	b580      	push	{r7, lr}
 80097de:	b08c      	sub	sp, #48	; 0x30
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80097e8:	4b3e      	ldr	r3, [pc, #248]	; (80098e4 <SEGGER_RTT_ReadNoLock+0x108>)
 80097ea:	623b      	str	r3, [r7, #32]
 80097ec:	6a3b      	ldr	r3, [r7, #32]
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d101      	bne.n	80097fa <SEGGER_RTT_ReadNoLock+0x1e>
 80097f6:	f7ff ff99 	bl	800972c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	4613      	mov	r3, r2
 80097fe:	005b      	lsls	r3, r3, #1
 8009800:	4413      	add	r3, r2
 8009802:	00db      	lsls	r3, r3, #3
 8009804:	3360      	adds	r3, #96	; 0x60
 8009806:	4a37      	ldr	r2, [pc, #220]	; (80098e4 <SEGGER_RTT_ReadNoLock+0x108>)
 8009808:	4413      	add	r3, r2
 800980a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8009810:	69fb      	ldr	r3, [r7, #28]
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800981c:	2300      	movs	r3, #0
 800981e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8009820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	429a      	cmp	r2, r3
 8009826:	d92b      	bls.n	8009880 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8009828:	69fb      	ldr	r3, [r7, #28]
 800982a:	689a      	ldr	r2, [r3, #8]
 800982c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982e:	1ad3      	subs	r3, r2, r3
 8009830:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8009832:	697a      	ldr	r2, [r7, #20]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	4293      	cmp	r3, r2
 8009838:	bf28      	it	cs
 800983a:	4613      	movcs	r3, r2
 800983c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	685a      	ldr	r2, [r3, #4]
 8009842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009844:	4413      	add	r3, r2
 8009846:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8009848:	697a      	ldr	r2, [r7, #20]
 800984a:	6939      	ldr	r1, [r7, #16]
 800984c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800984e:	f001 fce3 	bl	800b218 <memcpy>
    NumBytesRead += NumBytesRem;
 8009852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	4413      	add	r3, r2
 8009858:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800985a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	4413      	add	r3, r2
 8009860:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	1ad3      	subs	r3, r2, r3
 8009868:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800986a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	4413      	add	r3, r2
 8009870:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009878:	429a      	cmp	r2, r3
 800987a:	d101      	bne.n	8009880 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800987c:	2300      	movs	r3, #0
 800987e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8009880:	69ba      	ldr	r2, [r7, #24]
 8009882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009884:	1ad3      	subs	r3, r2, r3
 8009886:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8009888:	697a      	ldr	r2, [r7, #20]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	4293      	cmp	r3, r2
 800988e:	bf28      	it	cs
 8009890:	4613      	movcs	r3, r2
 8009892:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d019      	beq.n	80098ce <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	685a      	ldr	r2, [r3, #4]
 800989e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a0:	4413      	add	r3, r2
 80098a2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	6939      	ldr	r1, [r7, #16]
 80098a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80098aa:	f001 fcb5 	bl	800b218 <memcpy>
    NumBytesRead += NumBytesRem;
 80098ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	4413      	add	r3, r2
 80098b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80098b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	4413      	add	r3, r2
 80098bc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	1ad3      	subs	r3, r2, r3
 80098c4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80098c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	4413      	add	r3, r2
 80098cc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80098ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d002      	beq.n	80098da <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098d8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80098da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3730      	adds	r7, #48	; 0x30
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	2002bce4 	.word	0x2002bce4

080098e8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b088      	sub	sp, #32
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
 80098f4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80098f6:	4b3d      	ldr	r3, [pc, #244]	; (80099ec <SEGGER_RTT_AllocUpBuffer+0x104>)
 80098f8:	61bb      	str	r3, [r7, #24]
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	2b00      	cmp	r3, #0
 8009902:	d101      	bne.n	8009908 <SEGGER_RTT_AllocUpBuffer+0x20>
 8009904:	f7ff ff12 	bl	800972c <_DoInit>
  SEGGER_RTT_LOCK();
 8009908:	f3ef 8311 	mrs	r3, BASEPRI
 800990c:	f04f 0120 	mov.w	r1, #32
 8009910:	f381 8811 	msr	BASEPRI, r1
 8009914:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8009916:	4b35      	ldr	r3, [pc, #212]	; (80099ec <SEGGER_RTT_AllocUpBuffer+0x104>)
 8009918:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800991a:	2300      	movs	r3, #0
 800991c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800991e:	6939      	ldr	r1, [r7, #16]
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	1c5a      	adds	r2, r3, #1
 8009924:	4613      	mov	r3, r2
 8009926:	005b      	lsls	r3, r3, #1
 8009928:	4413      	add	r3, r2
 800992a:	00db      	lsls	r3, r3, #3
 800992c:	440b      	add	r3, r1
 800992e:	3304      	adds	r3, #4
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d008      	beq.n	8009948 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	3301      	adds	r3, #1
 800993a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	691b      	ldr	r3, [r3, #16]
 8009940:	69fa      	ldr	r2, [r7, #28]
 8009942:	429a      	cmp	r2, r3
 8009944:	dbeb      	blt.n	800991e <SEGGER_RTT_AllocUpBuffer+0x36>
 8009946:	e000      	b.n	800994a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8009948:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	691b      	ldr	r3, [r3, #16]
 800994e:	69fa      	ldr	r2, [r7, #28]
 8009950:	429a      	cmp	r2, r3
 8009952:	da3f      	bge.n	80099d4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8009954:	6939      	ldr	r1, [r7, #16]
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	1c5a      	adds	r2, r3, #1
 800995a:	4613      	mov	r3, r2
 800995c:	005b      	lsls	r3, r3, #1
 800995e:	4413      	add	r3, r2
 8009960:	00db      	lsls	r3, r3, #3
 8009962:	440b      	add	r3, r1
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8009968:	6939      	ldr	r1, [r7, #16]
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	1c5a      	adds	r2, r3, #1
 800996e:	4613      	mov	r3, r2
 8009970:	005b      	lsls	r3, r3, #1
 8009972:	4413      	add	r3, r2
 8009974:	00db      	lsls	r3, r3, #3
 8009976:	440b      	add	r3, r1
 8009978:	3304      	adds	r3, #4
 800997a:	68ba      	ldr	r2, [r7, #8]
 800997c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800997e:	6939      	ldr	r1, [r7, #16]
 8009980:	69fa      	ldr	r2, [r7, #28]
 8009982:	4613      	mov	r3, r2
 8009984:	005b      	lsls	r3, r3, #1
 8009986:	4413      	add	r3, r2
 8009988:	00db      	lsls	r3, r3, #3
 800998a:	440b      	add	r3, r1
 800998c:	3320      	adds	r3, #32
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8009992:	6939      	ldr	r1, [r7, #16]
 8009994:	69fa      	ldr	r2, [r7, #28]
 8009996:	4613      	mov	r3, r2
 8009998:	005b      	lsls	r3, r3, #1
 800999a:	4413      	add	r3, r2
 800999c:	00db      	lsls	r3, r3, #3
 800999e:	440b      	add	r3, r1
 80099a0:	3328      	adds	r3, #40	; 0x28
 80099a2:	2200      	movs	r2, #0
 80099a4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80099a6:	6939      	ldr	r1, [r7, #16]
 80099a8:	69fa      	ldr	r2, [r7, #28]
 80099aa:	4613      	mov	r3, r2
 80099ac:	005b      	lsls	r3, r3, #1
 80099ae:	4413      	add	r3, r2
 80099b0:	00db      	lsls	r3, r3, #3
 80099b2:	440b      	add	r3, r1
 80099b4:	3324      	adds	r3, #36	; 0x24
 80099b6:	2200      	movs	r2, #0
 80099b8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80099ba:	6939      	ldr	r1, [r7, #16]
 80099bc:	69fa      	ldr	r2, [r7, #28]
 80099be:	4613      	mov	r3, r2
 80099c0:	005b      	lsls	r3, r3, #1
 80099c2:	4413      	add	r3, r2
 80099c4:	00db      	lsls	r3, r3, #3
 80099c6:	440b      	add	r3, r1
 80099c8:	332c      	adds	r3, #44	; 0x2c
 80099ca:	683a      	ldr	r2, [r7, #0]
 80099cc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80099ce:	f3bf 8f5f 	dmb	sy
 80099d2:	e002      	b.n	80099da <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80099d4:	f04f 33ff 	mov.w	r3, #4294967295
 80099d8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80099e0:	69fb      	ldr	r3, [r7, #28]
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3720      	adds	r7, #32
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	2002bce4 	.word	0x2002bce4

080099f0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b08a      	sub	sp, #40	; 0x28
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	607a      	str	r2, [r7, #4]
 80099fc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80099fe:	4b21      	ldr	r3, [pc, #132]	; (8009a84 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8009a00:	623b      	str	r3, [r7, #32]
 8009a02:	6a3b      	ldr	r3, [r7, #32]
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d101      	bne.n	8009a10 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8009a0c:	f7ff fe8e 	bl	800972c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8009a10:	4b1c      	ldr	r3, [pc, #112]	; (8009a84 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8009a12:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	d82c      	bhi.n	8009a74 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8009a1a:	f3ef 8311 	mrs	r3, BASEPRI
 8009a1e:	f04f 0120 	mov.w	r1, #32
 8009a22:	f381 8811 	msr	BASEPRI, r1
 8009a26:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	005b      	lsls	r3, r3, #1
 8009a2e:	4413      	add	r3, r2
 8009a30:	00db      	lsls	r3, r3, #3
 8009a32:	3360      	adds	r3, #96	; 0x60
 8009a34:	69fa      	ldr	r2, [r7, #28]
 8009a36:	4413      	add	r3, r2
 8009a38:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d00e      	beq.n	8009a5e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	68ba      	ldr	r2, [r7, #8]
 8009a44:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	683a      	ldr	r2, [r7, #0]
 8009a50:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	2200      	movs	r2, #0
 8009a56:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a62:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8009a64:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	627b      	str	r3, [r7, #36]	; 0x24
 8009a72:	e002      	b.n	8009a7a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8009a74:	f04f 33ff 	mov.w	r3, #4294967295
 8009a78:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8009a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3728      	adds	r7, #40	; 0x28
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}
 8009a84:	2002bce4 	.word	0x2002bce4

08009a88 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8009a88:	b480      	push	{r7}
 8009a8a:	b087      	sub	sp, #28
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8009a94:	2300      	movs	r3, #0
 8009a96:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00f      	beq.n	8009abe <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8009a9e:	e002      	b.n	8009aa6 <_EncodeStr+0x1e>
      Len++;
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8009aa6:	68ba      	ldr	r2, [r7, #8]
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	4413      	add	r3, r2
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1f6      	bne.n	8009aa0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8009ab2:	693a      	ldr	r2, [r7, #16]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d901      	bls.n	8009abe <_EncodeStr+0x36>
      Len = Limit;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	2bfe      	cmp	r3, #254	; 0xfe
 8009ac2:	d806      	bhi.n	8009ad2 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	1c5a      	adds	r2, r3, #1
 8009ac8:	60fa      	str	r2, [r7, #12]
 8009aca:	693a      	ldr	r2, [r7, #16]
 8009acc:	b2d2      	uxtb	r2, r2
 8009ace:	701a      	strb	r2, [r3, #0]
 8009ad0:	e011      	b.n	8009af6 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	1c5a      	adds	r2, r3, #1
 8009ad6:	60fa      	str	r2, [r7, #12]
 8009ad8:	22ff      	movs	r2, #255	; 0xff
 8009ada:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	1c5a      	adds	r2, r3, #1
 8009ae0:	60fa      	str	r2, [r7, #12]
 8009ae2:	693a      	ldr	r2, [r7, #16]
 8009ae4:	b2d2      	uxtb	r2, r2
 8009ae6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	0a19      	lsrs	r1, r3, #8
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	1c5a      	adds	r2, r3, #1
 8009af0:	60fa      	str	r2, [r7, #12]
 8009af2:	b2ca      	uxtb	r2, r1
 8009af4:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8009af6:	2300      	movs	r3, #0
 8009af8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8009afa:	e00a      	b.n	8009b12 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8009afc:	68ba      	ldr	r2, [r7, #8]
 8009afe:	1c53      	adds	r3, r2, #1
 8009b00:	60bb      	str	r3, [r7, #8]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	1c59      	adds	r1, r3, #1
 8009b06:	60f9      	str	r1, [r7, #12]
 8009b08:	7812      	ldrb	r2, [r2, #0]
 8009b0a:	701a      	strb	r2, [r3, #0]
    n++;
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8009b12:	697a      	ldr	r2, [r7, #20]
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d3f0      	bcc.n	8009afc <_EncodeStr+0x74>
  }
  return pPayload;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	371c      	adds	r7, #28
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	3304      	adds	r3, #4
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8009b46:	4b35      	ldr	r3, [pc, #212]	; (8009c1c <_HandleIncomingPacket+0xdc>)
 8009b48:	7e1b      	ldrb	r3, [r3, #24]
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	1cfb      	adds	r3, r7, #3
 8009b4e:	2201      	movs	r2, #1
 8009b50:	4619      	mov	r1, r3
 8009b52:	f7ff fe43 	bl	80097dc <SEGGER_RTT_ReadNoLock>
 8009b56:	4603      	mov	r3, r0
 8009b58:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	dd59      	ble.n	8009c14 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8009b60:	78fb      	ldrb	r3, [r7, #3]
 8009b62:	2b80      	cmp	r3, #128	; 0x80
 8009b64:	d032      	beq.n	8009bcc <_HandleIncomingPacket+0x8c>
 8009b66:	2b80      	cmp	r3, #128	; 0x80
 8009b68:	dc42      	bgt.n	8009bf0 <_HandleIncomingPacket+0xb0>
 8009b6a:	2b07      	cmp	r3, #7
 8009b6c:	dc16      	bgt.n	8009b9c <_HandleIncomingPacket+0x5c>
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	dd3e      	ble.n	8009bf0 <_HandleIncomingPacket+0xb0>
 8009b72:	3b01      	subs	r3, #1
 8009b74:	2b06      	cmp	r3, #6
 8009b76:	d83b      	bhi.n	8009bf0 <_HandleIncomingPacket+0xb0>
 8009b78:	a201      	add	r2, pc, #4	; (adr r2, 8009b80 <_HandleIncomingPacket+0x40>)
 8009b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b7e:	bf00      	nop
 8009b80:	08009ba3 	.word	0x08009ba3
 8009b84:	08009ba9 	.word	0x08009ba9
 8009b88:	08009baf 	.word	0x08009baf
 8009b8c:	08009bb5 	.word	0x08009bb5
 8009b90:	08009bbb 	.word	0x08009bbb
 8009b94:	08009bc1 	.word	0x08009bc1
 8009b98:	08009bc7 	.word	0x08009bc7
 8009b9c:	2b7f      	cmp	r3, #127	; 0x7f
 8009b9e:	d034      	beq.n	8009c0a <_HandleIncomingPacket+0xca>
 8009ba0:	e026      	b.n	8009bf0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8009ba2:	f000 fba5 	bl	800a2f0 <SEGGER_SYSVIEW_Start>
      break;
 8009ba6:	e035      	b.n	8009c14 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8009ba8:	f000 fc5c 	bl	800a464 <SEGGER_SYSVIEW_Stop>
      break;
 8009bac:	e032      	b.n	8009c14 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8009bae:	f000 fe35 	bl	800a81c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8009bb2:	e02f      	b.n	8009c14 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8009bb4:	f000 fdfa 	bl	800a7ac <SEGGER_SYSVIEW_SendTaskList>
      break;
 8009bb8:	e02c      	b.n	8009c14 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8009bba:	f000 fc79 	bl	800a4b0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8009bbe:	e029      	b.n	8009c14 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8009bc0:	f000 ffee 	bl	800aba0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8009bc4:	e026      	b.n	8009c14 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8009bc6:	f000 ffcd 	bl	800ab64 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8009bca:	e023      	b.n	8009c14 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8009bcc:	4b13      	ldr	r3, [pc, #76]	; (8009c1c <_HandleIncomingPacket+0xdc>)
 8009bce:	7e1b      	ldrb	r3, [r3, #24]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	1cfb      	adds	r3, r7, #3
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	f7ff fe00 	bl	80097dc <SEGGER_RTT_ReadNoLock>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	dd13      	ble.n	8009c0e <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8009be6:	78fb      	ldrb	r3, [r7, #3]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f000 ff3b 	bl	800aa64 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8009bee:	e00e      	b.n	8009c0e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8009bf0:	78fb      	ldrb	r3, [r7, #3]
 8009bf2:	b25b      	sxtb	r3, r3
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	da0c      	bge.n	8009c12 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8009bf8:	4b08      	ldr	r3, [pc, #32]	; (8009c1c <_HandleIncomingPacket+0xdc>)
 8009bfa:	7e1b      	ldrb	r3, [r3, #24]
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	1cfb      	adds	r3, r7, #3
 8009c00:	2201      	movs	r2, #1
 8009c02:	4619      	mov	r1, r3
 8009c04:	f7ff fdea 	bl	80097dc <SEGGER_RTT_ReadNoLock>
      }
      break;
 8009c08:	e003      	b.n	8009c12 <_HandleIncomingPacket+0xd2>
      break;
 8009c0a:	bf00      	nop
 8009c0c:	e002      	b.n	8009c14 <_HandleIncomingPacket+0xd4>
      break;
 8009c0e:	bf00      	nop
 8009c10:	e000      	b.n	8009c14 <_HandleIncomingPacket+0xd4>
      break;
 8009c12:	bf00      	nop
    }
  }
}
 8009c14:	bf00      	nop
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	2002c5a8 	.word	0x2002c5a8

08009c20 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b08c      	sub	sp, #48	; 0x30
 8009c24:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8009c26:	2301      	movs	r3, #1
 8009c28:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8009c2a:	1d3b      	adds	r3, r7, #4
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8009c30:	69fb      	ldr	r3, [r7, #28]
 8009c32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c34:	4b31      	ldr	r3, [pc, #196]	; (8009cfc <_TrySendOverflowPacket+0xdc>)
 8009c36:	695b      	ldr	r3, [r3, #20]
 8009c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c3a:	e00b      	b.n	8009c54 <_TrySendOverflowPacket+0x34>
 8009c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3e:	b2da      	uxtb	r2, r3
 8009c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c42:	1c59      	adds	r1, r3, #1
 8009c44:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009c46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009c4a:	b2d2      	uxtb	r2, r2
 8009c4c:	701a      	strb	r2, [r3, #0]
 8009c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c50:	09db      	lsrs	r3, r3, #7
 8009c52:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c56:	2b7f      	cmp	r3, #127	; 0x7f
 8009c58:	d8f0      	bhi.n	8009c3c <_TrySendOverflowPacket+0x1c>
 8009c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5c:	1c5a      	adds	r2, r3, #1
 8009c5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c62:	b2d2      	uxtb	r2, r2
 8009c64:	701a      	strb	r2, [r3, #0]
 8009c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c68:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009c6a:	4b25      	ldr	r3, [pc, #148]	; (8009d00 <_TrySendOverflowPacket+0xe0>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8009c70:	4b22      	ldr	r3, [pc, #136]	; (8009cfc <_TrySendOverflowPacket+0xdc>)
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	69ba      	ldr	r2, [r7, #24]
 8009c76:	1ad3      	subs	r3, r2, r3
 8009c78:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8009c7a:	69fb      	ldr	r3, [r7, #28]
 8009c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	623b      	str	r3, [r7, #32]
 8009c82:	e00b      	b.n	8009c9c <_TrySendOverflowPacket+0x7c>
 8009c84:	6a3b      	ldr	r3, [r7, #32]
 8009c86:	b2da      	uxtb	r2, r3
 8009c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8a:	1c59      	adds	r1, r3, #1
 8009c8c:	6279      	str	r1, [r7, #36]	; 0x24
 8009c8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009c92:	b2d2      	uxtb	r2, r2
 8009c94:	701a      	strb	r2, [r3, #0]
 8009c96:	6a3b      	ldr	r3, [r7, #32]
 8009c98:	09db      	lsrs	r3, r3, #7
 8009c9a:	623b      	str	r3, [r7, #32]
 8009c9c:	6a3b      	ldr	r3, [r7, #32]
 8009c9e:	2b7f      	cmp	r3, #127	; 0x7f
 8009ca0:	d8f0      	bhi.n	8009c84 <_TrySendOverflowPacket+0x64>
 8009ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca4:	1c5a      	adds	r2, r3, #1
 8009ca6:	627a      	str	r2, [r7, #36]	; 0x24
 8009ca8:	6a3a      	ldr	r2, [r7, #32]
 8009caa:	b2d2      	uxtb	r2, r2
 8009cac:	701a      	strb	r2, [r3, #0]
 8009cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8009cb2:	4b12      	ldr	r3, [pc, #72]	; (8009cfc <_TrySendOverflowPacket+0xdc>)
 8009cb4:	785b      	ldrb	r3, [r3, #1]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	1d3b      	adds	r3, r7, #4
 8009cba:	69fa      	ldr	r2, [r7, #28]
 8009cbc:	1ad3      	subs	r3, r2, r3
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	1d3b      	adds	r3, r7, #4
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	f7f6 fa94 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d009      	beq.n	8009ce6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8009cd2:	4a0a      	ldr	r2, [pc, #40]	; (8009cfc <_TrySendOverflowPacket+0xdc>)
 8009cd4:	69bb      	ldr	r3, [r7, #24]
 8009cd6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8009cd8:	4b08      	ldr	r3, [pc, #32]	; (8009cfc <_TrySendOverflowPacket+0xdc>)
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	b2da      	uxtb	r2, r3
 8009ce0:	4b06      	ldr	r3, [pc, #24]	; (8009cfc <_TrySendOverflowPacket+0xdc>)
 8009ce2:	701a      	strb	r2, [r3, #0]
 8009ce4:	e004      	b.n	8009cf0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8009ce6:	4b05      	ldr	r3, [pc, #20]	; (8009cfc <_TrySendOverflowPacket+0xdc>)
 8009ce8:	695b      	ldr	r3, [r3, #20]
 8009cea:	3301      	adds	r3, #1
 8009cec:	4a03      	ldr	r2, [pc, #12]	; (8009cfc <_TrySendOverflowPacket+0xdc>)
 8009cee:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8009cf0:	693b      	ldr	r3, [r7, #16]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3730      	adds	r7, #48	; 0x30
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	2002c5a8 	.word	0x2002c5a8
 8009d00:	e0001004 	.word	0xe0001004

08009d04 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b08a      	sub	sp, #40	; 0x28
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8009d10:	4b6c      	ldr	r3, [pc, #432]	; (8009ec4 <_SendPacket+0x1c0>)
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d010      	beq.n	8009d3a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8009d18:	4b6a      	ldr	r3, [pc, #424]	; (8009ec4 <_SendPacket+0x1c0>)
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	f000 80a3 	beq.w	8009e68 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8009d22:	4b68      	ldr	r3, [pc, #416]	; (8009ec4 <_SendPacket+0x1c0>)
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	2b02      	cmp	r3, #2
 8009d28:	d109      	bne.n	8009d3e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8009d2a:	f7ff ff79 	bl	8009c20 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8009d2e:	4b65      	ldr	r3, [pc, #404]	; (8009ec4 <_SendPacket+0x1c0>)
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	f040 809a 	bne.w	8009e6c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8009d38:	e001      	b.n	8009d3e <_SendPacket+0x3a>
    goto Send;
 8009d3a:	bf00      	nop
 8009d3c:	e000      	b.n	8009d40 <_SendPacket+0x3c>
Send:
 8009d3e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2b1f      	cmp	r3, #31
 8009d44:	d809      	bhi.n	8009d5a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8009d46:	4b5f      	ldr	r3, [pc, #380]	; (8009ec4 <_SendPacket+0x1c0>)
 8009d48:	69da      	ldr	r2, [r3, #28]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8009d50:	f003 0301 	and.w	r3, r3, #1
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f040 808b 	bne.w	8009e70 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2b17      	cmp	r3, #23
 8009d5e:	d807      	bhi.n	8009d70 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	3b01      	subs	r3, #1
 8009d64:	60fb      	str	r3, [r7, #12]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	b2da      	uxtb	r2, r3
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	701a      	strb	r2, [r3, #0]
 8009d6e:	e03d      	b.n	8009dec <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8009d70:	68ba      	ldr	r2, [r7, #8]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	1ad3      	subs	r3, r2, r3
 8009d76:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8009d78:	69fb      	ldr	r3, [r7, #28]
 8009d7a:	2b7f      	cmp	r3, #127	; 0x7f
 8009d7c:	d912      	bls.n	8009da4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	09da      	lsrs	r2, r3, #7
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	3b01      	subs	r3, #1
 8009d86:	60fb      	str	r3, [r7, #12]
 8009d88:	b2d2      	uxtb	r2, r2
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8009d8e:	69fb      	ldr	r3, [r7, #28]
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	68fa      	ldr	r2, [r7, #12]
 8009d94:	3a01      	subs	r2, #1
 8009d96:	60fa      	str	r2, [r7, #12]
 8009d98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009d9c:	b2da      	uxtb	r2, r3
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	701a      	strb	r2, [r3, #0]
 8009da2:	e006      	b.n	8009db2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	3b01      	subs	r3, #1
 8009da8:	60fb      	str	r3, [r7, #12]
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	b2da      	uxtb	r2, r3
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2b7f      	cmp	r3, #127	; 0x7f
 8009db6:	d912      	bls.n	8009dde <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	09da      	lsrs	r2, r3, #7
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	60fb      	str	r3, [r7, #12]
 8009dc2:	b2d2      	uxtb	r2, r2
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	3a01      	subs	r2, #1
 8009dd0:	60fa      	str	r2, [r7, #12]
 8009dd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009dd6:	b2da      	uxtb	r2, r3
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	701a      	strb	r2, [r3, #0]
 8009ddc:	e006      	b.n	8009dec <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	3b01      	subs	r3, #1
 8009de2:	60fb      	str	r3, [r7, #12]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	b2da      	uxtb	r2, r3
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009dec:	4b36      	ldr	r3, [pc, #216]	; (8009ec8 <_SendPacket+0x1c4>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8009df2:	4b34      	ldr	r3, [pc, #208]	; (8009ec4 <_SendPacket+0x1c0>)
 8009df4:	68db      	ldr	r3, [r3, #12]
 8009df6:	69ba      	ldr	r2, [r7, #24]
 8009df8:	1ad3      	subs	r3, r2, r3
 8009dfa:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	623b      	str	r3, [r7, #32]
 8009e04:	e00b      	b.n	8009e1e <_SendPacket+0x11a>
 8009e06:	6a3b      	ldr	r3, [r7, #32]
 8009e08:	b2da      	uxtb	r2, r3
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0c:	1c59      	adds	r1, r3, #1
 8009e0e:	6279      	str	r1, [r7, #36]	; 0x24
 8009e10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009e14:	b2d2      	uxtb	r2, r2
 8009e16:	701a      	strb	r2, [r3, #0]
 8009e18:	6a3b      	ldr	r3, [r7, #32]
 8009e1a:	09db      	lsrs	r3, r3, #7
 8009e1c:	623b      	str	r3, [r7, #32]
 8009e1e:	6a3b      	ldr	r3, [r7, #32]
 8009e20:	2b7f      	cmp	r3, #127	; 0x7f
 8009e22:	d8f0      	bhi.n	8009e06 <_SendPacket+0x102>
 8009e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e26:	1c5a      	adds	r2, r3, #1
 8009e28:	627a      	str	r2, [r7, #36]	; 0x24
 8009e2a:	6a3a      	ldr	r2, [r7, #32]
 8009e2c:	b2d2      	uxtb	r2, r2
 8009e2e:	701a      	strb	r2, [r3, #0]
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e32:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8009e34:	4b23      	ldr	r3, [pc, #140]	; (8009ec4 <_SendPacket+0x1c0>)
 8009e36:	785b      	ldrb	r3, [r3, #1]
 8009e38:	4618      	mov	r0, r3
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	1ad3      	subs	r3, r2, r3
 8009e40:	461a      	mov	r2, r3
 8009e42:	68f9      	ldr	r1, [r7, #12]
 8009e44:	f7f6 f9d4 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d003      	beq.n	8009e5a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8009e52:	4a1c      	ldr	r2, [pc, #112]	; (8009ec4 <_SendPacket+0x1c0>)
 8009e54:	69bb      	ldr	r3, [r7, #24]
 8009e56:	60d3      	str	r3, [r2, #12]
 8009e58:	e00b      	b.n	8009e72 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8009e5a:	4b1a      	ldr	r3, [pc, #104]	; (8009ec4 <_SendPacket+0x1c0>)
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	3301      	adds	r3, #1
 8009e60:	b2da      	uxtb	r2, r3
 8009e62:	4b18      	ldr	r3, [pc, #96]	; (8009ec4 <_SendPacket+0x1c0>)
 8009e64:	701a      	strb	r2, [r3, #0]
 8009e66:	e004      	b.n	8009e72 <_SendPacket+0x16e>
    goto SendDone;
 8009e68:	bf00      	nop
 8009e6a:	e002      	b.n	8009e72 <_SendPacket+0x16e>
      goto SendDone;
 8009e6c:	bf00      	nop
 8009e6e:	e000      	b.n	8009e72 <_SendPacket+0x16e>
      goto SendDone;
 8009e70:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8009e72:	4b14      	ldr	r3, [pc, #80]	; (8009ec4 <_SendPacket+0x1c0>)
 8009e74:	7e1b      	ldrb	r3, [r3, #24]
 8009e76:	4619      	mov	r1, r3
 8009e78:	4a14      	ldr	r2, [pc, #80]	; (8009ecc <_SendPacket+0x1c8>)
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	005b      	lsls	r3, r3, #1
 8009e7e:	440b      	add	r3, r1
 8009e80:	00db      	lsls	r3, r3, #3
 8009e82:	4413      	add	r3, r2
 8009e84:	336c      	adds	r3, #108	; 0x6c
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	4b0e      	ldr	r3, [pc, #56]	; (8009ec4 <_SendPacket+0x1c0>)
 8009e8a:	7e1b      	ldrb	r3, [r3, #24]
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	490f      	ldr	r1, [pc, #60]	; (8009ecc <_SendPacket+0x1c8>)
 8009e90:	4603      	mov	r3, r0
 8009e92:	005b      	lsls	r3, r3, #1
 8009e94:	4403      	add	r3, r0
 8009e96:	00db      	lsls	r3, r3, #3
 8009e98:	440b      	add	r3, r1
 8009e9a:	3370      	adds	r3, #112	; 0x70
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d00b      	beq.n	8009eba <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8009ea2:	4b08      	ldr	r3, [pc, #32]	; (8009ec4 <_SendPacket+0x1c0>)
 8009ea4:	789b      	ldrb	r3, [r3, #2]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d107      	bne.n	8009eba <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8009eaa:	4b06      	ldr	r3, [pc, #24]	; (8009ec4 <_SendPacket+0x1c0>)
 8009eac:	2201      	movs	r2, #1
 8009eae:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8009eb0:	f7ff fe46 	bl	8009b40 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8009eb4:	4b03      	ldr	r3, [pc, #12]	; (8009ec4 <_SendPacket+0x1c0>)
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8009eba:	bf00      	nop
 8009ebc:	3728      	adds	r7, #40	; 0x28
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	2002c5a8 	.word	0x2002c5a8
 8009ec8:	e0001004 	.word	0xe0001004
 8009ecc:	2002bce4 	.word	0x2002bce4

08009ed0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b086      	sub	sp, #24
 8009ed4:	af02      	add	r7, sp, #8
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	607a      	str	r2, [r7, #4]
 8009edc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8009ede:	2300      	movs	r3, #0
 8009ee0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009ee4:	4917      	ldr	r1, [pc, #92]	; (8009f44 <SEGGER_SYSVIEW_Init+0x74>)
 8009ee6:	4818      	ldr	r0, [pc, #96]	; (8009f48 <SEGGER_SYSVIEW_Init+0x78>)
 8009ee8:	f7ff fcfe 	bl	80098e8 <SEGGER_RTT_AllocUpBuffer>
 8009eec:	4603      	mov	r3, r0
 8009eee:	b2da      	uxtb	r2, r3
 8009ef0:	4b16      	ldr	r3, [pc, #88]	; (8009f4c <SEGGER_SYSVIEW_Init+0x7c>)
 8009ef2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8009ef4:	4b15      	ldr	r3, [pc, #84]	; (8009f4c <SEGGER_SYSVIEW_Init+0x7c>)
 8009ef6:	785a      	ldrb	r2, [r3, #1]
 8009ef8:	4b14      	ldr	r3, [pc, #80]	; (8009f4c <SEGGER_SYSVIEW_Init+0x7c>)
 8009efa:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8009efc:	4b13      	ldr	r3, [pc, #76]	; (8009f4c <SEGGER_SYSVIEW_Init+0x7c>)
 8009efe:	7e1b      	ldrb	r3, [r3, #24]
 8009f00:	4618      	mov	r0, r3
 8009f02:	2300      	movs	r3, #0
 8009f04:	9300      	str	r3, [sp, #0]
 8009f06:	2308      	movs	r3, #8
 8009f08:	4a11      	ldr	r2, [pc, #68]	; (8009f50 <SEGGER_SYSVIEW_Init+0x80>)
 8009f0a:	490f      	ldr	r1, [pc, #60]	; (8009f48 <SEGGER_SYSVIEW_Init+0x78>)
 8009f0c:	f7ff fd70 	bl	80099f0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8009f10:	4b0e      	ldr	r3, [pc, #56]	; (8009f4c <SEGGER_SYSVIEW_Init+0x7c>)
 8009f12:	2200      	movs	r2, #0
 8009f14:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009f16:	4b0f      	ldr	r3, [pc, #60]	; (8009f54 <SEGGER_SYSVIEW_Init+0x84>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a0c      	ldr	r2, [pc, #48]	; (8009f4c <SEGGER_SYSVIEW_Init+0x7c>)
 8009f1c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8009f1e:	4a0b      	ldr	r2, [pc, #44]	; (8009f4c <SEGGER_SYSVIEW_Init+0x7c>)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8009f24:	4a09      	ldr	r2, [pc, #36]	; (8009f4c <SEGGER_SYSVIEW_Init+0x7c>)
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8009f2a:	4a08      	ldr	r2, [pc, #32]	; (8009f4c <SEGGER_SYSVIEW_Init+0x7c>)
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8009f30:	4a06      	ldr	r2, [pc, #24]	; (8009f4c <SEGGER_SYSVIEW_Init+0x7c>)
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8009f36:	4b05      	ldr	r3, [pc, #20]	; (8009f4c <SEGGER_SYSVIEW_Init+0x7c>)
 8009f38:	2200      	movs	r2, #0
 8009f3a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8009f3c:	bf00      	nop
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	2002c1a0 	.word	0x2002c1a0
 8009f48:	0800b4a4 	.word	0x0800b4a4
 8009f4c:	2002c5a8 	.word	0x2002c5a8
 8009f50:	2002c5a0 	.word	0x2002c5a0
 8009f54:	e0001004 	.word	0xe0001004

08009f58 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8009f60:	4a04      	ldr	r2, [pc, #16]	; (8009f74 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6113      	str	r3, [r2, #16]
}
 8009f66:	bf00      	nop
 8009f68:	370c      	adds	r7, #12
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	2002c5a8 	.word	0x2002c5a8

08009f78 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009f80:	f3ef 8311 	mrs	r3, BASEPRI
 8009f84:	f04f 0120 	mov.w	r1, #32
 8009f88:	f381 8811 	msr	BASEPRI, r1
 8009f8c:	60fb      	str	r3, [r7, #12]
 8009f8e:	4808      	ldr	r0, [pc, #32]	; (8009fb0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8009f90:	f7ff fdca 	bl	8009b28 <_PreparePacket>
 8009f94:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	68b9      	ldr	r1, [r7, #8]
 8009f9a:	68b8      	ldr	r0, [r7, #8]
 8009f9c:	f7ff feb2 	bl	8009d04 <_SendPacket>
  RECORD_END();
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f383 8811 	msr	BASEPRI, r3
}
 8009fa6:	bf00      	nop
 8009fa8:	3710      	adds	r7, #16
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	2002c5d8 	.word	0x2002c5d8

08009fb4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b088      	sub	sp, #32
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009fbe:	f3ef 8311 	mrs	r3, BASEPRI
 8009fc2:	f04f 0120 	mov.w	r1, #32
 8009fc6:	f381 8811 	msr	BASEPRI, r1
 8009fca:	617b      	str	r3, [r7, #20]
 8009fcc:	4816      	ldr	r0, [pc, #88]	; (800a028 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8009fce:	f7ff fdab 	bl	8009b28 <_PreparePacket>
 8009fd2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	61fb      	str	r3, [r7, #28]
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	61bb      	str	r3, [r7, #24]
 8009fe0:	e00b      	b.n	8009ffa <SEGGER_SYSVIEW_RecordU32+0x46>
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	b2da      	uxtb	r2, r3
 8009fe6:	69fb      	ldr	r3, [r7, #28]
 8009fe8:	1c59      	adds	r1, r3, #1
 8009fea:	61f9      	str	r1, [r7, #28]
 8009fec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009ff0:	b2d2      	uxtb	r2, r2
 8009ff2:	701a      	strb	r2, [r3, #0]
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	09db      	lsrs	r3, r3, #7
 8009ff8:	61bb      	str	r3, [r7, #24]
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	2b7f      	cmp	r3, #127	; 0x7f
 8009ffe:	d8f0      	bhi.n	8009fe2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	1c5a      	adds	r2, r3, #1
 800a004:	61fa      	str	r2, [r7, #28]
 800a006:	69ba      	ldr	r2, [r7, #24]
 800a008:	b2d2      	uxtb	r2, r2
 800a00a:	701a      	strb	r2, [r3, #0]
 800a00c:	69fb      	ldr	r3, [r7, #28]
 800a00e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	68f9      	ldr	r1, [r7, #12]
 800a014:	6938      	ldr	r0, [r7, #16]
 800a016:	f7ff fe75 	bl	8009d04 <_SendPacket>
  RECORD_END();
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	f383 8811 	msr	BASEPRI, r3
}
 800a020:	bf00      	nop
 800a022:	3720      	adds	r7, #32
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	2002c5d8 	.word	0x2002c5d8

0800a02c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b08c      	sub	sp, #48	; 0x30
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800a038:	f3ef 8311 	mrs	r3, BASEPRI
 800a03c:	f04f 0120 	mov.w	r1, #32
 800a040:	f381 8811 	msr	BASEPRI, r1
 800a044:	61fb      	str	r3, [r7, #28]
 800a046:	4825      	ldr	r0, [pc, #148]	; (800a0dc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800a048:	f7ff fd6e 	bl	8009b28 <_PreparePacket>
 800a04c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	62bb      	str	r3, [r7, #40]	; 0x28
 800a05a:	e00b      	b.n	800a074 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800a05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05e:	b2da      	uxtb	r2, r3
 800a060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a062:	1c59      	adds	r1, r3, #1
 800a064:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a066:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a06a:	b2d2      	uxtb	r2, r2
 800a06c:	701a      	strb	r2, [r3, #0]
 800a06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a070:	09db      	lsrs	r3, r3, #7
 800a072:	62bb      	str	r3, [r7, #40]	; 0x28
 800a074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a076:	2b7f      	cmp	r3, #127	; 0x7f
 800a078:	d8f0      	bhi.n	800a05c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800a07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a07c:	1c5a      	adds	r2, r3, #1
 800a07e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a082:	b2d2      	uxtb	r2, r2
 800a084:	701a      	strb	r2, [r3, #0]
 800a086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a088:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	627b      	str	r3, [r7, #36]	; 0x24
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	623b      	str	r3, [r7, #32]
 800a092:	e00b      	b.n	800a0ac <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800a094:	6a3b      	ldr	r3, [r7, #32]
 800a096:	b2da      	uxtb	r2, r3
 800a098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09a:	1c59      	adds	r1, r3, #1
 800a09c:	6279      	str	r1, [r7, #36]	; 0x24
 800a09e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a0a2:	b2d2      	uxtb	r2, r2
 800a0a4:	701a      	strb	r2, [r3, #0]
 800a0a6:	6a3b      	ldr	r3, [r7, #32]
 800a0a8:	09db      	lsrs	r3, r3, #7
 800a0aa:	623b      	str	r3, [r7, #32]
 800a0ac:	6a3b      	ldr	r3, [r7, #32]
 800a0ae:	2b7f      	cmp	r3, #127	; 0x7f
 800a0b0:	d8f0      	bhi.n	800a094 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b4:	1c5a      	adds	r2, r3, #1
 800a0b6:	627a      	str	r2, [r7, #36]	; 0x24
 800a0b8:	6a3a      	ldr	r2, [r7, #32]
 800a0ba:	b2d2      	uxtb	r2, r2
 800a0bc:	701a      	strb	r2, [r3, #0]
 800a0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800a0c2:	68fa      	ldr	r2, [r7, #12]
 800a0c4:	6979      	ldr	r1, [r7, #20]
 800a0c6:	69b8      	ldr	r0, [r7, #24]
 800a0c8:	f7ff fe1c 	bl	8009d04 <_SendPacket>
  RECORD_END();
 800a0cc:	69fb      	ldr	r3, [r7, #28]
 800a0ce:	f383 8811 	msr	BASEPRI, r3
}
 800a0d2:	bf00      	nop
 800a0d4:	3730      	adds	r7, #48	; 0x30
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	2002c5d8 	.word	0x2002c5d8

0800a0e0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b08e      	sub	sp, #56	; 0x38
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	607a      	str	r2, [r7, #4]
 800a0ec:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800a0ee:	f3ef 8311 	mrs	r3, BASEPRI
 800a0f2:	f04f 0120 	mov.w	r1, #32
 800a0f6:	f381 8811 	msr	BASEPRI, r1
 800a0fa:	61fb      	str	r3, [r7, #28]
 800a0fc:	4832      	ldr	r0, [pc, #200]	; (800a1c8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800a0fe:	f7ff fd13 	bl	8009b28 <_PreparePacket>
 800a102:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800a104:	69bb      	ldr	r3, [r7, #24]
 800a106:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	637b      	str	r3, [r7, #52]	; 0x34
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	633b      	str	r3, [r7, #48]	; 0x30
 800a110:	e00b      	b.n	800a12a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800a112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a114:	b2da      	uxtb	r2, r3
 800a116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a118:	1c59      	adds	r1, r3, #1
 800a11a:	6379      	str	r1, [r7, #52]	; 0x34
 800a11c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a120:	b2d2      	uxtb	r2, r2
 800a122:	701a      	strb	r2, [r3, #0]
 800a124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a126:	09db      	lsrs	r3, r3, #7
 800a128:	633b      	str	r3, [r7, #48]	; 0x30
 800a12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12c:	2b7f      	cmp	r3, #127	; 0x7f
 800a12e:	d8f0      	bhi.n	800a112 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800a130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a132:	1c5a      	adds	r2, r3, #1
 800a134:	637a      	str	r2, [r7, #52]	; 0x34
 800a136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a138:	b2d2      	uxtb	r2, r2
 800a13a:	701a      	strb	r2, [r3, #0]
 800a13c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a13e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	62bb      	str	r3, [r7, #40]	; 0x28
 800a148:	e00b      	b.n	800a162 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800a14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14c:	b2da      	uxtb	r2, r3
 800a14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a150:	1c59      	adds	r1, r3, #1
 800a152:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a154:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a158:	b2d2      	uxtb	r2, r2
 800a15a:	701a      	strb	r2, [r3, #0]
 800a15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15e:	09db      	lsrs	r3, r3, #7
 800a160:	62bb      	str	r3, [r7, #40]	; 0x28
 800a162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a164:	2b7f      	cmp	r3, #127	; 0x7f
 800a166:	d8f0      	bhi.n	800a14a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800a168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16a:	1c5a      	adds	r2, r3, #1
 800a16c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a16e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a170:	b2d2      	uxtb	r2, r2
 800a172:	701a      	strb	r2, [r3, #0]
 800a174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a176:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	627b      	str	r3, [r7, #36]	; 0x24
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	623b      	str	r3, [r7, #32]
 800a180:	e00b      	b.n	800a19a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800a182:	6a3b      	ldr	r3, [r7, #32]
 800a184:	b2da      	uxtb	r2, r3
 800a186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a188:	1c59      	adds	r1, r3, #1
 800a18a:	6279      	str	r1, [r7, #36]	; 0x24
 800a18c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a190:	b2d2      	uxtb	r2, r2
 800a192:	701a      	strb	r2, [r3, #0]
 800a194:	6a3b      	ldr	r3, [r7, #32]
 800a196:	09db      	lsrs	r3, r3, #7
 800a198:	623b      	str	r3, [r7, #32]
 800a19a:	6a3b      	ldr	r3, [r7, #32]
 800a19c:	2b7f      	cmp	r3, #127	; 0x7f
 800a19e:	d8f0      	bhi.n	800a182 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a2:	1c5a      	adds	r2, r3, #1
 800a1a4:	627a      	str	r2, [r7, #36]	; 0x24
 800a1a6:	6a3a      	ldr	r2, [r7, #32]
 800a1a8:	b2d2      	uxtb	r2, r2
 800a1aa:	701a      	strb	r2, [r3, #0]
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ae:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	6979      	ldr	r1, [r7, #20]
 800a1b4:	69b8      	ldr	r0, [r7, #24]
 800a1b6:	f7ff fda5 	bl	8009d04 <_SendPacket>
  RECORD_END();
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	f383 8811 	msr	BASEPRI, r3
}
 800a1c0:	bf00      	nop
 800a1c2:	3738      	adds	r7, #56	; 0x38
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	2002c5d8 	.word	0x2002c5d8

0800a1cc <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b090      	sub	sp, #64	; 0x40
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	607a      	str	r2, [r7, #4]
 800a1d8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800a1da:	f3ef 8311 	mrs	r3, BASEPRI
 800a1de:	f04f 0120 	mov.w	r1, #32
 800a1e2:	f381 8811 	msr	BASEPRI, r1
 800a1e6:	61fb      	str	r3, [r7, #28]
 800a1e8:	4840      	ldr	r0, [pc, #256]	; (800a2ec <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800a1ea:	f7ff fc9d 	bl	8009b28 <_PreparePacket>
 800a1ee:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	63bb      	str	r3, [r7, #56]	; 0x38
 800a1fc:	e00b      	b.n	800a216 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800a1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a200:	b2da      	uxtb	r2, r3
 800a202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a204:	1c59      	adds	r1, r3, #1
 800a206:	63f9      	str	r1, [r7, #60]	; 0x3c
 800a208:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a20c:	b2d2      	uxtb	r2, r2
 800a20e:	701a      	strb	r2, [r3, #0]
 800a210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a212:	09db      	lsrs	r3, r3, #7
 800a214:	63bb      	str	r3, [r7, #56]	; 0x38
 800a216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a218:	2b7f      	cmp	r3, #127	; 0x7f
 800a21a:	d8f0      	bhi.n	800a1fe <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800a21c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a21e:	1c5a      	adds	r2, r3, #1
 800a220:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a222:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a224:	b2d2      	uxtb	r2, r2
 800a226:	701a      	strb	r2, [r3, #0]
 800a228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a22a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	637b      	str	r3, [r7, #52]	; 0x34
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	633b      	str	r3, [r7, #48]	; 0x30
 800a234:	e00b      	b.n	800a24e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800a236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a238:	b2da      	uxtb	r2, r3
 800a23a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a23c:	1c59      	adds	r1, r3, #1
 800a23e:	6379      	str	r1, [r7, #52]	; 0x34
 800a240:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a244:	b2d2      	uxtb	r2, r2
 800a246:	701a      	strb	r2, [r3, #0]
 800a248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a24a:	09db      	lsrs	r3, r3, #7
 800a24c:	633b      	str	r3, [r7, #48]	; 0x30
 800a24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a250:	2b7f      	cmp	r3, #127	; 0x7f
 800a252:	d8f0      	bhi.n	800a236 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800a254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a256:	1c5a      	adds	r2, r3, #1
 800a258:	637a      	str	r2, [r7, #52]	; 0x34
 800a25a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a25c:	b2d2      	uxtb	r2, r2
 800a25e:	701a      	strb	r2, [r3, #0]
 800a260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a262:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a26c:	e00b      	b.n	800a286 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800a26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a270:	b2da      	uxtb	r2, r3
 800a272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a274:	1c59      	adds	r1, r3, #1
 800a276:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a278:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a27c:	b2d2      	uxtb	r2, r2
 800a27e:	701a      	strb	r2, [r3, #0]
 800a280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a282:	09db      	lsrs	r3, r3, #7
 800a284:	62bb      	str	r3, [r7, #40]	; 0x28
 800a286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a288:	2b7f      	cmp	r3, #127	; 0x7f
 800a28a:	d8f0      	bhi.n	800a26e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800a28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28e:	1c5a      	adds	r2, r3, #1
 800a290:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a294:	b2d2      	uxtb	r2, r2
 800a296:	701a      	strb	r2, [r3, #0]
 800a298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a29a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	627b      	str	r3, [r7, #36]	; 0x24
 800a2a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2a2:	623b      	str	r3, [r7, #32]
 800a2a4:	e00b      	b.n	800a2be <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800a2a6:	6a3b      	ldr	r3, [r7, #32]
 800a2a8:	b2da      	uxtb	r2, r3
 800a2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ac:	1c59      	adds	r1, r3, #1
 800a2ae:	6279      	str	r1, [r7, #36]	; 0x24
 800a2b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a2b4:	b2d2      	uxtb	r2, r2
 800a2b6:	701a      	strb	r2, [r3, #0]
 800a2b8:	6a3b      	ldr	r3, [r7, #32]
 800a2ba:	09db      	lsrs	r3, r3, #7
 800a2bc:	623b      	str	r3, [r7, #32]
 800a2be:	6a3b      	ldr	r3, [r7, #32]
 800a2c0:	2b7f      	cmp	r3, #127	; 0x7f
 800a2c2:	d8f0      	bhi.n	800a2a6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800a2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c6:	1c5a      	adds	r2, r3, #1
 800a2c8:	627a      	str	r2, [r7, #36]	; 0x24
 800a2ca:	6a3a      	ldr	r2, [r7, #32]
 800a2cc:	b2d2      	uxtb	r2, r2
 800a2ce:	701a      	strb	r2, [r3, #0]
 800a2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800a2d4:	68fa      	ldr	r2, [r7, #12]
 800a2d6:	6979      	ldr	r1, [r7, #20]
 800a2d8:	69b8      	ldr	r0, [r7, #24]
 800a2da:	f7ff fd13 	bl	8009d04 <_SendPacket>
  RECORD_END();
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	f383 8811 	msr	BASEPRI, r3
}
 800a2e4:	bf00      	nop
 800a2e6:	3740      	adds	r7, #64	; 0x40
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}
 800a2ec:	2002c5d8 	.word	0x2002c5d8

0800a2f0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b08c      	sub	sp, #48	; 0x30
 800a2f4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800a2f6:	4b58      	ldr	r3, [pc, #352]	; (800a458 <SEGGER_SYSVIEW_Start+0x168>)
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800a2fc:	f3ef 8311 	mrs	r3, BASEPRI
 800a300:	f04f 0120 	mov.w	r1, #32
 800a304:	f381 8811 	msr	BASEPRI, r1
 800a308:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800a30a:	4b53      	ldr	r3, [pc, #332]	; (800a458 <SEGGER_SYSVIEW_Start+0x168>)
 800a30c:	785b      	ldrb	r3, [r3, #1]
 800a30e:	220a      	movs	r2, #10
 800a310:	4952      	ldr	r1, [pc, #328]	; (800a45c <SEGGER_SYSVIEW_Start+0x16c>)
 800a312:	4618      	mov	r0, r3
 800a314:	f7f5 ff6c 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800a31e:	200a      	movs	r0, #10
 800a320:	f7ff fe2a 	bl	8009f78 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800a324:	f3ef 8311 	mrs	r3, BASEPRI
 800a328:	f04f 0120 	mov.w	r1, #32
 800a32c:	f381 8811 	msr	BASEPRI, r1
 800a330:	60bb      	str	r3, [r7, #8]
 800a332:	484b      	ldr	r0, [pc, #300]	; (800a460 <SEGGER_SYSVIEW_Start+0x170>)
 800a334:	f7ff fbf8 	bl	8009b28 <_PreparePacket>
 800a338:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a342:	4b45      	ldr	r3, [pc, #276]	; (800a458 <SEGGER_SYSVIEW_Start+0x168>)
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	62bb      	str	r3, [r7, #40]	; 0x28
 800a348:	e00b      	b.n	800a362 <SEGGER_SYSVIEW_Start+0x72>
 800a34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34c:	b2da      	uxtb	r2, r3
 800a34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a350:	1c59      	adds	r1, r3, #1
 800a352:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a354:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a358:	b2d2      	uxtb	r2, r2
 800a35a:	701a      	strb	r2, [r3, #0]
 800a35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35e:	09db      	lsrs	r3, r3, #7
 800a360:	62bb      	str	r3, [r7, #40]	; 0x28
 800a362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a364:	2b7f      	cmp	r3, #127	; 0x7f
 800a366:	d8f0      	bhi.n	800a34a <SEGGER_SYSVIEW_Start+0x5a>
 800a368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36a:	1c5a      	adds	r2, r3, #1
 800a36c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a36e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a370:	b2d2      	uxtb	r2, r2
 800a372:	701a      	strb	r2, [r3, #0]
 800a374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a376:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	627b      	str	r3, [r7, #36]	; 0x24
 800a37c:	4b36      	ldr	r3, [pc, #216]	; (800a458 <SEGGER_SYSVIEW_Start+0x168>)
 800a37e:	689b      	ldr	r3, [r3, #8]
 800a380:	623b      	str	r3, [r7, #32]
 800a382:	e00b      	b.n	800a39c <SEGGER_SYSVIEW_Start+0xac>
 800a384:	6a3b      	ldr	r3, [r7, #32]
 800a386:	b2da      	uxtb	r2, r3
 800a388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38a:	1c59      	adds	r1, r3, #1
 800a38c:	6279      	str	r1, [r7, #36]	; 0x24
 800a38e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a392:	b2d2      	uxtb	r2, r2
 800a394:	701a      	strb	r2, [r3, #0]
 800a396:	6a3b      	ldr	r3, [r7, #32]
 800a398:	09db      	lsrs	r3, r3, #7
 800a39a:	623b      	str	r3, [r7, #32]
 800a39c:	6a3b      	ldr	r3, [r7, #32]
 800a39e:	2b7f      	cmp	r3, #127	; 0x7f
 800a3a0:	d8f0      	bhi.n	800a384 <SEGGER_SYSVIEW_Start+0x94>
 800a3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a4:	1c5a      	adds	r2, r3, #1
 800a3a6:	627a      	str	r2, [r7, #36]	; 0x24
 800a3a8:	6a3a      	ldr	r2, [r7, #32]
 800a3aa:	b2d2      	uxtb	r2, r2
 800a3ac:	701a      	strb	r2, [r3, #0]
 800a3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	61fb      	str	r3, [r7, #28]
 800a3b6:	4b28      	ldr	r3, [pc, #160]	; (800a458 <SEGGER_SYSVIEW_Start+0x168>)
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	61bb      	str	r3, [r7, #24]
 800a3bc:	e00b      	b.n	800a3d6 <SEGGER_SYSVIEW_Start+0xe6>
 800a3be:	69bb      	ldr	r3, [r7, #24]
 800a3c0:	b2da      	uxtb	r2, r3
 800a3c2:	69fb      	ldr	r3, [r7, #28]
 800a3c4:	1c59      	adds	r1, r3, #1
 800a3c6:	61f9      	str	r1, [r7, #28]
 800a3c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a3cc:	b2d2      	uxtb	r2, r2
 800a3ce:	701a      	strb	r2, [r3, #0]
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	09db      	lsrs	r3, r3, #7
 800a3d4:	61bb      	str	r3, [r7, #24]
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	2b7f      	cmp	r3, #127	; 0x7f
 800a3da:	d8f0      	bhi.n	800a3be <SEGGER_SYSVIEW_Start+0xce>
 800a3dc:	69fb      	ldr	r3, [r7, #28]
 800a3de:	1c5a      	adds	r2, r3, #1
 800a3e0:	61fa      	str	r2, [r7, #28]
 800a3e2:	69ba      	ldr	r2, [r7, #24]
 800a3e4:	b2d2      	uxtb	r2, r2
 800a3e6:	701a      	strb	r2, [r3, #0]
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	617b      	str	r3, [r7, #20]
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	613b      	str	r3, [r7, #16]
 800a3f4:	e00b      	b.n	800a40e <SEGGER_SYSVIEW_Start+0x11e>
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	b2da      	uxtb	r2, r3
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	1c59      	adds	r1, r3, #1
 800a3fe:	6179      	str	r1, [r7, #20]
 800a400:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a404:	b2d2      	uxtb	r2, r2
 800a406:	701a      	strb	r2, [r3, #0]
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	09db      	lsrs	r3, r3, #7
 800a40c:	613b      	str	r3, [r7, #16]
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	2b7f      	cmp	r3, #127	; 0x7f
 800a412:	d8f0      	bhi.n	800a3f6 <SEGGER_SYSVIEW_Start+0x106>
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	1c5a      	adds	r2, r3, #1
 800a418:	617a      	str	r2, [r7, #20]
 800a41a:	693a      	ldr	r2, [r7, #16]
 800a41c:	b2d2      	uxtb	r2, r2
 800a41e:	701a      	strb	r2, [r3, #0]
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800a424:	2218      	movs	r2, #24
 800a426:	6839      	ldr	r1, [r7, #0]
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f7ff fc6b 	bl	8009d04 <_SendPacket>
      RECORD_END();
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800a434:	4b08      	ldr	r3, [pc, #32]	; (800a458 <SEGGER_SYSVIEW_Start+0x168>)
 800a436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d002      	beq.n	800a442 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800a43c:	4b06      	ldr	r3, [pc, #24]	; (800a458 <SEGGER_SYSVIEW_Start+0x168>)
 800a43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a440:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800a442:	f000 f9eb 	bl	800a81c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800a446:	f000 f9b1 	bl	800a7ac <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800a44a:	f000 fba9 	bl	800aba0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800a44e:	bf00      	nop
 800a450:	3730      	adds	r7, #48	; 0x30
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	2002c5a8 	.word	0x2002c5a8
 800a45c:	0800c810 	.word	0x0800c810
 800a460:	2002c5d8 	.word	0x2002c5d8

0800a464 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a46a:	f3ef 8311 	mrs	r3, BASEPRI
 800a46e:	f04f 0120 	mov.w	r1, #32
 800a472:	f381 8811 	msr	BASEPRI, r1
 800a476:	607b      	str	r3, [r7, #4]
 800a478:	480b      	ldr	r0, [pc, #44]	; (800a4a8 <SEGGER_SYSVIEW_Stop+0x44>)
 800a47a:	f7ff fb55 	bl	8009b28 <_PreparePacket>
 800a47e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800a480:	4b0a      	ldr	r3, [pc, #40]	; (800a4ac <SEGGER_SYSVIEW_Stop+0x48>)
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d007      	beq.n	800a498 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800a488:	220b      	movs	r2, #11
 800a48a:	6839      	ldr	r1, [r7, #0]
 800a48c:	6838      	ldr	r0, [r7, #0]
 800a48e:	f7ff fc39 	bl	8009d04 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800a492:	4b06      	ldr	r3, [pc, #24]	; (800a4ac <SEGGER_SYSVIEW_Stop+0x48>)
 800a494:	2200      	movs	r2, #0
 800a496:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f383 8811 	msr	BASEPRI, r3
}
 800a49e:	bf00      	nop
 800a4a0:	3708      	adds	r7, #8
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	2002c5d8 	.word	0x2002c5d8
 800a4ac:	2002c5a8 	.word	0x2002c5a8

0800a4b0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b08c      	sub	sp, #48	; 0x30
 800a4b4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800a4b6:	f3ef 8311 	mrs	r3, BASEPRI
 800a4ba:	f04f 0120 	mov.w	r1, #32
 800a4be:	f381 8811 	msr	BASEPRI, r1
 800a4c2:	60fb      	str	r3, [r7, #12]
 800a4c4:	4845      	ldr	r0, [pc, #276]	; (800a5dc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800a4c6:	f7ff fb2f 	bl	8009b28 <_PreparePacket>
 800a4ca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4d4:	4b42      	ldr	r3, [pc, #264]	; (800a5e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4da:	e00b      	b.n	800a4f4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800a4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4de:	b2da      	uxtb	r2, r3
 800a4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e2:	1c59      	adds	r1, r3, #1
 800a4e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a4e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a4ea:	b2d2      	uxtb	r2, r2
 800a4ec:	701a      	strb	r2, [r3, #0]
 800a4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f0:	09db      	lsrs	r3, r3, #7
 800a4f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f6:	2b7f      	cmp	r3, #127	; 0x7f
 800a4f8:	d8f0      	bhi.n	800a4dc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800a4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fc:	1c5a      	adds	r2, r3, #1
 800a4fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a502:	b2d2      	uxtb	r2, r2
 800a504:	701a      	strb	r2, [r3, #0]
 800a506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a508:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	627b      	str	r3, [r7, #36]	; 0x24
 800a50e:	4b34      	ldr	r3, [pc, #208]	; (800a5e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a510:	689b      	ldr	r3, [r3, #8]
 800a512:	623b      	str	r3, [r7, #32]
 800a514:	e00b      	b.n	800a52e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800a516:	6a3b      	ldr	r3, [r7, #32]
 800a518:	b2da      	uxtb	r2, r3
 800a51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51c:	1c59      	adds	r1, r3, #1
 800a51e:	6279      	str	r1, [r7, #36]	; 0x24
 800a520:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a524:	b2d2      	uxtb	r2, r2
 800a526:	701a      	strb	r2, [r3, #0]
 800a528:	6a3b      	ldr	r3, [r7, #32]
 800a52a:	09db      	lsrs	r3, r3, #7
 800a52c:	623b      	str	r3, [r7, #32]
 800a52e:	6a3b      	ldr	r3, [r7, #32]
 800a530:	2b7f      	cmp	r3, #127	; 0x7f
 800a532:	d8f0      	bhi.n	800a516 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800a534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a536:	1c5a      	adds	r2, r3, #1
 800a538:	627a      	str	r2, [r7, #36]	; 0x24
 800a53a:	6a3a      	ldr	r2, [r7, #32]
 800a53c:	b2d2      	uxtb	r2, r2
 800a53e:	701a      	strb	r2, [r3, #0]
 800a540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a542:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	61fb      	str	r3, [r7, #28]
 800a548:	4b25      	ldr	r3, [pc, #148]	; (800a5e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	61bb      	str	r3, [r7, #24]
 800a54e:	e00b      	b.n	800a568 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800a550:	69bb      	ldr	r3, [r7, #24]
 800a552:	b2da      	uxtb	r2, r3
 800a554:	69fb      	ldr	r3, [r7, #28]
 800a556:	1c59      	adds	r1, r3, #1
 800a558:	61f9      	str	r1, [r7, #28]
 800a55a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a55e:	b2d2      	uxtb	r2, r2
 800a560:	701a      	strb	r2, [r3, #0]
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	09db      	lsrs	r3, r3, #7
 800a566:	61bb      	str	r3, [r7, #24]
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	2b7f      	cmp	r3, #127	; 0x7f
 800a56c:	d8f0      	bhi.n	800a550 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800a56e:	69fb      	ldr	r3, [r7, #28]
 800a570:	1c5a      	adds	r2, r3, #1
 800a572:	61fa      	str	r2, [r7, #28]
 800a574:	69ba      	ldr	r2, [r7, #24]
 800a576:	b2d2      	uxtb	r2, r2
 800a578:	701a      	strb	r2, [r3, #0]
 800a57a:	69fb      	ldr	r3, [r7, #28]
 800a57c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	617b      	str	r3, [r7, #20]
 800a582:	2300      	movs	r3, #0
 800a584:	613b      	str	r3, [r7, #16]
 800a586:	e00b      	b.n	800a5a0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	b2da      	uxtb	r2, r3
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	1c59      	adds	r1, r3, #1
 800a590:	6179      	str	r1, [r7, #20]
 800a592:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a596:	b2d2      	uxtb	r2, r2
 800a598:	701a      	strb	r2, [r3, #0]
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	09db      	lsrs	r3, r3, #7
 800a59e:	613b      	str	r3, [r7, #16]
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	2b7f      	cmp	r3, #127	; 0x7f
 800a5a4:	d8f0      	bhi.n	800a588 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	1c5a      	adds	r2, r3, #1
 800a5aa:	617a      	str	r2, [r7, #20]
 800a5ac:	693a      	ldr	r2, [r7, #16]
 800a5ae:	b2d2      	uxtb	r2, r2
 800a5b0:	701a      	strb	r2, [r3, #0]
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800a5b6:	2218      	movs	r2, #24
 800a5b8:	6879      	ldr	r1, [r7, #4]
 800a5ba:	68b8      	ldr	r0, [r7, #8]
 800a5bc:	f7ff fba2 	bl	8009d04 <_SendPacket>
  RECORD_END();
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800a5c6:	4b06      	ldr	r3, [pc, #24]	; (800a5e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d002      	beq.n	800a5d4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800a5ce:	4b04      	ldr	r3, [pc, #16]	; (800a5e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d2:	4798      	blx	r3
  }
}
 800a5d4:	bf00      	nop
 800a5d6:	3730      	adds	r7, #48	; 0x30
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	2002c5d8 	.word	0x2002c5d8
 800a5e0:	2002c5a8 	.word	0x2002c5a8

0800a5e4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b092      	sub	sp, #72	; 0x48
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800a5ec:	f3ef 8311 	mrs	r3, BASEPRI
 800a5f0:	f04f 0120 	mov.w	r1, #32
 800a5f4:	f381 8811 	msr	BASEPRI, r1
 800a5f8:	617b      	str	r3, [r7, #20]
 800a5fa:	486a      	ldr	r0, [pc, #424]	; (800a7a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800a5fc:	f7ff fa94 	bl	8009b28 <_PreparePacket>
 800a600:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	647b      	str	r3, [r7, #68]	; 0x44
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	4b66      	ldr	r3, [pc, #408]	; (800a7a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800a610:	691b      	ldr	r3, [r3, #16]
 800a612:	1ad3      	subs	r3, r2, r3
 800a614:	643b      	str	r3, [r7, #64]	; 0x40
 800a616:	e00b      	b.n	800a630 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800a618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a61a:	b2da      	uxtb	r2, r3
 800a61c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a61e:	1c59      	adds	r1, r3, #1
 800a620:	6479      	str	r1, [r7, #68]	; 0x44
 800a622:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a626:	b2d2      	uxtb	r2, r2
 800a628:	701a      	strb	r2, [r3, #0]
 800a62a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a62c:	09db      	lsrs	r3, r3, #7
 800a62e:	643b      	str	r3, [r7, #64]	; 0x40
 800a630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a632:	2b7f      	cmp	r3, #127	; 0x7f
 800a634:	d8f0      	bhi.n	800a618 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800a636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a638:	1c5a      	adds	r2, r3, #1
 800a63a:	647a      	str	r2, [r7, #68]	; 0x44
 800a63c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a63e:	b2d2      	uxtb	r2, r2
 800a640:	701a      	strb	r2, [r3, #0]
 800a642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a644:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a650:	e00b      	b.n	800a66a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800a652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a654:	b2da      	uxtb	r2, r3
 800a656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a658:	1c59      	adds	r1, r3, #1
 800a65a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800a65c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a660:	b2d2      	uxtb	r2, r2
 800a662:	701a      	strb	r2, [r3, #0]
 800a664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a666:	09db      	lsrs	r3, r3, #7
 800a668:	63bb      	str	r3, [r7, #56]	; 0x38
 800a66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a66c:	2b7f      	cmp	r3, #127	; 0x7f
 800a66e:	d8f0      	bhi.n	800a652 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800a670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a672:	1c5a      	adds	r2, r3, #1
 800a674:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a676:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a678:	b2d2      	uxtb	r2, r2
 800a67a:	701a      	strb	r2, [r3, #0]
 800a67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a67e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	2220      	movs	r2, #32
 800a686:	4619      	mov	r1, r3
 800a688:	68f8      	ldr	r0, [r7, #12]
 800a68a:	f7ff f9fd 	bl	8009a88 <_EncodeStr>
 800a68e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800a690:	2209      	movs	r2, #9
 800a692:	68f9      	ldr	r1, [r7, #12]
 800a694:	6938      	ldr	r0, [r7, #16]
 800a696:	f7ff fb35 	bl	8009d04 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	637b      	str	r3, [r7, #52]	; 0x34
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	4b40      	ldr	r3, [pc, #256]	; (800a7a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800a6a8:	691b      	ldr	r3, [r3, #16]
 800a6aa:	1ad3      	subs	r3, r2, r3
 800a6ac:	633b      	str	r3, [r7, #48]	; 0x30
 800a6ae:	e00b      	b.n	800a6c8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800a6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b2:	b2da      	uxtb	r2, r3
 800a6b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6b6:	1c59      	adds	r1, r3, #1
 800a6b8:	6379      	str	r1, [r7, #52]	; 0x34
 800a6ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a6be:	b2d2      	uxtb	r2, r2
 800a6c0:	701a      	strb	r2, [r3, #0]
 800a6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c4:	09db      	lsrs	r3, r3, #7
 800a6c6:	633b      	str	r3, [r7, #48]	; 0x30
 800a6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ca:	2b7f      	cmp	r3, #127	; 0x7f
 800a6cc:	d8f0      	bhi.n	800a6b0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800a6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6d0:	1c5a      	adds	r2, r3, #1
 800a6d2:	637a      	str	r2, [r7, #52]	; 0x34
 800a6d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6d6:	b2d2      	uxtb	r2, r2
 800a6d8:	701a      	strb	r2, [r3, #0]
 800a6da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	68db      	ldr	r3, [r3, #12]
 800a6e6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6e8:	e00b      	b.n	800a702 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800a6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ec:	b2da      	uxtb	r2, r3
 800a6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f0:	1c59      	adds	r1, r3, #1
 800a6f2:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a6f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a6f8:	b2d2      	uxtb	r2, r2
 800a6fa:	701a      	strb	r2, [r3, #0]
 800a6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fe:	09db      	lsrs	r3, r3, #7
 800a700:	62bb      	str	r3, [r7, #40]	; 0x28
 800a702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a704:	2b7f      	cmp	r3, #127	; 0x7f
 800a706:	d8f0      	bhi.n	800a6ea <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800a708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70a:	1c5a      	adds	r2, r3, #1
 800a70c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a70e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a710:	b2d2      	uxtb	r2, r2
 800a712:	701a      	strb	r2, [r3, #0]
 800a714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a716:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	627b      	str	r3, [r7, #36]	; 0x24
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	691b      	ldr	r3, [r3, #16]
 800a720:	623b      	str	r3, [r7, #32]
 800a722:	e00b      	b.n	800a73c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800a724:	6a3b      	ldr	r3, [r7, #32]
 800a726:	b2da      	uxtb	r2, r3
 800a728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72a:	1c59      	adds	r1, r3, #1
 800a72c:	6279      	str	r1, [r7, #36]	; 0x24
 800a72e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a732:	b2d2      	uxtb	r2, r2
 800a734:	701a      	strb	r2, [r3, #0]
 800a736:	6a3b      	ldr	r3, [r7, #32]
 800a738:	09db      	lsrs	r3, r3, #7
 800a73a:	623b      	str	r3, [r7, #32]
 800a73c:	6a3b      	ldr	r3, [r7, #32]
 800a73e:	2b7f      	cmp	r3, #127	; 0x7f
 800a740:	d8f0      	bhi.n	800a724 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800a742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a744:	1c5a      	adds	r2, r3, #1
 800a746:	627a      	str	r2, [r7, #36]	; 0x24
 800a748:	6a3a      	ldr	r2, [r7, #32]
 800a74a:	b2d2      	uxtb	r2, r2
 800a74c:	701a      	strb	r2, [r3, #0]
 800a74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a750:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	61fb      	str	r3, [r7, #28]
 800a756:	2300      	movs	r3, #0
 800a758:	61bb      	str	r3, [r7, #24]
 800a75a:	e00b      	b.n	800a774 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800a75c:	69bb      	ldr	r3, [r7, #24]
 800a75e:	b2da      	uxtb	r2, r3
 800a760:	69fb      	ldr	r3, [r7, #28]
 800a762:	1c59      	adds	r1, r3, #1
 800a764:	61f9      	str	r1, [r7, #28]
 800a766:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a76a:	b2d2      	uxtb	r2, r2
 800a76c:	701a      	strb	r2, [r3, #0]
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	09db      	lsrs	r3, r3, #7
 800a772:	61bb      	str	r3, [r7, #24]
 800a774:	69bb      	ldr	r3, [r7, #24]
 800a776:	2b7f      	cmp	r3, #127	; 0x7f
 800a778:	d8f0      	bhi.n	800a75c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	1c5a      	adds	r2, r3, #1
 800a77e:	61fa      	str	r2, [r7, #28]
 800a780:	69ba      	ldr	r2, [r7, #24]
 800a782:	b2d2      	uxtb	r2, r2
 800a784:	701a      	strb	r2, [r3, #0]
 800a786:	69fb      	ldr	r3, [r7, #28]
 800a788:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800a78a:	2215      	movs	r2, #21
 800a78c:	68f9      	ldr	r1, [r7, #12]
 800a78e:	6938      	ldr	r0, [r7, #16]
 800a790:	f7ff fab8 	bl	8009d04 <_SendPacket>
  RECORD_END();
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	f383 8811 	msr	BASEPRI, r3
}
 800a79a:	bf00      	nop
 800a79c:	3748      	adds	r7, #72	; 0x48
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	2002c5d8 	.word	0x2002c5d8
 800a7a8:	2002c5a8 	.word	0x2002c5a8

0800a7ac <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800a7b0:	4b07      	ldr	r3, [pc, #28]	; (800a7d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a7b2:	6a1b      	ldr	r3, [r3, #32]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d008      	beq.n	800a7ca <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800a7b8:	4b05      	ldr	r3, [pc, #20]	; (800a7d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a7ba:	6a1b      	ldr	r3, [r3, #32]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d003      	beq.n	800a7ca <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800a7c2:	4b03      	ldr	r3, [pc, #12]	; (800a7d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a7c4:	6a1b      	ldr	r3, [r3, #32]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	4798      	blx	r3
  }
}
 800a7ca:	bf00      	nop
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	2002c5a8 	.word	0x2002c5a8

0800a7d4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a7dc:	f3ef 8311 	mrs	r3, BASEPRI
 800a7e0:	f04f 0120 	mov.w	r1, #32
 800a7e4:	f381 8811 	msr	BASEPRI, r1
 800a7e8:	617b      	str	r3, [r7, #20]
 800a7ea:	480b      	ldr	r0, [pc, #44]	; (800a818 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800a7ec:	f7ff f99c 	bl	8009b28 <_PreparePacket>
 800a7f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a7f2:	2280      	movs	r2, #128	; 0x80
 800a7f4:	6879      	ldr	r1, [r7, #4]
 800a7f6:	6938      	ldr	r0, [r7, #16]
 800a7f8:	f7ff f946 	bl	8009a88 <_EncodeStr>
 800a7fc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800a7fe:	220e      	movs	r2, #14
 800a800:	68f9      	ldr	r1, [r7, #12]
 800a802:	6938      	ldr	r0, [r7, #16]
 800a804:	f7ff fa7e 	bl	8009d04 <_SendPacket>
  RECORD_END();
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	f383 8811 	msr	BASEPRI, r3
}
 800a80e:	bf00      	nop
 800a810:	3718      	adds	r7, #24
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	2002c5d8 	.word	0x2002c5d8

0800a81c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800a81c:	b590      	push	{r4, r7, lr}
 800a81e:	b083      	sub	sp, #12
 800a820:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800a822:	4b15      	ldr	r3, [pc, #84]	; (800a878 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a824:	6a1b      	ldr	r3, [r3, #32]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d01a      	beq.n	800a860 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800a82a:	4b13      	ldr	r3, [pc, #76]	; (800a878 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a82c:	6a1b      	ldr	r3, [r3, #32]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d015      	beq.n	800a860 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800a834:	4b10      	ldr	r3, [pc, #64]	; (800a878 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a836:	6a1b      	ldr	r3, [r3, #32]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4798      	blx	r3
 800a83c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800a840:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800a842:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a846:	f04f 0200 	mov.w	r2, #0
 800a84a:	f04f 0300 	mov.w	r3, #0
 800a84e:	000a      	movs	r2, r1
 800a850:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800a852:	4613      	mov	r3, r2
 800a854:	461a      	mov	r2, r3
 800a856:	4621      	mov	r1, r4
 800a858:	200d      	movs	r0, #13
 800a85a:	f7ff fbe7 	bl	800a02c <SEGGER_SYSVIEW_RecordU32x2>
 800a85e:	e006      	b.n	800a86e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800a860:	4b06      	ldr	r3, [pc, #24]	; (800a87c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4619      	mov	r1, r3
 800a866:	200c      	movs	r0, #12
 800a868:	f7ff fba4 	bl	8009fb4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800a86c:	bf00      	nop
 800a86e:	bf00      	nop
 800a870:	370c      	adds	r7, #12
 800a872:	46bd      	mov	sp, r7
 800a874:	bd90      	pop	{r4, r7, pc}
 800a876:	bf00      	nop
 800a878:	2002c5a8 	.word	0x2002c5a8
 800a87c:	e0001004 	.word	0xe0001004

0800a880 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a886:	f3ef 8311 	mrs	r3, BASEPRI
 800a88a:	f04f 0120 	mov.w	r1, #32
 800a88e:	f381 8811 	msr	BASEPRI, r1
 800a892:	607b      	str	r3, [r7, #4]
 800a894:	4807      	ldr	r0, [pc, #28]	; (800a8b4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800a896:	f7ff f947 	bl	8009b28 <_PreparePacket>
 800a89a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800a89c:	2211      	movs	r2, #17
 800a89e:	6839      	ldr	r1, [r7, #0]
 800a8a0:	6838      	ldr	r0, [r7, #0]
 800a8a2:	f7ff fa2f 	bl	8009d04 <_SendPacket>
  RECORD_END();
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f383 8811 	msr	BASEPRI, r3
}
 800a8ac:	bf00      	nop
 800a8ae:	3708      	adds	r7, #8
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	2002c5d8 	.word	0x2002c5d8

0800a8b8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b088      	sub	sp, #32
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a8c0:	f3ef 8311 	mrs	r3, BASEPRI
 800a8c4:	f04f 0120 	mov.w	r1, #32
 800a8c8:	f381 8811 	msr	BASEPRI, r1
 800a8cc:	617b      	str	r3, [r7, #20]
 800a8ce:	4819      	ldr	r0, [pc, #100]	; (800a934 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800a8d0:	f7ff f92a 	bl	8009b28 <_PreparePacket>
 800a8d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a8da:	4b17      	ldr	r3, [pc, #92]	; (800a938 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800a8dc:	691b      	ldr	r3, [r3, #16]
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	1ad3      	subs	r3, r2, r3
 800a8e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	61fb      	str	r3, [r7, #28]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	61bb      	str	r3, [r7, #24]
 800a8ec:	e00b      	b.n	800a906 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	b2da      	uxtb	r2, r3
 800a8f2:	69fb      	ldr	r3, [r7, #28]
 800a8f4:	1c59      	adds	r1, r3, #1
 800a8f6:	61f9      	str	r1, [r7, #28]
 800a8f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a8fc:	b2d2      	uxtb	r2, r2
 800a8fe:	701a      	strb	r2, [r3, #0]
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	09db      	lsrs	r3, r3, #7
 800a904:	61bb      	str	r3, [r7, #24]
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	2b7f      	cmp	r3, #127	; 0x7f
 800a90a:	d8f0      	bhi.n	800a8ee <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	1c5a      	adds	r2, r3, #1
 800a910:	61fa      	str	r2, [r7, #28]
 800a912:	69ba      	ldr	r2, [r7, #24]
 800a914:	b2d2      	uxtb	r2, r2
 800a916:	701a      	strb	r2, [r3, #0]
 800a918:	69fb      	ldr	r3, [r7, #28]
 800a91a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800a91c:	2208      	movs	r2, #8
 800a91e:	68f9      	ldr	r1, [r7, #12]
 800a920:	6938      	ldr	r0, [r7, #16]
 800a922:	f7ff f9ef 	bl	8009d04 <_SendPacket>
  RECORD_END();
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	f383 8811 	msr	BASEPRI, r3
}
 800a92c:	bf00      	nop
 800a92e:	3720      	adds	r7, #32
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	2002c5d8 	.word	0x2002c5d8
 800a938:	2002c5a8 	.word	0x2002c5a8

0800a93c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b088      	sub	sp, #32
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a944:	f3ef 8311 	mrs	r3, BASEPRI
 800a948:	f04f 0120 	mov.w	r1, #32
 800a94c:	f381 8811 	msr	BASEPRI, r1
 800a950:	617b      	str	r3, [r7, #20]
 800a952:	4819      	ldr	r0, [pc, #100]	; (800a9b8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800a954:	f7ff f8e8 	bl	8009b28 <_PreparePacket>
 800a958:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a95e:	4b17      	ldr	r3, [pc, #92]	; (800a9bc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800a960:	691b      	ldr	r3, [r3, #16]
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	1ad3      	subs	r3, r2, r3
 800a966:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	61fb      	str	r3, [r7, #28]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	61bb      	str	r3, [r7, #24]
 800a970:	e00b      	b.n	800a98a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	b2da      	uxtb	r2, r3
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	1c59      	adds	r1, r3, #1
 800a97a:	61f9      	str	r1, [r7, #28]
 800a97c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a980:	b2d2      	uxtb	r2, r2
 800a982:	701a      	strb	r2, [r3, #0]
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	09db      	lsrs	r3, r3, #7
 800a988:	61bb      	str	r3, [r7, #24]
 800a98a:	69bb      	ldr	r3, [r7, #24]
 800a98c:	2b7f      	cmp	r3, #127	; 0x7f
 800a98e:	d8f0      	bhi.n	800a972 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800a990:	69fb      	ldr	r3, [r7, #28]
 800a992:	1c5a      	adds	r2, r3, #1
 800a994:	61fa      	str	r2, [r7, #28]
 800a996:	69ba      	ldr	r2, [r7, #24]
 800a998:	b2d2      	uxtb	r2, r2
 800a99a:	701a      	strb	r2, [r3, #0]
 800a99c:	69fb      	ldr	r3, [r7, #28]
 800a99e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800a9a0:	2204      	movs	r2, #4
 800a9a2:	68f9      	ldr	r1, [r7, #12]
 800a9a4:	6938      	ldr	r0, [r7, #16]
 800a9a6:	f7ff f9ad 	bl	8009d04 <_SendPacket>
  RECORD_END();
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	f383 8811 	msr	BASEPRI, r3
}
 800a9b0:	bf00      	nop
 800a9b2:	3720      	adds	r7, #32
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	2002c5d8 	.word	0x2002c5d8
 800a9bc:	2002c5a8 	.word	0x2002c5a8

0800a9c0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b088      	sub	sp, #32
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a9c8:	f3ef 8311 	mrs	r3, BASEPRI
 800a9cc:	f04f 0120 	mov.w	r1, #32
 800a9d0:	f381 8811 	msr	BASEPRI, r1
 800a9d4:	617b      	str	r3, [r7, #20]
 800a9d6:	4819      	ldr	r0, [pc, #100]	; (800aa3c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800a9d8:	f7ff f8a6 	bl	8009b28 <_PreparePacket>
 800a9dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a9e2:	4b17      	ldr	r3, [pc, #92]	; (800aa40 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800a9e4:	691b      	ldr	r3, [r3, #16]
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	1ad3      	subs	r3, r2, r3
 800a9ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	61fb      	str	r3, [r7, #28]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	61bb      	str	r3, [r7, #24]
 800a9f4:	e00b      	b.n	800aa0e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	b2da      	uxtb	r2, r3
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	1c59      	adds	r1, r3, #1
 800a9fe:	61f9      	str	r1, [r7, #28]
 800aa00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800aa04:	b2d2      	uxtb	r2, r2
 800aa06:	701a      	strb	r2, [r3, #0]
 800aa08:	69bb      	ldr	r3, [r7, #24]
 800aa0a:	09db      	lsrs	r3, r3, #7
 800aa0c:	61bb      	str	r3, [r7, #24]
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	2b7f      	cmp	r3, #127	; 0x7f
 800aa12:	d8f0      	bhi.n	800a9f6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	1c5a      	adds	r2, r3, #1
 800aa18:	61fa      	str	r2, [r7, #28]
 800aa1a:	69ba      	ldr	r2, [r7, #24]
 800aa1c:	b2d2      	uxtb	r2, r2
 800aa1e:	701a      	strb	r2, [r3, #0]
 800aa20:	69fb      	ldr	r3, [r7, #28]
 800aa22:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800aa24:	2206      	movs	r2, #6
 800aa26:	68f9      	ldr	r1, [r7, #12]
 800aa28:	6938      	ldr	r0, [r7, #16]
 800aa2a:	f7ff f96b 	bl	8009d04 <_SendPacket>
  RECORD_END();
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	f383 8811 	msr	BASEPRI, r3
}
 800aa34:	bf00      	nop
 800aa36:	3720      	adds	r7, #32
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	2002c5d8 	.word	0x2002c5d8
 800aa40:	2002c5a8 	.word	0x2002c5a8

0800aa44 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800aa4c:	4b04      	ldr	r3, [pc, #16]	; (800aa60 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800aa4e:	691b      	ldr	r3, [r3, #16]
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	1ad3      	subs	r3, r2, r3
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	370c      	adds	r7, #12
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr
 800aa60:	2002c5a8 	.word	0x2002c5a8

0800aa64 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b08c      	sub	sp, #48	; 0x30
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800aa6e:	4b3b      	ldr	r3, [pc, #236]	; (800ab5c <SEGGER_SYSVIEW_SendModule+0xf8>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d06d      	beq.n	800ab52 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800aa76:	4b39      	ldr	r3, [pc, #228]	; (800ab5c <SEGGER_SYSVIEW_SendModule+0xf8>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa80:	e008      	b.n	800aa94 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800aa82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa84:	691b      	ldr	r3, [r3, #16]
 800aa86:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800aa88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d007      	beq.n	800aa9e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800aa8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa90:	3301      	adds	r3, #1
 800aa92:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa94:	79fb      	ldrb	r3, [r7, #7]
 800aa96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d3f2      	bcc.n	800aa82 <SEGGER_SYSVIEW_SendModule+0x1e>
 800aa9c:	e000      	b.n	800aaa0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800aa9e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800aaa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d055      	beq.n	800ab52 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800aaa6:	f3ef 8311 	mrs	r3, BASEPRI
 800aaaa:	f04f 0120 	mov.w	r1, #32
 800aaae:	f381 8811 	msr	BASEPRI, r1
 800aab2:	617b      	str	r3, [r7, #20]
 800aab4:	482a      	ldr	r0, [pc, #168]	; (800ab60 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800aab6:	f7ff f837 	bl	8009b28 <_PreparePacket>
 800aaba:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	627b      	str	r3, [r7, #36]	; 0x24
 800aac4:	79fb      	ldrb	r3, [r7, #7]
 800aac6:	623b      	str	r3, [r7, #32]
 800aac8:	e00b      	b.n	800aae2 <SEGGER_SYSVIEW_SendModule+0x7e>
 800aaca:	6a3b      	ldr	r3, [r7, #32]
 800aacc:	b2da      	uxtb	r2, r3
 800aace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad0:	1c59      	adds	r1, r3, #1
 800aad2:	6279      	str	r1, [r7, #36]	; 0x24
 800aad4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800aad8:	b2d2      	uxtb	r2, r2
 800aada:	701a      	strb	r2, [r3, #0]
 800aadc:	6a3b      	ldr	r3, [r7, #32]
 800aade:	09db      	lsrs	r3, r3, #7
 800aae0:	623b      	str	r3, [r7, #32]
 800aae2:	6a3b      	ldr	r3, [r7, #32]
 800aae4:	2b7f      	cmp	r3, #127	; 0x7f
 800aae6:	d8f0      	bhi.n	800aaca <SEGGER_SYSVIEW_SendModule+0x66>
 800aae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaea:	1c5a      	adds	r2, r3, #1
 800aaec:	627a      	str	r2, [r7, #36]	; 0x24
 800aaee:	6a3a      	ldr	r2, [r7, #32]
 800aaf0:	b2d2      	uxtb	r2, r2
 800aaf2:	701a      	strb	r2, [r3, #0]
 800aaf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	61fb      	str	r3, [r7, #28]
 800aafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	61bb      	str	r3, [r7, #24]
 800ab02:	e00b      	b.n	800ab1c <SEGGER_SYSVIEW_SendModule+0xb8>
 800ab04:	69bb      	ldr	r3, [r7, #24]
 800ab06:	b2da      	uxtb	r2, r3
 800ab08:	69fb      	ldr	r3, [r7, #28]
 800ab0a:	1c59      	adds	r1, r3, #1
 800ab0c:	61f9      	str	r1, [r7, #28]
 800ab0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ab12:	b2d2      	uxtb	r2, r2
 800ab14:	701a      	strb	r2, [r3, #0]
 800ab16:	69bb      	ldr	r3, [r7, #24]
 800ab18:	09db      	lsrs	r3, r3, #7
 800ab1a:	61bb      	str	r3, [r7, #24]
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	2b7f      	cmp	r3, #127	; 0x7f
 800ab20:	d8f0      	bhi.n	800ab04 <SEGGER_SYSVIEW_SendModule+0xa0>
 800ab22:	69fb      	ldr	r3, [r7, #28]
 800ab24:	1c5a      	adds	r2, r3, #1
 800ab26:	61fa      	str	r2, [r7, #28]
 800ab28:	69ba      	ldr	r2, [r7, #24]
 800ab2a:	b2d2      	uxtb	r2, r2
 800ab2c:	701a      	strb	r2, [r3, #0]
 800ab2e:	69fb      	ldr	r3, [r7, #28]
 800ab30:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ab32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2280      	movs	r2, #128	; 0x80
 800ab38:	4619      	mov	r1, r3
 800ab3a:	68f8      	ldr	r0, [r7, #12]
 800ab3c:	f7fe ffa4 	bl	8009a88 <_EncodeStr>
 800ab40:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800ab42:	2216      	movs	r2, #22
 800ab44:	68f9      	ldr	r1, [r7, #12]
 800ab46:	6938      	ldr	r0, [r7, #16]
 800ab48:	f7ff f8dc 	bl	8009d04 <_SendPacket>
      RECORD_END();
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800ab52:	bf00      	nop
 800ab54:	3730      	adds	r7, #48	; 0x30
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop
 800ab5c:	2002c5d0 	.word	0x2002c5d0
 800ab60:	2002c5d8 	.word	0x2002c5d8

0800ab64 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800ab6a:	4b0c      	ldr	r3, [pc, #48]	; (800ab9c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00f      	beq.n	800ab92 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800ab72:	4b0a      	ldr	r3, [pc, #40]	; (800ab9c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d002      	beq.n	800ab86 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d1f2      	bne.n	800ab78 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800ab92:	bf00      	nop
 800ab94:	3708      	adds	r7, #8
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	2002c5d0 	.word	0x2002c5d0

0800aba0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b086      	sub	sp, #24
 800aba4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800aba6:	f3ef 8311 	mrs	r3, BASEPRI
 800abaa:	f04f 0120 	mov.w	r1, #32
 800abae:	f381 8811 	msr	BASEPRI, r1
 800abb2:	60fb      	str	r3, [r7, #12]
 800abb4:	4817      	ldr	r0, [pc, #92]	; (800ac14 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800abb6:	f7fe ffb7 	bl	8009b28 <_PreparePacket>
 800abba:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	617b      	str	r3, [r7, #20]
 800abc4:	4b14      	ldr	r3, [pc, #80]	; (800ac18 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	613b      	str	r3, [r7, #16]
 800abca:	e00b      	b.n	800abe4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	b2da      	uxtb	r2, r3
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	1c59      	adds	r1, r3, #1
 800abd4:	6179      	str	r1, [r7, #20]
 800abd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800abda:	b2d2      	uxtb	r2, r2
 800abdc:	701a      	strb	r2, [r3, #0]
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	09db      	lsrs	r3, r3, #7
 800abe2:	613b      	str	r3, [r7, #16]
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	2b7f      	cmp	r3, #127	; 0x7f
 800abe8:	d8f0      	bhi.n	800abcc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	1c5a      	adds	r2, r3, #1
 800abee:	617a      	str	r2, [r7, #20]
 800abf0:	693a      	ldr	r2, [r7, #16]
 800abf2:	b2d2      	uxtb	r2, r2
 800abf4:	701a      	strb	r2, [r3, #0]
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800abfa:	221b      	movs	r2, #27
 800abfc:	6879      	ldr	r1, [r7, #4]
 800abfe:	68b8      	ldr	r0, [r7, #8]
 800ac00:	f7ff f880 	bl	8009d04 <_SendPacket>
  RECORD_END();
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f383 8811 	msr	BASEPRI, r3
}
 800ac0a:	bf00      	nop
 800ac0c:	3718      	adds	r7, #24
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	2002c5d8 	.word	0x2002c5d8
 800ac18:	2002c5d4 	.word	0x2002c5d4

0800ac1c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b08a      	sub	sp, #40	; 0x28
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ac24:	f3ef 8311 	mrs	r3, BASEPRI
 800ac28:	f04f 0120 	mov.w	r1, #32
 800ac2c:	f381 8811 	msr	BASEPRI, r1
 800ac30:	617b      	str	r3, [r7, #20]
 800ac32:	4827      	ldr	r0, [pc, #156]	; (800acd0 <SEGGER_SYSVIEW_Warn+0xb4>)
 800ac34:	f7fe ff78 	bl	8009b28 <_PreparePacket>
 800ac38:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ac3a:	2280      	movs	r2, #128	; 0x80
 800ac3c:	6879      	ldr	r1, [r7, #4]
 800ac3e:	6938      	ldr	r0, [r7, #16]
 800ac40:	f7fe ff22 	bl	8009a88 <_EncodeStr>
 800ac44:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	627b      	str	r3, [r7, #36]	; 0x24
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	623b      	str	r3, [r7, #32]
 800ac4e:	e00b      	b.n	800ac68 <SEGGER_SYSVIEW_Warn+0x4c>
 800ac50:	6a3b      	ldr	r3, [r7, #32]
 800ac52:	b2da      	uxtb	r2, r3
 800ac54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac56:	1c59      	adds	r1, r3, #1
 800ac58:	6279      	str	r1, [r7, #36]	; 0x24
 800ac5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ac5e:	b2d2      	uxtb	r2, r2
 800ac60:	701a      	strb	r2, [r3, #0]
 800ac62:	6a3b      	ldr	r3, [r7, #32]
 800ac64:	09db      	lsrs	r3, r3, #7
 800ac66:	623b      	str	r3, [r7, #32]
 800ac68:	6a3b      	ldr	r3, [r7, #32]
 800ac6a:	2b7f      	cmp	r3, #127	; 0x7f
 800ac6c:	d8f0      	bhi.n	800ac50 <SEGGER_SYSVIEW_Warn+0x34>
 800ac6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac70:	1c5a      	adds	r2, r3, #1
 800ac72:	627a      	str	r2, [r7, #36]	; 0x24
 800ac74:	6a3a      	ldr	r2, [r7, #32]
 800ac76:	b2d2      	uxtb	r2, r2
 800ac78:	701a      	strb	r2, [r3, #0]
 800ac7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	61fb      	str	r3, [r7, #28]
 800ac82:	2300      	movs	r3, #0
 800ac84:	61bb      	str	r3, [r7, #24]
 800ac86:	e00b      	b.n	800aca0 <SEGGER_SYSVIEW_Warn+0x84>
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	b2da      	uxtb	r2, r3
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	1c59      	adds	r1, r3, #1
 800ac90:	61f9      	str	r1, [r7, #28]
 800ac92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ac96:	b2d2      	uxtb	r2, r2
 800ac98:	701a      	strb	r2, [r3, #0]
 800ac9a:	69bb      	ldr	r3, [r7, #24]
 800ac9c:	09db      	lsrs	r3, r3, #7
 800ac9e:	61bb      	str	r3, [r7, #24]
 800aca0:	69bb      	ldr	r3, [r7, #24]
 800aca2:	2b7f      	cmp	r3, #127	; 0x7f
 800aca4:	d8f0      	bhi.n	800ac88 <SEGGER_SYSVIEW_Warn+0x6c>
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	1c5a      	adds	r2, r3, #1
 800acaa:	61fa      	str	r2, [r7, #28]
 800acac:	69ba      	ldr	r2, [r7, #24]
 800acae:	b2d2      	uxtb	r2, r2
 800acb0:	701a      	strb	r2, [r3, #0]
 800acb2:	69fb      	ldr	r3, [r7, #28]
 800acb4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800acb6:	221a      	movs	r2, #26
 800acb8:	68f9      	ldr	r1, [r7, #12]
 800acba:	6938      	ldr	r0, [r7, #16]
 800acbc:	f7ff f822 	bl	8009d04 <_SendPacket>
  RECORD_END();
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	f383 8811 	msr	BASEPRI, r3
}
 800acc6:	bf00      	nop
 800acc8:	3728      	adds	r7, #40	; 0x28
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	2002c5d8 	.word	0x2002c5d8

0800acd4 <__NVIC_EnableIRQ>:
{
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
 800acda:	4603      	mov	r3, r0
 800acdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800acde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	db0b      	blt.n	800acfe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ace6:	79fb      	ldrb	r3, [r7, #7]
 800ace8:	f003 021f 	and.w	r2, r3, #31
 800acec:	4907      	ldr	r1, [pc, #28]	; (800ad0c <__NVIC_EnableIRQ+0x38>)
 800acee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acf2:	095b      	lsrs	r3, r3, #5
 800acf4:	2001      	movs	r0, #1
 800acf6:	fa00 f202 	lsl.w	r2, r0, r2
 800acfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800acfe:	bf00      	nop
 800ad00:	370c      	adds	r7, #12
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr
 800ad0a:	bf00      	nop
 800ad0c:	e000e100 	.word	0xe000e100

0800ad10 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b085      	sub	sp, #20
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800ad18:	4b08      	ldr	r3, [pc, #32]	; (800ad3c <LL_APB1_GRP1_EnableClock+0x2c>)
 800ad1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad1c:	4907      	ldr	r1, [pc, #28]	; (800ad3c <LL_APB1_GRP1_EnableClock+0x2c>)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4313      	orrs	r3, r2
 800ad22:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800ad24:	4b05      	ldr	r3, [pc, #20]	; (800ad3c <LL_APB1_GRP1_EnableClock+0x2c>)
 800ad26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4013      	ands	r3, r2
 800ad2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
}
 800ad30:	bf00      	nop
 800ad32:	3714      	adds	r7, #20
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr
 800ad3c:	40023800 	.word	0x40023800

0800ad40 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b083      	sub	sp, #12
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f043 0201 	orr.w	r2, r3, #1
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	601a      	str	r2, [r3, #0]
}
 800ad54:	bf00      	nop
 800ad56:	370c      	adds	r7, #12
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b083      	sub	sp, #12
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	683a      	ldr	r2, [r7, #0]
 800ad6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ad70:	bf00      	nop
 800ad72:	370c      	adds	r7, #12
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f06f 0201 	mvn.w	r2, #1
 800ad8a:	611a      	str	r2, [r3, #16]
}
 800ad8c:	bf00      	nop
 800ad8e:	370c      	adds	r7, #12
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr

0800ad98 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b083      	sub	sp, #12
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	691b      	ldr	r3, [r3, #16]
 800ada4:	f003 0301 	and.w	r3, r3, #1
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d101      	bne.n	800adb0 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800adac:	2301      	movs	r3, #1
 800adae:	e000      	b.n	800adb2 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800adb0:	2300      	movs	r3, #0
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	370c      	adds	r7, #12
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr

0800adbe <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800adbe:	b480      	push	{r7}
 800adc0:	b083      	sub	sp, #12
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	68db      	ldr	r3, [r3, #12]
 800adca:	f043 0201 	orr.w	r2, r3, #1
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	60da      	str	r2, [r3, #12]
}
 800add2:	bf00      	nop
 800add4:	370c      	adds	r7, #12
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr
	...

0800ade0 <_cbSendSystemDesc>:
 *       _cbSendSystemDesc()
 *
 *  Function description
 *    Sends SystemView description strings.
 */
static void _cbSendSystemDesc(void) {
 800ade0:	b580      	push	{r7, lr}
 800ade2:	af00      	add	r7, sp, #0
	SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800ade4:	4802      	ldr	r0, [pc, #8]	; (800adf0 <_cbSendSystemDesc+0x10>)
 800ade6:	f7ff fcf5 	bl	800a7d4 <SEGGER_SYSVIEW_SendSysDesc>
//	SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
//	SEGGER_SYSVIEW_SendSysDesc("I#23=EXTI[0]");
}
 800adea:	bf00      	nop
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	0800b4ac 	.word	0x0800b4ac

0800adf4 <TIM7_IRQHandler>:

/// [SYSVIEW_TIMESTAMP]
void TIM7_IRQHandler(void)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	af00      	add	r7, sp, #0
	// Interrupt flag set?
	if(LL_TIM_IsActiveFlag_UPDATE(TIM7))
 800adf8:	4807      	ldr	r0, [pc, #28]	; (800ae18 <TIM7_IRQHandler+0x24>)
 800adfa:	f7ff ffcd 	bl	800ad98 <LL_TIM_IsActiveFlag_UPDATE>
 800adfe:	4603      	mov	r3, r0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d007      	beq.n	800ae14 <TIM7_IRQHandler+0x20>
	{
		// Clear flag
		LL_TIM_ClearFlag_UPDATE(TIM7);
 800ae04:	4804      	ldr	r0, [pc, #16]	; (800ae18 <TIM7_IRQHandler+0x24>)
 800ae06:	f7ff ffb9 	bl	800ad7c <LL_TIM_ClearFlag_UPDATE>
		// Increment counter
		SEGGER_SYSVIEW_TickCnt++;
 800ae0a:	4b04      	ldr	r3, [pc, #16]	; (800ae1c <TIM7_IRQHandler+0x28>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	4a02      	ldr	r2, [pc, #8]	; (800ae1c <TIM7_IRQHandler+0x28>)
 800ae12:	6013      	str	r3, [r2, #0]
	}
}
 800ae14:	bf00      	nop
 800ae16:	bd80      	pop	{r7, pc}
 800ae18:	40001400 	.word	0x40001400
 800ae1c:	2002c19c 	.word	0x2002c19c

0800ae20 <SEGGER_SYSVIEW_TimeStampInit>:
static void SEGGER_SYSVIEW_TimeStampInit(void)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	af00      	add	r7, sp, #0
//#warning "DO NOT TAKE POINTS OFF, SEGGER PROVIDED WARNING: TIM7 peripheral is used for Segger SysView timestamping"
	// Enable TIM7 peripheral clock
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 800ae24:	2020      	movs	r0, #32
 800ae26:	f7ff ff73 	bl	800ad10 <LL_APB1_GRP1_EnableClock>
	// Set prescaler to match timestamp frequency
	LL_TIM_SetPrescaler(TIM7, __LL_TIM_CALC_PSC(SYSVIEW_CPU_FREQ, SYSVIEW_TIMESTAMP_FREQ));
 800ae2a:	4b0d      	ldr	r3, [pc, #52]	; (800ae60 <SEGGER_SYSVIEW_TimeStampInit+0x40>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	085a      	lsrs	r2, r3, #1
 800ae30:	4b0b      	ldr	r3, [pc, #44]	; (800ae60 <SEGGER_SYSVIEW_TimeStampInit+0x40>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	441a      	add	r2, r3
 800ae36:	4b0a      	ldr	r3, [pc, #40]	; (800ae60 <SEGGER_SYSVIEW_TimeStampInit+0x40>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae3e:	3b01      	subs	r3, #1
 800ae40:	4619      	mov	r1, r3
 800ae42:	4808      	ldr	r0, [pc, #32]	; (800ae64 <SEGGER_SYSVIEW_TimeStampInit+0x44>)
 800ae44:	f7ff ff8c 	bl	800ad60 <LL_TIM_SetPrescaler>
	// Enable timer interrupt
	NVIC_EnableIRQ(TIM7_IRQn);
 800ae48:	2037      	movs	r0, #55	; 0x37
 800ae4a:	f7ff ff43 	bl	800acd4 <__NVIC_EnableIRQ>
	LL_TIM_EnableIT_UPDATE(TIM7);
 800ae4e:	4805      	ldr	r0, [pc, #20]	; (800ae64 <SEGGER_SYSVIEW_TimeStampInit+0x44>)
 800ae50:	f7ff ffb5 	bl	800adbe <LL_TIM_EnableIT_UPDATE>
	// Enable counter
	LL_TIM_EnableCounter(TIM7);
 800ae54:	4803      	ldr	r0, [pc, #12]	; (800ae64 <SEGGER_SYSVIEW_TimeStampInit+0x44>)
 800ae56:	f7ff ff73 	bl	800ad40 <LL_TIM_EnableCounter>
}
 800ae5a:	bf00      	nop
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	bf00      	nop
 800ae60:	20000010 	.word	0x20000010
 800ae64:	40001400 	.word	0x40001400

0800ae68 <SEGGER_SYSVIEW_Conf>:
 *
 *       Global functions
 *
 **********************************************************************
 */
void SEGGER_SYSVIEW_Conf(void) {
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	af00      	add	r7, sp, #0
	SEGGER_SYSVIEW_TimeStampInit();
 800ae6c:	f7ff ffd8 	bl	800ae20 <SEGGER_SYSVIEW_TimeStampInit>
	SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ,
 800ae70:	4b06      	ldr	r3, [pc, #24]	; (800ae8c <SEGGER_SYSVIEW_Conf+0x24>)
 800ae72:	6818      	ldr	r0, [r3, #0]
 800ae74:	4b05      	ldr	r3, [pc, #20]	; (800ae8c <SEGGER_SYSVIEW_Conf+0x24>)
 800ae76:	6819      	ldr	r1, [r3, #0]
 800ae78:	4b05      	ldr	r3, [pc, #20]	; (800ae90 <SEGGER_SYSVIEW_Conf+0x28>)
 800ae7a:	4a06      	ldr	r2, [pc, #24]	; (800ae94 <SEGGER_SYSVIEW_Conf+0x2c>)
 800ae7c:	f7ff f828 	bl	8009ed0 <SEGGER_SYSVIEW_Init>
			&SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
	SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800ae80:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800ae84:	f7ff f868 	bl	8009f58 <SEGGER_SYSVIEW_SetRAMBase>
}
 800ae88:	bf00      	nop
 800ae8a:	bd80      	pop	{r7, pc}
 800ae8c:	20000010 	.word	0x20000010
 800ae90:	0800ade1 	.word	0x0800ade1
 800ae94:	0800c81c 	.word	0x0800c81c

0800ae98 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800ae98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae9a:	b085      	sub	sp, #20
 800ae9c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800ae9e:	2300      	movs	r3, #0
 800aea0:	607b      	str	r3, [r7, #4]
 800aea2:	e048      	b.n	800af36 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 800aea4:	4929      	ldr	r1, [pc, #164]	; (800af4c <_cbSendTaskList+0xb4>)
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	4613      	mov	r3, r2
 800aeaa:	009b      	lsls	r3, r3, #2
 800aeac:	4413      	add	r3, r2
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	440b      	add	r3, r1
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7fd f91d 	bl	80080f4 <uxTaskGetStackHighWaterMark>
 800aeba:	4601      	mov	r1, r0
 800aebc:	4823      	ldr	r0, [pc, #140]	; (800af4c <_cbSendTaskList+0xb4>)
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	4613      	mov	r3, r2
 800aec2:	009b      	lsls	r3, r3, #2
 800aec4:	4413      	add	r3, r2
 800aec6:	009b      	lsls	r3, r3, #2
 800aec8:	4403      	add	r3, r0
 800aeca:	3310      	adds	r3, #16
 800aecc:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800aece:	491f      	ldr	r1, [pc, #124]	; (800af4c <_cbSendTaskList+0xb4>)
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	4613      	mov	r3, r2
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	4413      	add	r3, r2
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	440b      	add	r3, r1
 800aedc:	6818      	ldr	r0, [r3, #0]
 800aede:	491b      	ldr	r1, [pc, #108]	; (800af4c <_cbSendTaskList+0xb4>)
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	4613      	mov	r3, r2
 800aee4:	009b      	lsls	r3, r3, #2
 800aee6:	4413      	add	r3, r2
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	440b      	add	r3, r1
 800aeec:	3304      	adds	r3, #4
 800aeee:	6819      	ldr	r1, [r3, #0]
 800aef0:	4c16      	ldr	r4, [pc, #88]	; (800af4c <_cbSendTaskList+0xb4>)
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	4613      	mov	r3, r2
 800aef6:	009b      	lsls	r3, r3, #2
 800aef8:	4413      	add	r3, r2
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	4423      	add	r3, r4
 800aefe:	3308      	adds	r3, #8
 800af00:	681c      	ldr	r4, [r3, #0]
 800af02:	4d12      	ldr	r5, [pc, #72]	; (800af4c <_cbSendTaskList+0xb4>)
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	4613      	mov	r3, r2
 800af08:	009b      	lsls	r3, r3, #2
 800af0a:	4413      	add	r3, r2
 800af0c:	009b      	lsls	r3, r3, #2
 800af0e:	442b      	add	r3, r5
 800af10:	330c      	adds	r3, #12
 800af12:	681d      	ldr	r5, [r3, #0]
 800af14:	4e0d      	ldr	r6, [pc, #52]	; (800af4c <_cbSendTaskList+0xb4>)
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	4613      	mov	r3, r2
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	4413      	add	r3, r2
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	4433      	add	r3, r6
 800af22:	3310      	adds	r3, #16
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	9300      	str	r3, [sp, #0]
 800af28:	462b      	mov	r3, r5
 800af2a:	4622      	mov	r2, r4
 800af2c:	f000 f8be 	bl	800b0ac <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	3301      	adds	r3, #1
 800af34:	607b      	str	r3, [r7, #4]
 800af36:	4b06      	ldr	r3, [pc, #24]	; (800af50 <_cbSendTaskList+0xb8>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d3b1      	bcc.n	800aea4 <_cbSendTaskList+0xc>
  }
}
 800af40:	bf00      	nop
 800af42:	bf00      	nop
 800af44:	370c      	adds	r7, #12
 800af46:	46bd      	mov	sp, r7
 800af48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af4a:	bf00      	nop
 800af4c:	2002c6bc 	.word	0x2002c6bc
 800af50:	2002c75c 	.word	0x2002c75c

0800af54 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800af54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af58:	b082      	sub	sp, #8
 800af5a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800af5c:	f7fc fd00 	bl	8007960 <xTaskGetTickCountFromISR>
 800af60:	4603      	mov	r3, r0
 800af62:	2200      	movs	r2, #0
 800af64:	469a      	mov	sl, r3
 800af66:	4693      	mov	fp, r2
 800af68:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800af6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af70:	4602      	mov	r2, r0
 800af72:	460b      	mov	r3, r1
 800af74:	f04f 0a00 	mov.w	sl, #0
 800af78:	f04f 0b00 	mov.w	fp, #0
 800af7c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800af80:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800af84:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800af88:	4652      	mov	r2, sl
 800af8a:	465b      	mov	r3, fp
 800af8c:	1a14      	subs	r4, r2, r0
 800af8e:	eb63 0501 	sbc.w	r5, r3, r1
 800af92:	f04f 0200 	mov.w	r2, #0
 800af96:	f04f 0300 	mov.w	r3, #0
 800af9a:	00ab      	lsls	r3, r5, #2
 800af9c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800afa0:	00a2      	lsls	r2, r4, #2
 800afa2:	4614      	mov	r4, r2
 800afa4:	461d      	mov	r5, r3
 800afa6:	eb14 0800 	adds.w	r8, r4, r0
 800afaa:	eb45 0901 	adc.w	r9, r5, r1
 800afae:	f04f 0200 	mov.w	r2, #0
 800afb2:	f04f 0300 	mov.w	r3, #0
 800afb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800afba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800afbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800afc2:	4690      	mov	r8, r2
 800afc4:	4699      	mov	r9, r3
 800afc6:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800afca:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800afce:	4610      	mov	r0, r2
 800afd0:	4619      	mov	r1, r3
 800afd2:	3708      	adds	r7, #8
 800afd4:	46bd      	mov	sp, r7
 800afd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800afdc <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800afdc:	b580      	push	{r7, lr}
 800afde:	b086      	sub	sp, #24
 800afe0:	af02      	add	r7, sp, #8
 800afe2:	60f8      	str	r0, [r7, #12]
 800afe4:	60b9      	str	r1, [r7, #8]
 800afe6:	607a      	str	r2, [r7, #4]
 800afe8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800afea:	2205      	movs	r2, #5
 800afec:	492b      	ldr	r1, [pc, #172]	; (800b09c <SYSVIEW_AddTask+0xc0>)
 800afee:	68b8      	ldr	r0, [r7, #8]
 800aff0:	f000 f87d 	bl	800b0ee <memcmp>
 800aff4:	4603      	mov	r3, r0
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d04b      	beq.n	800b092 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800affa:	4b29      	ldr	r3, [pc, #164]	; (800b0a0 <SYSVIEW_AddTask+0xc4>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	2b07      	cmp	r3, #7
 800b000:	d903      	bls.n	800b00a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800b002:	4828      	ldr	r0, [pc, #160]	; (800b0a4 <SYSVIEW_AddTask+0xc8>)
 800b004:	f7ff fe0a 	bl	800ac1c <SEGGER_SYSVIEW_Warn>
    return;
 800b008:	e044      	b.n	800b094 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800b00a:	4b25      	ldr	r3, [pc, #148]	; (800b0a0 <SYSVIEW_AddTask+0xc4>)
 800b00c:	681a      	ldr	r2, [r3, #0]
 800b00e:	4926      	ldr	r1, [pc, #152]	; (800b0a8 <SYSVIEW_AddTask+0xcc>)
 800b010:	4613      	mov	r3, r2
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	4413      	add	r3, r2
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	440b      	add	r3, r1
 800b01a:	68fa      	ldr	r2, [r7, #12]
 800b01c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800b01e:	4b20      	ldr	r3, [pc, #128]	; (800b0a0 <SYSVIEW_AddTask+0xc4>)
 800b020:	681a      	ldr	r2, [r3, #0]
 800b022:	4921      	ldr	r1, [pc, #132]	; (800b0a8 <SYSVIEW_AddTask+0xcc>)
 800b024:	4613      	mov	r3, r2
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	4413      	add	r3, r2
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	440b      	add	r3, r1
 800b02e:	3304      	adds	r3, #4
 800b030:	68ba      	ldr	r2, [r7, #8]
 800b032:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800b034:	4b1a      	ldr	r3, [pc, #104]	; (800b0a0 <SYSVIEW_AddTask+0xc4>)
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	491b      	ldr	r1, [pc, #108]	; (800b0a8 <SYSVIEW_AddTask+0xcc>)
 800b03a:	4613      	mov	r3, r2
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	4413      	add	r3, r2
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	440b      	add	r3, r1
 800b044:	3308      	adds	r3, #8
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800b04a:	4b15      	ldr	r3, [pc, #84]	; (800b0a0 <SYSVIEW_AddTask+0xc4>)
 800b04c:	681a      	ldr	r2, [r3, #0]
 800b04e:	4916      	ldr	r1, [pc, #88]	; (800b0a8 <SYSVIEW_AddTask+0xcc>)
 800b050:	4613      	mov	r3, r2
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	4413      	add	r3, r2
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	440b      	add	r3, r1
 800b05a:	330c      	adds	r3, #12
 800b05c:	683a      	ldr	r2, [r7, #0]
 800b05e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800b060:	4b0f      	ldr	r3, [pc, #60]	; (800b0a0 <SYSVIEW_AddTask+0xc4>)
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	4910      	ldr	r1, [pc, #64]	; (800b0a8 <SYSVIEW_AddTask+0xcc>)
 800b066:	4613      	mov	r3, r2
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	4413      	add	r3, r2
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	440b      	add	r3, r1
 800b070:	3310      	adds	r3, #16
 800b072:	69ba      	ldr	r2, [r7, #24]
 800b074:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800b076:	4b0a      	ldr	r3, [pc, #40]	; (800b0a0 <SYSVIEW_AddTask+0xc4>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	3301      	adds	r3, #1
 800b07c:	4a08      	ldr	r2, [pc, #32]	; (800b0a0 <SYSVIEW_AddTask+0xc4>)
 800b07e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800b080:	69bb      	ldr	r3, [r7, #24]
 800b082:	9300      	str	r3, [sp, #0]
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	68b9      	ldr	r1, [r7, #8]
 800b08a:	68f8      	ldr	r0, [r7, #12]
 800b08c:	f000 f80e 	bl	800b0ac <SYSVIEW_SendTaskInfo>
 800b090:	e000      	b.n	800b094 <SYSVIEW_AddTask+0xb8>
    return;
 800b092:	bf00      	nop

}
 800b094:	3710      	adds	r7, #16
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	0800b4e0 	.word	0x0800b4e0
 800b0a0:	2002c75c 	.word	0x2002c75c
 800b0a4:	0800b4e8 	.word	0x0800b4e8
 800b0a8:	2002c6bc 	.word	0x2002c6bc

0800b0ac <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b08a      	sub	sp, #40	; 0x28
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	60f8      	str	r0, [r7, #12]
 800b0b4:	60b9      	str	r1, [r7, #8]
 800b0b6:	607a      	str	r2, [r7, #4]
 800b0b8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800b0ba:	f107 0314 	add.w	r3, r7, #20
 800b0be:	2214      	movs	r2, #20
 800b0c0:	2100      	movs	r1, #0
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f000 f823 	bl	800b10e <memset>
  TaskInfo.TaskID     = TaskID;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800b0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0da:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800b0dc:	f107 0314 	add.w	r3, r7, #20
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7ff fa7f 	bl	800a5e4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800b0e6:	bf00      	nop
 800b0e8:	3728      	adds	r7, #40	; 0x28
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}

0800b0ee <memcmp>:
 800b0ee:	b510      	push	{r4, lr}
 800b0f0:	3901      	subs	r1, #1
 800b0f2:	4402      	add	r2, r0
 800b0f4:	4290      	cmp	r0, r2
 800b0f6:	d101      	bne.n	800b0fc <memcmp+0xe>
 800b0f8:	2000      	movs	r0, #0
 800b0fa:	e005      	b.n	800b108 <memcmp+0x1a>
 800b0fc:	7803      	ldrb	r3, [r0, #0]
 800b0fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b102:	42a3      	cmp	r3, r4
 800b104:	d001      	beq.n	800b10a <memcmp+0x1c>
 800b106:	1b18      	subs	r0, r3, r4
 800b108:	bd10      	pop	{r4, pc}
 800b10a:	3001      	adds	r0, #1
 800b10c:	e7f2      	b.n	800b0f4 <memcmp+0x6>

0800b10e <memset>:
 800b10e:	4402      	add	r2, r0
 800b110:	4603      	mov	r3, r0
 800b112:	4293      	cmp	r3, r2
 800b114:	d100      	bne.n	800b118 <memset+0xa>
 800b116:	4770      	bx	lr
 800b118:	f803 1b01 	strb.w	r1, [r3], #1
 800b11c:	e7f9      	b.n	800b112 <memset+0x4>
	...

0800b120 <_reclaim_reent>:
 800b120:	4b29      	ldr	r3, [pc, #164]	; (800b1c8 <_reclaim_reent+0xa8>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	4283      	cmp	r3, r0
 800b126:	b570      	push	{r4, r5, r6, lr}
 800b128:	4604      	mov	r4, r0
 800b12a:	d04b      	beq.n	800b1c4 <_reclaim_reent+0xa4>
 800b12c:	69c3      	ldr	r3, [r0, #28]
 800b12e:	b143      	cbz	r3, 800b142 <_reclaim_reent+0x22>
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d144      	bne.n	800b1c0 <_reclaim_reent+0xa0>
 800b136:	69e3      	ldr	r3, [r4, #28]
 800b138:	6819      	ldr	r1, [r3, #0]
 800b13a:	b111      	cbz	r1, 800b142 <_reclaim_reent+0x22>
 800b13c:	4620      	mov	r0, r4
 800b13e:	f000 f879 	bl	800b234 <_free_r>
 800b142:	6961      	ldr	r1, [r4, #20]
 800b144:	b111      	cbz	r1, 800b14c <_reclaim_reent+0x2c>
 800b146:	4620      	mov	r0, r4
 800b148:	f000 f874 	bl	800b234 <_free_r>
 800b14c:	69e1      	ldr	r1, [r4, #28]
 800b14e:	b111      	cbz	r1, 800b156 <_reclaim_reent+0x36>
 800b150:	4620      	mov	r0, r4
 800b152:	f000 f86f 	bl	800b234 <_free_r>
 800b156:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b158:	b111      	cbz	r1, 800b160 <_reclaim_reent+0x40>
 800b15a:	4620      	mov	r0, r4
 800b15c:	f000 f86a 	bl	800b234 <_free_r>
 800b160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b162:	b111      	cbz	r1, 800b16a <_reclaim_reent+0x4a>
 800b164:	4620      	mov	r0, r4
 800b166:	f000 f865 	bl	800b234 <_free_r>
 800b16a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b16c:	b111      	cbz	r1, 800b174 <_reclaim_reent+0x54>
 800b16e:	4620      	mov	r0, r4
 800b170:	f000 f860 	bl	800b234 <_free_r>
 800b174:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b176:	b111      	cbz	r1, 800b17e <_reclaim_reent+0x5e>
 800b178:	4620      	mov	r0, r4
 800b17a:	f000 f85b 	bl	800b234 <_free_r>
 800b17e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b180:	b111      	cbz	r1, 800b188 <_reclaim_reent+0x68>
 800b182:	4620      	mov	r0, r4
 800b184:	f000 f856 	bl	800b234 <_free_r>
 800b188:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b18a:	b111      	cbz	r1, 800b192 <_reclaim_reent+0x72>
 800b18c:	4620      	mov	r0, r4
 800b18e:	f000 f851 	bl	800b234 <_free_r>
 800b192:	6a23      	ldr	r3, [r4, #32]
 800b194:	b1b3      	cbz	r3, 800b1c4 <_reclaim_reent+0xa4>
 800b196:	4620      	mov	r0, r4
 800b198:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b19c:	4718      	bx	r3
 800b19e:	5949      	ldr	r1, [r1, r5]
 800b1a0:	b941      	cbnz	r1, 800b1b4 <_reclaim_reent+0x94>
 800b1a2:	3504      	adds	r5, #4
 800b1a4:	69e3      	ldr	r3, [r4, #28]
 800b1a6:	2d80      	cmp	r5, #128	; 0x80
 800b1a8:	68d9      	ldr	r1, [r3, #12]
 800b1aa:	d1f8      	bne.n	800b19e <_reclaim_reent+0x7e>
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	f000 f841 	bl	800b234 <_free_r>
 800b1b2:	e7c0      	b.n	800b136 <_reclaim_reent+0x16>
 800b1b4:	680e      	ldr	r6, [r1, #0]
 800b1b6:	4620      	mov	r0, r4
 800b1b8:	f000 f83c 	bl	800b234 <_free_r>
 800b1bc:	4631      	mov	r1, r6
 800b1be:	e7ef      	b.n	800b1a0 <_reclaim_reent+0x80>
 800b1c0:	2500      	movs	r5, #0
 800b1c2:	e7ef      	b.n	800b1a4 <_reclaim_reent+0x84>
 800b1c4:	bd70      	pop	{r4, r5, r6, pc}
 800b1c6:	bf00      	nop
 800b1c8:	2000006c 	.word	0x2000006c

0800b1cc <__libc_init_array>:
 800b1cc:	b570      	push	{r4, r5, r6, lr}
 800b1ce:	4d0d      	ldr	r5, [pc, #52]	; (800b204 <__libc_init_array+0x38>)
 800b1d0:	4c0d      	ldr	r4, [pc, #52]	; (800b208 <__libc_init_array+0x3c>)
 800b1d2:	1b64      	subs	r4, r4, r5
 800b1d4:	10a4      	asrs	r4, r4, #2
 800b1d6:	2600      	movs	r6, #0
 800b1d8:	42a6      	cmp	r6, r4
 800b1da:	d109      	bne.n	800b1f0 <__libc_init_array+0x24>
 800b1dc:	4d0b      	ldr	r5, [pc, #44]	; (800b20c <__libc_init_array+0x40>)
 800b1de:	4c0c      	ldr	r4, [pc, #48]	; (800b210 <__libc_init_array+0x44>)
 800b1e0:	f000 f880 	bl	800b2e4 <_init>
 800b1e4:	1b64      	subs	r4, r4, r5
 800b1e6:	10a4      	asrs	r4, r4, #2
 800b1e8:	2600      	movs	r6, #0
 800b1ea:	42a6      	cmp	r6, r4
 800b1ec:	d105      	bne.n	800b1fa <__libc_init_array+0x2e>
 800b1ee:	bd70      	pop	{r4, r5, r6, pc}
 800b1f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1f4:	4798      	blx	r3
 800b1f6:	3601      	adds	r6, #1
 800b1f8:	e7ee      	b.n	800b1d8 <__libc_init_array+0xc>
 800b1fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1fe:	4798      	blx	r3
 800b200:	3601      	adds	r6, #1
 800b202:	e7f2      	b.n	800b1ea <__libc_init_array+0x1e>
 800b204:	0800c82c 	.word	0x0800c82c
 800b208:	0800c82c 	.word	0x0800c82c
 800b20c:	0800c82c 	.word	0x0800c82c
 800b210:	0800c830 	.word	0x0800c830

0800b214 <__retarget_lock_acquire_recursive>:
 800b214:	4770      	bx	lr

0800b216 <__retarget_lock_release_recursive>:
 800b216:	4770      	bx	lr

0800b218 <memcpy>:
 800b218:	440a      	add	r2, r1
 800b21a:	4291      	cmp	r1, r2
 800b21c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b220:	d100      	bne.n	800b224 <memcpy+0xc>
 800b222:	4770      	bx	lr
 800b224:	b510      	push	{r4, lr}
 800b226:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b22a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b22e:	4291      	cmp	r1, r2
 800b230:	d1f9      	bne.n	800b226 <memcpy+0xe>
 800b232:	bd10      	pop	{r4, pc}

0800b234 <_free_r>:
 800b234:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b236:	2900      	cmp	r1, #0
 800b238:	d044      	beq.n	800b2c4 <_free_r+0x90>
 800b23a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b23e:	9001      	str	r0, [sp, #4]
 800b240:	2b00      	cmp	r3, #0
 800b242:	f1a1 0404 	sub.w	r4, r1, #4
 800b246:	bfb8      	it	lt
 800b248:	18e4      	addlt	r4, r4, r3
 800b24a:	f000 f83f 	bl	800b2cc <__malloc_lock>
 800b24e:	4a1e      	ldr	r2, [pc, #120]	; (800b2c8 <_free_r+0x94>)
 800b250:	9801      	ldr	r0, [sp, #4]
 800b252:	6813      	ldr	r3, [r2, #0]
 800b254:	b933      	cbnz	r3, 800b264 <_free_r+0x30>
 800b256:	6063      	str	r3, [r4, #4]
 800b258:	6014      	str	r4, [r2, #0]
 800b25a:	b003      	add	sp, #12
 800b25c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b260:	f000 b83a 	b.w	800b2d8 <__malloc_unlock>
 800b264:	42a3      	cmp	r3, r4
 800b266:	d908      	bls.n	800b27a <_free_r+0x46>
 800b268:	6825      	ldr	r5, [r4, #0]
 800b26a:	1961      	adds	r1, r4, r5
 800b26c:	428b      	cmp	r3, r1
 800b26e:	bf01      	itttt	eq
 800b270:	6819      	ldreq	r1, [r3, #0]
 800b272:	685b      	ldreq	r3, [r3, #4]
 800b274:	1949      	addeq	r1, r1, r5
 800b276:	6021      	streq	r1, [r4, #0]
 800b278:	e7ed      	b.n	800b256 <_free_r+0x22>
 800b27a:	461a      	mov	r2, r3
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	b10b      	cbz	r3, 800b284 <_free_r+0x50>
 800b280:	42a3      	cmp	r3, r4
 800b282:	d9fa      	bls.n	800b27a <_free_r+0x46>
 800b284:	6811      	ldr	r1, [r2, #0]
 800b286:	1855      	adds	r5, r2, r1
 800b288:	42a5      	cmp	r5, r4
 800b28a:	d10b      	bne.n	800b2a4 <_free_r+0x70>
 800b28c:	6824      	ldr	r4, [r4, #0]
 800b28e:	4421      	add	r1, r4
 800b290:	1854      	adds	r4, r2, r1
 800b292:	42a3      	cmp	r3, r4
 800b294:	6011      	str	r1, [r2, #0]
 800b296:	d1e0      	bne.n	800b25a <_free_r+0x26>
 800b298:	681c      	ldr	r4, [r3, #0]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	6053      	str	r3, [r2, #4]
 800b29e:	440c      	add	r4, r1
 800b2a0:	6014      	str	r4, [r2, #0]
 800b2a2:	e7da      	b.n	800b25a <_free_r+0x26>
 800b2a4:	d902      	bls.n	800b2ac <_free_r+0x78>
 800b2a6:	230c      	movs	r3, #12
 800b2a8:	6003      	str	r3, [r0, #0]
 800b2aa:	e7d6      	b.n	800b25a <_free_r+0x26>
 800b2ac:	6825      	ldr	r5, [r4, #0]
 800b2ae:	1961      	adds	r1, r4, r5
 800b2b0:	428b      	cmp	r3, r1
 800b2b2:	bf04      	itt	eq
 800b2b4:	6819      	ldreq	r1, [r3, #0]
 800b2b6:	685b      	ldreq	r3, [r3, #4]
 800b2b8:	6063      	str	r3, [r4, #4]
 800b2ba:	bf04      	itt	eq
 800b2bc:	1949      	addeq	r1, r1, r5
 800b2be:	6021      	streq	r1, [r4, #0]
 800b2c0:	6054      	str	r4, [r2, #4]
 800b2c2:	e7ca      	b.n	800b25a <_free_r+0x26>
 800b2c4:	b003      	add	sp, #12
 800b2c6:	bd30      	pop	{r4, r5, pc}
 800b2c8:	2002c89c 	.word	0x2002c89c

0800b2cc <__malloc_lock>:
 800b2cc:	4801      	ldr	r0, [pc, #4]	; (800b2d4 <__malloc_lock+0x8>)
 800b2ce:	f7ff bfa1 	b.w	800b214 <__retarget_lock_acquire_recursive>
 800b2d2:	bf00      	nop
 800b2d4:	2002c898 	.word	0x2002c898

0800b2d8 <__malloc_unlock>:
 800b2d8:	4801      	ldr	r0, [pc, #4]	; (800b2e0 <__malloc_unlock+0x8>)
 800b2da:	f7ff bf9c 	b.w	800b216 <__retarget_lock_release_recursive>
 800b2de:	bf00      	nop
 800b2e0:	2002c898 	.word	0x2002c898

0800b2e4 <_init>:
 800b2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2e6:	bf00      	nop
 800b2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2ea:	bc08      	pop	{r3}
 800b2ec:	469e      	mov	lr, r3
 800b2ee:	4770      	bx	lr

0800b2f0 <_fini>:
 800b2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2f2:	bf00      	nop
 800b2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2f6:	bc08      	pop	{r3}
 800b2f8:	469e      	mov	lr, r3
 800b2fa:	4770      	bx	lr
